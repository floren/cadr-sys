Date: Wednesday, 28 April 1982  18:09-EDT
From: MOON at SCRC-TENEX
To:   Mark Plotnick <mp at MIT-ML>
Cc:   BUG-LISPM at EE
Subject: Locked files on ITS

    Date: Wednesday, 28 April 1982, 15:40-EDT
    From: Mark Plotnick <mp at MIT-ML>
    To: BUG-LISPM at EE

    In System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
    microcode 865, site configuration 2, on Marvin:

    Doing a dired on an ITS directory with a locked file makes that file
    show up as Deleted.  RPK says this bug is probably a problem with
    the FILE server rather than the Lisp Machine.
This isn't a bug.  That's the only kind of deleted file ITS has.

Date: 28 April 1982 17:06-EDT
From: Carl W. Hoffman <CWH at MIT-MC>
Subject:  cute way of getting window size from mouse
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI, CSTACY at MIT-AI

    Date: Wednesday, 28 April 1982  12:50-EDT
    From: MOON at SCRC-TENEX

    That's the way the Lisp machine used to do it, too.  I don't remember why
    it was changed, but I presume because the current way looked bette, at
    least at the time.

If I remember correctly, the old window system did something a bit
different.  Rather than just drawing the box outline, it did a bitblt,
making window creation and reshaping rather slow.  Moving windows worked the
same way.

I would also like to see TV:MOUSE-SPECIFY-RECTANGLE stretch a box outline
rather than placing corners.  Also, after the upper left corner has been
placed, when the lower right corner moves above or to the left of the upper
right corner, there should be some visual indication that this means the
entire screen.


Date: Wednesday, 28 April 1982, 15:40-EDT
From: Mark Plotnick <mp at MIT-ML>
To: BUG-LISPM at EE

In System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 2, on Marvin:

Doing a dired on an ITS directory with a locked file makes that file
show up as Deleted.  RPK says this bug is probably a problem with
the FILE server rather than the Lisp Machine.

Date: Wednesday, 28 April 1982  14:29-EDT
From: MMCM at SCRC-TENEX
To:   Edward Barton <EB at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: 28 April 1982 11:32-EDT
    From: Edward Barton <EB at MIT-AI>
    I am not sure this is a bug, but it certainly is surprising.  I made a
    list of a bunch of pathnames and wanted to edit each one in turn, going
    on to the next one by typing ^Z in the editor.  I mapc'ed ED over the
    pathname list hoping to get that result.  But the result of doing the
    MAPC was that the files were read into the editor one after the other,
    without my having a chance to do any editing.
That's right.  The ED function calls up the editor giving it something
to edit.  Since the editor runs in its own process, the function
returns right away, at which time it is given another file to edit.
If you want to give explicit commands to move to the next file, you are
much better off doing everything in the editor itself.

Date: 28 April 1982 13:33-EDT
From: William A. Kornfeld <BAK at MIT-AI>
Subject: New Login Feature
To: JMTURN at MIT-AI
cc: BUG-LISPM at MIT-AI

    System 84 (and patched versions of 83) have a new command LOG1,
    which is like LOGIN but with keywords. The format is:
    (LOG1 user-name ':HOST host-name ':INIT boolean ':keyword1 ':arg1 ...)

There is no need for a LOG1.  LOGIN can accept both the old and this
new syntax, since there are no hosts with names :HOST or T.

Date: Tuesday, 27 April 1982, 21:47-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: TV:DONT-SELECT-WITH-MOUSE-MIXIN
To: bug-lispm at SCRC-TENEX

Actually, I don't think this has much to do with the lack of an activity
system.  Some method has to be provided to specify which windows are
useful to point at in some sort of "selection" paradigm.  I just think
the default is backwards here: Panes should not by default be
selectable.

Date: Tuesday, 27 April 1982, 16:50-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Undefined function error recovery
To: Edward Barton <EB at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 27 Apr 82 10:10-EDT from Edward Barton <EB at MIT-AI>

    Date: 27 April 1982 09:10-EST
    From: Edward Barton <EB at MIT-AI>
    To: BUG-LISPM at MIT-AI
    Let FOO be an undefined function.  Do (funcall 'foo 105).  Say C-C to the
    error handler and type #'print.  You will get another FOO-undefined error.
    Say C-C again and type #'print.  You will get a DTP-TRAP error.

    In similar circumstances that I have hit several times but cannot reproduce
    exactly, the machine halts when you do C-C on an undefined function error.

It seems to pick up random garbage each time maybe stuff just lying around on
the stack?  Do it enough times and you're likely to blow away your machine.

Date: Wednesday, 28 April 1982, 01:10-EDT
From: Christopher C. Stacy <CStacy at MIT-AI>
Subject: cute way of getting window size from mouse
To: Bug-Lispm at MIT-AI

I watched someone on a Nu machine today create a window, and thought
that the way thir system did it was sort of flashy.  Instead of the
putting up a pair of corners, it drew a tiny box a few pixels wide,
and you pulled the box open by moving the mouse in whichever axis you
wanted the box to grow.

kmp@MIT-MC 04/28/82 00:19:45 Re: File reads taking 5 times longer than they ought
To: (BUG LISPM) at MIT-AI
CC: CWH at MIT-MC, DANIEL at MIT-AI, ZVONA at MIT-AI
In System 79.45, ..., Remote-File 2.0, LMFILE-Remote 5.3, microcode 849,
..., on Lisp Machine Twenty-two:

    Date: 25 April 1982 19:44-EST
    From: Carl W. Hoffman <CWH at MIT-MC>
    To: KMP at MIT-MC, CWH at MIT-MC
    
	Date: 21 April 1982 03:23-EST
	From: Kent M. Pitman <kmp>
    
	i just made it have FONTS:CPTFONT; in the file properties because my
	screen is defaultly MEDFNT and you overrun all my lines ...
    
    Sorry, I had to flush this change, also.  Go to a bare machine and do
    C-X C-F [to read it in].  It should take 10 to 15 seconds to read in, 
    depending upon your machine.  Then, edit in the Fonts: CPTFONT line 
    and do the same thing again.  Now it takes one minute to one and a 
    half minutes.
    
    This is my hunch as to what is going on.  With the "Fonts:" line at the
    top of the file, Zwei will have to examine every character looking for
    epsilon in addition to looking for newlines.  If it is just looking for
    newlines, it can use %STRING-SEARCH-CHAR, which is in microcode.  If it
    is looking for epsilons and newlines, then it has to use
    STRING-SEARCH-SET, which isn't.
    
    Presumably, Zwei is buggy in that it shouldn't be looking for epsilons
    if there is only one font listed in the Fonts entry...
    
I just tried this on a large file of my own. It took 60 seconds to read
the file in without a Fonts: spec, and 5 mins and 30 seconds to read it
in with a Fonts:MEDFNB; in the file property list. That's absurd. I can
see the overhead with multiple fonts, but since I could read in a bare file
and do m-X Set Fonts faster than this, then something is clearly wrong.

Everyone I mentioned this to just now on the floor after this rather graphic
experiment was pretty shocked. Daniel said "Oh, is that why my thesis now
takes 6 minutes to read in?". I had wondered the same thing about all the
source files for my system, all of which are forced into that font... but
I'd never have guessed it was the font spec that was causing their reads to
be slow. I presume that reading the sources to our system into buffers should 
take only 6 minutes instead of the 35 it currently takes.

Can someone please look into this?

-kmp

From: DULCEY@MIT-ML
Date: 04/22/82 23:10:03
To: (BUG ZMAIL) at MIT-AI
CC: DULCEY at MIT-ML
Redistributed-to: bug-lispm-mit at mit-ai
Redistributed-by: Mike McMahon <MMcM at SCRC-TENEX>
Redistributed-date: Tuesday, 27 April 1982, 20:16-EDT

In ZMAIL in Experimental LMFILE-Remote 12.1,
Experimental MIT-Specific 4.0, Experimental System 83.18,
Experimental ZMail 43.0, Experimental Remote-File 5.0, microcode 104,
Try me, on Lisp Machine One:

The File Options choice in Profile is losing.  I called it up, then
moused ML: USERS1; DULCEY RMAIL (one of the two files in the menu).  The
following error occurred:

>>>>TRAP 5003 (NO-MAPPING-TABLE)
Flavor RMAIL-MAIL-FILE is not a component of SELF's flavor, ZMAIL-PROFILE-EDITOR,
on a call to a function which assumes SELF is a RMAIL-MAIL-FILE.
While in the function (:METHOD RMAIL-MAIL-FILE :SETTABLE-OPTIONS)  COMPUTE-MAIL-FILE-CHOICES
 CHOOSE-MAIL-FILE-OPTIONS-1

(:METHOD RMAIL-MAIL-FILE :SETTABLE-OPTIONS):
   --Missing args:--
   Arg 0: (OPERATION)

The ZMAIL in question had performed the Get New Mail function (moused
from the menu) which caused my init file ("ML: USERS1; DULCEY ZMAIL")
to be loaded.  The state of the machine was otherwise new.


Date: Tuesday, 27 April 1982, 20:24-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Accessing the FC: device
To: DULCEY at MIT-ML
Cc: BUG-LISPM at MIT-EECS

    Date: Tuesday, 27 April 1982, 17:38-EDT
    From: Mark J. Dulcey <DULCEY at MIT-ML>

    The FC: device doesn't work on these machines, since there is no
    LMFILE-remote system on them.  This much I can accept.  The problem
    is that one doesn't get anything like a sensible error message if
    you try it -- you just get File Not Found errors.

What would you consider a sensible error message?  I assume that what's
really happening is that "FC:" is parsed as a device on another file
computer, such as "EE:FC:", or "AI:FC:".  As such it seems reasonable to
me.

Date: 27 April 1982 14:24-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
Subject: Pkg-goto's in loaded files
To: DLA at SCRC-TENEX
cc: BUG-LISPM at MIT-AI


    Date: Saturday, 24 April 1982, 08:36-EST
    From: David L. Andre <DLA at SCRC-TENEX>

    In System 209, the following construct will be available to declare
    packages in the same file which uses them:

    ;;; -*- Mode: Lisp; Package: (my-package global 2000 (myrefname global mine)) -*-

    In other words, the package spec may be a list, in which case it is
    interpreted as the package declaration for the package (MINUS THE
    OBLIGATORY NIL FOR THE FILE ALIST).

This time I am flaming about consistency (AGAIN). In general if
something is going to be almost exactly like something else,,, the two
somethings should not be made different unless there is a good reason
to do so.

Specifically the obligatory file alist is a pain,, but if it is in one
place it should be in the other too.

Will I ever stop flaming??
--Gregor--

Date: 27 April 1982 14:15-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
Subject: New Login Feature
To: JMTURN at MIT-AI
cc: BUG-LISPM at MIT-AI


    Date: 26 April 1982 19:52-EST
    From: James M. Turner <JMTURN at MIT-AI>

    (LOG1 user-name ':HOST host-name ':INIT boolean ':keyword1 ':arg1 ...)

This seems to me to be a loss for the obvious reason that it falls
into the trap of multiple ways to do the same thing. Some way should
be provided for login to pass options to the init file but having
several different evrsions of login is not the answer.
--Gregor--

Date: Tuesday, 27 April 1982, 17:38-EDT
From: Mark J. Dulcey <DULCEY at MIT-ML>
Subject: Accessing the FC: device
To: BUG-LISPM at EE
Cc: dulcey at ml

In System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 2, on Ford Prefect:

The FC: device doesn't work on these machines, since there is no
LMFILE-remote system on them.  This much I can accept.  The problem
is that one doesn't get anything like a sensible error message if
you try it -- you just get File Not Found errors.

Date: Tuesday, 27 April 1982, 14:51-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Will you ever stop flaming??
To: GREGOR at MIT-AI
Cc: BUG-LISPM at MIT-AI

Well, I actually do have good reasons (in my opinion) for flushing the
"Obligatory NIL for the file alist".  Specifically:

1.  The package system is going to be rewritten soon, and the obligatory
NIL will go away.  So therefore I AM being consistent with the new
package system.

2.  It doesn't make any difference if you want to put the NIL there.
The PACKAGE-DECLARE macro is stupid enough to do the right thing.

In light of (2), maybe we just shouldn't advertize the lack of NILs.

Date: Tuesday, 27 April 1982, 09:08-EDT
From: Bernard S Greenberg <BSG at SCRC-TENEX>
Subject: Window error handler
To: DEG at SCRC-TENEX, BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 26 Apr 82 21:30-EDT from David E. Goldfarb <DEG at SCRC-TENEX>

    Date: Monday, 26 April 1982, 21:30-EDT
    From: David E. Goldfarb <DEG at SCRC-TENEX>
    In Experimental System 208.29, Experimental ZMail 44.3,
    Experimental LMFS 25.10, Experimental Tape 9.0, Experimental Canon 13.0,
    microcode 878, site configuration 6, on Spaniel:

    Is there any good reason for the window error handler and all of its
    panes to be selectable via the system menu?
				    - David
This is one of the standard activity system screws.  The window error handler wants
to be an activity, and the system menu wants to select among them.  Currently,
every pane of an activity-like frame has to be kludged with DONT-SELECT-WITH-MOUSE-MIXIN
to explicitly prevent this behavior, and this doesnt get remembered to get done all the time.

Date: 27 April 1982 09:10-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

Let FOO be an undefined function.  Do (funcall 'foo 105).  Say C-C to the
error handler and type #'print.  You will get another FOO-undefined error.
Say C-C again and type #'print.  You will get a DTP-TRAP error.

In similar circumstances that I have hit several times but cannot reproduce
exactly, the machine halts when you do C-C on an undefined function error.

dulcey@MIT-ML 04/27/82 04:16:44 Re: Operating the Lisp Machine manual
To: INFO-LISPM at MIT-AI
CC: DULCEY at MIT-ML
A copy of the out-of-print Working Paper "Operating the Lisp Machine"
is available in a form suitable for :dover'ing.  This document is
somewhat out of date, but it's all we've got.

You can get one on ITS by
:DOVER FC:DULCEY;OPERAT XGP

(For some reason unknown to me, 
  (press:print-xgp-file "FC:DULCEY;OPERAT XGP" ':spool t)
loses completely on this file.)


Date: Tuesday, 27 April 1982, 01:33-EDT
From:  <RpK at MIT-LISPM-27>
Reply-to: RpK at MC
Subject: QSENDs
To: BUG-LISPM at EE

In System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 2, on Zaphod Beeblebrox:

Any messages (received through a SEND server) should not throw a free
Lisp Machine into Converse.  It should probably print the message in a
pop up window.

bob

Date: Monday, 26 April 1982, 21:30-EDT
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: Window error handler
To: BUG-LISPM at SCRC-TENEX
Cc: DEG at SCRC-TENEX

In Experimental System 208.29, Experimental ZMail 44.3,
Experimental LMFS 25.10, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 6, on Spaniel:

Is there any good reason for the window error handler and all of its
panes to be selectable via the system menu?
				- David

Date: 26 April 1982 19:52-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: New Login Feature
To: BUG-LISPM at MIT-AI

This may not be exactly what was requested regarding login inits
but...

System 84 (and patched versions of 83) have a new command LOG1,
which is like LOGIN but with keywords. The format is:
(LOG1 user-name ':HOST host-name ':INIT boolean ':keyword1 ':arg1 ...)

HOST and INIT are special keywords processed by LOG1. They preform the
same purpose as the second and third arguments to LOGIN. In addition to
this, other keywords in the call are ignored, but all keywords are bound
to the symbol SI:USER-INIT-OPTIONS (including the HOST and INIT keywords,
if present) during the reading of the users init file. If no keywords are
given, or if the user logs in using LOGIN, the symbol will be bound to
NIL.

Thus, I can now say (LOG1 "JMTURN" ':HOST "MC" ':AUTO-P T) where AUTO-P is
a keyword used by my init file. This command may eventually replace LOGIN,
if there is enough interest.

					James

Date: Monday, 26 April 1982, 17:30-EDT
From: David Chapman <Zvona at MIT-AI>
To: DLA at SCRC-TENEX
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 25 Apr 82 16:42-EDT from David L. Andre <DLA at SCRC-TENEX>

    Date: Sunday, 25 April 1982, 16:42-EDT
    From: David L. Andre <DLA at SCRC-TENEX>
    To: ZVONA at MIT-AI
    Cc: BUG-LISPM at MIT-AI

	Date: 25 April 1982 15:59-EST
	From: David Chapman <ZVONA at MIT-AI>
	Would anyone be opposed to be creation of an :after-login
	initialization list, along with a hook in login to call it?
    How would this be different from the existing login initialization list?
The idea was that it would run AFTER the init file was read, so
you could change its behavior with an init file form.  But it
looks like I can solve the problem another way, and since people
think LOGIN is to hairy as it is, I won't do this.

Date: Monday, 26 April 1982, 13:27-EDT
From: Bernard S Greenberg <BSG at SCRC-TENEX>
Subject: bind-arguments
To: GJC at MIT-MC, MOON at SCRC-TENEX
Cc: ALAN at MIT-MC, bug-lispm at SCRC-TENEX
In-reply-to: The message of 26 Apr 82 13:19-EDT from George J. Carrette <GJC at MIT-MC>

    Date: 26 April 1982 12:19-EST
    From: George J. Carrette <GJC at MIT-MC>
	Date: Monday, 26 April 1982  11:27-EDT
	From: MOON at SCRC-TENEX
	Re:   bind-arguments

	George, is there anything in your recent long, unreadable message
	that I should know about?

    "The purpose of functions is to COMPUTE; the purpose of macros is to 
     TRANSLATE."

    What about a function whos purpose is to compute a translation? As in:

       (DEFUN ($INTEGRATE MACSYMA-TO-LISP-TRANSLATOR) (FORM) ...)

    Also, what about a macro whos purpose is to add to data to be
    used in computing a translation? The kind of macro you dismissed as
    "probably incorrect anyway" in a prior note about the compilers use
    of explicitely reclaimed storage. e.g.

    (DEFMACRO +DEF-MFORMAT-VAR (TYPE VAR VAL INIT-CONDITION)
      (LET #+LISPM ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA)) #-LISPM ()
	   (PUSH (LIST VAR VAL)
		 (CDR (OR (ASSOC INIT-CONDITION (GET TYPE 'MFORMAT-STATE-VARS))
			  (CAR (PUSH (NCONS INIT-CONDITION)
				     (GET TYPE 'MFORMAT-STATE-VARS)))))))
      `',VAR)
This line of argument is very misleading.  Indeed, your macro computes, and your
function translates.  And your level of Lisp sophistication misleads.  Anyone
who is sophisticated enough to build functions and macros of the type you display here
has long since passed the point of macro vs. function confusion that the rule
above is trying to address.  What the manual and the famous statement above are
trying to do is guide people who are trying to choose between
   (defun plusthree (x) (+ 3 x))
   (defmacro plusthree (x) `(+ 3 ,x))
who really DON'T understand the conceptual difference.  Probably most things that
can be said about macros can also be said about the auxiliary macrotime functions
of hairy macrologies (I can't really imagine that there's a meaningful "and conversely",
though).

I don't think the issue of multilevel hairy syntax in macros is at all related to
the philosophy of macros as translation vs computation.

Date: 26 April 1982 12:19-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  bind-arguments
To: MOON at SCRC-TENEX
cc: ALAN at MIT-MC, bug-lispm at SCRC-TENEX

    Date: Monday, 26 April 1982  11:27-EDT
    From: MOON at SCRC-TENEX
    To:   George J. Carrette <GJC>
    cc:   ALAN, bug-lispm at SCRC-TENEX
    Re:   bind-arguments

    George, is there anything in your recent long, unreadable message
    that I should know about?

It boils down to this, both DLW and yourself have on occasion made the
argument that since what DEFUN and DEFMACRO do are very different
that it is wrong for them to have similar argument syntax. Words such
as "philosophy" are usually included in the argument, along with
references to multiple-values and unnecessary consing, and protecting
the user from unnecessary confusion. => I was saying that this was all silly,
and aimed at nonexistent audience. For example, how is one supposed to
take the following statement from the LispMachine manual chapter on macros:

"The purpose of functions is to COMPUTE; the purpose of macros is to 
 TRANSLATE."

What about a function whos purpose is to compute a translation? As in:

   (DEFUN ($INTEGRATE MACSYMA-TO-LISP-TRANSLATOR) (FORM) ...)

Also, what about a macro whos purpose is to add to data to be
used in computing a translation? The kind of macro you dismissed as
"probably incorrect anyway" in a prior note about the compilers use
of explicitely reclaimed storage. e.g.

(DEFMACRO +DEF-MFORMAT-VAR (TYPE VAR VAL INIT-CONDITION)
  (LET #+LISPM ((DEFAULT-CONS-AREA WORKING-STORAGE-AREA)) #-LISPM ()
       (PUSH (LIST VAR VAL)
	     (CDR (OR (ASSOC INIT-CONDITION (GET TYPE 'MFORMAT-STATE-VARS))
		      (CAR (PUSH (NCONS INIT-CONDITION)
				 (GET TYPE 'MFORMAT-STATE-VARS)))))))
  `',VAR)



Date: Monday, 26 April 1982  11:27-EDT
From: MOON at SCRC-TENEX
To:   George J. Carrette <GJC at MIT-MC>
Cc:   ALAN at MIT-MC, bug-lispm at SCRC-TENEX
Subject: bind-arguments

George, is there anything in your recent long, unreadable message
that I should know about?

Date: 26 April 1982 03:16-EST
From: Kent M. Pitman <kmp at MIT-MC>
Subject: Suggestion re processes that type on others' windows...
To: BUG-LISPM at MIT-MC

There are many applications for one process to type out on another's window.
It may happen that window will be a frame or will be a sub-pane of the frame 
which cannot be typed out on very well or should not be typed out on for some
aesthetic reason.

I haven't though this out fully, but I think it would work -- here's the idea:
I think it might be neat if TV:MINIMUM-WINDOW had a method called 
:TYPEOUT-WINDOW which just returned the window itself. The TV:PANE-MIXIN might
redefine this to send to ask the superior (probably a frame), which would
either return the pane if it didn't know better, or if it wanted to have
a special typeout pane for foreign processes, could do so.

Eg, if the programmer's apprentice currently has frames called KBE (Knowledge
Based Editor) frames. They allow the user to talk to an apprentice running
in another process in background. When the apprentice wants to send a reply
to a window that has requested it to do something, it has to know where it can
do typeout on that window. It could know specially about KBE frames and know
where they want their typeout, but I currently have the problem that I want to
submit some commands from Zwei windows and I have no way to ask an arbitrary
Zwei (sub)window (whatever TERMINAL-IO is bound to whent he request is submitted)
for a window suitable to do typeout on later. I do NOT want to have to know
about the structure of Zwei panes/frames. If I could send these ZWEI windows
a general-purpose message which got me back an editor typeout window, that would
be great. The same problem applies to lisp listeners. For some debugging,
I may just be trying commands from a lisp-listener and it's perfectly appropriate
for (FUNCALL my-lisp-listener-window ':TYPEOUT-WINDOW) to return :self.

By the way, this method may want to always accept an optional window arg,
so that the pane-mixin can be written as something like:

(defmethod (pane-mixin typeout-window) (&optional (window :self))
  (funcall-self ':typeout-window window))

and the frame will then get enough info that it can do

(defmethod (frame-mixin typeout-window) (&optional (window :self))
  (or instance-variable-holding-some-typeout-window-given-in-init-plist-etc
      window))

An alternative view on this might be to have a :SUBMIT-TYPEOUT-REQUEST command
which accepted a function to be funcalled on some window to do typeout. This
has the feature that a frame might be able to have the flexibility to keep the
typeout pane de-exposed and let the frame's handler for the request expose
the window, do the typeout, wait for the user to type something acknowledging,
and deexpose the frame.

I hope someone will give thought to these problems. I am not firmly fixed
on exactly what the solution should be, but I'm quite sure there is a really
important problem here that I could do with some help on...

-kmp

Date: 26 April 1982 02:45-EST
From: Kent M. Pitman <kmp at MIT-MC>
Subject: Notifications in the ZMACS typeout window
To: BUG-LISPM at MIT-MC

In system 79.45, ...

When doing c-X c-B, the notification might want to be pop-up since if you
get a notification while it is typing a mouse-sensitive item, the box the
mouse gives is around a random section of screen which may be close to but
not necessarily on the buffer info.

-kmp


Date: 25 April 1982 20:57-EST
From: the Lisp Machine <LMFILE at MIT-AI>
Subject: CADR-4
To: BUG-HARDWARE at MIT-AI, BUG-LISPM at MIT-AI

In HARDWARE in System 79.45, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 3.0, Experimental Local-File 35.2,
Experimental FILE-Server 2.1, microcode 849, LFS, on Lisp Machine Filecomputer:

CADR-4 appears to be very dead.  It won't boot.  The screen
displays an odd pattern of wavy lines.

I think this one needs a wizard.  FAST!!

Date: Sunday, 25 April 1982, 17:03-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Problem with %INSTANCE-REF
To: DEG at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX, DLA at SCRC-TENEX

    Date: Sunday, 25 April 1982, 14:51-EDT
    From: David E. Goldfarb <DEG at SCRC-TENEX>
    There seems to be a problem with %INSTANCE-REF or (:method
    :eval-inside-yourself).  Sending :eval-inside-yourself to a flavor which
    has some unbond instance variable causes an unbound variable trap in
    %INSTANCE-REF.
Fixed in the source.  Whoever gets the compiler working in 209 should
add it as a patch then.

Date: Sunday, 25 April 1982, 16:42-EDT
From: David L. Andre <DLA at SCRC-TENEX>
To: ZVONA at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 25 April 1982 15:59-EST
    From: David Chapman <ZVONA at MIT-AI>
    Would anyone be opposed to be creation of an :after-login
    initialization list, along with a hook in login to call it?
How would this be different from the existing login initialization list?

Date: 25 April 1982 15:59-EST
From: David Chapman <ZVONA at MIT-AI>
To: BUG-LISPM at MIT-AI

Would anyone be opposed to be creation of an :after-login
initialization list, along with a hook in login to call it?

Date: Sunday, 25 April 1982, 14:51-EDT
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: Problem with %INSTANCE-REF
To: BUG-LISPM at SCRC-TENEX
Cc: DEG at SCRC-TENEX

In Experimental System 208.29, Experimental ZMail 44.3,
Experimental LMFS 25.7, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 6, on Basset:

There seems to be a problem with %INSTANCE-REF or (:method
:eval-inside-yourself).  Sending :eval-inside-yourself to a flavor which
has some unbond instance variable causes an unbound variable trap in
%INSTANCE-REF.

				- David

Date: 25 April 1982 01:35-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  bind-arguments
To: Moon at SCRC-TENEX
cc: ALAN at MIT-MC, bug-lispm at SCRC-TENEX

Can I interject a little humor here? I like your statement,
"If arguments implies anything to me, it imples what DEFUN does, which
 is certainly not the same as what DEFMACRO does."
The humor is that given the way that an indefinite argument sequence
is passed on the lispmachine, as a CDR-coded LIST consed on a stack,
and given the way ALAN has talked about the BIND-ARGUMENTS construct,
well, we would have an identity-semantic-transformation of
(DEFUN F <P> <B>) <==> (DEFUN F (&REST <L>) (BIND-ARGUMENTS <P> <L> <B>))
along with
(DEFMACRO F (&REST <L>) (BIND-ARGUMENTS <P> <L> <B>)) <==> (DEFMACRO <P> <B>)


So much for humor. The way I read this situation is that you are
standing by an interpretation which is confused about what DEFMACRO
does in a way that makes you uncomfortable with the fortuitous
propensity of lisp to pass lists around to its various constructs that
ultimately take the form of, or define, procedural continuations.

We can understand that both DEFUN and DEFMACRO define procedures.
What these procedures do with their (might as well call it single)
argument may be similar; but no confusion amoung users should arise
from that, because the semantics come from how the procedures are
called and what is done with the return value. DEFMACRO defines
a procedure which is invoked by, and derives its semantics from,
the EVALUATOR and COMPILER. If a user understands that point I really
don't see how he can go wrong, if he doesn't understand it then in my
experience he will fall into one of hundreds more traps that LISP lays
for him.

It is true, that of late that there have been considerations, forces
if you will, that would severely deemphasize, castrate perhaps, the
general nature of the procedural object which is ultimately created
by a use of DEFMACRO, and relegate it to operate in a purely syntactic domain.
On one side we have the destructuring and backquote macrology which
are glorious in their syntactic utility for defining programs which
do program transformation. Indeed, there is nothing wrong with that;
however, at the same time we have considerations at work which would
by callousness to the ideals of correct and general implementation,
relegate "de facto" these procedures to a limited sublanguage by
not admiting many uses of CONS, PUTPROP, RPLACA, etc. I flame of course
about the lack of a garbage collector which is deemed good enough
for the everyday use of the IMPLEMENTOR, exersized by the one program
in the lispmachine system, the compiler, that does a great deal of what
users programs do, cons, recurse, and funcall with abandon.


-gjc

p.s. And you can quote me on that, "funcall with abandon."

Date: Saturday, 24 April 1982, 20:34-EST
From: Howard I. Cannon <HIC at SCRC-TENEX>
To: kmp at MIT-MC
Cc: bug-lispm at SCRC-TENEX, doc-changes at SCRC-TENEX

    Date: Friday, 23 April 1982  02:10-EST
    From: kmp at MIT-MC

    kmp@MIT-MC 04/23/82 02:10:40
    To: (BUG LISPM) at MIT-AI
    In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Experimental Knowledge-Based-Editor 15.23, microcode 849,
    Warning: Black Magic!, on Lisp Machine Twenty-two:

     .  .  .  .

    Still more bugs to do with return in strings causing infinite hassle...
    This is presumably a bug in the label mixins. For some kinds of boxes, it's
    ok if the label just truncates 'cuz it's low priority, but the purpose of
    the label in a menu is to tell you what you're selecting. Having it get
    trashed can be amazingly confusing. Maybe a different (smarter) kind of 
    label mixin is called for. Personally, I don't think there's anything even
    remotely unusual about wanting to have a multi-line label.

Well, I guess you convinced me, since I just implemented multi-line
labels.  However, I'm still not admitting that labels can have arbitrary
formatting characters in them, just newlines.

While I was at it, I added two new things to the LABEL-MIXIN defstruct,
and also a new mixin.  The list now looks like:

(LEFT TOP RIGHT BOTTOM FONT STRING VSP CENTERED)

VSP is the spacing between lines in a multi-line label.  This is
seperate from the window's VSP.  The label's line spacing doesn't want
to be affected by random changes in the window's font map.  VSP defaults
to two if it's left unspecified.

CENTERED means that each line of the label is centered in the available
area.  I've long wanted this feature, so while I was hacking the
relevant code...

TV:CENTERED-LABEL-MIXIN can be mixed in with any label flavor built on
TV:LABEL-MIXIN, and will cause the label to be always centered.  However,
the centering feature is always available by specifying the full list.

For example, typing:
(funcall terminal-io
	 ':Set-label '(nil nil nil nil fonts:medfnb
		       (format nil "Lisp~%Listener~%4")
		       nil t))

at your Lisp will make the Lisp window have a multi-lined centered label.

These new features will exist in 209, which will probably go out for
beta test sometime next week.

Date: Saturday, 24 April 1982, 15:26-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: bind-arguments
To: alan at MIT-MC
Cc: bug-lispm at SCRC-TENEX

Upon reflection, I don't like the name of this proposed special form.
It ought to let you know that it has something to do with destructuring.
I do think that having the function is a good idea.  In fact, it seems
to be such a good idea that we put it in years ago under the name
DESTRUCTURING-BIND.

The difference with the new BIND-ARGUMENTS special form is that it takes
a more extensible argument syntax, and already has one extension:
a user-specifiable form to be evaluated if the argument doesn't match
the pattern.

I don't think "destructuring-bind" is the best name in the world, but
I'd rather see an incompatible change to what that name means than see
the ambiguous name "bind-arguments" introduced.  BIND-PATTERN would be
an okay name, on the theory that its first "argument" is a pattern, and
"pattern" implies destructuring and furthermore implies list-directed
destructuring rather than form-directed (so called "RMS") destructuring.
If "arguments" implies anything to me, it implies what DEFUN does, which
is certainly not the same as what DEFMACRO does.

By the way, I am convinced that we need both styles of destructuring.

Date: Saturday, 24 April 1982  12:23-EST
From: MOON at SCRC-TENEX
To:   Marc Le Brun <MLB at MIT-MC>, BUG-LISPM at SCRC-TENEX, RpK at MIT-XX,
      RWK at SCRC-TENEX
Subject: #\a not the same as #/a

When we switch over to Common Lisp, only one of those syntaxes will exist,
hence no inconsistency will be possible.  Do we need to talk about it in
the meantime?

Date: Saturday, 24 April 1982, 08:36-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Pkg-goto's in loaded files
To: DCB at MIT-AI
Cc: BUG-LISPM at MIT-AI, BUG-GPRINT at MIT-AI

In System 209, the following construct will be available to declare
packages in the same file which uses them:

;;; -*- Mode: Lisp; Package: (my-package global 2000 (myrefname global mine)) -*-

In other words, the package spec may be a list, in which case it is
interpreted as the package declaration for the package (minus the
obligatory NIL for the file alist).  The package declaration is not run
if the package already exists.  If your mode line becomes too long, you
can write the following:

#| -*- Mode: Lisp;
       Package: (my-package global 2000 ...)
       Base: 7
       Lowercase: Probably
   -*- |#

You can't really expect fasload to work if fasloading the file changes
important important system variables out from under it.  I'm surprised
it worked as well as it did.

Date: Friday, 23 April 1982, 14:40-EST
From: Howie Shrobe <HES at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.12, Experimental ZMail 44.1,
Experimental LMFS 25.2, Experimental Tape 9.0, Experimental Canon 13.0,
Experimental DAEDALUS 41.1, Remote-File 102.0, microcode 878,
site configuration 5, on Spaniel:

If you create a window with the :edges-from :mouse option the edges specified by the
mouse are completely ignored.  The problem is that mouse-specify-rectangle-set-sheet
calls mouse-set-sheet-then-call with function arg of mouse-specify rectangle.
The guy who called mouse-specify-rectangle-set-sheet expected to get back values.
But mouse-set-sheet-then-call does not return meaningful values; apparently he thinks he's
supposed to work by effect.

Date: Friday, 23 April 1982, 15:55-EST
From: Howie Shrobe <HES at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.12, Experimental ZMail 44.1,
Experimental LMFS 25.2, Experimental Tape 9.0, Experimental Canon 13.0,
Experimental DAEDALUS 41.1, Remote-File 102.0, microcode 878,
site configuration 5, on Spaniel:

In zmacs if the hit break and the click the mouse on the part of the window which
is not covered by the typeout you get an error
>>trap: the variable RUBOUT-HANDLER-INSIDE is unbound 
and it then offers to pkg-dwim to tv:rubout-handler-inside.

If you say yes everything is ok but it does not take you back into normal editting mode
as I believe it once used to.

Date: Friday, 23 April 1982, 14:42-EST
From: Howie Shrobe <HES at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.12, Experimental ZMail 44.1,
Experimental LMFS 25.2, Experimental Tape 9.0, Experimental Canon 13.0,
Experimental DAEDALUS 41.1, Remote-File 102.0, microcode 878,
site configuration 5, on Spaniel:

in the editor if you do ctrl-x ctrl-b and then click right on a file and then
select the new not-modified option you get an error zwei:com-not-modified was
called with too many arguments.

Date: 23 April 1982 09:00-EST
From: Daniel Brotsky <DCB at MIT-AI>
Subject: Pkg-goto's in loaded files
To: BUG-LISPM at MIT-AI
cc: BUG-GPRINT at MIT-AI

In Experimental LMFILE-Remote 12.1, Experimental MIT-Specific 4.0,
Experimental System 83.18, Experimental ZMail 43.0,
Experimental Remote-File 5.0, microcode 104, Try me, on Lisp Machine Four:

The behaviors of FASLOAD and READFILE are a little unexpected if
the file being loaded contains a PKG-GOTO to a package other than
that into which the file is being loaded.  This is because the
line
     (SET-FILE-LOADED-ID PATHNAME FILE-ID PACKAGE)
in those two functions just uses the value that PACKAGE has when
the file is finished loading.

For example, loading a file FOO containing the following

    ; -*- mode:LISP; package:USER; -*-
    (package-declare my-package global 2000 ())
    (pkg-goto 'my-package)

makes LOAD believe that the file was loaded into 'MY-PACKAGE.
Thus, after doing

    (defsystem my-system (:fasload ("FOO"))

the form (make-system 'my-system) will always try to load FOO
(even if it has been loaded already).  However, after doing

    (defsystem my-system-1 (:package my-package)
			   (:fasload ("foo")))

the form (make-system 'my-system-1) works as expected (only
loading the file once).

	dan

P.S. This behavior may or may not be considered a bug, but it's
certainly whacky.

Date: Friday, 23 April 1982, 07:20-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: Bug-LispM at MIT-AI

I would like to make a window frame whose configuration changes because
panes may be dynamically added and deleted from it.  When a pane is
deleted or added, I want all the other instances of panes which were
there to remain untouched. 

How do I specify this sort of frame, and how do I tell it to instantiate
a new pane or delete an existing one?

kmp@MIT-MC 04/23/82 01:20:58
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

(tv:notify nil "A~%B~%C") wins.
(tv:notify nil "A~%B~%C~%D") types the text. Pauses. Then types **More**
  and I get a message saying type char to flush the message. I suppose
  this behavior is not awful, since it does not obscure the text while I
  am reading it.
(tv:notify nil "A~%B~%C~%D~%E") types the text WITHOUT a more break, so 
  the E wraps over the A before I've had a chance to read it. Not so bad 
  for the single character case because I read single characters very 
  fast, but when I use longer notifications (say whole words or sentences),
  I just can't quite keep up. Shortly afterward, the message about typing
  a char to flush types out, obscuring still more of the notification.

I have found myself recently forming messages and trying to get them in
the amount of space I know TV:NOTIFY will give me. I don't think this is
very reasonable. NOTIFY should do the work to give me a window which has
all the text visible or if it doesn't believe it can win at that, it should
give me a window that will scroll forward and backward with mouse commands.
Probably it should reserve part of the label area for the "type a char" message.
eg,

 +------------------------------------------------------------ ...
 | |                     Top
 | |   Your object #<ACTOR 347> died. These were its last words before
 |     cashing in: "That flavor you mixed into me had instances
 |     of tv:poison in it. Even the special wrapper you put around
 |                   More Below
 | Notification-Pane (Type any char to flush)
 +---------------------------------------------------------- ...



kmp@MIT-MC 04/23/82 02:47:03
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

(tv:menu-choose '(FOO BAR) "Bunk")
followed by a Terminal-F (or anything else that de-exposes the
choose window) returns NIL. I consider there to be a substantial difference
between waving the mouse off the menu and having the menu buried by other
means. I think the thing should return info saying why NIL is being returned.
In the former case, I would want to do some default action. In the latter
case, I would often would want to retry the menu-choose, possibly after
waiting for the processes window to become selected again.


kmp@MIT-MC 04/23/82 02:17:32
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

Why does (menu-choose '(foo bar) "Test:") get whitespace after the
word test in its label where the ":" should be? The same is true
for labels of "Test;" and "Test." but not for "Test!", "Test?" or
"Test". "Test::::" prints only 3 of the 4 colons and leaves 
whitespace where the 4th should be. If this is on purpose, it's 
gratuitous and should go away or be put on a switch. If it's not
on purpose, it should be fixed.


Date: Friday, 23 April 1982, 02:17-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine One:

I made chaosnet streams understand a FOREIGN-HOST message, which returns
a host object describing the host which the connection is open to.

Chris

kmp@MIT-MC 04/23/82 02:10:40
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

Still more bugs to do with return in strings causing infinite hassle...

(tv:menu-choose '(FOO BAR) "Select") wins with a box big enough to show
 all of the word select.

(tv:menu-choose '(FOO BAR) (format nil "Select~%One")) loses with a box
 only big enough to show the "Sel" of the first line. The "ect" of that
 line and the "One" of the next are lost.

(tv:menu-choose '(FOO BAR) (format nil "Select~%Something Else")) loses
 in a way that shows you're probably making a lot of inconsistent assumptions
 about the label. You figure the width on the assumption that returns will
 start fresh lines, then you use a printer that prints return so it doesn't.

(tv:menu-choose '(FOO BAR) (format nil "Select~%Something")) and
(tv:menu-choose '(FOO BAR) (format nil "Select~%Select")) lose in an
 awful way leaving half a return lozenge hanging off the edge of the
 menu which does not go away when the window pops down.

This is presumably a bug in the label mixins. For some kinds of boxes, it's
ok if the label just truncates 'cuz it's low priority, but the purpose of
the label in a menu is to tell you what you're selecting. Having it get
trashed can be amazingly confusing. Maybe a different (smarter) kind of 
label mixin is called for. Personally, I don't think there's anything even
remotely unusual about wanting to have a multi-line label.


kmp@MIT-MC 04/23/82 01:04:18
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

Go into a mini-buffer in Zwei and type Break. From the breakpoint,
type (tv:notify nil "A"). Note you get a pop-up notification over
the mini-buffer. Now type (tv:notify nil "A") again. Note that you
get a non-pop-up-notification in your break-loop-lisp-listener.
Subsequent notifications are not pop-up. I don't know which is
correct but it seems like it ought to be consistent.


kmp@MIT-MC 04/22/82 23:01:02 Re: Select System As Tag Table and related things...
To: (BUG LISPM) at MIT-AI
In System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.23, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

When I do Select System as Tags Table, is the order of the files
in the tags table guaranteed in any way? As nearly as I can tell,
it uses the order that they were loaded or compiled by MAKE-SYSTEM. 
The order that this happens can be really wierd with respect to the
order they appear in the DEFSYSTEM, and it tends to change every
time I rebuild my system. Usually, I would prefer it do the search
in a certain order.  I suggest that the order in which
the files/modules first appear as the cadr of some spec in the 
defsystem independent of the order in which the MAKE-SYSTEM decided
most recently to act on these things. I would even be willing to specify
info in the defsystem about the order I want the tag table to go in 
if necessary. But I do wish the order chosen this was made consistent.
Oh, I forgot to mention, the reason I want all this is that Tags Search
and Tags Query Replace are more fun when they happen to files in a logical
order...

Also, on a related topic, what are current plans for a crefing facility
similar to the pdp10-family's @ facility? Something that worked off of
DEFSYSTEM's information about sources, made the concept of an LREC
file an invisible one in a way similar to how patch directories are,
etc. ... would be really handy. 


Date: 22 April 1982 22:16-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject: versioning
To: MLB at MIT-MC
cc: ZVONA at MIT-MC, RWK at MIT-MC, BUG-LISPM at MIT-MC

While it may not be the duty of the file dir to hold the "other" kind of
version info, it is certainly the duty of the file utilities to supply
the user with the info he needs. In particular, I could care less whether
Dired gets the info on source files from the QFASL file or the dir, but
I certainly care a lot to know when I am deleting files whether they are
sources to released QFASL files, etc. I think Dired needs a lot of work in
this regard. It is currently too painful to edit directories in safely.
I need deletion filters similar to Zwei's summary filters. I need numerous
kinds of predicates on file types and dependencies that I don't have now.
I hope someone is thinking about these issues.


Date: 22 April 1982 18:13-EST
From: Marc Le Brun <MLB at MIT-MC>
Subject: Versioning
To: Zvona at MIT-AI
cc: MLB at MIT-MC, KMP at MIT-MC, RWK at SCRC-TENEX,
    bug-lispm at SCRC-TENEX

    Date: Tuesday, 20 April 1982, 08:30-EST
    From: David Chapman <Zvona at MIT-AI>
    In-reply-to: The message of 19 Apr 82 19:34-EST from Marc Le Brun <MLB at MIT-MC>

    This argues for structured versioning.  Tree structured versions
    are usually the right thing, although more general ones might be
    useful in some applications.

I guess.  But application versions have nothing to do with file system
versions, and it is a loss to confuse the two functions.

Date: 22 April 1982 17:51-EST
From: Marc Le Brun <MLB at MIT-MC>
Subject: Sharp sign macros to read characters
To: RWK at SCRC-TENEX
cc: BUG-LISPM at MIT-EECS, RpK at MIT-XX

    Date: Thursday, 22 April 1982, 08:43-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    In-reply-to: The message of 22 Apr 82 02:54-EST from RPK at MIT-LISPM-27


        Date: Thursday, 22 April 1982, 02:54-EST
        From:  <RPK at MIT-LISPM-27>
        Reply-to: RpK at XX at MIT-AI
          (format nil "Slash: ~C  Backslash: ~C" #/a #\a)
          => "Slash: a  Backlash: A"

        Why does #\ capitalise single characters ?

        bob
    Because it calls READ to get the token naming the character.  If you want the
    RETURN character you can write #\return, #\RETURN, #\Return, or #\rEtUrN.

    You can quote the "a" with a "/", i.e. #\/a, and it will do what you want.

I would think that this is unflavorful.  Just because the code is now too lazy
to do this fairly intuitive thing I see no reason it shouldn't.




Date: 22 April 1982 14:31-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  &mumbles at all levels.
To: ALAN at MIT-MC
cc: BUG-LISPM at MIT-MC, LISP-FORUM at MIT-MC, BUG-LISP at MIT-MC,
    DULCEY at MIT-ML

Go for it! Indeed, for the destructuring implementation for NIL I
implemented &mumbles at all levels, and it was easier, cleaner, and
produced considerably less code per DEFMACRO than using the other
methods.

For example, the following defmacro:

(defmacro g ((a b (c d)) &optional e)
  (foo a b c d e))

compiles into 42 pdp-10 instructions using the technology presently
provided in Maclisp, but only 7 pdp-10 instructions using the technology used
in NIL (inside the compilation environment in pdp-10 maclisp which *was* used
to compile the cross compiler).

-gjc



Date: Thursday, 22 April 1982, 08:50-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Patches (AGAIN ?????)
To: RpK at MIT-XX
Cc: BUG-LISPM at MIT-EECS
In-reply-to: The message of 22 Apr 82 02:38-EST from RPK at MIT-LISPM-27

    Date: Thursday, 22 April 1982, 02:38-EST
    From:  <RPK at MIT-LISPM-27>
    (load-patches) can't find SYS: SITE; VERSION LISP > (after probing regular
    patch directories).  Does this have something to do with the
    ``site configuration 0'' message in the system-version information
    above ?
Yes, it does.  I'm not sure whether to consider it a bug that it barfed
or a bug that the file wasn't there.  The file contains a single SETQ of
SI:SITE-VERSION, and is automagically maintained by
SI:RECOMPILE-SITE-FILES.  This will probably be redone in a future system
anyway.

Date: Thursday, 22 April 1982, 08:43-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Sharp sign macros to read characters
To: RpK at MIT-XX
Cc: BUG-LISPM at MIT-EECS
In-reply-to: The message of 22 Apr 82 02:54-EST from RPK at MIT-LISPM-27


    Date: Thursday, 22 April 1982, 02:54-EST
    From:  <RPK at MIT-LISPM-27>
    Reply-to: RpK at XX at MIT-AI
      (format nil "Slash: ~C  Backslash: ~C" #/a #\a)
      => "Slash: a  Backlash: A"

    Why does #\ capitalise single characters ?

    bob
Because it calls READ to get the token naming the character.  If you want the
RETURN character you can write #\return, #\RETURN, #\Return, or #\rEtUrN.

You can quote the "a" with a "/", i.e. #\/a, and it will do what you want.

Date: Thursday, 22 April 1982, 02:54-EST
From:  <RPK at MIT-LISPM-27>
Reply-to: RpK at XX
Subject: Sharp sign macros to read characters
To: BUG-LISPM at EE

In System 204.72, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 0, on Lisp Machine Fourteen:

  (format nil "Slash: ~C  Backslash: ~C" #/a #\a)
  => "Slash: a  Backlash: A"

Why does #\ capitalise single characters ?

bob

Date: Thursday, 22 April 1982, 02:38-EST
From:  <RPK at MIT-LISPM-27>
Reply-to: RpK at XX
Subject: Patches (AGAIN ?????)
To: BUG-LISPM at EE

In System 204.72, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 0, on Lisp Machine Fourteen:

(load-patches) can't find SYS: SITE; VERSION LISP > (after probing regular
patch directories).  Does this have something to do with the
``site configuration 0'' message in the system-version information
above ?

bob

Date: Thursday, 22 April 1982, 02:22-EST
From:  <RPK at MIT-LISPM-27>
Reply-to: RpK at XX
Subject: Compiler Warnings buffer
To: BUG-LISPM at EE

In System 204.63, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, on Lisp Machine Fourteen:

Is there any reason in particular for a Compiler Warnings buffer
to be created in LISP mode ?  [Not that it matters much...]

bob

Date: Wednesday, 21 April 1982, 20:15-EST
From: levitt at MIT-AI, zvona at MIT-AI
Sender: Zvona at MIT-AI
Subject: LMLIB;DO&
To: info-lispm at MIT-AI

DO& is an interation macro with many of the features of LOOP and a
LISPy syntax similar to DO*.  User-definable keywords allow common
iterative constructs -- like CDRing down a list, CONSing a new list,
or counting -- to be implemented more simply and readably.  Automatic
generation of end tests makes the DO/DO* end-test form unnecessary.  

The programs below, equivalent to common LISP functions, give a feel for
DO& style:

(defun length (list)
  (do& ((i &count0)
	(l &pop list &return i))))

(defun reverse (list)
  (do& ((elt &pop list &return accum)
	(accum &push elt))))

(defun listarray (array)
  (do& ((elt &aref array
	     &return (nreverse list))
	(list &push elt))))

(defun remq (item list)
  (do& ((a &pop list &return (nreverse out))
	(out &push a
	     &only-if (neq a item)))))

DO& allows most relevant information to appear within the
variable specifications, improving program clarity, and doing
away with the need for formulaic and complex bodies.

DO& has evolved over more than two years and reimplemented many times.
The rough corners have been worn off, and we now believe the current
implementation is clean enough for general release.

DO& is documented in detail in LMLIB;DO&DOC.  Bugs to BUG-DO&@AI;
users may wish to add themselves to INFO-DO&.

Here is a partial comparison of features of DO& and LOOP.  It is
perhaps not perfectly impartial.  Also, many of the features of LOOP
which DO& lacks could be added if there were demand for them.

DO& syntax is a natural extension of DO*.  LOOP is a non-LISPy
sublanguage.  Partly as a consequence, it is easier to determine
the scope of DO& keywords than that of LOOP keywords.  Since
keywords all begin with ``&'' it is easy to separate them from
non-keywords.  The simplicity of DO& syntax makes it trivial to
learn and often immediately understandably by non-users.  Also it
indents better than LOOP in Zmacs.

LOOP and DO& have roughly comparable numbers predefined iteration
keywords.  The sets are not identical; LOOP has a package mapping
keyword, and DO& has one for mapping over plists.  In any case, both
make it relatively easy to define your own keywords, so exactly which
keywords are defined by default is not very important.

LOOP supports parallel binding; DO& does not.  Of course you can
always use an extra variable to get the same effect.

DO& guarantees that variables have sensible values at all times; LOOP
does not.  In particular, in a LOOP epilogue, the values of iteration
variables may be undefined, whereas in a DO& &RETURN form, they are
always defined and take on the obvious value.

Both LOOP and DO& achieve package independence by using pname equality
in looking for keywords.

LOOP supports destructuring; DO& does not.  DO& generates automatic
dummy variables when none is supplied in a variable specification;
LOOP does not.

LOOP does more code optimization than DO& does.

DO& has many other features that are described in detail in DO&DOC. 

Date: Wednesday, 21 April 1982, 18:09-EST
From: Howard I. Cannon <HIC at SCRC-TENEX>
To: EB at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 21 April 1982 11:24-EST
    From: Edward Barton <EB at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, on Lisp Machine Nineteen:

	. . . .

    Case 2.

    (defflavor final-mixin-combination () (mixin-1 mixin-2 object-base))
	    ; combine the desired behavior mixins
    (defflavor mixin-1 () () (:required-flavors final-mixin-combination))
	    ; this one is only good with everything mixed up
    (defmethod (mixin-1 :foobar) () nil)
	    ; so now let's define mixin-1 behavior.
    ; Bombs out saying Mixin-2 isn't the name of a flavor.

    I think Case 2 should not bomb out.  I don't expect to be able to
    access MIXIN-2's instance variables in MIXIN-1 methods, but I do
    expect to be able to define the mixins in any order I want.

I fixed this in the source.  I can patch it in 204/208 if you are using
either system.  The Flavor system is now much better about finding
required flavors when looking for instance variables in an only
partially existent structure.

Note that Case 2 still won't work, since you have a circularity.
However, it will fail with infinite recursion trying to see if all the
components are defined, as opposed to giving the flavor composition
error.  If you want me to expound more about this problem, I will do so.

Date: Wednesday, 21 April 1982, 11:52-EST
From: Clark M. Baker <CMB at SCRC-TENEX>
Subject: selectq
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.12, Experimental ZMail 44.1,
Experimental LMFS 25.3, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 5, on Beagle:

Would it be possible for the compiler to make sure that all of the
specified cases in a selectq are different?  I just got screwed in the
following case:

(defun orient (orientation x y)
  (selectq orientation
    (0 (values x y))				; Null (R 1 0)
    (1 (values (- y) x))			; R 0 1
    (2 (values (- x) (- y)))			; R -1 0
    (3 (values y (- x)))			; R 0 -1
    (5 (values x (- y)))			; MY
    (5 (values (- y) (- x)))
    (6 (values (- x) y))			; MX
    (7 (values y x))
    (otherwise (ferror nil "Illegal rotation: ~D" orientation))))

Note the two 5's and no 4's.  I think that the compiler should have
warned me.

Date: 21 April 1982 11:24-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

Case 1.

(defflavor hairy-mixin () () (:required-flavors standard-base))
	; this mixin is only good when we're dealing with objects
	; of the general standard-base sort
(defmethod (hairy-mixin :foobar) () nil)
	; let's define the mixin's behavior
; Works fine.
; Standard-base isn't defined yet, but that's okay.


Case 2.

(defflavor final-mixin-combination () (mixin-1 mixin-2 object-base))
	; combine the desired behavior mixins
(defflavor mixin-1 () () (:required-flavors final-mixin-combination))
	; this one is only good with everything mixed up
(defmethod (mixin-1 :foobar) () nil)
	; so now let's define mixin-1 behavior.
; Bombs out saying Mixin-2 isn't the name of a flavor.

I think Case 2 should not bomb out.  I don't expect to be able to
access MIXIN-2's instance variables in MIXIN-1 methods, but I do
expect to be able to define the mixins in any order I want.

Date: Wednesday, 21 April 1982, 04:01-EST
From: Howard I. Cannon <HIC at SCRC-TENEX>
To: kmp at MIT-MC
Cc: BUG-LISPM at MIT-MC

    Date: 21 April 1982 02:54-EST
    From: Kent M. Pitman <kmp at MIT-MC>
    To: BUG-LISPM at MIT-MC

    I fixed a bug in TV:PREEMPTABLE-READ-ANY-TYI-MIXIN's :PREEMPTABLE-READ method
    which caused spurious double prompting if the user types c-L or c-K when there 
    is a prompt function and there is no text in the input buffer. I patched this
    into System 79 because that's the version I'm running. If someone wants to 
    bother to patch higher versions, feel free. -kmp

Thanks for the fix.  I took it verbatim except for gratuitous changes to
the comments.  I can patch it in either 204 or 208 if you are using
either system.


Date: 21 April 1982 03:28-EST
From: Kent M. Pitman <kmp at MIT-MC>
Subject: c-X c-D
To: BUG-LISPM at MIT-MC

Display Directory should peek for a char at more breaks and after it is done
which would allow one to get a dired on the info it has just read. Either
that, or it should save the info so that some arg to dired (eg, 0) would 
pick it up. Getting dir lists is very slow and I often don't realize I've
typed c-X c-D instead of c-X D until I see the listing coming out. Then I
have to wait a long time again while it looks up the exact same info as I
know it just discarded.


Date: Wednesday, 21 April 1982, 02:40-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: &mumbles at all levels.
To: ALAN at MIT-MC
Cc: BUG-LISPM at MIT-MC, LISP-FORUM at MIT-MC, DULCEY at MIT-ML,
    DLA at SCRC-TENEX

    Date: 20 April 1982 21:27-EST
    From: Alan Bawden <ALAN at MIT-MC>

    2) &list-of STOPS working...  (finally I got around to the screw).  Does ANYONE
    use this feature?  I could try and duplicate it, but if noone uses it (as I
    suspect) I would rather just flush it.  What to LispMachine people think?
    (If no one raises objection, I'll ask info-lispm next.)

I use &LIST-OF in a couple places.  But I don't really care if you
remove it; it's a kludge.


Date: 21 April 1982 02:54-EST
From: Kent M. Pitman <kmp at MIT-MC>
To: BUG-LISPM at MIT-MC

I fixed a bug in TV:PREEMPTABLE-READ-ANY-TYI-MIXIN's :PREEMPTABLE-READ method
which caused spurious double prompting if the user types c-L or c-K when there 
is a prompt function and there is no text in the input buffer. I patched this
into System 79 because that's the version I'm running. If someone wants to 
bother to patch higher versions, feel free. -kmp


Date: 20 April 1982 21:27-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject:  &mumbles at all levels.
To: BUG-LISPM at MIT-MC
cc: LISP-FORUM at MIT-MC, DULCEY at MIT-ML

    Date: 04/19/82 22:30:38
    From: DULCEY at MIT-ML

    (defmacro foo ((one &optional (two ''two)) &body three)
      `(list ,one ,two ',three))
    >>ERROR: &OPTIONAL -- unrecognized & keyword in DEFMACRO.
    While in the function ...

    This probably isn't defined as working.  However, it would be useful if
    it did.

Indeed, this is currently defined to be an error.  Would anyone object if I
actually made it act as it obviously should?  I would like to fix this, and
simultaneously introduce a general tool for performing macro body parsing.

Proposed new special form: BIND-ARGUMENTS

example:

(bind-arguments ((a &optional (b *b*)) (foo) (barf))
  b o d y)

(approximately)==>

(let ((gensym (foo)))
  (if (not (and (<= (length gensym) 2)
		(>= (length gensym) 1)))
      (barf))
  (let ((a (car gensym))
	(b (if (< (length gensym) 2) *b* (cadr gensym))))
    b o d y))

Now, you probably would never need a macro like this directly, but suppose you
had to write defmacro yourself:

(defmacro defmacro (name pattern &body body)
  (let ((v (gensym)))
    `(macro ,name (,v)
       (bind-arguments (,pattern (cdr ,v) (ferror nil "Bad syntax: ~S" ,v))
	 ,@body))))

That was easy wasn't it!  So easy that ANYONE can do it.  This seems to be the
right tool for bringing &mumble-argument-parsing to the masses.

Now I already have a working one of these (amazingly usefull in the right
situations I must add), and I would like to install it in the LispMachine as
the way defmacro etc work.  This would have two noticeable effects:

1) &keywords would start to work at all levels in defmacro patterns.  I presume
no one objects to this?

2) &list-of STOPS working...  (finally I got around to the screw).  Does ANYONE
use this feature?  I could try and duplicate it, but if noone uses it (as I
suspect) I would rather just flush it.  What to LispMachine people think?
(If no one raises objection, I'll ask info-lispm next.)

Unnoticeable effect:

3) The code produced by defmacro would be smaller and faster.  (You would be
appalled at the code defmacro currently turns out.)

Date: Tuesday, 20 April 1982, 21:13-EST
From: Carl W. Hoffman <CWH at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.8, Experimental ZMail 44.1,
Experimental LMFS 25.1, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 5, on Borzoi:

(ARGLIST 'TV:STREAM-MIXIN-RUBOUT-HANDLER) returns the two values (NIL) and
NIL, but its BVL is NIL.  (DEFUN F () 3) (ARGLIST 'F) returns the three values
NIL, NIL, NIL.  I wish I knew what was going on.  Maybe ARGLIST should be
renamed to ARGLIST-INTERNAL (or something) and ARGLIST should call
ARGLIST-INTERNAL and print its information in a more human readable format, as
DESCRIBE does.

Use M-X Compile File to compile SCRC:<CWH>RH.LISP;75.  Then do M-X
Compiler Warnings.  Dies with "The argument FUNCTION-SPEC was (:INTERNAL
... 0) which is not ..."

(DEFUN-METHOD (SYMBOL PROPERTY) FLAVOR ...) and 
(DEFUN-METHOD (:PROPERTY SYMBOL PROPERTY) FLAVOR ...) die in strange ways.

Date: Tuesday, 20 April 1982, 09:18-EST
From: Clark M. Baker <CMB at SCRC-TENEX>
Subject: CWH rubout handler
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.8, Experimental ZMail 44.1,
Experimental LMFS 25.1, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 5, on Basset:

Doesn't work in 208.

Date: Tuesday, 20 April 1982, 22:34-EST
From: Howard I. Cannon <HIC at SCRC-TENEX>
To: CWH at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX

    Date: Tuesday, 20 April 1982, 21:13-EST
    From: Carl W. Hoffman <CWH at SCRC-TENEX>
    To: BUG-LISPM at SCRC-TENEX

    In Experimental System 208.8, Experimental ZMail 44.1,
    Experimental LMFS 25.1, Experimental Tape 9.0, Experimental Canon 13.0,
    microcode 878, site configuration 5, on Borzoi:

    (ARGLIST 'TV:STREAM-MIXIN-RUBOUT-HANDLER) returns the two values (NIL) and
    NIL, but its BVL is NIL.  (DEFUN F () 3) (ARGLIST 'F) returns the three values
    NIL, NIL, NIL.  I wish I knew what was going on.  Maybe ARGLIST should be
    renamed to ARGLIST-INTERNAL (or something) and ARGLIST should call
    ARGLIST-INTERNAL and print its information in a more human readable format, as
    DESCRIBE does.

Well, I fixed and patched the bug, but didn't do anything to improve ARGLIST.

    Use M-X Compile File to compile SCRC:<CWH>RH.LISP;75.  Then do M-X
    Compiler Warnings.  Dies with "The argument FUNCTION-SPEC was (:INTERNAL
    ... 0) which is not ..."

    (DEFUN-METHOD (SYMBOL PROPERTY) FLAVOR ...) and 
    (DEFUN-METHOD (:PROPERTY SYMBOL PROPERTY) FLAVOR ...) die in strange ways.

Fixed and patched.  You can now defun-method non-symbols, but they won't
get optimized if you call them directly, but since you can't really call them
directly...

Date: Tuesday, 20 April 1982  12:43-EST
From: MOON at SCRC-TENEX
To:   kmp at MIT-MC
Cc:   (BUG LISPM) at MIT-AI, CWH at MIT-AI
Subject: Proposed new :RUBOUT-HANDLER option  -- :BLIP-HANDLER

I think the currently most favored way of doing this is not to change
the rubout handler, but to change the :TYI method of windows so that
it signals a condition if a blip is read; :ANY-TYI would return blips
as well as characters, and signal no conditions, and there would be no
flavor of window with a :TYI that doesn't know about blips and just
returns them.  This seems to be the most modular way of dealing with it.

Unfortunately to implement this with the highest niceness and efficiency
requires the new condition/error system, whose implementation keeps getting
delayed by the putting out of fires.  I'm getting just as tired of saying
"should await the new error system" as I'm sure you are of hearing it,
but I think this is a case that indeed ought to await the new error system.
I hope the wait isn't going to be intolerably long.

Date: Tuesday, 20 April 1982, 08:30-EST
From: David Chapman <Zvona at MIT-AI>
Subject: Versioning
To: MLB at MIT-MC, RWK at SCRC-TENEX
Cc: KMP at MIT-MC, bug-lispm at SCRC-TENEX
In-reply-to: The message of 19 Apr 82 19:34-EST from Marc Le Brun <MLB at MIT-MC>

This argues for structured versioning.  Tree structured versions
are usually the right thing, although more general ones might be
useful in some applications.

Date: Tuesday, 20 April 1982, 08:32-EST
From: David Chapman <Zvona at MIT-AI>
To: bug-lispm at MIT-AI

If 83 is released, it ought to have its status set to :released,
so we don't see Exp 83.17 and panic.  If it isn't released, it
shouldn't be the default band on cadr-4 (eg).

Date: 19 April 1982 19:34-EST
From: Marc Le Brun <MLB at MIT-MC>
Subject: LOAD
To: RWK at SCRC-TENEX
cc: KMP at MIT-MC, bug-lispm at SCRC-TENEX

    Date: Tuesday, 6 April 1982, 12:12-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    In-reply-to: The message of 6 Apr 82 02:24-EST from kmp at MIT-MC

        Date: 04/06/82 02:24:43
        From: kmp@MIT-MC
        Why don't compiled files get the version number of their source
        on file systems that support version numbers? In the case where the
        same version existed compiled (eg, compilation due to change of a
        macro file that the file depended on), the compiler could query
        to clobber or read another filename... Most of the time, I would
        prefer to clobber the previous version.
    I never would.  I think an acceptable compromize would be to use the
    version number IFF that version number would be higher than any existing
    one.  Note that some file systems won't let you overwrite an existing
    version; you have to delete the old one first.  It used to copy the version
    number, but was a constant screw on such systems.
        Being able to see which the source file for a given QFASL is just by
        looking at the dir (eg, in dired) would be a real win.
    I think it's important not to believe the version number, which can be
    incorrect due to copying or any number of other mechanisms.  I think the
    right thing is to actually get the source-file information from the
    QFASL file and display that.  In ordinary file systems this would
    involve looking at the QFASL file, so maybe it should just tell you when
    you explicitly ask.
File versions have to do with the history of files with respect to the file
system they reside in.  If we want to ensure co-ordination between files, such
as with sources and objects, we shouldn't expect the file system bookkeeping
to do it for us.  It is a complete loss to expect file system versions to obey
two distinct semantics consistently.
        On a related note, maybe Symbolics should start calling its compiled
        files ZFASL files, so they can be distinguished from other variants,
        since there seems to be some incompatibility between code compiled for
        the several existing systems right now...
    Most files are compatible; it would probably be a screw more often than
    not to make it different.  I guess LOAD could be smart and for MIT try
    QFASL first, then ZFASL, while for Symbolics systems use the reverse
    order.  (SFASL might be a better name...)
This will eventually have to be addressed when there are more types of
Zetalisp speaking processors (eg the L machine).

Date: Monday, 19 April 1982  16:18-EST
From: JEK at SCRC-TENEX
To:   dove at mit-dspg
Cc:   bug-lispm at mit-eecs, filenames at mit-dspg

    Date: Monday, 19 April 1982  11:14-EST
    From: dove at mit-dspg
    To:   bug-lispm at mit-eecs
    cc:   filenames at mit-dspg

    After reading all my mail, I agree with the .l extension for lisp
    except for the confusion that will result between the franz and lispm
    dialects.  I certainly think that .init and .qfasl are better choices
    then .q and .i or .in.  At least the truncation length should be
    user redefinable.
It was decided that chewing up half of the file name length by using the
longest types was undesirable.  It is more important to be able to at least
know how long to make filenames (now the max is 11) in advance instead of
making the use of "qfasl" reduce it to 8.
    Is there an easy way to determine the default directory when I log in
    (by something in the LISPM.in file for example)? (I am not much of a
    wiz at this stuff yet, so if it's trivial please bear with me).
Most contexts show you the default pathname you are working with when you
need to type in a new pathname.
    Need LISPM.in be qfasl?  When I used text, the lispm bitched at me.
    (I thought that it would figure out whether to do a fasload on it
    by examination)
This was a bug at one time in the UNIX file server.  Do you have the most
recent on on mit-vax? (/usr/src/local/cmd/chaos/FILE.c).

Date: Monday, 19 April 1982, 17:15-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Unix pathnames
To: dove at mit-dspg
Cc: BUG-LISPM at mit-eecs
In-reply-to: The message of 19 Apr 82 11:04-EST from dove at mit-dspg


    Date: 19 Apr 1982 11:04:40-EST
    From: dove at mit-dspg
    ---------------------
    There is no usual UNIX convention regarding the length of extensions.
    Certainly none that are related to size.  (.c .f .r .o only)
    Please let the init extension be init, the lisp extension lisp and the
    qfasl extension qfasl.  I would much rather shorten my primary names to 9
    chars to accommodate that.
Who said anything at all about conventions relating to LENGTH of extensions?
There are conventional extentions for certain purposes, and I am sure if you
stop and think about it you can come up with several others.  .bak, .h, .l
all instantly come to mind.

Nit:  it would shorten your names to 8 if you use ".qfasl".

Rabid unix fans WOULD complain about shortening the names to 8.

    I wonder why the login default init name was chosen to be capitalized.

Because it is a constructed pathname, constructed without regard to the
operating system eventually to receive it.

I really don't think it's our place to impose our concept of filenames
onto the Unix filesystem (even though ours may be more winning).

However, another possibility which is being considered for the new
pathname system is having a file-system independent syntax for pathnames
which can optionally be used on a pathname-by-pathname basis.  If the
peculiarities of the Unix syntax bother you, you would be able to hide
them from yourself and just use names like long-filename.qfasl and not
worry that this is actually "long-filename.q" on the actual unix file
system.  This may be more or less confusing than using the normal Unix
syntax.

DULCEY@MIT-ML 04/19/82 22:30:38 Re: 
To: (BUG LISPM) at MIT-AI
CC: DULCEY at MIT-ML
In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Eighteen:

Consider the following:

(defmacro foo (one &optional (two ''two) &body three)
  `(list ,one ,two ',three))
(foo 1)
(1 TWO NIL)
(foo 1 2)
(1 2 NIL)
(foo 1 2 3)
(1 2 (3))

does the expected thing.  But suppose we want instead the syntax
(foo (1 2) 3)

We might try the following -- but look what happens!

(defmacro foo ((one &optional (two ''two)) &body three)
  `(list ,one ,two ',three))
>>ERROR: &OPTIONAL -- unrecognized & keyword in DEFMACRO.
While in the function SI:DEFMACRO-CHEVEUX  SI:DEFMACRO-CHEVEUX  SI:DEFMACRO-CHEVEUX

SI:DEFMACRO-CHEVEUX:
   Arg 0 (PATTERN): &OPTIONAL
   Arg 1 (PATH): (CAR (CDR **))
 
* 

This probably isn't defined as working.  However, it would be useful if
it did.

(The output shown above was all yanked out of a ZTOP buffer, and
therefore should be correct.)


Date: Monday, 19 April 1982, 21:19-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Temporary(?) area not declared
To: RWK at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX

    Date: Monday, 19 April 1982, 08:36-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    In Experimental System 208.3, Experimental ZMail 44.0,
    Experimental LMFS 25.1, Experimental Tape 9.0, Experimental Canon 13.0,
    microcode 878, site configuration 5, on Dachshund:

    CHAOS-BUFFER-AREA isn't declared temporary, but there is code that
    resets it in CHAOS:CREATE-CHAOSNET-BUFFERS.  I think this is done as
    part of (CHAOS:RESET).
Yesterday night, I sez to Howard, "Howard," sez I, "I really should fix
the bug in temporary areas before some loser loads patches and reports
it.  But I'm tired, so I'll fix it tomorrow."  I lose.

Date: 19 April 1982 21:51-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

There should be a warning somewhere in the manual about (LOCF (CDR X)).
That seems to be about the only case where LOCF doesn't (can't?) return
a locative pointer as the manual claims LOCF does.  That means that
code that uses CAR to access locatives will run happily on LOCF of
just about anything, until someone gives it (LOCF (CDR X)) and it
does the wrong thing because it must use CDR to win in that case.

Date: 19 April 1982 18:17-EST
From: Alan Bawden <ALAN at MIT-MC>
To: dove at MIT-DSPG
cc: filenames at MIT-DSPG, BUG-lispm at MIT-AI

    Date: 19 Apr 1982 11:14:46-EST
    From: dove at mit-dspg

    After reading all my mail, I agree with the .l extension for lisp
    except for the confusion that will result between the franz and lispm
    dialects. ...

Please do not make the mistake of thinking that different dialects of lisp
warrant different extensions.  Many files of lisp code may be succesfully run
in several different dialects of lisp.  To require different extensions would
be a big screw.

Date: Monday, 19 April 1982, 17:40-EST
From:  <CStacy at MIT-AI>
To: BUG-LISPM at MIT-AI

In Experimental LMFILE-Remote 12.0, Experimental MIT-Specific 4.0,
Experimental System 83.16, Experimental ZMail 43.0,
Experimental Remote-File 5.0, microcode 104, Try me, on Lisp Machine Seven:

Why dont people's personal names appear in Fingers if they are using
System 80?

Date: 19 Apr 1982 11:14:46-EST
From: dove at mit-dspg
To: bug-lispm@mit-eecs
Cc: filenames@mit-dspg

After reading all my mail, I agree with the .l extension for lisp
except for the confusion that will result between the franz and lispm
dialects.  I certainly think that .init and .qfasl are better choices
then .q and .i or .in.  At least the truncation length should be
user redefinable.

Is there an easy way to determine the default directory when I log in
(by something in the LISPM.in file for example)? (I am not much of a
wiz at this stuff yet, so if it's trivial please bear with me).

Need LISPM.in be qfasl?  When I used text, the lispm bitched at me.
(I thought that it would figure out whether to do a fasload on it
by examination)

Date: 19 Apr 1982 11:04:33-EST
From: dove at mit-dspg
To: rwk@scrc-tenex
Subject: Unix pathnames
Cc: BUG-LISPM@mit-eecs

In reply to RWK's message
----------------------
>From RWK@SCRC-TENEX Sun Apr 18 22:08:02 1982
Date: Sunday, 18 April 1982, 21:18-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Unix pathnames
To: Web Dove <DOVE at MIT-DSPG>
Cc: BUG-LISPM at MIT-EECS
In-reply-to: The message of 18 Apr 82 16:49-EST from Web Dove <DOVE at MIT-DSPG>

It does not prevent you from having extentions longer than 2 characters.
That's an illusion.  You're being faked out by its canonicalizing
certain extentions to two characters, such as ".in" (rather than .init),
".li" for .lisp, etc.  This is to conform with the usual Unix
conventions, and because otherwise ".init" or ".lisp" would take up too
many of the characters for your file name.  This doesn't work completely
right yet.

The case problem is more severe.  Unix and VMS pathnames cannot be
supported adaquately in the current pathname system.  It is being
redesigned and rewritten, so these problems will be fixed in a future
release.  Note that you can win some of the time if the pathname has
never existed in the upper-case version.  Most of the time you win, but
you'll continue to have to telnet and fix things up a lot.

I will investigate a temporary fix for the case problem.
---------------------
There is no usual UNIX convention regarding the length of extensions.
Certainly none that are related to size.  (.c .f .r .o only)
Please let the init extension be init, the lisp extension lisp and the
qfasl extension qfasl.  I would much rather shorten my primary names to 9
chars to accommodate that.

I wonder why the login default init name was chosen to be capitalized.

Date: Monday, 19 April 1982  08:44-EST
From: BSG at SCRC-TENEX
To:   JEK at SCRC-TENEX
Cc:   BUG-LISPM at EE, Web Dove <DOVE at MIT-DSPG>

This is less than so.  What JEK failed to point out is that the software
will simply refuse to deal with files name ".. .init"; you cannot so
much as do a directory list or file-system-edit of unix directories
containing "badly" named files.  This will be fixed in the new pathname
system.

Date: Monday, 19 April 1982, 08:36-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Temporary(?) area not declared
To: BUG-LISPM at SCRC-TENEX

In Experimental System 208.3, Experimental ZMail 44.0,
Experimental LMFS 25.1, Experimental Tape 9.0, Experimental Canon 13.0,
microcode 878, site configuration 5, on Dachshund:

CHAOS-BUFFER-AREA isn't declared temporary, but there is code that
resets it in CHAOS:CREATE-CHAOSNET-BUFFERS.  I think this is done as
part of (CHAOS:RESET).

Date: Monday, 19 April 1982  08:03-EST
From: JEK at SCRC-TENEX
To:   Web Dove <DOVE at MIT-DSPG>
Cc:   BUG-LISPM at EE

    Date: Sunday, 18 April 1982, 16:49-EST
    From: Web Dove <DOVE at MIT-DSPG>
    To:   BUG-LISPM at EE

    In System 204.63, ZMail 42.11, Experimental Remote-File 101.2,
    microcode 865, Newer, on Lisp Machine Fourteen:

    It seems that the unix file system supports forces all characters into lower case,
    and prevents me from making extensions longer than 2 chars.  That would be fine, 
    except that the default login init file is LISPM.in which I had to rename from
    lispm.in by telnetting to the unix site.  Could things be changed so unix files can
    have arbitrary 14 char names with case preserved?
RWK's response to this was correct except the the "canonicalized" extension
for ".lisp" is ".l" not ".li".  Franz Lispon the VAX also uses ".l" for lisp.
To clarify a little further, only "standard" types generrated auotmatically
by the lispm software must appear in their 1 or 2 character abbreviation.
The LISPM.in occurred because the lispm software also generates the filename
in this case (lispm).  For any file name the the user types in, no
changes are made if no components (directory, name, type etc) are touched
by the software.  As RWK said, all this lossage will be fixed in the next
major release in which a new and improved pathname system will exist.

Date: Monday, 19 April 1982  07:58-EST
From: JEK at SCRC-TENEX
To:   Web Dove <DOVE at MIT-DSPG>
Cc:   BUG-LISPM at EE

    Date: Sunday, 18 April 1982, 19:32-EST
    From: Web Dove <DOVE at MIT-DSPG>
    To:   BUG-LISPM at EE

    In System 204.63, ZMail 42.11, Experimental Remote-File 101.2,
    microcode 865, Newer, on Lisp Machine Fourteen:

    I just noticed that when I open a fixnum file to a unix site and do the proper
    number of tyi's to read it, the status line on the bottom claims that I only read 50%
    of the file.  Is that a problem with the unix FILE server?
This problem is because the lispm thinks the number of bytes in a fixnum file
is the number of 16-bit words. The UNIX file server thinks only in terms of
8-bit bytes, so it reports the length of any file as the number of 8-bit bytes.
The lispm records the number of 16-bit words read and divides it into the
size-in-bytes reported by the file server to get the 50%.
A fixed UNIX file server will be available on MIT-VAX tomorrow.

Date: Sunday, 18 April 1982, 21:18-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Unix pathnames
To: Web Dove <DOVE at MIT-DSPG>
Cc: BUG-LISPM at MIT-EECS
In-reply-to: The message of 18 Apr 82 16:49-EST from Web Dove <DOVE at MIT-DSPG>

    Date: Sunday, 18 April 1982, 16:49-EST
    From: Web Dove <DOVE at MIT-DSPG>
    It seems that the unix file system supports forces all characters into lower case,
    and prevents me from making extensions longer than 2 chars.  That would be fine, 
    except that the default login init file is LISPM.in which I had to rename from
    lispm.in by telnetting to the unix site.  Could things be changed so unix files can
    have arbitrary 14 char names with case preserved?

It does not prevent you from having extentions longer than 2 characters.
That's an illusion.  You're being faked out by its canonicalizing
certain extentions to two characters, such as ".in" (rather than .init),
".li" for .lisp, etc.  This is to conform with the usual Unix
conventions, and because otherwise ".init" or ".lisp" would take up too
many of the characters for your file name.  This doesn't work completely
right yet.

The case problem is more severe.  Unix and VMS pathnames cannot be
supported adaquately in the current pathname system.  It is being
redesigned and rewritten, so these problems will be fixed in a future
release.  Note that you can win some of the time if the pathname has
never existed in the upper-case version.  Most of the time you win, but
you'll continue to have to telnet and fix things up a lot.

I will investigate a temporary fix for the case problem.

Date: Sunday, 18 April 1982, 19:32-EST
From: Web Dove <DOVE at MIT-DSPG>
To: BUG-LISPM at EE

In System 204.63, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, Newer, on Lisp Machine Fourteen:

I just noticed that when I open a fixnum file to a unix site and do the proper
number of tyi's to read it, the status line on the bottom claims that I only read 50%
of the file.  Is that a problem with the unix FILE server?

Date: Sunday, 18 April 1982, 16:49-EST
From: Web Dove <DOVE at MIT-DSPG>
To: BUG-LISPM at EE

In System 204.63, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, Newer, on Lisp Machine Fourteen:

It seems that the unix file system supports forces all characters into lower case,
and prevents me from making extensions longer than 2 chars.  That would be fine, 
except that the default login init file is LISPM.in which I had to rename from
lispm.in by telnetting to the unix site.  Could things be changed so unix files can
have arbitrary 14 char names with case preserved?

Date: Saturday, 17 April 1982  19:58-EST
From: HES at SCRC-TENEX
To:   Kent M. Pitman <kmp at MIT-MC>
Cc:   BUG-LISPM at MIT-MC

    Date: Saturday, 17 April 1982  01:35-EST
    From: Kent M. Pitman <kmp at MIT-MC>
    To:   BUG-LISPM at MIT-MC

    In system 79.43,...

    It should be possible to put in a multi-line comment about a file patch.
    The only reason it loses is because ;;; comments are used at the top of
    the patch file and part of the comment ends up on a non-comment-line.
    It seems to me that it wouldn't be so hard to know where you were inserting 
    the guy's comment in the buffer and then scan the region afterward to make
    sure that every line started with a semicolon...

    Yes, I know it's probably why you have Finish Patch's query for a comment
    end with a crlf, and probably it's my fault for forcing in a crlf, but
    I really needed a two-line comment.

    In the worst case, you could always just do (COMMENT "...") instead of the
    semicolon type comment...

    -kmp

There was once a famous case of some sussman steele program which started
out by printing a comment saying today is ... the sun is in ... the moon
is in its ... phase etc.  well the comment got too long and wrapped around
to a new line (without the ;;; just like your case).  Now for reasons I
don't remember this stuff was written out to a file (with many other goodies)
and then read into a lisp.  But the joke was that the line was too long only
in certain months and moon phases.  Thus, we had a bona fide case of a computer
bug which depended on the phase of the moon.


kmp@MIT-MC 04/17/82 19:46:27 Re: Proposed new :RUBOUT-HANDLER option
To: (BUG LISPM) at MIT-AI
CC: CWH at MIT-AI
In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 15.12, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

I think that it would be nice if :RUBOUT-HANDLER's options list
allowed a :BLIP-HANDLER option. It would be a function of one
argument (the blip) and would allow the blip to be handled 
immediately and invisibly to the ongoing read.

For example, this allows one to share io-buffers between 
something reading text and something reading menu items, having
only one active process taking care of seeing both kinds of input.
I'm sure there are other applications as well.

It has the disadvantage the menu stops functioning when the read
is not active, but the other suggested way to do this (the
tv:preemptable-read-any-tyi-mixin flavor described in windoc) has
the identical behavior. 

It also has the disadvantage that if the blip-handler needs to
do i/o to the window the read is happening on, it may bash the rubout
handler's state if it's not careful. But it's easy enough to be
careful about that.

In CWH's editing rubout handler, the change is as simple as

	(SETQ CH (LET ((RUBOUT-HANDLER NIL)) (FUNCALL-SELF ':TYI)))
becomes
	;; Allow only normal chars to return. Iterate past blips, handling
	;;  them if possible, or discarding them if no handler given.
	(SETQ CH (LET ((RUBOUT-HANDLER NIL)) ;disable rubout-handler
		   (DO ((C (FUNCALL-SELF ':TYI) (FUNCALL-SELF ':TYI)))
		       ((ATOM C) C) ;stop iff normal char
		     (LET ((BLIP-HANDLER
			     (ASSQ ':BLIP-HANDLER RUBOUT-HANDLER-OPTIONS)))
		       (IF BLIP-HANDLER (FUNCALL (CADR BLIP-HANDLER) C))))))

in the function TV:ALTERNATE-RUBOUT-HANDLER. I think the same change will
work in TV:STREAM-MIXIN-RUBOUT-HANDLER, though I have not tested it.

Does anyone have any strong feelings about this one way or another?
Carl seemed to think this was a major enough change that we shouldn't
just put it in without asking first.

I note for the record that the current rubout handlers (both CWH's and
the vanilla system version) err a line or two after this on a wrong-type-arg
to LDB (trying to check on the %%KBD-CONTROL-META-ness of CH if it turns
out it's a blip because they don't check to see if it's even atomic.

-kmp

Date: 17 April 1982 01:35-EST
From: Kent M. Pitman <kmp at MIT-MC>
To: BUG-LISPM at MIT-MC

In system 79.43,...

It should be possible to put in a multi-line comment about a file patch.
The only reason it loses is because ;;; comments are used at the top of
the patch file and part of the comment ends up on a non-comment-line.
It seems to me that it wouldn't be so hard to know where you were inserting 
the guy's comment in the buffer and then scan the region afterward to make
sure that every line started with a semicolon...

Yes, I know it's probably why you have Finish Patch's query for a comment
end with a crlf, and probably it's my fault for forcing in a crlf, but
I really needed a two-line comment.

In the worst case, you could always just do (COMMENT "...") instead of the
semicolon type comment...

-kmp


Date: Friday, 16 April 1982, 23:56-EST
From:  <JMTurn at MIT-AI>
Subject: Converse pop-up
To: BUG-LISPM at MIT-AI

In Experimental LMFILE-Remote 12.0, Experimental MIT-Specific 4.0,
Experimental System 83.14, Experimental ZMail 43.0,
Experimental Remote-File 5.0, microcode 104, Try me, on Lisp Machine Seven:

If you receive a message and type C when it is received, the message is
never processed by Converse. That is, you are placed in a Converse
modulo the message that just came in.

Date: Friday, 16 April 1982  23:07-EST
From: HIC at SCRC-TENEX
To:   Edward Barton <EB at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: Friday, 16 April 1982  20:57-EST
    From: Edward Barton <EB at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.5hz, on Lisp Machine Twenty:

    (defun bar (&special &optional (x 'foo))	
      (closure '(x)
         #'(lambda () x)))

    (compile 'bar)

    Warning: X declared special.
    Warning: X previously assumed local; you will lose.
    Warning: X is bound but not used.

Fixed in the source.  I can make the fix a patch for 204 if you are using
that system.  The problem is that &special variables with init forms
don't get correctly declared special.

Date: 16 April 1982 20:57-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

(defun bar (&special &optional (x 'foo))	
  (closure '(x)
     #'(lambda () x)))

(compile 'bar)

Warning: X declared special.
Warning: X previously assumed local; you will lose.
Warning: X is bound but not used.


Date: Friday, 16 April 1982, 08:27-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: make-system
To: HIC at SCRC-TENEX
Cc: Clark M. Baker <CMB at SCRC-TENEX>, BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 15 Apr 82 13:04-EST from HIC at SCRC-TENEX


    Date: Thursday, 15 April 1982  13:04-EST
    From: HIC at SCRC-TENEX
    I strongly agree that make-system should treat non-existent QFASL's
    as being very old when you are recompiling.  Its current behavior is wrong.
The current behaviour is a bug.  It's on my queue of important things to fix.

Date: Friday, 16 April 1982, 09:00-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: END and READLINE
To: bug-zmail at SCRC-TENEX, bug-lispm at SCRC-TENEX
Cc: JWALKER at SCRC-TENEX, JEK at SCRC-TENEX

In 204.66, #\END now terminates READLINE.

Date: Friday, 16 April 1982, 03:13-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Split Screen on Mathlab Lisp Machines
To: dulcey at MIT-MC
Cc: bug-lispm at SCRC-TENEX
In-reply-to: The message of 15 Apr 82 23:55-EST from dulcey at MIT-MC


In case it wasn't obvious, it's a bug with MACSYMA not doing something
right with windows, supplying a symbol where a list is expected.  I
forget the details.  Kick GJC to do something about it.  (Softly, if you
want him to sit down and do it the same day).

In the meantime, if you weren't actually using MACSYMA, you should
use a different band.

dulcey@MIT-MC 04/15/82 23:55:40 Re: Split Screen on Mathlab Lisp Machines
To: (BUG LISPM) at MIT-AI
In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, on Lisp Machine Fifteen:

The problem with split-screen on a Mathlab machine has once again
surfaced.  Namely, if you try to produce any sort of split screen,

--> window system problems, using the cold load stream <--

TRAP 5327 (ARGTYP CONS M-T T ...)

The argument to CAR, MC:MACSYMA-LISTENER, was of the wrong type.
The function expected a cons.

While in the function TV:GET-STRING-FROM-WINDOW-TYPE  TV:SYSTEM-MENU-SPLIT-SCREEN-VIA-MENUS
 (METHOD TV:MENU-EXECUTE-MIXIN EXECUTE)

TV:GET-STRING-FROM-WINDOW-TYPE
Arg 0 (TYPE): FED:FED-FRAME


I had this happen to me once before, on CADR-16.  You fixed it on that one;
however, either nothing was done about this machine, or erroneous software
was re-installed.

(The example shows an attempt to make a Font Edit window.  However, the same
thing happens with other types; the only thing different is Arg 0.)


Date: 15 April 1982 17:36-EST
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: with-self-variables-bound
To: BUG-LISPM at MIT-AI

In Experimental LMFILE-Remote 12.0, Experimental MIT-Specific 4.0,
Experimental System 83.12, Experimental ZMail 43.0,
Experimental Remote-File 5.0, microcode 104, Try me, on Lisp Machine Six:

Perhaps I don't understand what with-self-variables-bound is
supposed to do, but I thought it is supposed to bind all of
self's instance-variables as specials.  My original problem
occurred when I wanted to have instance-variables in a
tv:choose-variable-values list, but the following scenario
illustrates the problem:

(defflavor TEST-ONE
	((a 1) (b 2) (c 'three))
	()
  :settable-instance-variables)
(defmethod (TEST-ONE :TEST) ()
  (with-self-variables-bound
    (break)))
(setq TEST-ONE-G1045 (make-instance 'test-one))
(funcall TEST-ONE-G1045 ':test)

Then in the break loop, you will find that A, B, and C are
unbound.

Date: Thursday, 15 April 1982, 13:06-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Frame/pane pains
To: Henry Lieberman <HENRY at MIT-AI>
Cc: UC.RpK at MIT-EECS, BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 14 Apr 82 22:36-EST from Henry Lieberman <HENRY at MIT-AI>


    Date: 14 April 1982 22:36-EST
    From: Henry Lieberman <HENRY at MIT-AI>
	    Date: Wednesday, 31 March 1982, 20:22-EST
	    From: Robert P. Krajewski <UC.RpK at MIT-EECS>
	    [1] What do I have to do so that the panes of a frame do not appear in the
	    System Menu ?
	Make them return NIL for the :NAME-FOR-SELECTION mixin.  I.e. mix in
	TV:DONT-SELECT-WITH-MOUSE-MIXIN in the flavors for the panes.
    Isn't it a pane to have to do this for each pain in the frame separately?
    Shouldn't there be a way to do it for the whole frame at once.
Because the frame doesn't enter into it at all.  Mouse-selection is on a
per-window basis.  This will all get redesigned when the activity system
is implemented, no doubt.

An easier way to do this that I forgot when I sent the earlier reply is
to use TV:PANE-NO-MOUSE-SELECT-MIXIN instead of TV:PANE-MIXIN.  Since you have
to get TV:PANE-MIXIN in there somewhere for something to be a proper pane, this
saves a little effort.

Date: Thursday, 15 April 1982  13:04-EST
From: HIC at SCRC-TENEX
To:   Clark M. Baker <CMB at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX
Subject: make-system

I strongly agree that make-system should treat non-existent QFASL's
as being very old when you are recompiling.  Its current behavior is wrong.

Date: Thursday, 15 April 1982, 08:54-EST
From: Clark M. Baker <CMB at SCRC-TENEX>
Subject: make-system
To: BUG-LISPM at SCRC-TENEX

In System 204.63, ZMail 42.11, LMFS 24.8, Tape 8.5, Canon 12.3,
Symbolics 10.1, microcode 869, on Basset:

I added a few more files to my make-system declaration for which there
existed .lisp and no .qfasl files.  When I did a make-system, it bombed
out with a file FOO.QFASL does not exist in the function
SI:FILE-NEWER-THAN-INSTALLED-P.  BEE suggested I try the :RECOMPILE
option (which had the same result.

If the QFASL file doesn't exist, I think the make-system should pretend
that it exists and is very old, and needs to be recreated.  This is the
behavior I am used to with UNIX make.  It does not seem to be a feature
to have to compile all of your files one way (qc-file) the first time,
and a different way (make-system) all of the other times.

Date: 15 April 1982 06:59-EST
From: Richard Greenblatt <rg at MIT-AI>
To: DULCEY at MIT-AI
cc: BUG-LISPM at MIT-AI, BUG-HARDWARE at MIT-AI

  Re system 83 not seeming to display bottom of screen on CADR-18.

  You are being faked out.  On CADR18 there is frequently an unused
white area at the bottom of the screen, due to a (set-tv-speed 60.)
having been done and the results left in the sync ram.

  When a (set-tv-speed 60.) has been done, the fact is supposed to
be recorded by appending a 60HZ to the system name, thus we have
79.31, 60.45Hz for example.

  I will dump a system 83.xx 60Hz which will use the full screen
since the user might as well have the advantage of the extra screen
space, given that he has to put up with the slight flicker of 60Hz.

  Until then, just ignore the unused space at the bottom of the screen.


Date: 15 April 1982 05:15-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: System 79 and 83 QFASL files now compatible.
To: INFO-LISPM at MIT-AI

Both system 79 and system 83 have been patched so that files compiled
in either one will load into the other and work; but you must use
microcode 862 with system 79 to be sure of success.

If a file compiled in system 79 is loaded into system 83,
some of system 83's speed advantage in flavors with methods in that file
will be forfeit.  Also, in the unlikely case that you load old
compiled DECLARE-FLAVOR-INSTANCE-VARIABLES functions for a flavor
but do not load any old compiled methods for that flavor, it will
not work automatically.  Contact me if you think this is happening to you.

If a file compiled in system 83 is loaded into system 79,
combined methods produced by COMPILE-FLAVOR-METHODS will be ignored.
This may make your program slower to start up than it used to be,
but will have no other effects.

It is therefore best to compile your files in system 83, so that
they will get the full speed advantage when run in that system.

It should be noted that system 83 has the same compatibility definitions
that system 79 has, for the functions DEFUN-METHOD and INSTANCE-VARIABLE-BOUNDP
needed in brand S systems.  So code that has been changed to work in those
systems will also work in system 83.  QFASL files are not compatible
between 79/83 and 204, however.

I would like to apologize for not mentioning the now eliminated
incompatibility of QFASL files in the system message for system 83.
Sometimes when I know something by heart, I forget that other people
don't know it.

Date: 15 April 1982 02:21-EST
From: Mark J. Dulcey <dulcey at MIT-AI>
To: BUG-HARDWARE at MIT-AI, BUG-LISPM at MIT-AI

In HARDWARE in Experimental LMFILE-Remote 12.0,
Experimental MIT-Specific 4.0, Experimental System 83.11,
Experimental ZMail 43.0, Experimental Remote-File 5.0, microcode 104,
Try me, on Lisp Machine Eighteen:

Due to some sort of lossage (I don't know if it is hardware or
software) the bottom of the screen is not displayed on this machine.
The area lost includes the who-line and the mini-buffers created by
ZWEI.  This tends to discourage people from "trying me".

Date: Wednesday, 14 April 1982  17:41-EST
From: MOON at SCRC-TENEX
To:   bsg at SCRC-TENEX, alan at SCRC-TENEX, gjc at SCRC-TENEX
cc:   bug-lispm at SCRC-TENEX
Subject: gensym vs temporary area

There seems to be a good deal of confusion going around.

You can disable the compiler's use of temporary areas by setting the variable
COMPILER:QCOMPILE-TEMPORARY-AREA to something other than FASD-TEMPORARY-AREA.

A few systems ago the behavior changed so that where formerly you got screwed
by creating a function whose constants were in the temporary area, so that they
later disappeared when you did another compilation, you now get screwed by
not being able to compile your function at all (because you get an error message).
I improved the error message slightly.

Pretty clearly it is wrong for macro expansion to be done in the temporary area
when compiling "to core" (e.g. from the editor).  There are too many ways that
user macros can create data structure that fails to get copied out of the
temporary area.  I changed the compiler to do only its own internal consing
in the temporary area when compiling "to core".  This is installed as a patch
to system 204.

When compiling to a file macro expansion is still done in the temporary
area, since here the savings to be gained is substantial and the risk is
small; anything that leaves permanent data structure around after a
compilation is probably broken anyway--for instance the fact that the
flavor system does this causes several problems associated with compiling
files that have been changed incompatibly since the version that is running
in the environment in which the compilation is performed.

Date: Wednesday, 14 April 1982  17:56-EST
From: MOON at SCRC-TENEX
To:   kmp at MIT-MC
Cc:   (BUG LISPM) at MIT-AI
Subject: Converse getting out of the way

    kmp@MIT-MC 04/14/82 00:43:05
    To: (BUG LISPM) at MIT-AI
    In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, 
    on Lisp Machine Twenty-two:

    It seems to me that Converse windows should be a more-or-less background 
    thing. I did (supdup 'mc) and got a send while there. When I did 
    Network L, I ended up in the Converse window intead of the Lisp Listener 
    I started from.
Converse thinks that it does what you want, by sending a :BURY message.  I
fixed (in the source) the window system bug that made it not work.  It will
need to be fixed a better way when the activity system is implemented.

Date: Tuesday, 13 April 1982  16:26-EST
From: MMCM at SCRC-TENEX
To:   Kent M. Pitman <kmp at MIT-MC>
Cc:   BUG-LISPM at MIT-MC
Subject: Bugs in Kill or Save Buffers

    Date: 13 April 1982 02:15-EST
    From: Kent M. Pitman <kmp at MIT-MC>
						    File defaulting like that is
    just awful and I can't see any way it can be described as other than a bug. 
    That it displayed the wrong buffer name in the mode line is a bug. That 
    Save File, at least in this case, doesn't prompt with the buffer name it 
    is planning to save is a misfeature.
Indeed.  These bugs have been fixed in the source for a while.  (Since a
bug report from Taft about them i believe).  Why don't you make a patch
to system 79 with the new version of SAVE-BUFFER (i believe) from EE?


Date: 13 April 1982 12:04-EST
From: George J. Carrette <GJC at MIT-MC>
To: DOVE at MIT-DSPG
cc: BUG-LISPM at MIT-MC

Both LMI and SYMBOLICS are listed in the local telephone directories.


kmp@MIT-MC 04/14/82 00:43:05
To: (BUG LISPM) at MIT-AI
In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, 
on Lisp Machine Twenty-two:

It seems to me that Converse windows should be a more-or-less background 
thing. I did (supdup 'mc) and got a send while there. When I did 
Network L, I ended up in the Converse window intead of the Lisp Listener 
I started from.
-kmp


Date: 13 Apr 1982 09:53:14-EST
From: dove at mit-dspg
To: bug-lispm@mit-eecs
Subject: LISPM and dspg (unix)

Yes, the problem was the FILE server.  It is now fixed and working fine.

We plan to buy a lispm next winter.  Any news about the new symbolics machine?
(availability, speed, floating point capability?)

Date: Tuesday, 13 April 1982, 08:07-EST
From: James E. Kulp <JEK at SCRC-TENEX>
Subject: LISPM and dspg (unix)
To: RWK at SCRC-TENEX, DOVE at MIT-DSPG
Cc: BUG-LISPM at MIT-EECS, RLL at SCRC-TENEX, JEK at SCRC-TENEX

    Date: Monday, 12 April 1982, 23:09-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: LISPM and dspg (unix)
    To: Web Dove <DOVE at MIT-DSPG>
    Cc: BUG-LISPM at MIT-EECS, RLL at SCRC-TENEX, JEK at SCRC-TENEX
    In-reply-to: The message of 1 Apr 82 11:13-EST from Web Dove <DOVE at MIT-DSPG>

	Date: Thursday, 1 April 1982, 11:13-EST
	From: Web Dove <DOVE at MIT-DSPG>
	I was trying to write a file to dspg (unix site) and after the file seems to have been
	completed I got the following error:
	ERROR: 11 is not a meaningful refname in USER
	Could this be due to a transaction failure with the unix FILE server?
    This is due to their running an old version of the FILE server.  The format
    of the CLOSE response has changed, so it gets parsed wrong by the LISPM end.
    The LISPM's change could have been made so that old servers would work, but
    wasn't.  I used to have a file that made the LISPM compatible with old and
    new, but I flushed it since I though all machines were running the new file
    server.  If you know the people who run dspg, you should have them get a new
    copy of the file server.
This has indeed been fixed.  Copy a new FILE.c from mit-vax:/usr/src/local/cmd/chaos/FILE.c

Date: 13 April 1982 02:15-EST
From: Kent M. Pitman <kmp at MIT-MC>
Subject: Bugs in Kill or Save Buffers
To: BUG-LISPM at MIT-MC

In System 79.40, ...

I just saw multiple bad bugs in Kill or Save Buffers. I had two files I wanted
saved FS:KBE;BASIC.LISP#> and FS:KBE;WINDOW.LISP#>. I also had two buffers
I wanted to turn into files. They were called MAGIC and ZWEI. Not surprisingly,
I wanted them saved as FS:KBE;MAGIC.LISP#> and FS:KBE;ZWEI.LISP#>. Anyway,
I marked them for save.  The first two files were saved normally. Then I
got an echo area prompt saying only "Save file" and saying the default was
FS:KBE;MAGIC.LISP#> ... to which buffer I wondered? Well, hopefully, it was
reasonable about this and was trying to save buffer MAGIC. So I typed 
return and it wrote some file. Then it prompted "Save file" again... with
the same file default. Odd, I thought. I hit abort. The first thing I noticed
was that the mode line said "FS:KBE;MAGIC.LISP#>" and the buffer contents
displayed were those of the MAGIC buffer. Good. But when I did c-X c-B I found
there was a MAGIC buffer, too. What happened to the ZWEI buffer? Was it gone?
I selected the MAGIC buffer. It had the same thing in it as the buffer I'd
just left. I typed C-M-L and found myself back in the buffer marked 
FS:KBE;MAGIC.LISP#> but now its displayed contents were different. They were
now my ZWEI buffer contents. Indeed, I checked and it had written the
contents of buffer ZWEI to FS:KBE;MAGIC.LISP#>. File defaulting like that is
just awful and I can't see any way it can be described as other than a bug. 
That it displayed the wrong buffer name in the mode line is a bug. That 
Save File, at least in this case, doesn't prompt with the buffer name it 
is planning to save is a misfeature.

Also, while I am thinking about it... List Buffers should, in the menu it gives 
you when you right-click a mouse-sensitive buffername, allow Write in addition
to Kill, Save, or Select. Other options like Set-Not-Modified might also be
flavorful, but Write is one that I've really often missed and heard others
remark about missing, too.

-kmp

Date: 13 April 1982 01:48-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  gensym vs. default cons area
To: BSG at SCRC-TENEX
cc: bug-lispm at SCRC-TENEX

I wouldn't mind having an advertized switch to turn OFF the compilers
(ab)use of this explicitly-reclaimed consing-area bullspit. The kind
of errors I've gotten from it blow me away completely, and make a
mockery of the lispmachines error-checking primitives and debugging
capability.  Every once in a while I think about how much more testing
the garbage collector would get by lispmachine system-hackers if this
hack were punted, as the compiler is the closest thing on the
lispmachine to a normal symbolic manipulation lisp program.
But then again, maybe I'm just a sentimental believer in that old
egalitarian theorem that reads, "people who sell or advertise a product
should be forced to use it along with everybody else."

-gjc

Date: Monday, 12 April 1982, 23:09-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: LISPM and dspg (unix)
To: Web Dove <DOVE at MIT-DSPG>
Cc: BUG-LISPM at MIT-EECS, RLL at SCRC-TENEX, JEK at SCRC-TENEX
In-reply-to: The message of 1 Apr 82 11:13-EST from Web Dove <DOVE at MIT-DSPG>

    Date: Thursday, 1 April 1982, 11:13-EST
    From: Web Dove <DOVE at MIT-DSPG>
    I was trying to write a file to dspg (unix site) and after the file seems to have been
    completed I got the following error:
    ERROR: 11 is not a meaningful refname in USER
    Could this be due to a transaction failure with the unix FILE server?
This is due to their running an old version of the FILE server.  The format
of the CLOSE response has changed, so it gets parsed wrong by the LISPM end.
The LISPM's change could have been made so that old servers would work, but
wasn't.  I used to have a file that made the LISPM compatible with old and
new, but I flushed it since I though all machines were running the new file
server.  If you know the people who run dspg, you should have them get a new
copy of the file server.

Date: Monday, 12 April 1982, 22:08-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: GC not working on LM4
To: DULCEY at MIT-AI
Cc: BUG-LISPM at SCRC-TENEX, RWK at SCRC-TENEX

    Date: Monday, 12 April 1982, 21:49-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>

	Date: 7 April 1982 20:40-EST
	From: Mark J. Dulcey <DULCEY at MIT-AI>
	This machine has a broken garbage collector installed!

    You just don't have enough address space on that machine.  It only has a T80
    disk drive, and two LOD bands, which leaves 26500 pages for your virtual memory.
    This just isn't enough to do a GC in.  I think T80's should be run with a single
    LOD band; that might be enough to run the garbage-collector in; I'm not sure.
    In any event, you'll not run out of space as quickly.

This will most likely be fixed in system 206.

Date: Monday, 12 April 1982, 21:49-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: GC not working on LM4
To: Mark J. Dulcey <DULCEY at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 7 Apr 82 20:40-EST from Mark J. Dulcey <DULCEY at MIT-AI>

    Date: 7 April 1982 20:40-EST
    From: Mark J. Dulcey <DULCEY at MIT-AI>
    This machine has a broken garbage collector installed!  It succeeds in
    flipping once; but after that, your address space simply keeps filling
    up until it's all gone.  (The message printed at the flip is also
    different.  It prints out numbers for static and dynamic space, rather
    than "Allowing N more conses until flip" like the others do.)

    I haven't seen this problem on the other machines, so it seems to exist
    on this one only.
You just don't have enough address space on that machine.  It only has a T80
disk drive, and two LOD bands, which leaves 26500 pages for your virtual memory.
This just isn't enough to do a GC in.  I think T80's should be run with a single
LOD band; that might be enough to run the garbage-collector in; I'm not sure.
In any event, you'll not run out of space as quickly.

Date: 12 April 1982 16:49-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: INFO-LISPM at MIT-AI

System 83 belongs to MIT, like previous versions of the Lisp
machine system.  People should not be misled by ZVONA's reference
to it as an "LMI/MIT" system; it is an MIT system.
(I wouldn't have worked, and so hard, on something that would
belong to LMI!)

Date: Monday, 12 April 1982, 16:13-EST
From: Bernard S Greenberg <BSG at SCRC-TENEX>
Subject: gensym vs. default cons area
To: bug-lispm at SCRC-TENEX

I have begun to realize what a total crock it is that every time I need
to create a gensym used by a macro-writing-macro, i must bind default-cons-area
to working-storage-area around the call to gensym, for the gensym cannot be
fasdumped otherwise.

There should be another kind of gensym function, an optional argument to gensym, or
something.  This lambda binding is a pain in the ass at best and highly nonmodular
at worst.

Date: 12 April 1982 14:03-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject:  Syntax of "."
To: KMP at MIT-AI
cc: BUG-LISPM at MIT-AI

Well, every time I have sat down to try to figure out how to have other kinds
of dots work, I become entangled in hairy cases like the "2.3." one you mention.
I can't really say if there is an elegant way out here.  Certainly if there is
one, it is hard to discover.  I will have another pass at thinking about it and
let you know.

Date: 12 Apr 1982 1512-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: SHAWN at MIT-AI, bug-lispm at MIT-AI
cc: DLA at SCRC-TENEX
In-Reply-To: Your message of 12-Apr-82 1204-EST

chaos:shout doesn't exist anymore.  chaos:notify-all-lms is what you want.
-------

Date: 12 April 1982 12:15-EST
From: John Batali <BATALI at MIT-AI>
Subject: Cadr2's pathnames
To: BUG-LISPM at MIT-AI

In System 79.35, ZMail 40.7, LMFILE-Remote 5.3, DAEDALUS 31.7,
Experimental Remote-File 3.0, Experimental Local-File 35.1,
microcode 849, Whole Schip, on Lisp Machine Two:

Forget my report. 
Some cretin changed the default load band for this machine
to one which did not have a local file system.
Grumble.

     --John

Date: 12 April 1982 11:40-EST
From: David Chapman <zvona at MIT-AI>
Sender: DANNY at MIT-AI
To: INFO-LISPM at MIT-AI

It should be noted that files compiled in LMI/MIT system 83
will not necessarily load into system 79.

In order to postpone the necessity of chosing between 83 and
204, I and others intend to keep 79 alive as long as possible
by introducing patches from the new systems.

Date: 12 April 1982 11:02-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
Subject: Re: Irrecoverable error from obscure-widget: AI is down       (I complain too much)
To: RWK at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: 11 Apr 1982 2012-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    In-Reply-To: Your message of 11-Apr-82 1514-EST

    Login in does a number of things which require some information from the
    host:

Another related screw is that doing a c-x c-f in zwei when your
(fs:default-host) (or whatever) is down causes an error even if you
wanted to get a file from some other host.
Note that I have complained about this before with no luck.

--Gregor--

Date: Monday, 12 April 1982, 10:13-EST
From: Shawn F. McKay <SHAWN at MIT-AI>
To: bug-lispm at MIT-AI



Why doesnt the chaos:shout function work on cadr-10?

	-shawn

Date: 12 April 1982 10:07-EST
From: John Batali <BATALI at MIT-AI>
Subject: Local pathnames on Cadr2
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 4.0, Experimental DAEDALUS 3.2, microcode 849, on Lisp Machine Two:

Somehow cadr2 managed to forget that it can talk to its local files.
This seems to have happened sometime Sunday evening, after GJS opened a
local file, and before he closed and tried to look at it.  After digesting
his calm, rational description of the situation, I tried:

(push si:local-host fs:*pathname-host-list*)

but then got the following behaviour:

(probef "lm:batali;dribble.txt#>")
>>ERROR: The argument FLAVOR-NAME was FS:LM-PATHNAME, which is not the name of a flavor
While in the function INSTANTIATE-FLAVOR  FS:MAKE-PATHNAME-INSTANCE  FS:MAKE-PATHNAME-INTERNAL-1

INSTANTIATE-FLAVOR:
Arg 0 (FLAVOR-NAME): FS:LM-PATHNAME
Arg 1 (INIT-PLIST): #<DTP-LOCATIVE 24440315>
Arg 2 (SEND-INIT-MESSAGE-P): T
Arg 3 (RETURN-UNHANDLED-KEYWORDS-P): NIL
Arg 4 (AREA-TO-CONS-INSTANCE-IN): 45.

Date: 12 April 1982 07:08-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: INFO-LISPM at MIT-AI

MIT System 83 is ready for people to try out.
It has no known new bugs, but has not received heavy use.
You can copy the band 83.5 Try me from CADR-7,
together with microcode 104.

See LMDOC;SYSTEM MSG for information on new features.

Date: 12 April 1982 06:14-EST
From: Kent M. Pitman <kmp at MIT-MC>
To: BUG-LISPM at MIT-MC

Why is TOP-BOX-LABEL-MIXIN built into menus at such a low level? It means
nearly all the stuff that's built on top of it has it mixed in and if you
want a different kind of label, you have to recreate all that stuff again.
TOP-BOX-LABEL-MIXIN is not one of those things you can get rid of by just
mixing in something like LABEL-MIXIN or TOP-LABEL-MIXIN to cover it... maybe
if there were a mixin that killed the effects of TOP-BOX-LABEL-MIXIN, it
wouldn't bother me so much. 

The basic gripe is that vanilla menus look fine with TOP-BOX-LABEL-MIXIN,
but command menus that span the width of the screen look silly with it if
the label for the menu is very small. If there was something that centered
the thing in the top box, that'd look ok. But I find it looks a lot nicer
to have the label in the bottom left with no box (ie, normal label style)
in the case where the label is going to be small... Also, TOP-BOX-LABEL-MIXIN
draws the box in an ugly orientation when the label is '(:BOTTOM ...)
If it would check to make sure that the label was going to really be at the 
top before drawing the box at all, that'd probably almost be adequate for
my purposes.

-kmp


kmp@MIT-MC 04/12/82 06:06:41
To: (BUG LISPM) at MIT-AI
In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 12.0, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

I would like to see DIRED query with YES-OR-NO-P about exiting instead
of just Y-OR-N-P. I know that's hard because of the multiple kinds of
responses, but maybe it can peek for the Y and then call YES-OR-NO-P
or something. It's just too easy to hit Y by mistake and I prefer lots 
of chance to doublecheck before I go off doing something major like deleting
twenty files. If ever there was a use for YES-OR-NO-P, it would seem to
me that this was it...


Date: 12 April 1982 01:17-EST
From: Kent M. Pitman <KMP at MIT-AI>
Subject: Syntax
To: ALAN at MIT-AI
cc: BUG-LISPM at MIT-AI

I have an application where it would be nice to have dot be a break
character in all cases except potential numbers or consing dots. Eg,
 A.
would cause a break at the dot.
 7.
would have the dot be sticky to the 7.
 (a . b)
would still see dot being a consing dot.
 2.2.
i guess, would have to break at the second dot (ugh) ...

But the application is this: I want to write a sentence reader
which intermittently calls lisp read. Eg, I want to say:

 Define a program FOO.

The case is so rare that the person meant a program named "FOO."
(see how I have to quote it here?) and meant to continue on in the
sentence, that I want to terminate the read at the dot. I don't
mind him -- for this application -- having to type FOO/. in the
few cases where he wants lisp read to keep going. 

The problem is that all the ways I can see to set dot's syntax
will break the number reader and the consing dot reader. Is there
any chance of getting an elegant way out here? I'll believe you if
you say no, but I figured it was worth asking. It is a lot nicer 
looking to type "Define a program FOO." than "Define a program FOO ."

-kmp

Date: Monday, 12 April 1982, 00:19-EST
From:  <Moon at SCRC-POINTER>
To: BUG-LISPM at SCRC-TENEX

In System 204.62, ZMail 42.11, LMFS 24.8, Tape 8.5, Canon 12.3,
Symbolics 10.1, microcode 865, on Beagle:

MAKE-SYSTEM bug:  When compiling a system for the first time, it gets
file DEFS.QFASL does not exist in FILE-NEWER-THAN-INSTALLED-P.  This
was on a file that needed to be loaded in order to compile another file.

Date: Monday, 12 April 1982, 00:13-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: Zvona at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: Sunday, 11 April 1982, 17:03-EST
    From: David Chapman <Zvona at MIT-AI>

    Could fquery take a :stream option?  This seems less gross than
    binding query-io around it.

Fixed in the source.  Of course, you still may want to bind query-io to
avoid consing.  [ie, (fquery `(stream ,tv:initial-lisp-listener ...) ...)]

Date: 11 April 1982 21:02-EST
From: Philip E. Agre <AGRE at MIT-AI>
Subject: Re: Irrecoverable error from obscure-widget: AI is down
To: RWK at SCRC-TENEX, AGRE at MIT-MC, BUG-LISPM at MIT-MC

    Date: 11 Apr 1982 2012-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: Re: Irrecoverable error from obscure-widget: AI is down
    To: AGRE at MIT-MC, BUG-LISPM at MIT-MC
    cc: RWK at SCRC-TENEX
    In-Reply-To: Your message of 11-Apr-82 1514-EST

    Login in does a number of things which require some information from the
    host:

    1)  Finding out your home directory.
    2)  Finding out your personal name.
    3)  Establishing your file server as being logged in (important on systems that
	require a password).
    4)  Loading your init file.

    1) can be defered until needed, which is likely to be supprisingly soon.
    2) may be obtained from more than one place
    3) is needed for the rest and any further file accesses
    4) you may be willing to live without.

    If you dispense with #4, you can postpone #'s 1&3 until you're ready to
    manipulate files on that system.  They properly belong to the operation of
    "Establishing a file connection".  2&4 relate to establishing your identity
    and are independent of what file-system you use, except that the information
    may not be on all hosts.  They do not want to be postponed, but #4 may want
    to be punted if 1&3 are not possible to any host that has your init.

    The hostname given for login may be needed for ALL FOUR; your personal name may
    be needed only at EE, for example.

    There needs to be a (FILE-CONNECT <host>) which does #'s 1&3.  I was going to
    do this a while back but it slipped my queue.  Suggestions for a better name
    are welcome.

It seems like the host object should do this stuff automatically when you try to
interact with a file server through it and the stuff hasn't been done.  But maybe
I miss the point.

    Otherwise, I think LOGIN needs to do what it does by default.  Presumably you
    knew AI was down since that's the presumable reason you didn't try to load in
    your init file.  Loging into another machine is one approach, but not right.

Well, all that's left is #2, and all ITS systems know this if one does!  It seems
to me that it is a perfectly reasonable response for login to do 1-2-3 and 4 unless
you suppress it if your host is up, have file openings check for 1 and 3 to make
sure they've been done, have login check multiple machines if it knows that others
probably have the information for 2 (and even 1 in some cases).  If it can't find
any particular piece of information, it should print out, "I'm sorry but I was
unable to convince any host to give me your personal name.  But don't worry; the
only bad thing that will happen to you is that your personal name won't appear on
any finger displays." or maybe something shorter.  Similar messages could be printed
for 1 and 3 if there's any lossage at all associated with not being able to get
them.  (There is slight lossage with 1 in that if you do, for example, C-X C-F in 
Zwei it will give you some random default directory instead of your real one.)

    As for sending mail, I believe ZMAIL will try multiple hosts if you're using
    the CHAOS mail-sending protocol.  If not, I'll do something about that.

It occurs to me that I didn't have definitive proof that it doesn't do this (I thought
I did at the time), though I'm still pretty sure.  I know that it'll blow up rather
than just complaining bitterly if you try to write out your mail file with the host down.

    As to what you should do instead, I don't really know.  What I do is
    (LOGIN 'RWK 'LOCAL); this, of course, does not make ZMAIL happy when the
    host finally does come up.  Anything I can think of is far more complicated
    than I think loging in has any right to be, unless LOGIN really does apologize,
    return, and set up a process to try again later.  And that will have to wait for
    the new error system.

I really don't see why this needs the new error system.  You just have code that says:
 (if (host-conscious-p my-host)
     (get-assorted-goodies my-host)  ; this'll blow up once in a blue moon, but ok
     (let ((other-host (some-other-host-will-do my-host)))
       (if other-host
           (progn (get-a-couple-of-goodies other-host)   ; ditto
                  (print-apology-for-my-host-not-up my-host)
                  (set-up-process-to-try-the-other-goodies-again-later my-host))
           (print-apology-for-no-hosts-being-up)
           (set-up-process-to-try-all-the-goodies-again-later my-host))))
Like I said, there's a difference between avoiding lossage a priori and
recovering from it a posteriori; the former seems easy and the latter clearly
requires the new error system.  The code I typed will blow up when the host goes
down while the goodies are still being gotten (is THIS the reason why it needs
the new error system?), but I think that that's a pretty small %age of the total
number, and you can fix those with the new error system.  If you should argue
"why fix it mostly now when you can fix it all later" I would reply (somewhat
limply I guess) that doing it with the error system has to be so complicated
that it's not likely to happen for a long time, and this is a major annoyance
easily avoided now.

I could easily be wrong though.

Date: 11 Apr 1982 2012-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Re: Irrecoverable error from obscure-widget: AI is down       (I complain too much)
To: AGRE at MIT-MC, BUG-LISPM at MIT-MC
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 11-Apr-82 1514-EST

Login in does a number of things which require some information from the
host:

1)  Finding out your home directory.
2)  Finding out your personal name.
3)  Establishing your file server as being logged in (important on systems that
    require a password).
4)  Loading your init file.


1) can be defered until needed, which is likely to be supprisingly soon.
2) may be obtained from more than one place
3) is needed for the rest and any further file accesses
4) you may be willing to live without.

If you dispense with #4, you can postpone #'s 1&3 until you're ready to
manipulate files on that system.  They properly belong to the operation of
"Establishing a file connection".  2&4 relate to establishing your identity
and are independent of what file-system you use, except that the information
may not be on all hosts.  They do not want to be postponed, but #4 may want
to be punted if 1&3 are not possible to any host that has your init.

The hostname given for login may be needed for ALL FOUR; your personal name may
be needed only at EE, for example.

There needs to be a (FILE-CONNECT <host>) which does #'s 1&3.  I was going to
do this a while back but it slipped my queue.  Suggestions for a better name
are welcome.

Otherwise, I think LOGIN needs to do what it does by default.  Presumably you
knew AI was down since that's the presumable reason you didn't try to load in
your init file.  Loging into another machine is one approach, but not right.

As for sending mail, I believe ZMAIL will try multiple hosts if you're using
the CHAOS mail-sending protocol.  If not, I'll do something about that.

As to what you should do instead, I don't really know.  What I do is
(LOGIN 'RWK 'LOCAL); this, of course, does not make ZMAIL happy when the
host finally does come up.  Anything I can think of is far more complicated
than I think loging in has any right to be, unless LOGIN really does apologize,
return, and set up a process to try again later.  And that will have to wait for
the new error system.
-------

Date: 11 Apr 1982 2012-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Re: Irrecoverable error from obscure-widget: AI is down       (I complain too much)
To: AGRE at MIT-MC, BUG-LISPM at MIT-MC
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 11-Apr-82 1514-EST

Login in does a number of things which require some information from the
host:

1)  Finding out your home directory.
2)  Finding out your personal name.
3)  Establishing your file server as being logged in (important on systems that
    require a password).
4)  Loading your init file.


1) can be defered until needed, which is likely to be supprisingly soon.
2) may be obtained from more than one place
3) is needed for the rest and any further file accesses
4) you may be willing to live without.

If you dispense with #4, you can postpone #'s 1&3 until you're ready to
manipulate files on that system.  They properly belong to the operation of
"Establishing a file connection".  2&4 relate to establishing your identity
and are independent of what file-system you use, except that the information
may not be on all hosts.  They do not want to be postponed, but #4 may want
to be punted if 1&3 are not possible to any host that has your init.

The hostname given for login may be needed for ALL FOUR; your personal name may
be needed only at EE, for example.

There needs to be a (FILE-CONNECT <host>) which does #'s 1&3.  I was going to
do this a while back but it slipped my queue.  Suggestions for a better name
are welcome.

Otherwise, I think LOGIN needs to do what it does by default.  Presumably you
knew AI was down since that's the presumable reason you didn't try to load in
your init file.  Loging into another machine is one approach, but not right.

As for sending mail, I believe ZMAIL will try multiple hosts if you're using
the CHAOS mail-sending protocol.  If not, I'll do something about that.

As to what you should do instead, I don't really know.  What I do is
(LOGIN 'RWK 'LOCAL); this, of course, does not make ZMAIL happy when the
host finally does come up.  Anything I can think of is far more complicated
than I think loging in has any right to be, unless LOGIN really does apologize,
return, and set up a process to try again later.  And that will have to wait for
the new error system.
-------

Date: Sunday, 11 April 1982, 20:10-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Irrecoverable error...
To: AGRE at MIT-MC, BUG-LISPM at MIT-MC

While this COULD be fixed with a lot of special checks, I think that
we'd rather fix it using the new error system, since it is more
convenient and more consistent that way.  I realize that this poor
new error system is taking longer than we had thought, but I'm not
ready to give up hope yet and start kludging around it.


Date: Sunday, 11 April 1982, 17:03-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Tester 22.2, microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

Could fquery take a :stream option?  This seems less gross than
binding query-io around it.

Date: 11 April 1982 16:37-EST
From: Glenn S. Burke <GSB at MIT-ML>
Subject: assq compatibility with Maclisp
To: JCMA at MIT-AI, BUG-lisp at MIT-MC
cc: BUG-LISPM at MIT-AI

    Date: Saturday, 10 April 1982, 06:04-EST
    From: JCMA@MIT-AI
    Why do assq and assoc have to be incompatible with maclisp?  That is,
    why aren't assoc-careful and assq-careful the defaults?
----
It happens that Maclisp does not actually do assq-carefully, at least
not deliberately.  It simply fails to check, and so can be fooled.
---- [transition to bug-lisp report] ----
uh oh...  Even though i "knew" what maclisp was doing, i figured that
i would test it to see.  The little cretin does assq-carefully in
(*RSET T) mode, and doesn't in (*RSET NIL) mode.  What this means is
that the following happens in (*rset nil)
  (assq nil '(0)) => 0
and in (*rset t) it yields NIL.  The reason for this is that the CAR of
the fixnum 0 gives NIL.  Similarly one can create other fixnums (and flonums)
which will fool assq for any other object.
So much for features.  This sounds like a totally useless, misleading,
and inconsistent Maclisp feature.  It is a waste of the address space
which someone has been trying hard to conserve.  If it is going to check,
it should bitch, it shouldn't conditionally do the wrong thing.


Date: 11 Apr 1982 1525-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Structuring Terminal-H
To: AGRE at MIT-AI, BUG-LISPM at MIT-AI
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 11-Apr-82 1422-EST

That is a fine idea.  Unfortunately, that information is not in the host
table, AND CANNOT BE ADDED.  The problem is that the host table is shared
among very many different operating systems at very many sites.

What is needed is a better, more extensible host table format.  Now that
the Internet proposal is being developed, we may be able to get what we
want and be compatible as well, so I'm holding off on recommending a way
to solve this (and a myriad of other related problems) until I get a chance
to peruse the latest proposal.  Hopefully if the proposal isn't up to our
needs we can comment and persuade and get it changed to meet our needs.

This really isn't just a LISP Machine problem.
-------

Date: 11 April 1982 15:09-EST
From: Philip E. Agre <AGRE at MIT-MC>
Subject: Irrecoverable error from obscure-widget: AI is down       (I complain too much)
To: BUG-LISPM at MIT-MC

Much of the Lisp Machine software has the annoying habit of asking the host
machine for data or services for the most trivial thing and then blowing up in
your face in the most obnoxious, confusing, and irrecoverable manner when the
host machine isn't up or is spazzing.  For example, your machine's host is AI
and you want to log in to a Lispm to do something trivial so you do (LOGIN 'AGRE
T) to suppress loading of your init file and it blows up anyway [you don't do
(LOGIN 'AGRE 'MC) because you don't want it to take the time go out to mc and
not find an init file for you and you don't do (LOGIN 'AGRE 'MC NIL) because
it's too much trouble or because MC is down too and besides for that matter
maybe you didn't know AI was down in the first place].  Why I don't know, but my
guess is that it is looking for a default directory for file transactions you
weren't even going to make.  For another example, take sending mail.  If your
host is down (AI say) it'll try to write to AI:.MAIL.;MAIL > and blow up even
though MC:.MAIL.;MAIL > would have done just as well.  It seems to me that there
should be code in lots of programs saying "let's check that the relevant host is
up before trying this".  If AI isn't up, it could give a warning, like "warning,
AI isn't up so I can't establish a default directory for you".  In other cases,
it could just cdr down a list of hosts that would serve the same purpose,
beginning with your default host, until it found one, apologizing in English and
not EH-ese if it can't find one.

So far as I can tell, avoiding trying to perform an operation on a host is a
different matter from recovering in some smart way when such an operation fails.
The latter no doubt must await the new error system (which I would understand;
it's hard to do with sufficient generality), but the former just has to do with
calling a host-conscious-p function at various places in existing code.  So far
as I can tell, this would be easy to do (per place in the existing code) with
the present system.          - phiL

Date: 11 April 1982 10:10-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Eight:

Since there are 10**6 Chaosnet host table entries these days, it's a pain
to find what you're looking for in the Terminal-H display.  So maybe
Terminal-H should take an argument, e.g.,
  0 = everything
  1 = file servers (AI, MC, ML, File Computer, etc.)  [major hosts?]
  2 = MIT Lisp Machines (Lisp Machine nn)
  3 = sites at SCRC (various canines)
  4 = 1 + Physics-type things
  5 = 1 + EE-Dept-type things
  6 = ??
or whatever.  The default host table display itself should be ordered in 
a more useful way, e.g., alphabetically or by category, perhaps with 
site-number ordering an option.

Date: Saturday, 10 April 1982  22:59-EST
From: HIC at SCRC-TENEX
To:   Philip E. Agre <AGRE at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: Saturday, 10 April 1982  05:37-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    In System 79.35, ZMail 40.7, LMFILE-Remote 5.3,
    Experimental Remote-File 3.0, Experimental Local-File 35.1,
    microcode 849, CStacy spacial, on Lisp Machine Six:

    Re: The "Let it happen" option for the "Deexposed typeout action" window attribute.

    Typeout with a window with said option selected causes the machine to feep.
    This is a bug since it is just as annoying as the "Notify user" option and 
    less informative as well.  Typeout on "Let it happen"-option windows should
    cause no more discernable effect than perhaps a flicker of the run light.

    (To produce this effect, get a Supdup window, log into AI, Click-Right,
    Click-Left on "Attributes", Click-Left on "Let it happen" under "deexposed
    typeout option", Click-Left in the "Done" box, get into some other window,
    and wait a minute for COMSAT to complain about disk space.)

Fixed in the 204 source.  I can patch it if you are using 204.

BTW, it wasn't typeout that was beeping, but beeping that was beeping.
Typeout happens just fine without beeping.  I haven't fixed the problem
in a systemic manner, so that other windows which beep while deexposed
will continue to beep.  I'm not sure what the right thing to do is.

Date: 10 April 1982 20:28-EST
From: Glenn S. Burke <GSB at MIT-ML>
Subject: error in the error handler being confusing
To: BUG-LISPM at MIT-AI

I've always found it nice to be reminded of what i have stacked up in
various environments (multics, NIL, my own maclisp hacks);  i think
some nesting indication in the prompt is a good idea.  Having the
error printout tell you that it is stacking or not (or whatever other
kind of information seems reasonable), at the very first, sounds like
a good idea too so you don't have to wait for the prompt to see.  But
i don't think this should obviate hacking the prompt.


Date: 10 April 1982 18:06-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
Subject: error in the error handler being confusing
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI


    Date: Thursday, 8 April 1982  12:12-EST
    From: MOON at SCRC-TENEX

    Wouldn't it be better for the error message to say "This was an error while in
    the error handler, type Abort to return to your previous error" rather than
    crapping up the prompt?  Or do you really want to be continuously reminded
    that you are in an error in the error handler each time you hit a key?
    (Anything that reprinted the error message, e.g. c-L or Aborting from a further
    recursive error, would reprint the "This was ..." also.)

Since the effect on the prompt is small, I guess I would like both.

Date: Saturday, 10 April 1982, 06:04-EST
From: JCMA@MIT-AI
To: BUG-LISPM@MIT-AI

In System 79.38, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:

Why do assq and assoc have to be incompatible with maclisp?  That is,
why aren't assoc-careful and assq-careful the defaults?

Date: 10 April 1982 05:37-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.35, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 3.0, Experimental Local-File 35.1,
microcode 849, CStacy spacial, on Lisp Machine Six:

Re: The "Let it happen" option for the "Deexposed typeout action" window attribute.

Typeout with a window with said option selected causes the machine to feep.
This is a bug since it is just as annoying as the "Notify user" option and 
less informative as well.  Typeout on "Let it happen"-option windows should
cause no more discernable effect than perhaps a flicker of the run light.

(To produce this effect, get a Supdup window, log into AI, Click-Right,
Click-Left on "Attributes", Click-Left on "Let it happen" under "deexposed
typeout option", Click-Left in the "Done" box, get into some other window,
and wait a minute for COMSAT to complain about disk space.)

Date: 9 APR 1982 2112-PST
From: GOSPER at PARC-MAXC
Subject: UNION
To:   BUG-LISPM at MIT-AI

In ETHER 26.13, System 79.40, microcode 854, on Unknown:

(union (setq foo '(a)) '(b)) smashes foo to (A B).
-------

Date: Friday, 9 April 1982  23:55-EST
From: HIC at SCRC-TENEX
To:   Gregor J. Kiczales <Gregor at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: Friday, 9 April 1982  12:38-EST
    From: Gregor J. Kiczales <Gregor at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.5hz, on Lisp Machine Twenty:

    The inspector loses on instances which take up more than one
    line when they do a :print-self. Is this a general rule that I
    don't know about, or is the inspector in need of repair? 

    --Gregor

This is probably a general rule you don't know about.

Date: 9 April 1982 18:25-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: moon at SCRC-TENEX
cc: BUG-LISPM at MIT-MC, zvona at MIT-AI

Since Various Quantities came up in Lunar, maybe Hyper-Space
woudl be a good key to put it on... Seriously, maybe Super-Q
or Hyper-Q would be a good place. I have a personal theory
in my environment that says the destructive power of a command
should not grow faster than the number of bucky bits.
Normal chars should never do worse than self-insert, 
Control chars should tend to edit on the character level, etc.
(eg, I disable c-W in my environ because it's too dangerous
to be in the set of things I want to think about when I type
c-anything). I'm not saying this is the only possible view of
the world, but I think it's a nice measuring stick for deciding
where to put things...


Date: 9 April 1982 18:23-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Ass recursion on my part.
To: dlw at SCRC-TENEX
cc: BUG-LISPM at MIT-MC, AGRE at MIT-AI

Sorry about that, how about if I make it up by giving a serious suggestion.
I observed when RLB and I were working out tail-recursion for NIL that
it was fairly easy to recognize tail-recursion in the compiler, but not
so easy to tell what to do about it in general when recognized, except
if the machine had a special instruction, call it "TAIL-RECURSIVE-FUNCALL."
For a stack-machine like the lispm or vax this can be a fairly hairy thing,
and the presence of special-bindings, unwind-protects, and in a lexicaly scoped
language, downward funargs, can make it even hairier, but it is easy to
spot these things in a prepass so you can know when to not even try to
do tail-recursion. In the usual case though this tail-recursive call
would do moderately hairy frobulation on the stack, and then jump to the routine
being called. 

I've seen your compiler for the "L" machine, and it is certainly clean enough
so that adding tail-recursion recognition for the non-hairy case is easy.
The suggestion (ah, finally): Generate the tail-recursive-call "instruction,"
always when you can, but make it a RUNTIME decision on a PER-FUNCTION basis,
whether or not this "instruction" will frob the stack and jump, or just make the
usual non-optimized call. It seems a cheap enough thing to store a bit
in the "function" someplace telling what to do in this important (in some
programming styles) case optimization.

Face it, debugging a loop in a program that has SETQ's can be a real bitch
too. Wouldn't it be great if you could write such a thing using recursion,
debug it without optimization, and then turn on the optimization without
even recompiling? I think it too controversial a thing to make the user
decide at "machine-buy" time, "code-writing" time, or even "compile-time."
Best to punt it to RUNTIME. How about yet another thing "fixed in the L machine?"


-gjc


Date: Friday, 9 April 1982  17:08-EST
From: MOON at SCRC-TENEX
To:   kmp at mc, zvona at ai
Cc:   bug-lispm at SCRC-TENEX
Subject: COM-VARIOUS-QUANTITIES

The "mode" feature of various quantities was an experiment that didn't work
out and should be flushed (at least in my opinion).  Although it did seem
to work out better in Rmode than it does in Emacs.  The cretinism with
documentation coming out in the echo area should be fixed.  I will fix both
of these in the source.

I cannot reproduce Zvona's complaint of slowness.

I could tolerate moving the quantities command to another key, and probably
the other people who use it could, too.  However it is difficult to think
of a key to put it on that wouldn't be worse.  Certainly it cannot go on a
m-x command.

Date: Friday, 9 April 1982, 15:28-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: BUG-LISPM at MIT-AI

One thing that might help resolve some problems would be a local
declaration that says "compile tail-recursive calls as jumps within this
scope".  That's somewhat better than having a "mode" for the compiler;
that is, you change the mode by editing the code instead of running the
compiler in a funny way.

Date: Friday, 9 April 1982, 11:42-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 9 April 1982 08:41-EST
    From: George J. Carrette <GJC at MIT-MC>
    I think the system-provided substitute for tail-recursion is "LOOP."

Right.  We were planning on making recursion obsolete in System 206, but
seeing as some people still use it, I suppose we can leave it around for
a while.  It will go away when we make the switch to Common Lisp, however.

Date: Friday, 9 April 1982, 11:43-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: COM-VARIOUS-QUANTITIES
To: kmp at MIT-MC
Cc: bug-lispm at SCRC-TENEX

The mode-entering part of the hairy Control-Q is, indeed, hardly ever
used, and is a bad thing to get into by accident.  Maybe it should ask
for yes-or-no confirmation, or maybe the command to enter a mode should
be moved to a Meta-X command.

However, I wouldn't want to lose the basic functionality of C-Q.  The
ability to get an arbitrary operation upon an arbitrary data type is
useful; occasionally you want to "Twiddle Paragraphs" or something, and
it would be silly to put this on its own key.  I think that making every
pair of operation-type its own Meta-X command would clutter up the
command-completion space.

Date: 9 April 1982 13:38-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: dlw at SCRC-TENEX
cc: AGRE at MIT-AI, BUG-LISPM at MIT-AI

Yes, I shouldn't have flamed.  But you do understand that the
provocation was unbearably intense.  My response went to bug-lispm only
because of Zmail's Reply default, which I can't get used to.  (Perhaps
there could be a keystroke that could get rid of the random extra To:'s
from the message buffer.)

I understand the stack history problem.  Perhaps the right way to do it
is to create the stack frame, and then flush it at the end of the loop
unless some global don't-flush-tail-recursive-stack-frames flag is set.
Or there could be a "debugging mode" switch on the compiler, although I
admit that that's not very flavorful.  Tracing is another problem.
Perhaps that same flag could not only suppress stack frame flushing but
also cutting out to an outside routine that knows about those things.

If you're really going to compile a real loop, then you get the standard
slew of block-compilation screws, of which inability to trace and
randomness-or-nothing on the stack are examples.  I can't see that
there's any clean way out; certainly I haven't heard of anyone else
solving the problem.

Date: Friday, 9 April 1982, 13:10-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: SOME of EVERYthing
To: AGRE at MIT-AI, ECC at MIT-AI
Cc: BUG-LISPM at SCRC-TENEX

I fixed the problem of creating spurious closures in
(EVERY FOO (CLOSURE ...)) type constructs.  While I was at it, I made
the iteration variable of the macroexpansion be a gensym, rather than
*L*.

Date: 9 April 1982 12:38-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

The inspector loses on instances which take up more than one
line when they do a :print-self. Is this a general rule that I
don't know about, or is the inspector in need of repair? 

--Gregor--

Date: Friday, 9 April 1982, 11:37-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: AGRE at MIT-AI, BUG-LISPM at MIT-AI

I do not belive that it has EVER been the opinion of any of the Lisp
Machine developers that LOOP was a "substitute" for tail-recursion.  I
hope you realize that your "FOO" was directed only at GJC.  George, I'd
appreciate if you would avoid angering users in the future.  Phil,
please try to keep calm and not send flaming mail (your second message,
that is).  The request to avoid flaming goes for everyone, of course...

I do not know why the compiler does not recognize tail-recursion.  It
never has made any attempt to, as far as I know.  It might just be that
it's hard (for reasons I'd rather not enumerate).  One problem with
tail-recursion is that you lose your stack history, which can make
debugging harder -- at least, it can make stack traces harder for people
to understand.  The advantage you point out is clear.  Maybe other
people know of other issues here.

The debugger's algorithm for growing the stack is clearly no good.  I
have discussed this with people before but never got around to doing
anything about it.  Clearly the time has come to fix it to deal with
stack overflows in a more useful fashion.

Date: 9 April 1982 08:53-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: AGRE at MIT-AI, GJC at MIT-MC
cc: BUG-LISPM at MIT-AI

    Date: 9 April 1982 08:41-EST
    From: George J. Carrette <GJC at MIT-MC>
    To: AGRE at MIT-AI
    cc: BUG-LISPM at MIT-AI

    I think the system-provided substitute for tail-recursion is "LOOP."

FFFFFFFFFF     OOOOOOOOOO      OOOOOOOOOO
FFFFFFFFFF     OOOOOOOOOO      OOOOOOOOOO
FF             OOO    OOO      OOO    OOO
FFFFFF         OOO    OOO      OOO    OOO
FFFFFF         OOO    OOO      OOO    OOO
FF             OOO    OOO      OOO    OOO
FF             OOO    OOO      OOO    OOO
FF             OOOOOOOOOO      OOOOOOOOOO
FF             OOOOOOOOOO      OOOOOOOOOO

This is Lisp, not goddam Fortrash!  You try to use LOOP to write a
non-deterministic evaluation, or EQUAL for that matter!

FFFFFFFFFF     OOOOOOOOOO      OOOOOOOOOO
FFFFFFFFFF     OOOOOOOOOO      OOOOOOOOOO
FF             OOO    OOO      OOO    OOO
FFFFFF         OOO    OOO      OOO    OOO
FFFFFF         OOO    OOO      OOO    OOO
FF             OOO    OOO      OOO    OOO
FF             OOO    OOO      OOO    OOO
FF             OOOOOOOOOO      OOOOOOOOOO
FF             OOOOOOOOOO      OOOOOOOOOO

Date: 9 April 1982 08:41-EST
From: George J. Carrette <GJC at MIT-MC>
To: AGRE at MIT-AI
cc: BUG-LISPM at MIT-AI

I think the system-provided substitute for tail-recursion is "LOOP."


Date: 9 April 1982 08:30-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.35, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 3.0, Experimental Local-File 35.1,
microcode 849, CStacy spacial, on Lisp Machine Six:

My program uses an obscure feature of the Lisp Machine called Recursion,
and something called the PDL keeps blowing out on relatively simple
programs.  The program can be made to work if I Resume out of 10 error
handler requests for more of the stuff (the Zwei Break PDL starts out
at about 5K somethings and my program requires 10K, but DOES run properly
in that much).  Three things:
  - The program is tail-recursive.  How come the compiler doesn't
    notice that!?  That seems pretty basic in a Lisp where 
    function invocation is a non-trivial process.
  - Is there some function to call to grow the PDL to manageable
    proportions.  (Yes, I know about EH:SG-GROW-PDL.  I just can't
    figure out how to use it before the PDL blows up.)
  - Is there some way that the EH could be made to give more than
    a teaspoonful of extra PDL space?  It has been my experience
    that a program that is using up gross amounts of PDL does so
    at such a great rate that even by growing the PDL by 50% it'll
    only take a few seconds to use it up again, whereas if a program
    really does need that PDL space you'll have to sit around all
    day long hitting Resume each time it finally gets around to
    needing that space.
If it helps, the function in question, simulate-blocks-world-extents
does a nondeterministic symbolic evaluation of a flowgraph.  It lives
in AI:AGRE;FCFLOW.        - phiL

kmp@MIT-MC 04/09/82 02:27:31 Re: COM-VARIOUS-QUANTITIES
To: (BUG LISPM) at MIT-AI
In ZWEI in System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 7.0, Dungeon 2.1, microcode 849,
60.45Hz, on Lisp Machine Twenty-two:

I knew it would attack me some day when I wasn't looking and it finally did.
The hairy control-Q should not be the default in Zwei. It does too much.
It's too easy to make a typo when you're typing fast and end up with
the completely wrong thing when you think all you're typing is self-inserting
chars... I just ended up in <Line> mode by accident
and rubouts started rubbing out whole lines and I managed to completely
garbage a region of my buffer trying to figure out what had happened and
undo it. There is no information typed out when you enter that mode as
to what the mode is. There is no obvious way to document the mode, because
it was not invoked with a M-X command and Help C C-Q does not prompt for
the  chars it dispatches on. The documentation Help C C-Q provides is really
sketchy. The documentation C-Q ? provides is half-lost due to echo area
wrap around. As it is, Control-Q is overloaded and may be great for the
hackers that grew up on mmLoad LibraryMoon;Lunar in their emacs inits,
but I don't think it's what's best for the default environment.


Date: Thursday, 8 April 1982, 15:41-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: EVERY and SOME
To: AGRE at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 8 April 1982 09:27-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, on Lisp Machine Six:

    I am a devoted fan of EVERY and SOME, but I am made to feel guilty by the
    compiler, which refuses to open-compile explicit LAMBDA-forms in the 
    functional argument position to these (and like) functions open.
    ...
    Why couldn't the compiler just take this and perform the transformation
    (FUNCALL (FUNCTION (LAMBDA (v1 ... vn) e1 ... en)) a1 ... an) => 
    ((LAMBDA (v1 ... vn) e1 ... en) a1 ... an), thus allowing the body of the 
    LAMBDA to compile open?  For that matter, one could transform 
    (FUNCALL (FUNCTION f) a1 ... an) => (f a1 ... an) and allow
    things like (FUNCALL #'FOO BAR QUUX) to compile as (FOO BAR QUUX).

The optimization you refer to has been around for some time, and your
example works in system 204.  (I'm not sure why it doesn't work in
system 79.)  You should be careful, however, in assuming the
optimization can always be made.  Consider the situation where FOO is a
special form.  FUNCALL always evaluates its arguments, where evaluating
(FOO BAR QUUX) might not.

Date:  8 Apr 1982 1400-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Re: error in the error handler being confusing
To: MOON at SCRC-TENEX, GREGOR at MIT-AI
cc: BUG-LISPM at MIT-AI, KBE at MIT-AI, RWK at SCRC-TENEX
In-Reply-To: Your message of 8-Apr-82 1304-EST

I really wouldn't mind a couple extra characters in my prompt for recursive
errors.  The screen is wide and I'm not working at 110 baud.  But I think
printing a message would be wise whether the prompt is changed or not.
-------

Date: Thursday, 8 April 1982  12:12-EST
From: MOON at SCRC-TENEX
To:   Gregor J. Kiczales <GREGOR at MIT-AI>
Cc:   BUG-LISPM at MIT-AI, KBE at MIT-AI
Subject: error in the error handler being confusing

Wouldn't it be better for the error message to say "This was an error while in
the error handler, type Abort to return to your previous error" rather than
crapping up the prompt?  Or do you really want to be continuously reminded
that you are in an error in the error handler each time you hit a key?
(Anything that reprinted the error message, e.g. c-L or Aborting from a further
recursive error, would reprint the "This was ..." also.)

Date: Thursday, 8 April 1982  11:57-EST
From: MOON at SCRC-TENEX
To:   Gregor J. Kiczales <Gregor at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject:sorting lists

    Date: 8 April 1982 08:11-EST
    From: Gregor J. Kiczales <Gregor at MIT-AI>

    ...
    This shouldn't say both "use copylist" and "sort the copy" since
    copylist produces a cdr-coded list and sorting it will be
    innefficient.
I don't know what makes you think that.  Actually sorting cdr-coded
lists is more efficient.

Date: Thursday, 8 April 1982, 11:45-EST
From: David Chapman <Zvona at MIT-AI>
To: bug-lispm at MIT-AI

Now that we have the philosophy of patch file names under
control, is someone interested in fixing the bug so I can get my
system built?

(That is an honest question.  I will fix it myself if no one is
interested, but it would probably take me six times longer than
someone who knows how it is supposed to work.)

Date: 8 April 1982 11:28-EST
From: Edward Barton <EB at MIT-AI>
Subject: SOME, EVERY
To: BUG-LISPM at MIT-AI

While we're on the subject of EVERY and SOME, Phil Agre's question causes
me to wonder whether my common practice of writing

	(every list (hairy-closure-making-function 13 43))

is causing more closures than I expected to be generated.  If EVERY and
SOME are changed, I would like for this case to only generate one closure.
(I don't know what it does now.)

Date: 8 April 1982 11:28-EST
From: Edward Barton <EB at MIT-AI>
Subject: SOME, EVERY
To: BUG-LISPM at MIT-AI

While we're on the subject of EVERY and SOME, Phil Agre's question causes
me to wonder whether my common practice of writing

	(every list (hairy-closure-making-function 13 43))

is causing more closures than I expected to be generated.  If EVERY and
SOME are changed, I would like for this case to only generate one closure.
(I don't know what it does now.)

Date: 8 April 1982 09:27-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Six:

I am a devoted fan of EVERY and SOME, but I am made to feel guilty by the
compiler, which refuses to open-compile explicit LAMBDA-forms in the 
functional argument position to these (and like) functions open.
Take for example (ignoring the fact that there are other ways to write it):

(defun find-subsuming-list (sublist lists)
  (car (some lists #'(lambda (list) (every sublist #'(lambda (elt) (memq elt list)))))))

There is no reason why this shouldn't compile as two nested loops.  Instead,
two "internal functions" are created and the compiler complains that list
hasn't been declared special.  Recursive macro expansion gives you this:

(CAR (DO ((SI:*L* LISTS (FUNCALL (QUOTE CDR) SI:*L*)))
	 ((NULL SI:*L*) NIL)
       (AND (FUNCALL (FUNCTION (LAMBDA (LIST)
				 (DO ((SI:*L* SUBLIST (FUNCALL (QUOTE CDR) SI:*L*)))
				     ((NULL SI:*L*) T)
				   (OR (FUNCALL (FUNCTION (LAMBDA (ELT)
							    (MEMQ ELT LIST)))
						(CAR SI:*L*))
				       (RETURN NIL)))))
		     (CAR SI:*L*))
	    (RETURN SI:*L*))))

Why couldn't the compiler just take this and perform the transformation
(FUNCALL (FUNCTION (LAMBDA (v1 ... vn) e1 ... en)) a1 ... an) => 
((LAMBDA (v1 ... vn) e1 ... en) a1 ... an), thus allowing the body of the 
LAMBDA to compile open?  For that matter, one could transform 
(FUNCALL (FUNCTION f) a1 ... an) => (f a1 ... an) and allow
things like (FUNCALL #'FOO BAR QUUX) to compile as (FOO BAR QUUX).  (Or
things like (FUNCALL 'CDR SI:*L*) to compile as (CDR SI:*L*).)  Perhaps
this latter is already done, but I can't think of any reason not to do
the former too.  (If the former is actually done, it's very well hidden and
it's a bug that it demands that various random things be declared special.)
There are other obvious substitutions that could be made.

       - phiL

Answers:

(CAR (DO ((SI:*L* LISTS (CDR SI:*L*)))
	 ((NULL SI:*L*) NIL)
       (AND ((LAMBDA (LIST)
	       (DO ((SI:*L* SUBLIST (CDR SI:*L*)))
		   ((NULL SI:*L*) T)
		 (OR ((LAMBDA (ELT)
			(MEMQ ELT LIST))	
		      (CAR SI:*L*))
		     (RETURN NIL))))
	     (CAR SI:*L*))
	    (RETURN SI:*L*))))


Date: 8 April 1982 08:11-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.40, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

A MINOR bug.

Blue manual, Page 80. Section on SORT.

"This will mess up the original list; if you need both the
original list and the the sorted list, you must copy the
original and sort the copy (see copylist, page 58)."

This shouldn't say both "use copylist" and "sort the copy" since
copylist produces a cdr-coded list and sorting it will be
innefficient... 

Date: 8 April 1982 07:03-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
To: KBE at MIT-AI
cc: BUG-LISPM at MIT-AI


    Date: 7 April 1982 17:03-EST
    From: Knowledge-Based Editor <KBE at MIT-AI>

    I wish that the LispM error handler would be more definitive about what level
    I was in. I keep c-Z'ing out of the wrong context and finding myself popped too
    far. Would it be so terrible to have it print out "Listening at level 6" or
    whatever it is that MDL does?

A simple way to do this (which I am sure everybody else thought of
too) is to use prompts that look like:

2->^Z

1->

etc.

Date: 8 April 1982 01:15-EST
From: Knowledge-Based Editor <KBE at MIT-AI>
To: BUG-LISPM at MIT-AI

In ZWEI in System 79.63, ZMail 40.22, Remote-File 2.8, LMFILE-Remote 5.9,
microcode 982, 42.37Hz, on Lisp Machine Forty-Six:

In Zwei, the command M-X Visit Other Window In Old Microcode seems to lose
for microcodes predating 953.

Date: 7 April 1982 20:40-EST
From: Mark J. Dulcey <DULCEY at MIT-AI>
To: BUG-GC at MIT-AI
cc: BUG-LISPM at MIT-AI, DULCEY at MIT-ML

In GC in System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Four:

This machine has a broken garbage collector installed!  It succeeds in
flipping once; but after that, your address space simply keeps filling
up until it's all gone.  (The message printed at the flip is also
different.  It prints out numbers for static and dynamic space, rather
than "Allowing N more conses until flip" like the others do.)

I haven't seen this problem on the other machines, so it seems to exist
on this one only.

Date: 7 April 1982 19:02-EST
From: Ken Haase <KWH at MIT-AI>
Subject:  Error handler level indication
To: BUG-LISPM at MIT-AI


This messes me up a lot too.   How about indicating things by the number of
type of prompt the error handler gives you;  maybe everytime you are down
a level in the error handler, and extra arrow is added onto the prompt you get...


Date: 7 April 1982 17:03-EST
From: Knowledge-Based Editor <KBE at MIT-AI>
To: BUG-LISPM at MIT-AI

I wish that the LispM error handler would be more definitive about what level
I was in. I keep c-Z'ing out of the wrong context and finding myself popped too
far. Would it be so terrible to have it print out "Listening at level 6" or
whatever it is that MDL does?

Date: Wednesday, 7 April 1982  16:48-EST
From: MOON at SCRC-TENEX
To:   Allan C. Wechsler <ACW at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX, NAHA at MIT-VAX
Subject: MULTIPLE-VALUE-LIST doesn't work as an argument

    Date: Tuesday, 6 April 1982, 19:09-EST
    From: Allan C. Wechsler <ACW at MIT-EECS>
    To: BUG-LISPM at EE
    Cc: NAHA at MIT-VAX

    In System 204.53, ZMail 42.10, microcode 865, 60Hz, on Lisp Machine Ten:

    (DEFUN TEST (A B) (VALUES A B))

    (DEFUN FROB ()
      (CRASH 104
    	 (MULTIPLE-VALUE-LIST (TEST 1 2))
    	 13))

    (DEFUN CRASH (&REST FOO)
      (FERROR NIL "YIKES!!!"))

    Compile these, then type "(FROB)".  When CRASH craps out, you will see
    that FOO is bound, not to (104 (1 2) 13), but to (104 (1 2) . 13).  Note
    that this is not a list, and hence is a highly unlikely value for an
    &REST argument to have.

    Much testing seems to indicate that when MULTIPLE-VALUE-LIST
    finishes munging the stack, the CDR-code of the resulting
    stack frame is wrongly set to NORMAL instead of NEXT.  This is
    only a conjecture, and should be checked by somebody more
    competent than we are.
I fixed this in the source.

Date: Wednesday, 7 April 1982  14:01-EST
From: MOON at SCRC-TENEX
To:   Gregor J. Kiczales <Gregor at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: your bitblt bug

    Date: 2 April 1982 09:26-EST
    From: Gregor J. Kiczales <Gregor at MIT-AI>
    To: BUG-LISPM at MIT-AI

Indeed with a zero width or height BITBLT does nothing, i.e. has no effect
on the array.  The problem is that if the original subscripts given in the
arguments are out of bounds, you get an array bounds error whether or not
BITBLT is actually going to access that array element.  Also as usual array
bounds errors on multi-dimensional arrays can't tell you the original
set of subscripts because they have already been lost by the time the error
is detected.

I looked into fixing this, but it is difficult because of the modularity
of the array microcode.  Is it important?

Date: Wednesday, 7 April 1982  13:21-EST
From: MOON at SCRC-TENEX
To:   Patrick G. Sobalvarro <PGS at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: window outside its superior

    Date: 2 April 1982 08:38-EST
    From: Patrick G. Sobalvarro <PGS at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.38, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45hz, on Lisp Machine Five:

    Sometimes when I do Terminal-F on this machine I get the error
    "Attempt to expose #<TRUNCATING-POP-UP-TEXT-WINDOW-WITH-RESET TRUNCATING-POP-UP-TEXT-WINDOW-WITH-RESET-1 7000063 deactivated> outside its superior."

    By poking around a bit, I've discovered that that window's superior is
    #<STANDARD-SCREEN Main Screen 7000000 exposed>, which happens also to
    be the superior of the Lisp-Listener that I'm in when the thing blows
    out, so I have no idea why it's unhappy.  Once this has happened once,
    it never works again; however, when I cold boot things are usually OK
    for a while (whether I log in or not), and then they break.
My best guess would be that this is caused by doing set-tv-speed (which
changes the size of windows).
Anyway if inside the error you send that window a :edges message you can
see the left-x, top-y, right-x, bottom-y and compare those against the
:inside-size of its superior.  This might give a clue to what's going on.

Date: Wednesday, 7 April 1982  12:52-EST
From: MOON at SCRC-TENEX
To:   LEVITT at MIT-MC
Cc:   (BUG LISPM) at MIT-AI
Subject: remainder on rationals

Certainly it would be wrong to make REMAINDER and \ be different.

You are correct that the remainder operation should work on rationals and
flonums, producing the remainder that goes with an integer quotient.  They
are defined this way in Common Lisp I believe.

Date: Wednesday, 7 April 1982, 12:09-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
To: EB at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 6 April 1982 15:07-EST
    From: Edward Barton <EB at MIT-AI>
    In what systems does the restriction that flavor message names must be
    in the keyword package still exist?  Such a restriction is mentioned
    in the manual.
That restriction no longer exists in the flavor system itself.  The
editor's sectionization code still assumes that they are in several
places, though.

LEVITT@MIT-MC 04/07/82 01:15:12
To: (BUG LISPM) at MIT-AI
In System 79.40, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 3.0, Experimental Local-File 35.1,
Experimental Play 1.1, microcode 849, 79.35 fs 35.0, on Lisp Machine Three:

The function \ (aka REMAINDER) bombs out if given rational-type
arguments.  Can the tables that handle numeric type coercion be
revised to include this function?  There should be some version
of REMAINDER that does the sensible thing for rationals.  I
don't think they should be treated like flonums in this case.

Perhaps the microcoded \ function should be left alone, but
REMAINDER (or other "synonym") should be redefined i.e.:

(defun remainder (divisor dividend)
  (if (or (si:rationalp divisor) (si:rationalp dividend))
      (- divisor (* (fix (// divisor dividend)) dividend))
    (\ divisor dividend)))	

(remainder 6 5)
1

(remainder 1\2 1\4)
0\1

(remainder 1\2 1\3)
1\6

(remainder 1\3 1\2)
1\3

(remainder 4 1\2)
0\1

(remainder 7\3 2\3)
1\3


Date: Tuesday, 6 April 1982, 19:09-EST
From: Allan C. Wechsler <ACW at MIT-EECS>
To: BUG-LISPM at EE
Cc: NAHA at MIT-VAX

In System 204.53, ZMail 42.10, microcode 865, 60Hz, on Lisp Machine Ten:

(DEFUN TEST (A B) (VALUES A B))

(DEFUN FROB ()
  (CRASH 104
	 (MULTIPLE-VALUE-LIST (TEST 1 2))
	 13))

(DEFUN CRASH (&REST FOO)
  (FERROR NIL "YIKES!!!"))

Compile these, then type "(FROB)".  When CRASH craps out, you will see
that FOO is bound, not to (104 (1 2) 13), but to (104 (1 2) . 13).  Note
that this is not a list, and hence is a highly unlikely value for an
&REST argument to have.

Much testing seems to indicate that when MULTIPLE-VALUE-LIST
finishes munging the stack, the CDR-code of the resulting
stack frame is wrongly set to NORMAL instead of NEXT.  This is
only a conjecture, and should be checked by somebody more
competent than we are.

   --- Allan & Mark

Date: Tuesday, 6 April 1982, 17:05-EST
From: Robert P. Krajewski <RPK at MIT-XX>
Subject: Being forced to login
To: BUG-LISPM at EE
Cc: RpK at XX

In System 204.53, ZMail 42.10, microcode 865, 60Hz, on Lisp Machine Ten:

A null user name (given to the prompt ``...host defaults to..'') should
not be accepted.

bob

Date: Tuesday, 6 April 1982, 16:27-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Extraneous file reads
To: KMP at MIT-MC
Cc: MOON at SCRC-TENEX, BUG-LISPM at MIT-MC, DLA at SCRC-TENEX

    Date: 6 April 1982 01:01-EST
    From: Kent M. Pitman <KMP at MIT-MC>
	Date: Monday, 5 April 1982  16:58-EST
	From: MOON at SCRC-TENEX
	    Date: 4 April 1982 21:50-EST
	    From: Kent M. Pitman <kmp at MIT-MC>

	    Accessing files from remote file systems is very slow and cleaning 
	    up little points like this save a lot of time and hassle ...

	It sounds like you're suggesting that when the machine goes to open a file
	for input, if that file has been read into an editor buffer it offer to
	read from the editor buffer instead?  I guess that could be done although
	probably it is only significantly faster when the file is on the AI
	machine.

    Yes, that's what I want. The other examples were not necessarily bugs in
    Find File and/or Compile File, but they were more examples of where this
    would help. I find FS: to be slightly slower than AI: as a file server,
    and MC: to be only epsilon faster. In all of those cases, I would be 
    surprised if reading from the buffer were not a lot faster, but I have 
    only an intuitive feel backing this up; no rigorous timings.

Well, having done meterings of every existing lispm file system, local
and remote, in every different file protocol, I feel competent to say
that this scheme would be much slower.  Not only is the editor
inherently slower than any file system, it takes up much more memory and
therefore will cause a higher number of page faults.

In other words, in my opinion this scheme is not only a big modularity
loss, but would be much slower than simply using *any* existing file
system.

BTW, the fastest file system is the FILE protocol, at least when I
metered them all two months ago.  The various local file systems are
only faster when they are the only things running; as soon as the
editor, compiler, or some other subsystem is used simultaneously, they
become much slower.


Date: 6 April 1982 15:07-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In what systems does the restriction that flavor message names must be
in the keyword package still exist?  Such a restriction is mentioned
in the manual.

Date: Tuesday, 6 April 1982  11:43-EST
From: MMCM at SCRC-TENEX
To:   Philip E. Agre <AGRE at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: 3 April 1982 05:55-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    It would avoid lots of screws if the compiler would give a warning
    when you give a string as the first argument for FORMAT.

Well, FORMAT's first argument can be a string.  I guess however it
doesn't make sense for it to be a compile time constant string without
a fill pointer.

Date: Tuesday, 6 April 1982, 12:12-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: LOAD
To: kmp at MIT-MC
Cc: bug-lispm at SCRC-TENEX
In-reply-to: The message of 6 Apr 82 02:24-EST from kmp at MIT-MC

    Date: 04/06/82 02:24:43
    From: kmp@MIT-MC
    Why don't compiled files get the version number of their source
    on file systems that support version numbers? In the case where the
    same version existed compiled (eg, compilation due to change of a
    macro file that the file depended on), the compiler could query
    to clobber or read another filename... Most of the time, I would
    prefer to clobber the previous version.
I never would.  I think an acceptable compromize would be to use the
version number IFF that version number would be higher than any existing
one.  Note that some file systems won't let you overwrite an existing
version; you have to delete the old one first.  It used to copy the version
number, but was a constant screw on such systems.
    Being able to see which the source file for a given QFASL is just by
    looking at the dir (eg, in dired) would be a real win.
I think it's important not to believe the version number, which can be
incorrect due to copying or any number of other mechanisms.  I think the
right thing is to actually get the source-file information from the
QFASL file and display that.  In ordinary file systems this would
involve looking at the QFASL file, so maybe it should just tell you when
you explicitly ask.
    On a related note, maybe Symbolics should start calling its compiled
    files ZFASL files, so they can be distinguished from other variants,
    since there seems to be some incompatibility between code compiled for
    the several existing systems right now...
Most files are compatible; it would probably be a screw more often than
not to make it different.  I guess LOAD could be smart and for MIT try
QFASL first, then ZFASL, while for Symbolics systems use the reverse
order.  (SFASL might be a better name...)

Date: 6 April 1982 11:17-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
Subject: System 205
To: JMTURN at MIT-AI, ALR at MIT-ML
cc: BUG-LISPM at MIT-AI, GREGOR at MIT-AI

    Date: 5 April 1982 21:44-EST
    From: James M. Turner <JMTURN at MIT-AI>
    Subject: System 205
    To: ALR at MIT-ML
    cc: BUG-LISPM at MIT-AI

	Date: 1 April 1982 20:49-EST
	From: Andrew L. Ressler <ALR at MIT-ML>

	    There is an Experimental 205.4 on Retriever.  It goes with microcode 873.
	    Its big advantage over 205.0 is that it boots.  Don't expect too much else
	    from it, however.

	Could you please keep messages that don't matter to MIT off of MIT.
	I could care less what is on Retriever!

    It might be resonable to break BUG-LISPM into BUG-LISPM and BUG-SYMBOLICS
    (or something like that), so that you know which list to flame about a bug
    to (LISPM for 79/81 bugs, SYMBOLICS for 204/205 bugs). How about it?

					    James

Everybody should go into flamethrower off mode! (I will do so at the end
of this message). The which system are we going to run in the sky
problem is bad enough without people getting plain nasty. I for one use
bug lispm as a way to learn about the (many many reams of undocumented
stuff). As it is we do not get all the "Symbolics business only" bug
lispm mail, (as evidenced by the fact that bug-lispm volume is only a
small fraction of what it used to be. Currentley there are some people
in the lab who are running 2xx software and it is to there advantage to
get all the info they can get. But my real point is that it is to noones
advantage fo people to be aggravating an already delicate issue.

Date: Tuesday, 6 April 1982, 08:37-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: System 205
To: James M. Turner <JMTURN at MIT-AI>
Cc: ALR at MIT-ML, BUG-LISPM at MIT-AI
In-reply-to: The message of 5 Apr 82 21:44-EST from James M. Turner <JMTURN at MIT-AI>


    Date: 5 April 1982 21:44-EST
    From: James M. Turner <JMTURN at MIT-AI>
    It might be resonable to break BUG-LISPM into BUG-LISPM and BUG-SYMBOLICS
    (or something like that), so that you know which list to flame about a bug
    to (LISPM for 79/81 bugs, SYMBOLICS for 204/205 bugs). How about it?
BUG-LISPM-MIT and BUG-LISPM-SCRC have existed for a long time; I guess
nobody told MIT and LMI people about them.  Our fault.  We use
BUG-LISPM-SCRC a lot, but sometimes we slip.

Still, there are a lot of MIT people who are interested in things of
significance about both, so I don't think the announcement of new system
creation was so badly out of place, especially since users of the 20x won't
know whether a bug is 20x-specific or one that 81 shares, and will send
to BUG-LISPM, just like users of system 81.  I think this is as it
should be, and certainly don't mind seeing bug reports from system 81.
If it's not relevant, I just delete it, or sometimes forward a fix if I
know of one.

Please, lets not use this mailing list for venting our political views
or carrying on meta-discussions about what should go to what mailing
list.

kmp@MIT-MC 04/06/82 02:24:43
To: (BUG LISPM) at MIT-AI
In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, 
on Lisp Machine Twenty-two:

Why don't compiled files get the version number of their source
on file systems that support version numbers? In the case where the
same version existed compiled (eg, compilation due to change of a
macro file that the file depended on), the compiler could query
to clobber or read another filename... Most of the time, I would
prefer to clobber the previous version.

Being able to see which the source file for a given QFASL is just by
looking at the dir (eg, in dired) would be a real win.

On a related note, maybe Symbolics should start calling its compiled
files ZFASL files, so they can be distinguished from other variants,
since there seems to be some incompatibility between code compiled for
the several existing systems right now...

-kmp


Date: 6 April 1982 02:01-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: MIT Idle LISPM Hack
To: BUG-LISPM at MIT-AI

Could the person who wrote the "dancing students" hack for idle
MIT Lisp Machines get in touch with me? I want to discuss a 
varient I plan to bring up.

					James

Date: 6 April 1982 01:01-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Extraneous file reads
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-MC

    Date: Monday, 5 April 1982  16:58-EST
    From: MOON at SCRC-TENEX
    To:   Kent M. Pitman <kmp>
    cc:   BUG-ZWEI at SCRC-TENEX
    Re:   Extraneous file reads

        Date: 4 April 1982 21:50-EST
        From: Kent M. Pitman <kmp at MIT-MC>
        Subject: Extraneous file reads
        To: BUG-ZWEI at MIT-MC

        When I have a file FOO.BAR#> and I explicitly write it to FOO.BAR#100 
        (which is higher than any existing FOO.BAR), then a Find File occurs 
        (eg, via Tags Search), Zwei finds out it needs to use FOO.BAR#100, so 
        reads it from disk rather than using it out of my buffer.

    Actually Zwei finds out it needs to use FOO.BAR#>, which is not in a
    buffer; the buffer you have is explicitly for version 100 and the greatest
    version might be bigger than 100.  c-X c-W changes the file name associated
    with the buffer.  You can use m-x Set Visited File Name to change the file
    of the buffer back to > if that's what you want (i.e. you just wanted to
    crank up the version number, not to keep that version explicitly in a
    buffer.)

        Additionally, M-X Compile File always prompts for a buffer name to 
        compile, yet last time I used it -- many versions ago -- it wanted to 
        always read off of disk even when there was an unmodified copy in core. 
        If it's going to use the copy off of disk, it might as well prompt for 
        a buffername instead of a filename. I stopped using M-X Compile File as 
        a result of this; now I just use QC-FILE or QC-FILE-LOAD from lisp 
        listeners because they seem to do more natural things. I wish these 
        were Zwei commands...

    m-x Compile File is precisely QC-FILE.  In recent Symbolics software the
    misleading prompt for m-x Compile File was fixed and m-x Load File was 
    added, which is a Zwei command version of QC-FILE-LOAD (it only offers 
    to compile if the source has changed).

        Accessing files from remote file systems is very slow and cleaning 
        up little points like this save a lot of time and hassle ...

    It sounds like you're suggesting that when the machine goes to open a file
    for input, if that file has been read into an editor buffer it offer to
    read from the editor buffer instead?  I guess that could be done although
    probably it is only significantly faster when the file is on the AI
    machine.

Yes, that's what I want. The other examples were not necessarily bugs in
Find File and/or Compile File, but they were more examples of where this
would help. I find FS: to be slightly slower than AI: as a file server,
and MC: to be only epsilon faster. In all of those cases, I would be 
surprised if reading from the buffer were not a lot faster, but I have 
only an intuitive feel backing this up; no rigorous timings.

Date: Monday, 5 April 1982, 22:58-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: LMI system 407
To: RZ at MIT-MC
Cc: BUG-LISPM at SCRC-TENEX

Compiled files already have in them information about when they were
compiled.  It is the :COMPILE-DATA property on the generic pathname, and
it is a list of (user-id machine universal-time major-version minor-version).

This property is currently not used much, but it exists for precisely
the applications you suggested.

Date: 5 April 1982 22:53-EST
From: Richard E. Zippel <RZ at MIT-MC>
To: BUG-LISPM at MIT-MC

This isn't a bug, just a suggestion.  How about adding to QFASL files
a few bits of information saying which system they were compiled on.  The
loader could then warn the user when old versions of files are used, and
perhaps help straigthen out any problems with files that are supposed to
run in system 79, but are loaded in to Symbolics system 204, or LMI
system 407 or what not.

Obviously, a much richer structure could be used (more than just the
system name) but that would be a start.


Date: Monday, 5 April 1982, 21:34-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: JMTURN at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 5 April 1982 21:44-EST
    From: James M. Turner <JMTURN at MIT-AI>
    It might be resonable to break BUG-LISPM into BUG-LISPM and BUG-SYMBOLICS
    (or something like that), so that you know which list to flame about a bug
    to (LISPM for 79/81 bugs, SYMBOLICS for 204/205 bugs). How about it?
God damn.  Why don't we just create a SYMBOLICS-SUCKS mailing list?

Anyway, if you look in .MAIL.;NAMES, you'll see that BUG-LISPM-MIT
and BUG-LISPM-SCRC already exist.  There isn't a BUG-LISPM-EE, mainly
because it's hard for random users to hack mailing lists on twenex.

Date: 5 April 1982 21:44-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: System 205
To: ALR at MIT-ML
cc: BUG-LISPM at MIT-AI

    Date: 1 April 1982 20:49-EST
    From: Andrew L. Ressler <ALR at MIT-ML>

        There is an Experimental 205.4 on Retriever.  It goes with microcode 873.
        Its big advantage over 205.0 is that it boots.  Don't expect too much else
        from it, however.

    Could you please keep messages that don't matter to MIT off of MIT.
    I could care less what is on Retriever!

It might be resonable to break BUG-LISPM into BUG-LISPM and BUG-SYMBOLICS
(or something like that), so that you know which list to flame about a bug
to (LISPM for 79/81 bugs, SYMBOLICS for 204/205 bugs). How about it?

					James

Date: 5 April 1982 21:40-EST
From: James M. Turner <JMTURN at MIT-AI>
To: ZVONA at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 5 April 1982 18:41-EST
    From: David Chapman <zvona at MIT-AI>
    Sender: TESTER at MIT-AI

    There needs to be a mechanism whereby LMLIB; entries are imported into
    the overall released system when their worth is proved.  (I am speaking
    of the MIT system although of course Symbolics might well want to
    implement a similar mechanism.)  On CADR22 we load much of LMLIB; into
    new raw system releases when we import them onto the machine so that all
    other bands inherit these programs.

    I haven't got a very good theory of what the mechanism should be.  It
    seems, though, that if any LMLIB; entry 

    	does not make visible incompatible changes in the system as seen
    		by the user
    	has several regular users (attesting to its usefulness)
    and	has been around for long enough that most of the bugs are liable
    		to be out

    then it should be gobbled into MIT-Specific or whatever it is called.
There is no reason this can't happen. If you want it to be a part of the
next system built, just include it as a module to MIT-SPECIFIC (which is
only loaded at MIT). Create a system called LMLIB; which lives as a subsystem
to MIT-SPECIFIC. This will do the right things regarding patch files and
the like. The proper place to add LMLIB is LISPM;SYSDCL >.

					James

Date: 5 April 1982 19:28-EST
From: David Chapman <zvona at MIT-AI>
Sender: TESTER at MIT-AI
To: BUG-LISPM at MIT-AI
cc: BUG-LMFILE at MIT-AI, BUG-TESTER at MIT-AI

In System 79.38, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

With the following defsystem:

(defsystem tester
  (:name "Tester")
  (:short-name "TA")
  (:patchable "FC: Tester;")
  ;; Modules
  (:module gprint "lmlib; gprint")		;Pretty printer
  (:module do& "FC: Tester; do&")		;Iteration macro
  (:module macros "FC: Tester; macros")		;Random macros
  (:module util "FC: Tester; util")		;Primitives
  (:module stream "FC: Tester; stream")		;Definitions for funny streams
  (:module defstr "FC: Tester; defstr")		;Defstructs
  (:module tadb "FC: Tester; tadb")		;Database, some user interface
  (:module tarep "FC: Tester; tarep")		;Augmented read-eval-print loop
  (:module sectio "FC: Tester; sectio")          ;Zwei function parsing interface
  (:module tester "FC: Tester; tester")		;Compiler interface, tester proper
  (:module copy "FC: Tester; copy")		;Environment copier/checker
  (:module dump "FC: Tester; dump")		;Database dumper/loader
  (:module tazwei "FC: Tester; tazwei")		;Zwei code
  (:module lib "FC: Tester; lib")		;Cliche library -- loaded specially
  ;; Transformations
  (:fasload gprint)
  (:compile-load do& (:fasload gprint) (:fasload gprint))
  (:compile-load-init macros (do&) (:fasload do&) (:fasload do&))
  (:compile-load-init util (do& macros) (:fasload macros) (:fasload macros))
  (:compile-load-init stream (do& macros) (:fasload util) (:fasload util))
  (:compile-load-init defstr (do& macros) (:fasload stream) (:fasload stream))
  (:compile-load-init tadb (do& macros defstr) (:fasload defstr) (:fasload defstr))
  (:compile-load-init tarep (do& macros defstr) (:fasload tadb) (:fasload tadb))
  (:compile-load sectio (:fasload tarep) (:fasload tarep))
  (:compile-load-init tester (do& macros defstr sectio) (:fasload sectio) (:fasload sectio))
  (:compile-load-init copy (do& macros) (:fasload tester) (:fasload tester))  
  (:compile-load-init dump (do& macros defstr) (:fasload copy) (:fasload copy))
  (:compile-load-init tazwei (do& macros) (:fasload dump) (:fasload dump))
  )

In a raw band, 

(make-system 'tester ':compile ':no-reload-system-declaration ':noconfirm)

successfully made a Tester 21.0 (the previous version had indeed been 20.xx).
It wrote FC: Tester; Tester-21|PATCH-DIRECTORY#2.

However, in the same raw band immediately thereafter

(make-system 'tester ':no-reload-system-declaration ':nowarn)

died in get-patch-system-major-version trying to find FC: TESTER;
PATCH|DIRECTORY, which of course does not exist.  Either I am confused
or something is broken.

Analysis suggests that two different functions in make-system must have
different theories about when the patchable directory name is the same
as the system name.  

Incidentally, I think that the same-name business should be flushed.  I
have had trouble with it before, and in any case, I think that
Tester-21|PATCH-DIRECTORY and Tester-20-n (or equivalents for other file
systems) is always better than PATCH|DIRECTORY and PATCH-20-n (or
equivalents).

Date: 5 April 1982 18:41-EST
From: David Chapman <zvona at MIT-AI>
Sender: TESTER at MIT-AI
To: BUG-LISPM at MIT-AI

There needs to be a mechanism whereby LMLIB; entries are imported into
the overall released system when their worth is proved.  (I am speaking
of the MIT system although of course Symbolics might well want to
implement a similar mechanism.)  On CADR22 we load much of LMLIB; into
new raw system releases when we import them onto the machine so that all
other bands inherit these programs.

I haven't got a very good theory of what the mechanism should be.  It
seems, though, that if any LMLIB; entry 

	does not make visible incompatible changes in the system as seen
		by the user
	has several regular users (attesting to its usefulness)
and	has been around for long enough that most of the bugs are liable
		to be out

then it should be gobbled into MIT-Specific or whatever it is called.

Date: 5 April 1982 13:23-EST
From: Carl Richard Feynman <CARLF at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, on Lisp Machine Fifteen:

	There should be a function that sets the font of
all windows to something other than cptfont, so that when 
you have to work on a lispm with a flakey screen, you can
set the font of everything to medfnb or cptfnb, which are easy
to read. set-default-font doesn't quite do the right thing,
since it doesn't change the font of the editor or the error
handler or break loops or the inspector or n other things.
It would be nice if the font of the system menu would 
change too. 

			-- Carl

Date: 1 April 1982 20:49-EST
From: Andrew L. Ressler <ALR at MIT-ML>
Subject:  System 205
To: DLA at SCRC-TENEX
cc: BUG-LISPM at SCRC-TENEX

    There is an Experimental 205.4 on Retriever.  It goes with microcode 873.
    Its big advantage over 205.0 is that it boots.  Don't expect too much else
    from it, however.

Could you please keep messages that don't matter to MIT off of MIT.
I could care less what is on Retriever!

Date: 3 April 1982 05:55-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Six:

It would avoid lots of screws if the compiler would give a warning
when you give a string as the first argument for FORMAT.

Date: 2 April 1982 09:26-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.36, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

(defun DEMONSTRATE-BITBLT-BUG (array)
  (bitblt tv:alu-xor				;alu function
	  0 0					;width and height
	  array 0 0				;from-array from-x and from-y
	  array (array-dimension-n 1 array)	;to-array to-x
	        (array-dimension-n 2 array)))	;and to-y

(setq a (make-array '(64. 64.) ':type 'art-1b))
#<ART-1B-64.-64. 31004160>

(demonstrate-bitblt-bug a)
>>>>TRAP 3420. (SUBSCRIPT-OOB M-Q M-S)
The subscript, 4160., was beyond the length, 4096., in BITBLT
While in the function BITBLT  TV:DEMONSTRATE-BITBLT-BUG  SI:*EVAL

BITBLT:
   Arg 0 (ALU): 6.
   Arg 1 (WIDTH): 0.
   Arg 2 (HEIGHT): 0.
   Arg 3 (FROM-ARRAY): #<ART-1B-64.-64. 31004160>
   Arg 4 (FROM-X): 0.
   Arg 5 (FROM-Y): 0.
   Arg 6 (TO-ARRAY): 2570.
   Arg 7 (TO-X): 16.
   Arg 8 (TO-Y): 0.
c-Z 
* 

Bitblt is advertised as "If width or height are zero bitblt does
nothing."

--Gregor--

Date: 2 April 1982 08:38-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.38, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45hz, on Lisp Machine Five:

Sometimes when I do Terminal-F on this machine I get the error
"Attempt to expose #<TRUNCATING-POP-UP-TEXT-WINDOW-WITH-RESET TRUNCATING-POP-UP-TEXT-WINDOW-WITH-RESET-1 7000063 deactivated> outside its superior."

By poking around a bit, I've discovered that that window's superior is
#<STANDARD-SCREEN Main Screen 7000000 exposed>, which happens also to
be the superior of the Lisp-Listener that I'm in when the thing blows
out, so I have no idea why it's unhappy.  Once this has happened once,
it never works again; however, when I cold boot things are usually OK
for a while (whether I log in or not), and then they break.

Date: 1 April 1982 22:41-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Applyhook
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: Thursday, 1 April 1982  02:37-EST
    From: MOON at SCRC-TENEX
    To:   Henry Lieberman <Henry at MIT-MC>
    cc:   bug-lispm at SCRC-TENEX
    Subject: Applyhook

    If, on the other hand, you really only specifically want to catch EVAL
    when it's done evaluating the last argument and is about to call the
    function, and don't actually want random traps all over the rest of the
    functions in the system that call other functions, it would probably
    be reasonable to put in a special variable which EVAL checks.  You
    wouldn't want to call it APPLYHOOK, though.

Yes, that's what I think I need for the stepper. I don't care if its called
something different than APPLYHOOK. It should affect a particular call to EVAL in
the stepper, but not some random network function that happened to run, etc.  The
suggestion of RG to enable trapping functions in the microcode may be useful too,
but I think it may be more than I need for this purpose.

Date: 1 APR 1982 1758-PST
From: DEKLEER at PARC-MAXC
Subject:  DEFSELECT bug kludge
To:   BUG-LISPM at MIT-AI

In ETHER 26.8, System 79.37, microcode 854, on Unknown:

The following will fix the defselect bug in world 79.  (I looked at the
latest AI:LISPM2;DEFSEL and it still has this bug so it probably exists
in words 79, 80, ...)

I don't understand exactly how this is all supposed to function, but the
following temporary kludge seems to win.  The bug is that if the old
definition of the defselect had a default handler it is on the tail of
the old-alist thereby making it a non-alist.  If the new definition has
a new selector not present in the old-alist, assq runs off the end and
will take the car of the old default-handler blithely assuming it is of
the form (selector . method).  

Instead of (in si:defselect-internal)

(ASSQ METHOD OLD-ALIST)

do:
	(do ((old-alist old-alist (cdr old-alist)))
	    ((nlistp old-alist))
	  (and (eq (caar old-alist) method)
	       (return (car old-alist))))

Presumably there is some incarnation of LOOP that does this .
-------

Date: 1 April 1982 20:39-EST
From: David W. Payton <PAYT at MIT-AI>
To: ZVONA at MIT-AI, BUG-LISPM at MIT-AI

       Date: Wednesday, 31 March 1982, 09:19-EST
       From: David Chapman <Zvona at MIT-AI>
       To: BUG-LISPM at MIT-AI
       
       In System 79.37, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
       microcode 849, on Lisp Machine Nineteen:
       
       (defmacro defplan-to-urdu (op &body)
         `(putprop ',op ',body 'plan-to-urdu))
       
       This warns ``BODY declared special'', rather than ``mishapen
       arglist''.

This works now in System 81.  You will now get a "Bad pattern to DEFMACRO" error
if you have an &BODY or &REST keyword with nothing after it.

Date: 1 April 1982 19:04-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
Subject: LOOP
To: ALR at MIT-ML
cc: BUG-LISPM at MIT-AI

Syntactic sugar leads to cancerous semicolons.
                                    -- Alan J. Perlis

Date: Thursday, 1 April 1982, 11:13-EST
From: Web Dove <DOVE at MIT-DSPG>
To: BUG-LISPM at EE

In System 204.53, ZMail 42.10, microcode 865, 60Hz, on Lisp Machine Eleven:

I was trying to write a file to dspg (unix site) and after the file seems to have been
completed I got the following error:

ERROR: 11 is not a meaningful refname in USER
,
,
,
PKG-FIND-PACKAGE:
 arg0 (THING): "11"
 arg1 (create-p): nil
 arg2 (under-pkg): #<package USER 4111143>


Could this be due to a transaction failure with the unix FILE server?

Date:  1 Apr 1982 1134-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: System 205
To: BUG-LISPM at SCRC-TENEX
cc: DLA at SCRC-TENEX

There is an Experimental 205.4 on Retriever.  It goes with microcode 873.
Its big advantage over 205.0 is that it boots.  Don't expect too much else
from it, however.
-------

Date: 1 April 1982 09:54-EST
From: Richard Greenblatt <rg at MIT-AI>
To: HENRY at MIT-AI
cc: BUG-LISPM at MIT-AI


  There currently exists a means to trap to the
error handler at QMRCL.  It goes thru here for
all activations, whether opened by %OPEN-CALL-BLOCK, FUNCALL,
APPLY, EVAL, etc.  The only problem will be deciding
which activations are "user level" and which are "system level".

  This could be solved by encoding sufficient knowledge into
the error handler.  Ie, all activations are user level,
unless they are in certain known functions (EVAL, MAPCAR),
in which case they are system level, unless they are certain ones, etc.
This is admittedly un-modular, but there is already a fair amount
of this in the error handler.

  Perhaps the lossage could be minimized by making some macros to
be included in the code for system level functions like EVAL. 
So you might see something like

  (USER-LEVEL-ACTIVATION (%ACTIVATE-CALL-BLOCK))

in the place in eval where it calls the user's function.
Where USER-LEVEL-ACTIVATION is a macro which records info on
the current macro-code PC in a data base where the error handler
frobber can find it.  If system level functions were identified
by a property things might work out fairly modularily.

  Please feel free to make any modifications you might need
to the EVALHOOK stuff in the system sources on AI.

Date: Thursday, 1 April 1982  02:37-EST
From: MOON at SCRC-TENEX
To:   Henry Lieberman <Henry at MIT-MC>
cc:   bug-lispm at SCRC-TENEX
Subject: Applyhook

The problem is that none of those functions of the interpreter
(EVAL, MAPCAR, etc.) work by calling APPLY.  They simply call
functions directly (it appears as FUNCALL or %START/FINISH-FUNCTION-CALL
in the Lisp program, but in the compiled code it is simply a call
instruction just like any other function call.)  In other words,
there is no well-defined distinction between the function calls
you are thinking of as "the interpreter applying a function" and
normal function calling that is happening all the time.  The reason
there is an EVALHOOK and not an APPLYHOOK thus has a lot to do with
the fact that EVAL is specifically part of the interpreter, while
APPLY (or in general function calling) is something much lower-level
and not specific to interpretation.

So the only way to implement an APPLYHOOK would be to introduce a new
flag and make all of the functions of the interpreter check the flag
all over the place.  This doesn't sound like a very good way to do
anything.  Only slightly better would be to change all of these functions
to go through some interface function similar to APPLY, which would
check the flag.

Maybe a better way for you to do it would be to replace the function
being called with some encapsulated version, before the arguments are
evaluated, which when called will break to your stepper?  That way
the break is on the basis of the function that you know you want to
see a call of, rather than on some set of function calls in the interpreter
which may or may not be the set you want (for instance, you say you want
to intercept calls by MAPCAR to its first argument.  But what if MAPCAR
is called from compiled code, perhaps even something totally unrelated
such as the Chaosnet control program or the editor redisplay that you
are invoking?)

If, on the other hand, you really only specifically want to catch EVAL
when it's done evaluating the last argument and is about to call the
function, and don't actually want random traps all over the rest of the
functions in the system that call other functions, it would probably
be reasonable to put in a special variable which EVAL checks.  You
wouldn't want to call it APPLYHOOK, though.

Date: 1 April 1982  01:39-EST (Thursday)
From: Robert P. Krajewski <RPK at your official hostname here>
To:   BUG-LISPM at SCRC
Reply-to: RpK@XX
Cc:   CL at EE
Subject: EE Site-dependent requests

[1] Install the function for Terminal-Q: It says (now) that it can't hardcopy
    the screen at this site, although Terminal-Help would lead you to
    believe otherwise.

[2] Please leave FED out of the default system.  I only know of one regular
    user here.  On machines with less than 192k of memory, the bands should be
    a small as possible.

[1] Can wait for 205.; [2] will have to.  (I ended up installing FED anyway,
because the patch file in 204 that did it had other useful stuff.)

bob

Date: Thursday, 1 April 1982, 01:14-EST
From: James M. Turner <JMTurn at MIT-AI>
Subject: FC: doesn't work with 81.2
To: BUG-LISPM at MIT-AI

In Experimental MIT-Specific 2.0, Experimental System 81.2,
Experimental Remote-File 4.0, Experimental LMFILE-Remote 10.0,
Experimental ZMail 41.0, microcode 860, on Lisp Machine Seven:

(load "fc:jmturn;mutt")
>>>>TRAP 5446 (ARGTYP CONS M-T T ...)
The argument to CAR, #<DTP-ARRAY-HEADER 20412600>, was of the wrong type.
The function expected a cons.
While in the function (METHOD FS:REMOTE-PROBE-STREAM WHICH-OPERATIONS)  SI:FASLOAD-INTERNAL  LOAD

(METHOD FS:REMOTE-PROBE-STREAM WHICH-OPERATIONS):
   Arg 0 (OPERATION): WHICH-OPERATIONS
 
* 

This is not good. Attempting to load any file in any manner (EMACS, LOAD, READFILE)
that is on FC: loses.

					James

Date: 31 March 1982 23:07-EST
From: Andrew L. Ressler <ALR at MIT-ML>
Subject:  LOOP
To: BUG-Lispm at MIT-AI

I've seen several messages lately that have mentioned that there are bad
things about the LOOP macro, but none of these have mentioned what these
bad features are.  Could some of you please fill me in?
Thank you,
Andrew


Date: Wednesday, 31 March 1982, 21:44-EST
From: mmcm at SCRC-TENEX
Sender: Zippy at SCRC-TENEX
To: BUG-LISPM at SCRC-TENEX

In Experimental System 205.0, Experimental ZMail 43.0, microcode 873, on Retriever:

Tail pointers do not work in DEFSELECT-METHOD's.
E.g. (SCROLL-ENTRY-CALL-FUNCTION-FUNCTION SCROLL-ENTRY-SYMBOL-VALUE-FUNCTION).

Date: 31 March 1982 22:00-EST
From: Henry Lieberman <Henry at MIT-MC>
Subject: Applyhook
To: BUG-LISPM at MIT-MC


What I need an APPLY hook for is to write a stepper which
can pause just before a function is about to be applied, take
some action, and return some value to become the value of the APPLY. 
The stepper I'm writing uses a Zmacs window to show the code
being stepped, and when you apply a function, you may want to 
do a meta-point to bring up the definition of that function.
If you have a function call (FUNCTION ARG-1 ... ARG-N), sometimes you
don't want to see the details of the evaluation of the arguments, 
but you do want to see the details of the defintion of the function.
Without a hook on APPLY, I'm forced to do things like count
arguments to a function, etc. 

One possible interface is as another argument to EVALHOOK.

(EVALHOOK <form>
	  <function to substitute for EVAL>
	  <function to substitute for APPLY>)

I don't just want to advise explicit calls in user code to
the APPLY function, but also APPLYs done by the evaluator.
Since stepping compiled code doesn't work anyway, its OK if
the hook only counts from running interpreted code. 
But it should work even if the function to be applied is
a microcoded function. Internal APPLYs such as MAPCAR applying
its first argument should also go through the hook.
I believe analogous properties hold currently for EVALHOOK.


Date: Wednesday, 31 March 1982, 20:11-EST
From: Robert P. Krajewski <UC.RpK at MIT-EECS>
Reply-to: RpK at MC
Subject: CADR14 not getting time
To: CL at EE
Cc: BUG-LISPM at SCRC

CADR14 has trouble getting the time when in cold boots.  This has
happened before.  Has somebody changed its address, or the host table ?
The bands on the machine, to my knowledge, have not been touched.

bob

Date: Wednesday, 31 March 1982, 19:40-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: KMP at MIT-MC
Cc: BUG-LISPM at MIT-MC

Kent, I don't know whether you were around the last time this same
discussion happened.  Lots of people have suggested new variations on DO
and new capabilities for DO.  The last time it happened, lots of people
created lots of macros ("the NEW new style DO" was discussed; there was
a version called "DOO" that made the rounds for a while).  The
conclusion that most of us came to was that there were so many useful
features that one might want in DO that it would not be a good idea to
encode this information using more and more levels of parentheses.  Once
you have a certain number of different orthagonal possibilities, it
becomes clearer to use keywords.  This it the basic motivation behind
LOOP.

Unfortunately, not everybody agrees about this sort of thing.  However,
if special forms were installed in Zetalisp to suit the personal taste
of every single user, the language would be even messier and more
complex than it is now.  People are always complaining that there are
too many ways to do the same thing and that the language is too big.  At
some point, a decision has to be made one way or the other on some of these
issues.  It is impossible for any one decision to please everybody.

If you really want this, my best suggestion that you write yourself a macro.


Date: Wednesday, 31 March 1982, 19:28-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: Zvona at MIT-AI, BUG-LISPM at MIT-AI

    Date: Wednesday, 31 March 1982, 12:41-EST
    From: David Chapman <Zvona at MIT-AI>
    Lisp listeners should bind package so two of them can be in
    different ones.

Well, that's not completely clear.  If they bind PACKAGE, this takes
AWAY the ability to change the global value of PACKAGE for all Lisp
Listeners and other processes that don't bind PACKAGE, and this might be
useful too.  I'm not saying that I'm against it, but just that it isn't
a unilateral clear improvement: it is a tradeoff.

Date: Wednesday, 31 March 1982, 12:41-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.37, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

Lisp listeners should bind package so two of them can be in
different ones.

Date: 31 March 1982 12:34-EST
From: Richard Greenblatt <rg at MIT-AI>
To: BUG-LISPM at MIT-AI

  Experimental System 81.2 exists and is available for testing
on CADRs 1 and 7.  It goes with microcode 860.
  System 81 marks the forking for the MIT/LMI and the Symbolics
versions of lisp machine LISP.  It is unfortunate this had to happen.
  System 81 incorporates a number of bug fixes and improvements,
however, one of its main purposes to show that integrity has been
restored to the MIT source files, which were left in an inconsistant
state by Symbolics personel.  AI:LMDOC;SYSTEM MSG describes some of
the changes.
  System 81 will probably not be officially released to users, since
it will shortly be superceeded by System 82, which will contain further
improvements. 

Date: 31 Mar 1982 0945-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: KMP at MIT-MC
cc: BUG-LISPM at MIT-MC, RWK at SCRC-TENEX
In-Reply-To: Your message of 31-Mar-82 0658-EST

Kent, I tried hard to be humerous and not antagonistic, even poking the same
fun at myself.  I'm sorry it did not come across that way.

The point I was trying to make is that it isn't necessary or desirable to
increase the number of low-level primitives to handle each orthogonal issue
expected of them.  It's a mistake to expect everything with multiple binding
behaviour to provide both forms of binding.  LET and PROG are at a very
different level of the heirarchy of the language than DO.  LET is a binding
PRIMITIVE.  PROG is a LOOPING/BRANCHING primitive that has the unfortunate
charactaristic of being a gratuitous binding/non-local-return primitive as
well.  That's PROG*'s only excuse for existing, and I don't it's a good one.
The idea is that this kind of thing is better handled by a higher-level
construct.  I don't think it's fair to blame the implementers for not providing
2n primitives because you reject the use of the higher-level form they provide.
You and I have both complained about LOOP, but neither of us have offered a
replacement.  I eventually decided it was here to stay for a long time, and
not using it was only hurting me.  I was trying to prod you into considering
doing the same.

I have too much respect for your views to suggest you LIKE loop.  But it does
seem like a bit of sour grapes to be complaining about it still.  As for our
customers, are they better served by simplicity or complexity?  By a
proliferation of low-level functions or by restraining the urge to add lots and
lots of low-level functions and providing the functionality at a higher level
that allows ALL the orthogonal issues (sequential binding, multiple end-tests,
etc)?
-------


Date: Wednesday, 31 March 1982, 09:19-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.37, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

(defmacro defplan-to-urdu (op &body)
  `(putprop ',op ',body 'plan-to-urdu))

This warns ``BODY declared special'', rather than ``mishapen
arglist''.

Date: 31 March 1982 06:56-EST
From: Kent M. Pitman <KMP at MIT-MC>
To: RWK at MIT-MC
cc: BUG-LISPM at MIT-MC

Bob, I found your reply exceedingly antagonistic.

You know I hold to the opinion that LOOP is an exceedingly bad thing
to have around for half a dozen reasons. But even if I were to grant
you that it is a useful tool for the purposes of this discussion, I
don't think you can support the claim that LOOP is really so much the
right thing that everyone ought to be writing iterations that way.
There is a great difference between a high-level tool and a low-level
primitive.

There is also a great lack of symmetry in the LispM language at the point
of LET/LET*, PROG/PROG*, and DO/--gap-- ... I think you'll be hardpressed
to convince me that DO/LOOP is the right way to fill that gap.

It is so easy for you people to do the right thing. Why agitate your
customers by refusing to comply with such an obviously reasonable request
in a way that you know is only going to irritate them to no good end?


PGS@MIT-AI 03/31/82 02:03:04 Re: as long as we're talking about DO
To: (BUG LISPM) at MIT-MC
I think I'd like a version of DO that allowed more than one
end-test-exit-forms pair.  Often I'd like to test for two different
end conditions and return one result if one were true and another if
the other were true.  Currently I have two choices: I can use RETURN
(gack) or I can check the conditions twice, once in the end-test
(using OR) and once in the exit-forms (gack gack).



Date: 31 Mar 1982 0150-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: KMP at MIT-MC, BUG-LISPM at SCRC-TENEX, BUG-KBE at MIT-MC, DICK at MIT-ML
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 31-Mar-82 0103-EST

LOOP is the supplied way to deal with combining orthogonal issues such as
that.  Not all of us find it immoral to use it even if we don't agree with
the way it was done.  (Yes, I was once a conscientious objector myself...)
-------

Date: 31 Mar 1982 0135-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: neves at MIT-MC, bug-lispm at SCRC-TENEX
cc: RWK at SCRC-TENEX
In-Reply-To: Your message of 31-Mar-82 0038-EST

It would be very disturbing if the default were changed by something which
occurred after you typed your file name.  Remember that you may not know that
you've not logged in before on that host.

Having said that, I would mention that it could do cross-directory defaulting
either by always supplying the user's home directory as the default or by
marking it as :ERROR, forcing the user to supply something.  I think it would
be confusing to do the former, and I'm not sure about the latter; I'll probably
experiment with it.  I'm doubtful, however, because I think it would be
confusing to have a field which is displayed as a default, but then not used.
(When the default is displayed, it doesn't know you're going to supply a
different host; it would need to parse your input as you type it...)
-------

Date: 31 Mar 1982 0125-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
To: NEVES at MIT-MC
cc: RWK at SCRC-TENEX, bug-lispm at SCRC-TENEX
In-Reply-To: Your message of 31-Mar-82 0032-EST

Presumably you typed ^XF at some point and set the fill column to be
absurdly narrow.  Typing ^XF while at a more reasonable width, or giving
it an argument (see it's help for details, I'm not at a LISPM) will fix the
problem.
-------

Neves@MIT-MC 03/31/82 01:22:25
To: (BUG LISPM) at MIT-MC
    JMTurn@MIT-LISPM-7 3/31/82 00:46:56
    The reason your mail window is losing is because you have set fill
    mode on and have some low number of columns as your fill column.
This was indeed the problem.  I must have accidently typed ^xf by
mistake. (This keyboard has a flaky control key.)


kmp@MIT-MC 03/31/82 01:03:47
To: (BUG LISPM) at MIT-MC
CC: (BUG KBE) at MIT-MC, DICK at MIT-ML
Why is there no DO* primitive? Applications for it come up all the time.


Neves@MIT-MC 03/31/82 00:38:07
To: (BUG LISPM) at MIT-MC
I wanted to read in a file from speech.  I ^x^fed speech:file.ext thinking
that when the system asked me to login to speech it would default to the
right directory.  However I saw that this was not the case.  The directory
defaulted to something it had when it started getting the file.  It would be
nice if the default directory is changed after a person is asked to login.
Tops-20 directory names are such a pain to type in.

Neves@MIT-MC 03/31/82 00:32:35
To: (BUG LISPM) at MIT-AI
In System 79.37, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, 60Hz, on Lisp Machine Sixteen:

For
some
reason
this
mail
window
won't
let
me
type
more
than
one
word
on
a
line.

It-automatically-sends-me-to-a-new-line-after-I-enter-another-word
on-a-line. 
Why?
p.s.I-am-in-text-mail-fill-and-previously-mailed-something-okay.

Date: Tuesday, 30 March 1982, 21:33-EST
From: HIC at SCRC-TENEX
Sender: BAK at SCRC-TENEX
Subject: APPLY and FUNCTION (patch 204.55 & .56)
To: bug-lispm at SCRC-TENEX

FUNCTION now accepts special forms in compiled code.  Namely:
(defun bar ()
  #'(lambda (x &quote y) (cons x y)))

would not compile.  Now, it compiles.

Also, (APPLY #'x (LIST a b c)) would optimize into (x a b c) even if x
was a lambda with quoted args.  However, the semantics of those two
forms are different in that case.  This optimization is no longer made
when x is a special form.

Note that (x a b c) in fact compiles incorrectly if x is an internal
lambda with quoted args.

Date: Tuesday, 30 March 1982, 12:19-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
To: kmp at MIT-MC
Cc: BUG-LISPM at MIT-AI

    kmp@MIT-MC 03/30/82 04:23:26
    In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, on Cadr-22:
    I was in an editor window and had moused Kill or Save Buffers on the
    edit command menu. It had put up the menu and I was about to type 
    Do-It when a converse window popped up. I replied to the person sending
    and when I returned, the Kill or Save Buffers menu was gone and the echo
    area said "Done." I'd forgotten if I'd done the Do-It, but assumed from
    the "Done." that I had ... I hadn't. Fortunately, I noticed before booting
    because I did a c-X c-B, but in general it seems to me that the menu should
    not say "Done." in the echo area if it didn't do what was marked on the menu
    before returning. Maybe it should say "Aborted." or "Ignored." or something.
Fixed in the source.

Date: Tuesday, 30 March 1982, 11:53-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: cursor contest
To: Alias for KMP <TURNIP at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 30 Mar 82 04:36-EST from Alias for KMP <TURNIP at MIT-AI>

    Date: 30 March 1982 04:36-EST
    From: Alias for KMP <TURNIP at MIT-AI>
    making two cursors visible in the region of the main editing pain -- one
    flashing, one not.
That's nothing; I just got 5 cursors in my ZMACS, 1 flashing, 4 not.
Want to have a contest?

I believe this will be taken care of when we do the activity system.  Should
be some time this summer.

Date: 30 March 1982 04:36-EST
From: Alias for KMP <TURNIP at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, on Cadr-22:

If you put the cursor in the upper left of the screen in the editor and
then do c-X c-B and then go to another window and back (eg, System S
followed by System E), the blinker for the cursor in the buffer will
re-appear in the top left hand corner over the top of the c-X c-B typeout,
making two cursors visible in the region of the main editing pain -- one
flashing, one not.

kmp@MIT-MC 03/30/82 04:23:26
To: (BUG LISPM) at MIT-AI
In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 5.2, microcode 849, Shiny new magic!, on Cadr-22:

I was in an editor window and had moused Kill or Save Buffers on the
edit command menu. It had put up the menu and I was about to type 
Do-It when a converse window popped up. I replied to the person sending
and when I returned, the Kill or Save Buffers menu was gone and the echo
area said "Done." I'd forgotten if I'd done the Do-It, but assumed from
the "Done." that I had ... I hadn't. Fortunately, I noticed before booting
because I did a c-X c-B, but in general it seems to me that the menu should
not say "Done." in the echo area if it didn't do what was marked on the menu
before returning. Maybe it should say "Aborted." or "Ignored." or something.
-kmp


Date: Tuesday, 30 March 1982, 03:56-EST
From: Howard I. Cannon <HIC at SCRC-TENEX>
To: NLM at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 29 March 1982 21:34-EST
    From: Neil L. Mayle <NLM at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    DAEDALUS 31.6, microcode 849, on Lisp Machine Eight:

    font 5x5 doesn't seem to do lozenges properly.
    

If I make my Lisp Listener use font 5x5, then it prints the lozenged
string, but of course wipes out some of it since it happens to be taller
than the line height. There isn't much that can be done about this,
since it uses font 5x5, which is the smallest reasonable one, plus a
couple of scan lines on the top and on the bottom.

Is this what you meant by "properly"?

Date: 30 March 1982 01:18-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Set Package
To: DLA at SCRC-TENEX
cc: BUG-LISPM at MIT-MC

    Date: Tuesday, 23 March 1982, 18:07-EST
    From: David L. Andre <DLA at SCRC-TENEX>

    ... I don't like any of these proposals for Set Package changing the mode
    line. ... Instead, why don't we have the following:

    Set * (where * is Package, Base, etc.) will NOT update the mode line.
    However, it will print a warning that the package is now different from
    that in the mode line, and if you really want things to stay this way
    you should do M-X Update Mode Line...

    A possible extention is that numeric args to Set * will change the mode
    line.  To that I would be agreeable.  But please don't make it a default.
-----
I like this proposal. I do not like the idea of things gratuitously modifying
the buffer. Set Package should be able to work on read-only files, for example.


Date: 30 March 1982 00:49-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Applyhook
To: BUG-LISPM at MIT-AI


I am trying to write a new stepper for Lisp, and I need an
APPLYHOOK feature, analogous to the already existing
EVALHOOK. This would let me substitute my own function
every time a function gets APPLY'ed, much as EVALHOOK lets
me replace EVAL. Could this be added?


Date: 30 March 1982 00:07-EST
From: James M. Turner <JMTURN at MIT-AI>
To: AGRE at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 28 March 1982 11:32-EST
    From: Philip E. Agre <AGRE at MIT-AI>

    In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.5hz, on Lisp Machine Twenty:

    It would be good if the default location for the mouse in the click-right
    pop-up menu were not "Kill".  My mouse spazzed and killed most of my windows
    before I figured out what was going on.  (Said mouse has been traded in.)

Attributes and Kill have had their positions swapped in the system menu, so
the mouse now has default position Attributes.

						James

Date: 29 March 1982 21:34-EST
From: Neil L. Mayle <NLM at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.6, microcode 849, on Lisp Machine Eight:

font 5x5 doesn't seem to do lozenges properly.



Date: 29 MAR 1982 1515-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LISPM at MIT-AI, mlb at MIT-AI

In ETHER 26.4, System 79.35, microcode 854, on Unknown:

The types of errors produced by giving a function instead of a name of a
function as a :default-handler are rather opaque: A bad "subroutine
call" ??  And of course an instance of loser1 won't print, so you
immediately get a recursive error.  Perhaps :default-handler could
check.

(defflavor loser1 (x y) nil
	   (:default-handler #'barf))


-------

Date: Monday, 29 March 1982  15:10-EST
From: HIC at SCRC-TENEX
To:   Patrick G. Sobalvarro <PGS at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: Sunday, 28 March 1982  13:47-EST
    From: Patrick G. Sobalvarro <PGS at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60 Hz., on Lisp Machine Five:

    If one defines a flavor FOO built on SI:BASIC-SERIAL-STREAM and a
    mixin, and one specifies :DEFAULT-INIT-PLIST in the definition of the
    mixin, FOO breaks on instantiation because SI:BASIC-SERIAL-STREAM has
    its own :init method which insists that every keyword in the init
    plist be one that it specifically knows about.

    Of course I can set the mixin's instance variables in an after init
    method, but I don't want to have to know about the internal workings
    of SI:BASIC-SERIAL-STREAM.  That's why I'm using flavors.
Yes, of course.  This was a braino that is fixed in the source.  I can make it
a patch to 204 if it's activly screwing you.

Date: Monday, 29 March 1982, 13:27-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: DPH & DANIEL's SORTCAR bug
To: RWK at SCRC-TENEX
Cc: DPH at MIT-ML, Daniel at mit-ai, BUG-LISPM at mit-ai
In-reply-to: The message of 29 Mar 82 03:25-EST from Robert W. Kerns <RWK at SCRC-TENEX>,
             The message of 29 Mar 82 00:01-EST from MOON at SCRC-TENEX,
             The message of 28 Mar 82 13:01-EST from Robert W. Kerns <RWK at SCRC-TENEX>,
             The message of 27 Mar 82 03:14-EST from dph at MIT-ML

This bug was indeed the one Moon and i fixed in the source a while ago.
I didn't get any undefined function errors when compiling the new
source.  I will make this a patch to 204.

Date: Monday, 29 March 1982, 12:32-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
To: DLA at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX

    Date: Saturday, 27 March 1982, 18:56-EST
    From: DLA at SCRC-TENEX
    When MAKE-SYSTEM loads the system source file, it is inconsistent with
    the options supplied.  Specifically, it often offers to compile the
    system declaration when no :COMPILE option is given, and often loads the
    system declaration without asking, even when it should normally ask.
I have never seen it fail to ask except when the system is not loaded at all
yet.

Date: Sunday, 28 March 1982, 21:05-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: FQUERY and ZMAIL enhancements
To: doc-changes at SCRC-TENEX, bug-lispm at SCRC-TENEX

I've added :ANY as a choice (instead of (<value> . <choices>)).  Thus you can do
(FQUERY '(:type :readline
	  :choices ((:frob-1 "frob-1" "1")
		    (:frob-2 "frob-2" "2")
		    :any))
      "What frob do you want?  ")

and any response will be legal.  HELP and the prompt will mention
"frob-1" and "frob-2", and tell the user that anything else can be
provided.  Note that :ANY only makes sense as the last item on the
list.  This is apparent when you see the prompt that not putting it
there produces:  What frob do you want?  (frob-1, anything else, or frob-2).

A more concrete example derived from ZMAIL:

(DEFUN SUBJECT-HELP-PROMPT (STREAM CHOICES TYPE)
  CHOICES TYPE					;Not relevant
  (FUNCALL STREAM ':STRING-OUT "Type a subject line for this message, or Return for none."))

(DEFUN ASK-FOR-SUBJECT ()
  (LET ((QUERY-IO *TYPEOUT-WINDOW*))
    (LEXPR-FUNCALL #'FQUERY '(:SELECT T
			      :BEEP T
			      :TYPE :READLINE
			      :LIST-CHOICES NIL
			      :HELP-FUNCTION SUBJECT-HELP-PROMPT
			      :CHOICES ((NIL "") :ANY))
		   "Subject: ")))

Also, this means that ZMAIL's documentation of *REQUIRE-SUBJECT* should be
modified to say it asks for a subject, that it asks for one (or RETURN if
you don't want one).  Previously it asked if it's OK to proceed without one,
and if you say No, it put you back in editing the header.

Date: 28 March 1982 13:47-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.35, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60 Hz., on Lisp Machine Five:

If one defines a flavor FOO built on SI:BASIC-SERIAL-STREAM and a
mixin, and one specifies :DEFAULT-INIT-PLIST in the definition of the
mixin, FOO breaks on instantiation because SI:BASIC-SERIAL-STREAM has
its own :init method which insists that every keyword in the init
plist be one that it specifically knows about.

Of course I can set the mixin's instance variables in an after init
method, but I don't want to have to know about the internal workings
of SI:BASIC-SERIAL-STREAM.  That's why I'm using flavors.

Date: Sunday, 28 March 1982, 12:26-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: UNITS -> UNIT
To: kmp at MIT-MC, Bug-lispm at SCRC-TENEX

In-reply-to: The message of 27 Mar 82 20:00-EST from kmp at MIT-MC

    Date: 03/27/82 20:00:12
    From: kmp@MIT-MC
    It would be helpful if the bound variable for things like 
    (:METHOD TV:STREAM-MIXIN :INCREMENT-CURSORPOS) was called
    UNIT and not UNITS, since it expects :CHARACTER/:PIXEL not
    :CHARACTERS/:PIXELS... Would be useful self-documentation.
Done for 2 other methods as well.

Date: Sunday, 28 March 1982, 12:21-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Still more CONVERSE
To: Alias for KMP <turnip at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 28 Mar 82 00:39-EST from Alias for KMP <turnip at MIT-AI>

    Date: 28 March 1982 00:39-EST
    From: Alias for KMP <turnip at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Experimental Knowledge-Based-Editor 5.1, microcode 849,
    Warning: Black Magic!, on Lisp Machine Twenty-two:

    I just did (:qsend "...") to a person at AI. it sent the message, returned
    T, and then as i was typing my next input line to the lisp listener, through
    me into a Converse window. That's awful. If I'd wanted to use a converse window,
    I'd have done System C in the first place.
It's also an artifact of running old software.  This doesn't happen in 204.49.  I
assume it will not happen in system 80 either.  I note that the version of CONVERS
on AI isn't quite as advanced as the version on POINTER; I assume someone in charge
of CONVERS at AI will do something about this.

    By the way, I still do not find Converse windows pleasing for the following
    reasons:

     (1) They are too slow in starting.
This is also an artifact of old software.  Converse was incorrectly initialized
in system 79; it starts almost instantly for me.
     (2) They are structurally more complex than I need for many tasks. They confuse
	 the notion of TALK/comlink/... with the notion of sends. One is something
	 I want to divert all my attention to and the other is something I only want
	 to be involved in as a background activity. For the former activity,
	 Converse windows are ok; for the latter, I preferred the pop-up qsend windows.
	 I think I would prefer pop-up qsend windows by default with the option at 
	 any time of changing to a full converse window.
This can be gotten with (LOGIN-SETQ ZWEI:*CONVERSE-MODE* ':POP-UP) in the version
of Converse on pointer.  Using this mode does not interfere with your doing SYSTEM-C
if you do want the features of Converse.

If you don't want to divert your attention, however, I suggest you use the :NOTIFY 
(just tells you you have a message, and who from) or :NOTIFY-WITH-MESSAGE (tells
you the message in the notification as well).  This won't interrupt what you're
typing with a pop-up window demanding an answer to a question, unless you're in a
window which does notifications that way....
    -kmp

It's too bad people judge Converse from broken and obsolete versions,
but such is life.  It does mean nobody thinks about what's REALLY wrong
with it.  I think the first point of your set-of-points #2 is close to the
mark; it presents the user with too much complexity at a time.

Date: Sunday, 28 March 1982, 11:58-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: COMSAT messages in SUPDUP and deexposed-typeout notifications
To: Philip E. Agre <AGRE at MIT-AI>
Cc: bug-lispm at SCRC-TENEX
In-reply-to: The message of 26 Mar 82 12:30-EST from Philip E. Agre <AGRE at MIT-AI>

    Date: 26 March 1982 12:30-EST
    From: Philip E. Agre <AGRE at MIT-AI>
	Date: 26 Mar 1982 0613-EST
	From: Robert W. Kerns <RWK at SCRC-TENEX>
	Yes, it's called "Get somebody to manage AI's disk space."  This DOESN'T
	mean somebody who will delete files on people arbitrarily (although a
	knowledgable person will learn some things that can be deleted painlessly),
	but rather somebody who will hassle those who need hassling AND WILL DO
	TAPE GFR's AS MUCH AS IS NEEDED FOR THE CONTINUED OPERATION OF THE MACHINE.
	If it weren't that AI was about to be replaced; I'd suggest you hassle
	Winston to have somebody do that.  No other ITS is managed so poorly.
    You're right, of course, but I actually meant it more generally.  Please see
    my clarification of 26 March 04:35.
I know what you meant, of course; you shouldn't take my taking you so literally so
literally....

Anyway, what you want to do is no problem to implement, by setting the
TV:DEEXPOSED-TYPEOUT-ACTION of a window, except that the information
comes a character at a time, so the deexposed-typeout-action would have
to watch and buffer the characters, and arrange to type them out when
the sheet is exposed.  Since I can't envision any other case where
anyone would actually make the effort to use this feature, I don't feel
it's worth the effort involved in implementing it.

Date: 28 March 1982 11:32-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

It would be good if the default location for the mouse in the click-right
pop-up menu were not "Kill".  My mouse spazzed and killed most of my windows
before I figured out what was going on.  (Said mouse has been traded in.)

Date: Sunday, 28 March 1982  04:00-EST
From: MOON at SCRC-TENEX
To:   RpK at MC
Cc:   BUG-LISPM at SCRC-TENEX
Subject: Disk label

    Date: Saturday, 27 March 1982, 01:27-EST
    From: Robert P. Krajewski <uc.rpk at MIT-EECS>
    Reply-to: RpK at MC
    Subject: Disk label
    To: BUG-LISPM at SCRC-TENEX
    Cc: RpK at MC

    In Experimental System 204.13, Experimental ZMail 42.1, microcode 865, on Lisp Machine Ten:

    Many times, when one is editing the disk label, it would be nice if the
    Control-E command, when used on a field that is supposed to be a number,
    would accept
           + <n>   to mean <n> more than the current contents of the field,
    and simlilarly for - <n>.  This would be especially useful when changing
    relative sizes of bands.
It would be a little nicer, but I get by with #. for this.

    Is there any function that gives that current bands (LOD and MCR) ?
Probably not.  You could call read-disk-label and then call get-disk-string
with the right numbers as arguments.

Date: Saturday, 27 March 1982, 18:56-EST
From: DLA at SCRC-TENEX
Sender: Zippy at SCRC-TENEX
To: BUG-LISPM at SCRC-TENEX

In System 204.50, ZMail 42.9, LMFS 24.6, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, on Collie:

When MAKE-SYSTEM loads the system source file, it is inconsistent with
the options supplied.  Specifically, it often offers to compile the
system declaration when no :COMPILE option is given, and often loads the
system declaration without asking, even when it should normally ask.

Date: Friday, 26 March 1982, 10:28-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Patch system
To: JMTURN at MIT-AI
Cc: BUG-LISPM at MIT-AI

Yes, the patch directory (and the master directory, if necessary) are
automatically created by MAKE-SYSTEM.  I'll update the manual source.

Date: Saturday, 27 March 1982, 01:27-EST
From: Robert P. Krajewski <uc.rpk at MIT-EECS>
Reply-to: RpK at MC
Subject: Disk label
To: BUG-LISPM at SCRC-TENEX
Cc: RpK at MC

In Experimental System 204.13, Experimental ZMail 42.1, microcode 865, on Lisp Machine Ten:

Many times, when one is editing the disk label, it would be nice if the
Control-E command, when used on a field that is supposed to be a number,
would accept
       + <n>   to mean <n> more than the current contents of the field,
and simlilarly for - <n>.  This would be especially useful when changing
relative sizes of bands.

Is there any function that gives that current bands (LOD and MCR) ?

bob

Date: 28 March 1982 00:39-EST
From: Alias for KMP <turnip at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 5.1, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

I just did (:qsend "...") to a person at AI. it sent the message, returned
T, and then as i was typing my next input line to the lisp listener, through
me into a Converse window. That's awful. If I'd wanted to use a converse window,
I'd have done System C in the first place.

By the way, I still do not find Converse windows pleasing for the following
reasons:

 (1) They are too slow in starting.

 (2) They are structurally more complex than I need for many tasks. They confuse
     the notion of TALK/comlink/... with the notion of sends. One is something
     I want to divert all my attention to and the other is something I only want
     to be involved in as a background activity. For the former activity,
     Converse windows are ok; for the latter, I preferred the pop-up qsend windows.
     I think I would prefer pop-up qsend windows by default with the option at 
     any time of changing to a full converse window.

-kmp

dph@MIT-ML 03/27/82 20:33:48
To: (BUG LISPM) at MIT-AI
In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice,
on Lisp Machine Twenty-two:

(cc:salvage-editor) leaves you in package cadr when its done running,
it would be better if it returned from whence it came.


kmp@MIT-MC 03/27/82 20:00:12
To: (BUG LISPM) at MIT-AI
In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 5.1, microcode 849,
Warning: Black Magic!, on Lisp Machine Twenty-two:

It would be helpful if the bound variable for things like 
(:METHOD TV:STREAM-MIXIN :INCREMENT-CURSORPOS) was called
UNIT and not UNITS, since it expects :CHARACTER/:PIXEL not
:CHARACTERS/:PIXELS... Would be useful self-documentation.

-kmp


dph@MIT-ML 03/27/82 03:14:31
To: (BUG LISPM) at MIT-AI
CC: GLS at MIT-ML
In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.7, microcode 849, on Lisp Machine Eight:

Sort (or more specifically sortcar) does not work on the following list:

((320 373 VOWEL-LIKE) (277 297 VOWEL-LIKE) (227 259 VOWEL-LIKE)
 (113 197 VOWEL-LIKE) (34 102 VOWEL-LIKE) (3 8 VOWEL-LIKE)
 (299 309 WEAK-TURBULENCE) (255 278 WEAK-TURBULENCE)
 (209 229 WEAK-TURBULENCE) (204 208 WEAK-TURBULENCE)
 (108 114 WEAK-TURBULENCE) (23 37 WEAK-TURBULENCE)
 (7 14 WEAK-TURBULENCE) (373 383 SILENCE) (309 319 SILENCE)
 (197 204 SILENCE) (104 108 SILENCE) (14 23 SILENCE) (0 3 SILENCE))

(sortcar * #'<) evaluates to

((0 3 SILENCE) (3 8 VOWEL-LIKE) (7 14 WEAK-TURBULENCE) (14 23 SILENCE)
 (23 37 WEAK-TURBULENCE) (34 102 VOWEL-LIKE) (299 309 WEAK-TURBULENCE)
 (104 108 SILENCE) (108 114 WEAK-TURBULENCE) (113 197 VOWEL-LIKE)
 (197 204 SILENCE) (204 208 WEAK-TURBULENCE) (320 373 VOWEL-LIKE)
 (209 229 WEAK-TURBULENCE) (227 259 VOWEL-LIKE) (255 278 WEAK-TURBULENCE)
 (277 297 VOWEL-LIKE) (309 319 SILENCE) (373 383 SILENCE))

while (sortcar (copylist <first form before being rplaced in sortcar>) #'<)
evaluates to the correct sorting

((0 3 SILENCE) (3 8 VOWEL-LIKE) (7 14 WEAK-TURBULENCE) (14 23 SILENCE)
 (23 37 WEAK-TURBULENCE) (34 102 VOWEL-LIKE) (104 108 SILENCE)
 (108 114 WEAK-TURBULENCE) (113 197 VOWEL-LIKE) (197 204 SILENCE)
 (204 208 WEAK-TURBULENCE) (209 229 WEAK-TURBULENCE) (227 259 VOWEL-LIKE)
 (255 278 WEAK-TURBULENCE) (277 297 VOWEL-LIKE) (299 309 WEAK-TURBULENCE)
 (309 319 SILENCE) (320 373 VOWEL-LIKE) (373 383 SILENCE))

Presumably this has to do with the fact that the uncopylisted form
is not fully cdr-coded.

DPH and Daniel


Date: 26 Mar 1982 2118-PST
From: Chris Ryland <RYLAND at SRI-KL>
Subject: Symbolics vs LMI
To: bug-lispm at MIT-AI

Oh, please, folks, stop airing gripes and nearly-personal snipes on the
airwaves.  (Though the arrows seem to be mostly flying in Symbolics'
direction!)  This sort of thing requires the personal touch.
-------

Date: 26 March 1982 23:30-EST
From: Richard M. Stallman <RMS at MIT-AI>
Sender: RMS0 at MIT-AI
To: INFO-LISPM at MIT-AI

The recent announcement from "the staff of Symbolics" takes the tone
of a generous and magnanimous offer to MIT.  People ought to know the
background facts so that they can judge the appropriateness of that
tone.

Just about everything which Symbolics says it will do for MIT is
required by the contract (I read it yesterday).  Specifically,
Symbolics is required to make available anything which, had it existed
at MIT when the contract was signed, would have been considered a part
of the Lisp machine system.  This, in my interpretation, would include
such things as font editors, file systems, new compilers, faster
flavors, etc., though not applications programs.

Symbolics is not required to pay attention to bug reports from MIT.
But they will do this only when it suits them anyway, and we can be
sure they would do so, out of self-interest, in any case.  They are
not doing it for MIT's sake.  They are not required to put their files
onto an MIT machine; they are only required to let someone from MIT
copy them there.  This doesn't make much difference either way.

So Symbolics is not really offering MIT anything.

Instead they are breaking an oral agreement made (I am told) between
Symbolics, LMI and the MIT lawyers, according to which changes to the
basic system would belong to MIT for the sake of compatibility; an
agreement which, until the beginning of this year, they followed.

Their new policy is therefore properly understood as ceasing to do
anything out of their way for MIT's sake, as they used to do, and
instead doing only what is good for them or required in writing.

Date: 26 MAR 1982 1920-PST
From: DEKLEER at PARC-MAXC
Subject:  Defselect recompilation problem.
To:   BUG-LISPM at MIT-AI

In ETHER 26.4, System 79.34, microcode 854, on Unknown:

Compile:
(defselect (a b)
  (:foo nil (print 'a)))

(defselect (b)
  (:bar nil (print 'b)))

Now (try) compile:
(defselect (a b)
  (:bar nil (print 'a))
  (:foo nil (print 'a)))

It bombs out in si:defselect-internal trying to take car of 'b.
-------

Date: 26 March 1982 10:08-EST
From: Jonathan Delatizky <delatz at MIT-AI>
Sender: JMH at MIT-AI
To: BUG-LISPM at MIT-AI

CADR-19 seems to be wedged. Is anyone aware of a problem?
It says cold-booted, the time is stuck at 10 am yesterday,
and the left-hand run light is stuck on. It doesn't respond to
cold booting or anything

Date: 26 March 1982 04:35-EST
From: Philip E. Agre <AGRE at MIT-AI>
Subject: Mea culpa, obscure bug-lispm request explained
To: BUG-LISPM at MIT-AI

Ack.  Some people misinterpreted: I really meant this literally.  Is
there some way to let some program scan what's to be typed out and
decide if it's worth making a notification about?  This would be a
generalization of what you can do with Terminal-T.  COMSAT complaints
are a pain, but I certainly want to be told about :SEND's.  What is
needed is a way for a DEEXPOSED-TYPEOUT-ACTION form to be able to get
ahold of the backed up output when it is called by the (TV:SHEET
:OUTPUT-HOLD-EXCEPTION) method.  Also, when an illegal form is given
as a DEEXPOSED-TYPEOUT-ACTION, this method should be more careful not
to let the ferror end up happening on the window with the illegal
"other" deexposed typeout action attribute, since the window seems to
be completely disabled for input, presumably because it has gotten an
error.  Presently when it gets the error it goes to the cold load
stream to do the ferror, but aborting that error handler just gives
you the error on the wedged window.  Sorry about the imprecision.

    Date: 25 March 1982 17:14-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    To: BUG-LISPM at MIT-AI
    
    In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine Four:
    
    I imagine that this is probably asking quite a bit, but is there a way to
    keep your supdup window from demanding that you let it type out when all
    there is to type is a message from COMSAT complaining about file space?
    

Date: 26 March 1982 01:47-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, 60Hz, on Lisp Machine Sixteen:

I can't seem to get Fill Long Comment to work reliably. Sometimes it
fills the entire comment; other times it fills only part of the
comment.  Sometimes it fills a comment one way and sometimes another
way, depending where I am on the line. For example, in Lisp Fill mode,
with fill column = to 80 chars, I type

;;; foo
;;; bar

and then do M-X Fill Long Comment. It works. But if there's anything
on the line after the comment, it doesn't work. Sometimes if there's
nothing on the next line it doesn't work.

Date: Friday, 26 March 1982, 01:37-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: Paging Hack
To: Jerry Roylance <GLR at MIT-AI>
Cc: BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 18 Mar 82 10:11-EST from Jerry Roylance <GLR at MIT-AI>

    Date: 18 March 1982 11:11-EDT
    From: Jerry Roylance <GLR at MIT-AI>
    Subject:  Paging Hack
    To: BUG-LISPM at MIT-AI
    cc: GLR at MIT-AI


    How difficult would it be to make an optional bitmap display of the current
    page table?  As pages came in and went out, their corresponding
    pixels on the screen would change.  Bored programers could watch
    the pixels dance around as their programs paged.
    Displaying all 64K pixels takes about 10% of the screen.

Try compiling and loading MC:MOON;PWATCH (or F:>Moon>Pwatch.lisp).
You can then select Page Watch in Create or Split Screen.
The display is not very interesting, actually.

Date: Thursday, 25 March 1982, 22:29-EST
From: David A. Moon <Moon at SCRC-TENEX>
To: David Chapman <Zvona at MIT-AI>
Cc: BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 22 Mar 82 11:22-EST from David Chapman <Zvona at MIT-AI>

    Date: 22 March 1982 11:22-EST
    From: David Chapman <Zvona at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.33, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Eighteen:

    arglist can not find one for BIND.
This class of bugs is fixed in the source now.

Date: 25 March 1982 17:14-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Four:

I imagine that this is probably asking quite a bit, but is there a way to
keep your supdup window from demanding that you let it type out when all
there is to type is a message from COMSAT complaining about file space?

Date: Thursday, 25 March 1982, 06:47-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Ugh.
To: BUG-LISPM at SCRC-TENEX

When viewing a file in ZWEI, you can type c-Space to go into what is
evidently a "scroll mode".  In that mode, holding a control key down
scrolls down by about 2 line per second, and holding the meta key down
scrolls up at about the same rate.

This has my nomination for the most repugnant user interface of the year
award.

MOON@MIT-MC 03/25/82 03:09:17 Re: Forwarded to correct mailing list
To: (BUG lispm) at MIT-AI
CC: salz at MIT-AI
SALZ@MIT-AI 03/23/82 21:20:24 Re: 
To: (BUG SUPDUP) at MIT-AI
In supdup in System 79.28, ZMail 40.7, Remote-File 2.0,
LMFILE-Remote 5.3, microcode 849, on Lisp Machine Ten:

Typing <NETWORK><HELP> should ask you to type a space to then
flush the help display -- it's a real pain to lose the top
l5% of the screen.

I think TELNET does this, too...



Date: 24 March 1982 22:44-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: New system under SYSTEM
To: RWK at SCRC-TENEX
cc: JMTURN at MIT-AI, BUG-LISPM at MIT-AI

Hmmm, I suppose that is a reasonable thing for the patch file,
but the reason I want it under SYSTEM is it is for patches
and systems which would normally live under SYSTEM, with a
#+MIT in front of them. BTW, how do you intialize the patch
directory? Is this done the first time someone does a MAKE-SYSTEM
of the new system? The manual doesn't make this clear.

				James
P.S. If there is no reason it has to run under SYSTEM, I'll
orphan it, and put it with a make-system in SYSDCL.

Date: 24 March 1982 22:10-EST
From: Michael Travers <MT at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

I have a call to TV:SET-DEFAULT-FONT in my init file.  It
changes the default font for most windows, but there a few
exceptions, notably typeout windows and ZMAIL message
composition windows.

Date: 24 March 1982 21:58-EST
From: George J. Carrette <GJC at MIT-MC>
To: DULCEY at MIT-MC
cc: CL at MIT-EECS, BUG-LISPM at MIT-AI

I will look at that bug since it may be related to having Macsyma loaded.
In the mean time, get Chuck Linton to make the system 204 band the
default band on those machines.



DULCEY@MIT-MC 03/24/82 21:03:22
To: (BUG LISPM) at MIT-AI
In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, 60Hz, on Lisp Machine Sixteen:

An attempt to create a split-screen on this machine failed.
The exact sequence of operations follows:

{cold-boot of machine}

(gc-on)
(login 'dulcey)
{mouse-right}			;for system menu
{mouse-left on SPLIT SCREEN}
{mouse-left on LISP}

--> window-system problems, using the cold-load stream <--


>>>>TRAP 5327 (ARGTYP CONS M-T T ...)
The argument to CAR, MC:MACSYMA-LISTENER, was of the wrong type.
The function expected a cons.
While in the function TV:GET-STRING-FROM-WINDOW-TYPE  TV:SYSTEM-MENU-SPLIT-SCREEN-VIA-MENUS  (

TV:GET-STRING-FROM-WINDOW-TYPE:
   Arg 0 (TYPE) TV:LISP-LISTENER



(I did this after the same window hack failed with the machine farther from its initial
state.  As the sequence given above shows, the lossage happens with an almost completely
untouched system!)


Date: Wednesday, 24 March 1982, 17:50-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: PRESS-PRINT-FILE
To: Gerald R. Barber <JERRYB at MIT-AI>
Cc: PGS at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 24 Mar 82 12:56-EST from Gerald R. Barber <JERRYB at MIT-AI>


    Date: 24 March 1982 12:56-EST
    From: Gerald R. Barber <JERRYB at MIT-AI>
	Date: 24 March 1982 03:39-EST
	From: Patrick G. Sobalvarro <PGS>
	    EB@MIT-ML 03/24/82 02:41:29
	    ... I don't think PRESS:PRINT-FILE should be willing to print
	    files in the case where it can tell they prefer to be binary
	    rather than character.
	Since we don't have file types, it'd be pretty silly for us to try to
	tell. What would we do? Statistical analysis on the character codes?
    It could test to see if the file is a press file by looking at the password
    stored in the file (if the stream supports random access).
That's fine for PRESS files, but doesn't help the problem of printing text
files.

Date: Wednesday, 24 March 1982  17:26-EST
From: DLW at SCRC-TENEX
To:   Bernard S Greenberg <BSG at SCRC-TENEX>
Cc:   BUG-LISPM at MIT-AI
Subject: Interned pathnames propagating bad information  (very old subject!)

I agree that Set Package should do what you and I consider the obvious
thing, namely, changing the package everywhere that it's known.  The
special-purpose command that Moon wants, however, is sufficiently similar
to Set Package that it should have a name that suggests Set Package, but
that is longer so that it looks like a more advanced version of Set Package
(which it is).  Set Buffer Package sounds good to me.

Date: Wednesday, 24 March 1982  17:29-EST
From: DLW at SCRC-TENEX
To:   James E. Kulp <JEK at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX
Subject: si:system-additional-info is unbound

I have not looked into the problem you mentioned.  But it brings
up what is at least a closely related point.

The SI:PRINT-HERALD function uses the boundedness of this variable
to decide whether to print it or not.  I think this is a bad idea.
The variable should be DEFVARed with an initial value of of NIL,
and SI:PRINT-HERALD should test whether it is NIL.  Without going
into the question of whether using NIL or using unboundedness is
inherently better for this sort of thing, I'd just like to say
that we should pick one or the other and be consistent about it.
NIL-ness is used much more than unboundedness, and so I think
our standard should be to use NIL.

Date: 24 March 1982 16:33-EST
From: Henry Lieberman <Henry at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, 60Hz, on Lisp Machine Sixteen:

You can't use the Split Screen menu operation on this machine.
It dies trying to take CAR of 'MC:MACSYMA-LISTENER.


Date: 24 March 1982 12:56-EST
From: Gerald R. Barber <JERRYB at MIT-AI>
Subject:  PRESS-PRINT-FILE
To: PGS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 24 March 1982 03:39-EST
    From: Patrick G. Sobalvarro <PGS>
    To:   BUG-LISPM
    Re:   PRESS-PRINT-FILE

        EB@MIT-ML 03/24/82 02:41:29
        ... I don't think PRESS:PRINT-FILE should be willing to print
        files in the case where it can tell they prefer to be binary
        rather than character.

    Since we don't have file types, it'd be pretty silly for us to try to
    tell. What would we do? Statistical analysis on the character codes?
It could test to see if the file is a press file by looking at the password
stored in the file (if the stream supports random access).

Date: Wednesday, 24 March 1982, 10:55-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: New system under SYSTEM
To: James M. Turner <JMTurn at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 24 Mar 82 03:21-EST from James M. Turner <JMTurn at MIT-AI>


    Date: Wednesday, 24 March 1982, 03:21-EST
    From: James M. Turner <JMTurn at MIT-AI>
    Subject: New system under SYSTEM
    To: BUG-LISPM at MIT-AI
    Cc: JMTURN at MIT-AI

    In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 79.33, on Lisp Machine Twenty-four:

    I have added system MIT-SPECIFIC to SYSDCL, with default pathame
    SYS:MITPAT. At the moment, it exists simply to provide an
    MIT-specific patch facilty. It might be a good idea to put all
    systems only run at MIT (like :LMFILE-REMOTE) under it.

    This won't show up until 80, since it is a pain to add systems
    to SYSTEM mid-stride.

					    James
Why not just put a 
(DEFSYSTEM MIT (:DEFAULT-PATHNAME "SYS:MITPAT;")
	(:PATCHABLE)
	(:BUG-REPORTS "LISPM-MIT"))

and a suitable MAKE-SYSTEM in the patch file?  I don't see any point to
making it a component system of SYSTEM.

Date: 24 March 1982 09:40-EST
From: Steven C. Bagley <BAGLEY at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:

What about adding a macro that would wire some object in, while the body
of the macro is executing?

So you could do
(WITH-STRUCTURE-WIRED-IN big-structure
   (fiddle-with big-structure))

The alternative would be to add an optional arg to PAGE-IN-STRUCTURE
(PAGE-IN-ARRAY, PAGE-IN ....) that would ask that as the pages are
brought in, they are wired in.  Then afterwards, you do a PAGE-OUT-...,
which would unwire the pages, as necessary.

This is low priority.

Date: Wednesday, 24 March 1982, 09:26-EST
From: Bernard S Greenberg <BSG at SCRC-TENEX>
Subject: Interned pathnames propagating bad information  (old subject!)
To: MOON at SCRC-TENEX, dlw at MIT-AI
Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, TURNIP at MIT-AI

    Date: Tuesday, 23 March 1982  15:23-EST
    From: MOON at SCRC-TENEX
    Renaming Set Package to Set Buffer Package and making a new Set Package
    command that updates the -*- line would be all right with me.  I assume
    there would also be Set Base, Set Mode, and maybe Set Lowercase.  Since
    the command would be changed grossly incompatibly (modifying the buffer)
    it might be wise to call the new command Set File Package and make
    Set Package nonexistent.
I dunno.  There is an argument of the form "why don't we just fix the thing to
do what people expect", which militates in favor of fixing the command whose name
implies the obvious thing, i.e., Set Package, to do so, i.e., modify the buffer.
The counter-argument to incompatibility is that fewer people will be scrod per day by
the new incompatibility than by the old poor behavior.

I think your needed command is more of a pkg-goto than a Set Package, and perhaps
Go to Package is the right nomenclature.

Date: Wednesday, 24 March 1982, 08:50-EST
From: James E. Kulp <JEK at SCRC-TENEX>
Subject: si:system-additional-info is unbound
To: BUG-LISPM at SCRC-TENEX

In System 204.43, ZMail 42.7, LMFS 24.4, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, foobar, on Retriever:

Causing bug mail and load-and-save-patches (among others) to blow up.

Date: 24 March 1982 08:03-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: INFO-LISPM at MIT-AI

Now that the AI machine's problems with them seem to be in remission, the chaos
door and elevator servers are once again installed.

Date: 24 Mar 1982 0554-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Where to get 204.
To: INFO-LISPM at SCRC-TENEX
cc: DLA at SCRC-TENEX

It seems that a large number of 204 bands have gotten munged somehow.
There are (hopefully) unmunged bands on LM10, LM11, and LM13.
-------

Date: Wednesday, 24 March 1982, 04:53-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: PRESS-PRINT-FILE
To: Patrick G. Sobalvarro <PGS at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 24 Mar 82 03:39-EST from Patrick G. Sobalvarro <PGS at MIT-AI>


    Date: 24 March 1982 03:39-EST
    From: Patrick G. Sobalvarro <PGS at MIT-AI>
    Subject: PRESS-PRINT-FILE
    To: BUG-LISPM at MIT-AI

	EB@MIT-ML 03/24/82 02:41:29
	... I don't think PRESS:PRINT-FILE should be willing to print
	files in the case where it can tell they prefer to be binary
	rather than character.

    Since we don't have file types, it'd be pretty silly for us to try to
    tell. What would we do? Statistical analysis on the character codes?
Well, it can open the file in mode :CHARACTERS :DEFAULT, and if it's
not a character stream, complain.  Just how adaquate this test is depends
on the file system involved, but it will at least notice QFASL files.

Date: 24 March 1982 03:39-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
Subject: PRESS-PRINT-FILE
To: BUG-LISPM at MIT-AI

    EB@MIT-ML 03/24/82 02:41:29
    ... I don't think PRESS:PRINT-FILE should be willing to print
    files in the case where it can tell they prefer to be binary
    rather than character.

Since we don't have file types, it'd be pretty silly for us to try to
tell. What would we do? Statistical analysis on the character codes?

Date: Wednesday, 24 March 1982, 03:21-EST
From: James M. Turner <JMTurn at MIT-AI>
Subject: New system under SYSTEM
To: BUG-LISPM at MIT-AI
Cc: JMTURN at MIT-AI

In System 79.34, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 79.33, on Lisp Machine Twenty-four:

I have added system MIT-SPECIFIC to SYSDCL, with default pathame
SYS:MITPAT. At the moment, it exists simply to provide an
MIT-specific patch facilty. It might be a good idea to put all
systems only run at MIT (like :LMFILE-REMOTE) under it.

This won't show up until 80, since it is a pain to add systems
to SYSTEM mid-stride.

					James

EB@MIT-ML 03/24/82 02:41:29
To: (BUG LISPM) at MIT-AI
In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:

Since no one ought to call it on a binary file, this is more of a
suggestion than a bug report, but I don't think PRESS:PRINT-FILE should
be willing to print files in the case where it can tell they prefer to
be binary rather than character.  (I used DIRED to apply a function that
copied its argument to someplace and also called PRESS:PRINT-FILE one
it; I mistakenly applied it to a QFASL file, forgetting about the
printing part.  I aborted the printing with C-M-Break.)


EB@MIT-ML 03/24/82 02:41:29
To: (BUG LISPM) at MIT-AI
In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:

Since no one ought to call it on a binary file, this is more of a
suggestion than a bug report, but I don't think PRESS:PRINT-FILE should
be willing to print files in the case where it can tell they prefer to
be binary rather than character.  (I used DIRED to apply a function that
copied its argument to someplace and also called PRESS:PRINT-FILE one
it; I mistakenly applied it to a QFASL file, forgetting about the
printing part.  I aborted the printing with C-M-Break.)


Date: Wednesday, 24 March 1982  02:10-EST
From: MOON at SCRC-TENEX
To:   Edward Barton <EB at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: Your long bug report about packages

I believe the bug stems from the principal name of the package not being
the same as its ref name under global.  In general hierarchical packages
are not handled well.  This will of course be fixed eventually when the
package system is redesigned, but perhaps in the meantime we can fix the
bug in QC-FILE that changed the file's package from the name that you had
set it to in the -*- line, to the package's principal name as created
with package-declare.

Date: 24 March 1982 02:02-EST
From: Edward Barton <EB at MIT-AI>
Subject: Please don't tread on my namespace, it's flat enough as it is
To: ALAN at MIT-MC
cc: BUG-LISPM at MIT-AI

    Date: 24 March 1982 00:05-EST
    From: Alan Bawden <ALAN at MIT-MC>

    Most people seem to have come to the conclusion by now that the hierarchical
    nature of the current package nameing system is a loss.  The next package
    system (still in the sky) was going to just assume a global namespace of
    package names.

    What do you find that you want this feature for?  How badly will it hurt you if
    we flush your ability to do this?  (Remember, I am NOT talking about taking
    away the ability to make one package an inferior to another, just about taking
    away the ability to have two packages with the same name.)

I definitely would not like a global namespace of package names unless
there is also a hierarchical naming feature.  Actually I would prefer
that both mechanisms exist; a global naming space would be a
convenient thing for programs to use in getting around the kinds of
problems I ran into, while a hierarchical one would be useful for me
to use.

I want a hierarchy of packages so that I can set up my own set of
privately global symbols.  (Obviously there would be disadvantages to
making them globally global, but then you aren't talking about taking
that ability away.)  The hierarchy looks something like this:

	GLOBAL
	  |
	FOO-GLOBAL______________________________________________________
	  |	     |		      |			    |
	 FOO  FOO-COMPONENT-A  FOO-COMPONENT-B ... FOO-GENERAL-UTILITIES

Now here are the reasons why I want a hierarchical package naming
space:

(1) I am unwilling to pollute the global package naming space by
adding short package names like A:, B:, and U: to the global space.  I
am only willing to add long names like FOO-COMPONENT-A:.

(2) I am unwilling to type long package names for inter-component
references.  From within FOO-COMPONENT-A I do not want to type
(setq foo-component-b:hairy-parameter nil).  I want to mention
b:hairy-parameter instead.

(3) Given that I have decided to make the different components of FOO
reside in different packages, I do not want to put all the
inter-module symbols in FOO-GLOBAL.  For example, in my actual system
there are several cases where I define flavors and functions of the
same name in two modules.  For instance, CFLOW:OP-NODE encapsulates
all the behavior that deals only with control flow analysis, while
DFLOW:OP-NODE mixes into CFLOW:OP-NODE additional behaviors that
perform data flow analysis.  I do not particularly want to make up
Maclisp-y hyphenated names when there is a package system around.

Obviously the behavior I want requires hierarchical naming, because I
want A: to be meaningful only within packages under FOO-GLOBAL.

How badly would I be hurt by a flat global package namespace?  The
question is just like the question of how much I would be hurt by a
flat global interning space.  An individual user is often not hurt too
much because he can presumably sit down with himself to resolve any
naming conflicts that occur within his own code.  But he is half out
of luck if someone else beats him to a package name he wants, and he
is completely out of luck if he loads two different systems written by
other people who liked the package prefix UTIL:.

I think that a flat global package namespace is reasonable ONLY under
the assumption that hardly anyone is going to use the package system
much.  I hope and assume that the truth-probability of such
assumptions goes down as users and their Zetalisp systems become more
sophisticated.  Personally I want to use the package system
extensively.  Others may not, just as some people have deep directory
hierarchies and others have flat bushy ones on computers that allow
subdirectories.

I think the following idea is much better than flushing hierarchical
naming:

(A)  A well-defined hierarchical package naming system exists; every
     nameable package is ultimately reachable from GLOBAL.
(B)  There exists a function that returns an ABSOLUTE name spec for
     any package.  Such an absolute spec for FOO-GLOBAL:A above has
     the form ("GLOBAL" "FOO-GLOBAL" "A").  If we assume that "GLOBAL"
     always refers to GLOBAL, multi-step RELATIVE specs can have the
     same form.  (PKG-ABSOLUTE-PATHNAME pkg), perhaps.
(C)  Many programs that currently deal internally with relative package
     names cease to do so.  A program should hardly ever store away
     a relative package spec; PACKAGE properties of pathnames (or
     whatever those properties are called) should always be absolute
     package name specs.  Then ZMACS won't make me cold-boot when all
     I want is to select its window.  In my ideal scenario system
     programmers become conscious of those times when they really do
     want relative pathnames; they use them then and then only.

In short, I don't think flushing the hierarchical package prefix space
is a good idea, and from my naive viewpoint it doesn't look very hard
to implement a version of it that even has correct behavior.

Date: Tuesday, 23 March 1982, 23:28-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Interned pathnames propagating bad information
To: DLA at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX

I disagree.  I have yet to see why you would be "screwed many times".
It still seems to me that the behavior I suggest is most likely to be
the right thing for people doing ordinary things, and therefore it
should be the default.  If you can convince me that it would usually
"screw" normal users, who do normal and not system-hackerish things,
then I'll change my opinion.

Date: 23 March 1982 23:05-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:

M-. shows you ";" comments before a function definition, but not #| ... |#
comments.

Date: 23 March 1982 22:55-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:

In file #1 (fc:eb\package-bug;pkgdcl):

; -*- Mode:Lisp; Package:User -*-

(package-declare aaa global 100 ())
(package-declare bbb aaa 100 ()
  (myrefname global aaa-bbb))

In file #2 (fc:eb\package-bug;function):

; -*- Mode:Lisp; Package: AAA-BBB -*-

(defun foo () nil)

In a LISP listener:

(pkg-goto 'user)

(load <file #1>)
; fine

'aaa:bbb:zoo
AAA-BBB:ZOO
; fine

(load <file #2>)
; fine

(aaa:bbb:foo)
NIL

(qc-file <file #2>)
#<...pathname...>		; fine
(load *)

Package BBB not found.  Create? (yes or no)
;;; lossage

Also, depending on what package you are in at various times, ZMACS may start
getting similar horrible errors when you just switch buffers.  Shouldn't it
find the package just once, so it won't bomb out that way?  If you play your
cards right you can even get the error in some keyboard process instead, when
it is trying to call something like an :after :redisplay method on some ZMACS
thing.  If you have really gotten lucky you will even be unable to warm-boot
the machine.

What can I do to avoid this lossage?  I want a package hierarchy, only
long refnames present on GLOBAL, and shorter refnames accessible from
within the hierarchy.

Date: 23 March 1982 21:12-EST
From: Richard E. Salz <SALZ at MIT-AI>
Subject: The middle mouse button sticks...
To: BUG-LISPM at MIT-AI, uc.rpk at MIT-EECS

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Ten:

...it's only a slight pain now, but it's getting worse (yes, even
as we sit here!!!!!!!!!!!!)

Date: Tuesday, 23 March 1982, 20:43-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: LispM init file
To: naha at mit-vax
Cc: RpK at mit-xx, bug-lispm at mit-ai
In-reply-to: The message of 23 Mar 82 14:27-EST from naha at mit-vax


    Date: 23 Mar 1982 14:27:35-EST
    From: naha at mit-vax
    My lisp machine init exists on ee, mit-vax and CCC.  I know
    that I have to do an (fs:add-chaosnet-file-computer "ccc") before I
    log in if I want to log in to ccc and have my init from there run.
    My question wasn't what I had to type but rather why I had to type it
    for CCC when I don't for ai, ee or mc.  Why are some systems more
    equal than others?  

    add-chaosnet-file-computer has become an inate response among those
    who have the misfortune of using the file systems of other than a
    small number of chosen computers whenever they get a message saying
    that their host is not a recognized file computer.  Why can't the
    high level file hacking code do this if it has to be done at all?
CCC has been added to the site file for both the MIT and Symbolics systems.
(SI:UPDATE-SITE-CONFIGURATION-INFO) will get the updated info, and the
band can be saved.

This problem won't exist in the new pathname scheme.
(Yep, another one of those like the "new error scheme", the "activity system",
etc...)

Date: Tuesday, 23 March 1982, 18:07-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Interned pathnames propagating bad information
To: dlw at MIT-AI
Cc: MOON at SCRC-TENEX, BUG-LISPM at MIT-AI, TURNIP at MIT-AI,
    BUG-ZWEI at SCRC-TENEX, DLA at SCRC-TENEX

I don't like any of these proposals for Set Package changing the mode
line.  I would have been screwed many times by having that behavior.
Instead, why don't we have the following:

Set * (where * is Package, Base, etc.) will NOT update the mode line.
However, it will print a warning that the package is now different from
that in the mode line, and if you really want things to stay this way
you should do M-X Update Mode Line.  This will not screw Moon and me,
and will help naive users to understand what is happening.

A possible extention is that numeric args to Set * will change the mode
line.  To that I would be agreeable.  But please don't make it a
default.

Date: Tuesday, 23 March 1982  15:23-EST
From: MOON at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at MIT-AI>
Cc:   BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, TURNIP at MIT-AI
Subject: Interned pathnames propagating bad information  (old subject!)

Renaming Set Package to Set Buffer Package and making a new Set Package
command that updates the -*- line would be all right with me.  I assume
there would also be Set Base, Set Mode, and maybe Set Lowercase.  Since
the command would be changed grossly incompatibly (modifying the buffer)
it might be wise to call the new command Set File Package and make
Set Package nonexistent.

Date: 23 March 1982 15:05-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: warm booting
To: DLW at MIT-AI
cc: BUG-LISPM at MIT-AI


Rather than wanting "panacea which automatically debugs ..."
what I meant was that there should be some way of always
being able to return to a well-defined top-level state. 
The window system sometimes leaves you in a state where
you can't type at anything, leaving you no recourse but to 
warm boot. Warm boot, as you point out, is somewhat nondeterministic
so you can't rely on the state of a system after a warm boot, 
sometimes necessitating a cold boot.
Indeed, it often happens because of an underlying
bug in a program I wrote, but it would be nice if I was in a 
state where I could debug it. Typical of this situation is
an "Output Hold", "Lock", or background process report error
state where the "go to output hold window", "select background process
window", "clear all window system locks" keys don't respond.
These are by nature hard to give crisp bug reports about, but I 
will do my best to try. Perhaps one thing that would make stuff
more reliable is to put in more checks in output hold, locks, 
control-Abort, etc. that "there's always SOME window you can type at" 

Date: 23 Mar 1982 14:27:35-EST
From: naha at mit-vax
To: mit-vax!RpK@mit-xx, naha@mit-mc
Subject: LispM init file
Cc: bug-lispm@mit-ai

My lisp machine init exists on ee, mit-vax and CCC.  I know
that I have to do an (fs:add-chaosnet-file-computer "ccc") before I
log in if I want to log in to ccc and have my init from there run.
My question wasn't what I had to type but rather why I had to type it
for CCC when I don't for ai, ee or mc.  Why are some systems more
equal than others?  

add-chaosnet-file-computer has become an inate response among those
who have the misfortune of using the file systems of other than a
small number of chosen computers whenever they get a message saying
that their host is not a recognized file computer.  Why can't the
high level file hacking code do this if it has to be done at all?

Date: 23 March 1982 12:21-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Interned pathnames propagating bad information
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI, TURNIP at MIT-AI, BUG-ZWEI at SCRC-TENEX

I think this is clearly a case for a "sophisticated user" command.  MOST
files, especially those used by non-wizards (that means everybody except
you and a few others) only reside in one package.  I think that Set
Package should change the information in all places and there should be
a special command for the specialized use that you have, with a suitable
name such that it is apparent that it does something unusual (so that
people won't find it with Apropos and assume it is what they want).

Yeah, having Set Package just do an Update Mode Line is probably the
right thing.

DCP@MIT-MC 03/23/82 11:54:29
To: (BUG LISPM) at MIT-MC
When SUPDUPing from a LISPM, is there a way to send TERMINAL over
the connection?  TERMINAL should probably be what ESC was on the old
keyboards (%TXTOP+"C or C with the top bit set).  If there is no way
should there be?  (The obvious thing of typeing TERMINAL twice doesn't
work.)


Date: 23 Mar 1982 1056-EST
From: Eric M. Ostrom <ERIC at MIT-EECS>
Subject: Software
To: bug-lispm at MIT-EECS

As one who hacks for neither Symbolics or LMI (and who has no 
intention to), my perspective is that MIT should take everything
we can get.  Are we really in the business of doing software
development for outside firms?  If not, then who cares about
system interdependency?  Now, the issue of who owns the LispMachine
(MIT) and who has primary rights (MIT), is really the important
point.  I am currently trying to reach a mutual understanding
between the three parties about this.  Quite possibly, the much
smaller issue of incompatable operating systems from outside
vendors will just go away if I succeed.  As to the "ARPA-gateway"
I know nothing about this.  It is true that Symbolics (and LMI)
have been granted access to our Local Network, in order to assist
them in promptly responding to bug reports, but no access to the
ARPANET is granted or implied by this.
	Sincerely,
		Eric
-------

Date: Tuesday, 23 March 1982, 08:30-EST
From: Bruce E. Edwards <BEE at SCRC-TENEX>
To: Zvona at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 22 Mar 82 11:52-EST from David Chapman <Zvona at MIT-AI>

What you want ALOC to do cannot work. In the Lisp machine storage conventions, it
is only possible to have a locative to typed locations. Since an elements of 16-bit
arrays use up the entire 32 bit word, it is impossible to have a data type on
locations in numeric arrays. There is a bug that ALOC does not complain when you
give it a non data-typed array, and that will be fixed.

Date: Tuesday, 23 March 1982, 08:12-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Patching systems that aren't loaded
To: Kent M. Pitman <KMP at MIT-MC>
Cc: MOON at SCRC-TENEX, BUG-LISPM at MIT-AI
In-reply-to: The message of 22 Mar 82 20:57-EST from Kent M. Pitman <KMP at MIT-MC>


    Date: 22 March 1982 20:57-EST
    From: Kent M. Pitman <KMP at MIT-MC>
	Date: Saturday, 20 March 1982  16:17-EST
	From: MOON at SCRC-TENEX
	Re:   Patching systems that aren't loaded

	Why don't you just load the system, disk-save it, make the patch,
	disk-restore, load-patches, disk-save?

    You want me to do:	I want to do:
     DISK-RESTORE
     load system
     DISK-SAVE
     make patch		make patch
     DISK-RESTORE		DISK-RESTORE
			    load system
     LOAD-PATCHES		LOAD-PATCHES
     DISK-SAVE		DISK-SAVE

    That's an extra DISK-RESTORE and DISK-SAVE that must get done for nothing...
    And that's only in the case where I think of the exactly optimal ordering
    of saves/restores ... I can see poorer selections wasting more time and maybe
    even risking clobbering a wrong band (I hate running DISK-SAVE -- it's a
    reasonably easy thing to accidentally dump over a wrong partition -- I wish
    there were reap-protect bits and such to make it harder to clobber the wrong
    band).

    And what about the case where I am simply on another cadr where I have
    no available bands, perusing source code, and happen to see a bug that
    needs fixing? Why shouldn't I be able to create only a mini-environment
    on that machine without doing a full load of all the system QFASLs. Must
    I wait for my turn on my group's cadr? 

There should be enough dependency information in a DEFSYSTEM to allow
just the files needed for compilation environment to be loaded for
compilation of the patch file.  If the handling of patch files were a
little more clever, it could even remember which files a patch comes
from and just load the compile-time support for those files.

Of course, most people don't actually set up their DEFSYSTEM's to show
the compilation dependencies and just depend on the implicit ordering to
get things right.  It would be very easy to make a mistake in the
DEFSYSTEM or violating conventions so it didn't know what environment
needed to compile.

Given the problems with making it do something close enough to the right
thing to not be a source of screws, I'm not in a hurry to try to
implement it.  If your system is really so big that you can't do
MAKE-SYSTEM to make your patch, perhaps you should split it into smaller
subsystems.  One thing which will help this is that I'm working on
making MAKE-SYSTEM store away a giant QFASL file which when loaded will
produce a specific version of a subsystem, so the same system can be
loaded in several differing environments.

Date: 23 March 1982 00:28-EST
From: Glenn S. Burke <GSB at MIT-ML>
Subject: referring to multiple levels of packages
To: BUG-LISPM at MIT-AI
cc: EB at MIT-AI

How about having lists acceptable to PKG-FIND-PACKAGE, such that
("FOO") is "FOO" wrt current package, ("FOO" "BAR") is "FOO" wrt
("BAR"), etc.  The empty list could mean the current package by
extension if you wanted to get gross or elegant depending on how
you feel.
Then "-*- Package:Foo,Bar -*-" is the right thing.


Date: 22 March 1982 20:57-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Patching systems that aren't loaded
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: Saturday, 20 March 1982  16:17-EST
    From: MOON at SCRC-TENEX
    To:   Kent M. Pitman <KMP at MIT-AI>
    cc:   BUG-LISPM at MIT-AI
    Re:   Patching systems that aren't loaded

    Why don't you just load the system, disk-save it, make the patch,
    disk-restore, load-patches, disk-save?

You want me to do:	I want to do:
 DISK-RESTORE
 load system
 DISK-SAVE
 make patch		make patch
 DISK-RESTORE		DISK-RESTORE
			load system
 LOAD-PATCHES		LOAD-PATCHES
 DISK-SAVE		DISK-SAVE

That's an extra DISK-RESTORE and DISK-SAVE that must get done for nothing...
And that's only in the case where I think of the exactly optimal ordering
of saves/restores ... I can see poorer selections wasting more time and maybe
even risking clobbering a wrong band (I hate running DISK-SAVE -- it's a
reasonably easy thing to accidentally dump over a wrong partition -- I wish
there were reap-protect bits and such to make it harder to clobber the wrong
band).

And what about the case where I am simply on another cadr where I have
no available bands, perusing source code, and happen to see a bug that
needs fixing? Why shouldn't I be able to create only a mini-environment
on that machine without doing a full load of all the system QFASLs. Must
I wait for my turn on my group's cadr? 


Date: Monday, 22 March 1982  22:03-EST
From: BSG at SCRC-TENEX
To:   MOON at SCRC-TENEX
Cc:   Bug-LispM at MIT-AI, David H. Kaufman <SP.KAUFMAN at MIT-SPEECH>
Subject: Is it possible to trace methods

While we're on the subject, 
It seems to be a marked deficiency that I can't point the upward-mouse-arrow
(which results from typing M-X Trace) at the front, or second-
pseudo-arg, or any part of a method definition in a buffer to
trace that method; admittedly, there are issues of "don't you
mean combined-this-or-that-whatever" instead, but it's already
good at that.

Date: 22 March 1982 21:55-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: Lossage
To: BUG-LISPM at MIT-AI

Since everyone else has flamed, I thought I'd get my 2 bits in:

1) There are several screws associated with running 204. First
off, if the lab develops a piece of software that is 204 dependant,
we are extremely limited in who we can give a copy to. When we run 80,
we can give the entire band to someone if they don't have it, but if
we run 204, we will have to pay Symbolics for a distribution contract
if we want to give away a band. In fact, if we develop things under
204, we are basically providing advertisement for Symbolics: "Buy 
from Symbolics and you can run MIT developed software". 

2) Apart from purely moral objections, we are also placing ourselves
in a rough position, since if Symbolics ignores our patches, we have
no power to adapt the system since changes will be wiped out by the
next system. On the other hand, if Symbolics incorporates our patches
in the next system, we are hacking for Symbolics without compensation.
(And I'm sorry, but I don't consider the privilage of getting patches
25ms before the rest of the world to be any big win.)

3) It seems to me that the reason everyone is so willing to accept
Symbolics is because they have been brainwashed into believing that
only the great gods there can make effective patches. Are we so
willing to turn over our destiny to a commercial entity?

<<LMI employee mode on>>

4) Lastly, it is stabbing LMI in the back. We seem to be giving
Symbolics all the advantages. A free ARPA-gateway (I'd LOVE to know
who gave the ok for that, and who was consulted. It just seems to
have appeared one day.), direct bug reporting, and now it seems
like we will run their band. Shit! That's about as far from neutral
as you get.

<<LMI employee mode off>>

Why don't we see if we can survive without Symbolics, before we go running
to them for help?

					James

Date: 22 March 1982 20:39-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Patching systems that aren't loaded
To: BEE at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: Saturday, 20 March 1982  14:54-EST
    From: BEE at SCRC-TENEX
    To:   Kent M. Pitman <KMP at MIT-AI>
    cc:   BUG-LISPM at MIT-AI
    Re:   Patching systems that aren't loaded

    Unfortunately, since the patch file must be compiled, it is possible that
    it might depend on macros in that system. Thus you cannot compile it
    without loading the system first.
-----
That's silly. There is no "might" about dependencies. There are two cases:
"It definitely does" or "It definitely does not".  If it happens to be a
case of "does not", then of course you can compile it without loading the
system first.

I claim that as an implementor of the system in question I can tell when a
patch can be compiled without full macro support, or when partial or full
macro support exists, for example, though a fortuitous known compatibility
between my system and others, or when I can write the macros needed by hand
trivially, or when I can hand-expand the macrofied expressions in a temp
buffer and then call Add Patch on that temp buffer. If one doesn't know
what his/her code needs in order to work, he/she oughtn't be writing
patches to it.

I specified explicitly in my bug report that this was the case of a patch
to a function which did not need any of the enormous amount of macro support 
my system provides...


Date: 22 March 1982 18:37-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Macsyma 30.2, microcode 849, 60Hz, on Lisp Machine Sixteen:

Suppose package FOO is under BAR and BAR is under GLOBAL.  I can't seem
to find anything I can put in the mode line of a file that is supposed
to go in the FOO package.  What should I put there?


Date: 22 March 1982 17:13-EST
From: David Chapman <zvona at MIT-AI>
Sender: DPC at MIT-AI
To: BUG-LISPM at MIT-AI

      Date: 22 March 1982 09:57-EST
      From: Michael Travers <MT at MIT-AI>
      Subject: A suggestion for the Lisp Machine community to discuss
      To: RICH at MIT-AI, MARTY at MIT-AI
      cc: BUG-OZ at MIT-AI, KRD at MIT-AI, GJS at MIT-AI, BRADY at MIT-AI,
          PHW at MIT-AI, MINSKY at MIT-AI, TK at MIT-AI, DICK at MIT-AI
      
          Date: 22 March 1982 09:17-EST
          From: Charles Rich <RICH at MIT-AI>
          Subject: A suggestion for the Lisp Machine community to discuss
      
          ....
      
      I see.  Symbolics offers us all their software, plus better
      maintenance than their paying customers get.  Obviously their
      reason for doing so is to gain the extraordinary business advantage of
      having us test out their products.  Thus we should make them pay
      before we stoop to accept their offer.

I think Symbolics should pay a bounty for bug messages.  
I woulda made a killing today.

Date: Monday, 22 March 1982, 16:42-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI
Cc: bug-kbe at MIT-AI

In System 79.33, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Eighteen:

This function fails to microcompile.  It gets an error because
ma-bottom-seq is passed an ma-loop object.  This error
has a null error string.  This is poor programming
practice. 

(defun move-to-area (cell)
  (prog (copy do-cars)
	(cond ((not (listp cell)) (return cell))
	      ((= (%p-data-type cell) dtp-free)
	       (return (%make-pointer dtp-list (%p-pointer cell)))))
	(setq copy (%make-pointer dtp-list 8next)
	      do-cars 8next)
   CDRS (%p-store-contents 8next (car cell))
	(let ((cdr (cdr cell)))
	  (%p-store-tag-and-pointer cell dtp-free 8next)
	  (setq cell cdr))
	(cond ((null cell) (%p-store-cdr-code 8next cdr-nil))
	      ((not (listp cell))
	       (%p-store-cdr-code 8next cdr-normal)
	       (incf 8next)
	       (%p-store-contents 8next cell)
	       (%p-store-cdr-code 8next cdr-error)
	       (setq cell nil))
	      ((= (%p-data-type cell) dtp-free)
	       (%p-store-cdr-code 8next cdr-normal)
	       (incf 8next)
	       (%p-store-tag-and-pointer
		8next #.(+ (lsh cdr-error 6) dtp-list) (%p-pointer cell))
	       (setq cell nil)))
	(incf 8next) 
	(cond ((not (< 8next 8last))
	       (let ((b (%pointer (make-list #o400 ':area 8target-area))))
		 (cond (cell
			(%p-store-cdr-code (1- 8next) cdr-normal)
			(%p-store-tag-and-pointer
			  8next #.(+ (lsh cdr-error 6) dtp-list) b)
			(incf 8next)))
		 (%p-store-tag-and-pointer 8next dtp-free b)
		 (setq 8next b
		       8last (+ 8next #.(- #o400 2))))))
	(cond (cell (go CDRS)))
   CARS (cond ((not (< do-cars 8next)) (return copy))
	      ((= (%p-data-type do-cars) dtp-free)
	       (setq do-cars (%p-pointer do-cars)) (go CARS))
	      ((or (= (%p-cdr-code do-cars) cdr-error)
		   (not (= (%p-data-type do-cars) dtp-list)))
	       (incf do-cars) (go CARS)))
	(let ((ptr (%p-pointer do-cars)))
	  (cond ((= (%p-data-type ptr) dtp-free)
		 (%p-store-pointer do-cars (%p-pointer ptr))
		 (incf do-cars) (go CARS)))
	  (setq cell (%make-pointer dtp-list ptr))
	  (%p-store-pointer do-cars 8next)
	  (incf do-cars)
	  (go CDRS))))

Date: Monday, 22 March 1982  15:25-EST
From: MOON at SCRC-TENEX
To:   Robert W. Kerns <RWK at SCRC-TENEX>
Cc:   BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, turnip at MIT-AI
Subject: Interned pathnames propagating bad information

    Date: Monday, 22 March 1982, 04:10-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: Interned pathnames propagating bad information
    To: MOON at SCRC-TENEX
    Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, turnip at MIT-AI
    In-reply-to: The message of 21 Mar 82 23:40-EST from MOON at SCRC-TENEX

        Date: Sunday, 21 March 1982  23:40-EST
        From: MOON at SCRC-TENEX
    	....
        If it changed the -*- line I would have been shafted about 3 times a day
        by it during the past several weeks.  I don't think it should ever change
        anything about the file either; you only want that behavior because of
        the bug now that Zwei's assumption of a package when none is specified
        gets speciously associated with the file and then you need to undo that
        specious package property.
    Can you explain how you would have been shafted?  I don't see it.  Maybe
    I have a different model of what Set Package means or something.

    I agree it doesn't matter as much if ZWEI didn't remember properties it
    spuriously assumed.

I have been working with a lot of files that temporarily have to exist in
more than one package.  m-x Set Package is the only way to set what package
c-sh-E and c-sh-C use when reading from the buffer.  If it automatically
updated the -*- line I would be totally and completely shafted, because the
buffer would be modified spuriously, and because the file's real package
would be suddenly replaced by the temporary other package.  Having it merely
update the in-core copy of the file's -*- line is mostly not a shaft, since
the -*- line will set it back the next time the file is compiled or loaded
(except in the screw case that was the source of the original bug report,
where someone omitted the Package: in the file's -*- line on the theory that
it would always default to User.)

To get to the point, there are good reasons to have two copies of this
information, and I think the copies should be more separate than they are
now.  Possibly a better user interface would be to have two Set Package
commands, one which updated both copies and one which updated only one
copy, instead of one (half-assed) command that updates part but not all
of both copies.  But the assumption that any particular will only be read
into one package is highly naive.

Date: Monday, 22 March 1982  15:14-EST
From: MOON at SCRC-TENEX
To:   David H. Kaufman <SP.KAUFMAN at MIT-SPEECH>
Cc:   Bug-LispM at MIT-AI
Subject: Is it possible to trace methods

Yes.  Of course.  If you use the TRACE function, the kludgey Maclisp
syntax requires extra parentheses and a :FUNCTION specification (see
the manual).  If you use the Trace window you can just type
(:method ...) as the function name since it knows you are typing a
function name and not options.

Date: Monday, 22 March 1982  12:28-EST
From: MMCM at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at SCRC-TENEX>
Cc:   BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, RWK at SCRC-TENEX,
      turnip at MIT-AI
Subject: Interned pathnames propagating bad information

    Date: Sunday, 21 March 1982, 12:12-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    And Set Package should certainly change the file plist as well as the
    editor's idea.
It does, that is the only place that information is stored in fact.
		    I'd even like to see it change the -*- line in the
    buffer.  It is a real pain having this information around in many
    different places and forms and having to copy it from one to the other,
    since it can become inconsistent so easily.
Should it just do M-X Update Mode Line?

Date: 22 March 1982 12:23-EST
From: Jerry Roylance <GLR at MIT-AI>
Subject: (TRACE TIME)
To: BUG-LISPM at MIT-AI


The problem with (TRACE TIME) is that TRACE falls behind
and can never catch up.

How about a special variable that inhibits trace from
doing anything except calling the traced function
(ie, TRACE doesn't print out lots of random garbage.)
This should keep trace from falling behind.
Trace could bind that variable to T during critical
sections of its code to prevent recursion and unbind it back to NIL
just before continuing with the luser's program.

A warm boot would setq the variable to T; any call to (TRACE)
would setq it back to NIL.  Control-Abort might also setq
it to T.

Date: 22 March 1982 11:52-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.33, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Eighteen:

Here we have this completely bogus bug where ap-2 doesn't
do what aloc does.

If ap-2 can't be changed to behave like aloc, then at
least the relevant locf properties should be changed so
this particular screw doesn't happen.

(locf (si:rdtbl-bits readtable #/))
>>>>TRAP 6546 (NUMBER-ARRAY-NOT-ALLOWED M-A)
The array #<READTABLE 1342726>, which was given to AP-2, is not allowed to be a number array.
While in the function AP-2  SI:*EVAL  SI:LISP-TOP-LEVEL1

AP-2:
   Arg 0 (ARRAY): 2004
   Arg 1 (SUB1): 20
   Arg 2 (SUB2): 0
c-Z 
* 
(mexp)

Macro form (locf (si:rdtbl-bits readtable #/))  
(AP-2 READTABLE 0 6)

Macro form ()
NIL

(ap-2 readtable 20 0)
>>>>TRAP 6546 (NUMBER-ARRAY-NOT-ALLOWED M-A)
The array #<READTABLE 1342726>, which was given to AP-2, is not allowed to be a number array.
While in the function AP-2  SI:*EVAL  SI:LISP-TOP-LEVEL1

AP-2:
   Arg 0 (ARRAY): 2004
   Arg 1 (SUB1): 20
   Arg 2 (SUB2): 0
c-Z 
* 
(aloc readtable 20 0)
#<DTP-LOCATIVE 1342750>

Date: 22 March 1982 11:41-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Six:

While I was in Zmail, in Text and autofill modes, sending a message, I
killed a line, and got punted to the cold load stream, with the error
"some arg to AR-1, NIL, was of the wrong type." ^Z's got me the same
error again. This looks very much like what happens when one kills the
selected buffer and asks for it back when queried.

Has this been fixed in system 204? If so, does anyone at Symbolics
mind if I look at it and make a similar fix to the AI lab's own set of
sources? 

-pgs

Date: 22 March 1982 11:34-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.33, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Eighteen:

the inspector doesn't know about readtables.

Date: 22 March 1982 11:22-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.33, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Eighteen:

arglist can not find one for BIND.

Date: 22 Mar 1982 1047-EST
From: David H. Kaufman <SP.KAUFMAN at MIT-SPEECH>
Subject: Keyboards
To: Bug-LispM at MIT-AI

Since the subject has come up, I'm on the side of the "space-cadet"
keyboards.  Granted that they are non-standard (I work on four
different computer systems - try to tell me there's such a thing as
a "standard" keyboard!) and a little difficult to use at first,
I think the profusion of special-purpose keys is infinitely better
than the nonsense of Control keys I have to deal with everywhere
else.  These non-standard keyboards are somewhat analougous (sp?)
to long, specific filenames and function names (alright, so these
aren't non-standard anymore, they were once and they're just as
much of a good idea).  Anyway, put me down on the side of the
keyboards.
	- DHK
-------

Date: 22 Mar 1982 1034-EST
From: David H. Kaufman <SP.KAUFMAN at MIT-SPEECH>
Subject: (TRACE TIME)
To: Bug-LispM at MIT-AI

Here's another suggestion for preventing tracing.  How about an
option to defun (or something) called ':untraceable that TRACE
will look at to see if the function should be traced?  Problem
is that defun doesn't take options like that; maybe there should
be a property on the plist instead.
	- DHK
P.S. Is it possible to trace methods?
-------

Date: 22 Mar 1982 1034-EST
From: David H. Kaufman <SP.KAUFMAN at MIT-SPEECH>
Subject: (TRACE TIME)
To: Bug-LispM at MIT-AI

Here's another suggestion for preventing tracing.  How about an
option to defun (or something) called ':untraceable that TRACE
will look at to see if the function should be traced?  Problem
is that defun doesn't take options like that; maybe there should
be a property on the plist instead.
	- DHK
P.S. Is it possible to trace methods?
-------

Date: 22 March 1982 08:57-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

There ought to be a function which is to nthcdr as
find-position-in-list is to nth.  (By a gross analogy to
LOOP, it could be called find-position-on-list...)
Presumably both eq and equal versions should exist.

Date: Sunday, 21 March 1982  23:40-EST
From: MOON at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at SCRC-TENEX>
Cc:   BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX, RWK at SCRC-TENEX,
      turnip at MIT-AI
Subject: Interned pathnames propagating bad information

    Date: Sunday, 21 March 1982, 12:12-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    Subject: Interned pathnames propagating bad information
    To: RWK at SCRC-TENEX, turnip at MIT-AI
    Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX

    I agree that Zwei should assume that any file without an explicit
    Package property in its -*- line is in the User package.  I have seen
    people bitten by this several times.  Perhaps the right way to do this
    is to have the file-property-list parser always put in a Package
    property, defaulting to User if there isn't actually any Package
    property in the line, rather than putting the change into Zwei itself.

    And Set Package should certainly change the file plist as well as the
    editor's idea.  I'd even like to see it change the -*- line in the
    buffer.  It is a real pain having this information around in many
    different places and forms and having to copy it from one to the other,
    since it can become inconsistent so easily.
If it changed the -*- line I would have been shafted about 3 times a day
by it during the past several weeks.  I don't think it should ever change
anything about the file either; you only want that behavior because of
the bug now that Zwei's assumption of a package when none is specified
gets speciously associated with the file and then you need to undo that
specious package property.

Date: Sunday, 21 March 1982, 22:09-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Converse
To: kmp at MIT-AI, BUG-LISPM at MIT-AI

    Failing messages in Converse just type out in the echo area saying that
    they have failed. The in-buffer record of the message still misleadingly
    says "sent to".
Fixed in the source.

Date: Sunday, 21 March 1982, 20:39-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: (TRACE TIME)
To: BUG-LISPM at SCRC-TENEX

There is no way that TRACE can be made to win all of the time.  I've had
various ideas about this;  The one which has the highest chance of
winning is to have a TRACE-IN-STACK-GROUP, or some better name.  Since
the scheduler and the debugger run in their own stack groups, those
modes of lossage would be fixed.  Of course, it should still be possible
to force yourself to lose.

This still leaves the problem that some functions are called by
subsystems which the user doesn't expect, such as read, eval, and print.
I have no suggestions for these.  There is one subsystem that should be
screened specially, however.  That is TRACE.

Date: Sunday, 21 March 1982, 20:17-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: M-X Print Buffer
To: JEK at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX, DLA at SCRC-TENEX

    Date: Wednesday, 17 March 1982, 15:43-EST
    From: James E. Kulp <JEK at SCRC-TENEX>

    Not having M-X Print Buffer run as a background process is a loss as it takes your
    editor away.  It should be like Terminal-Q (make a copy) or at least after pressifying
    into a local temp file it should spawn a background process to send it over the net.

MMcM pointed out a problem with this.  At what point in time does the
background process print the buffer?  Either a copy has to be made of
the buffer immediately upon the M-X P B command, or you have to wait for
it all to be printed.  Or you could lose when the internal structures
are in intermediate states.

That's not a reason for M-X Print File to run in editor, though.  I will
do something about this someday.

Date: Sunday, 21 March 1982, 20:28-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In System 204.39, ZMail 42.7, LMFS 24.1, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, on Beagle:

When you have a file transfer in progress over the net and it seems to
be hanging in NETI forever for one reason or another, and you try to
c-Abort out of it, often the cleanup handler likewise hangs in NETI.  If
you then c-Abort that, at least you get out (which is nice), but the
who-line continues to display the file as being open, and you have to do
(chaos:reset) followed by (fs:close-all-files) to make it go away.  This
is annoying.  I don't have any great suggestions about how to fix it,
but I'd like to get this kvetch on record.

Date: Sunday, 21 March 1982  20:25-EST
From: HES at SCRC-TENEX
To:   Henry Lieberman <Henry at MIT-AI>
Cc:   BUG-LISPM at SCRC-TENEX, RWK at SCRC-TENEX
Subject: (TRACE TIME)

I once accidently traced a function which was called from a blinker's
blink method.  I don't see any way that the system could know about
such a function (it's not a magic name like time) to prevent me from
tracing it.  This leaves 2 options: 1) Something along the lines
suggested by rwk with the addition of setting some set of variables up
so that the things that were undone could be redone if the user wanted
(The thing could print out something like "traces turned off, type
restore-trace to reinstate them") [there is an issue whether these
initializations could be run soon enough to straighten out things before
you get screwed again).
2) People should be smarter than to screw themselves like this.

Neither of these seems like total wins.

Date: Sunday, 21 March 1982, 19:23-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: CSTACY at MIT-AI, BUG-LISPM at MIT-AI, DLA at SCRC-TENEX

    Date: 19 March 1982 22:41-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    I disagree w/ the proposal to have TELNET and SUPDUP be the same kind
    of window.  I frequently operate in the mode of having an AI window,
    a SPEECH window, and sundry other windows and randomly moving forth
    between them with much frequency.  This would be hard if both the AI
    and SPEECH windows were of the same sort; at present I can type
    System-S to get to AI and System-T to get to SPEECH without having to
    remember where they are on the window stack or anything like that.
    So please don't implement CSTACY's suggestion of 19 March 82.

This is an argument for a better keyboard selection scheme.  The point
is, naive users shouldn't have to know about two different protocols in
order to use TELNET/SUPDUP.

Date: 21 Mar 1982 1613-EST
From: Eric M. Ostrom <ERIC at MIT-EECS>
Subject: access to Symbolics system.
To: marty at MIT-AI, info-lispm at MIT-AI

No permission is required from anyone at MIT to access the Sources stored
on the EE/CS LIB: disk. Login anonymous with no password will allow anyone
to ftp any of the Symbolics sources.
	Eric
-------

Date: Sunday, 21 March 1982, 16:09-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: warm booting
To: Henry at MIT-AI
Cc: BUG-LISPM at SCRC-TENEX

The problems with warm booting are more serious than you think.  A warm
boot can trash things a lot worse than this, mainly because bindings are
lost and cleanup handlers are not run.  Once you have warm-booted, you
must consider yourself lucky if anything works at all; it has to only be
used as an emergency measure.  This is inherent in the nature of what
it means to warm-boot.

Date: 21 March 1982 15:48-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: (TRACE TIME)
To: RWK at SCRC-TENEX
cc: BUG-LISPM at SCRC-TENEX


Warm boot shouldn't UNTRACE, reset the BASE to 8, or do any
"fixing up" behind the user's back. This kind of thing surprises
people no end. We really should have some more reliable way of 
stopping runaway programs, but as long as we have to do warm 
boots, it shouldn't monkey around with your state more than it
has to. At the least, it should just make a check for base being
a reasonable integer, no vital system functions on the trace list, 
etc. and print a warning message if it has to fix things.


Date: Sunday, 21 March 1982, 14:27-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 2.2, microcode 849, Sorcerer's Apprentice, on Lisp Machine Twenty-two:

The xr-correspondence hack loses on dotted lists.

Date: Sunday, 21 March 1982, 12:38-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: CStacy at MIT-AI, BUG-LISPM at MIT-AI

Type Help at Converse for documentation of the commands that write out
conversations to files.

Date: Sunday, 21 March 1982, 12:22-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Bug reports and replying to them.
To: HIC at SCRC-TENEX
Cc: bug-lispm at SCRC-TENEX

    Date: Saturday, 20 March 1982  16:00-EST
    From: HIC at SCRC-TENEX
    Subject: Error in SUPDUP to SPEECH

    I don't know why RWK couldn't have asked me before sending out suppositions.

Presumably for the usual reason, namely, that nobody is personally in
charge of anything in particular.  When you read your BUG-LISPM, you
can't just ignore anything that somebody else might happen to know more
about; none of us would ever be able to respond to anything if that were
the policy.  Do you have any suggestions as to how we could improve
this situation, in general?

Date: Sunday, 21 March 1982, 12:18-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Selecting windows.
To: AGRE at MIT-AI
Cc: BUG-LISPM at MIT-AI

The MACRO key is already in use (belive it or not) for the original Zwei
keyboard macro feature.  I realize that nobody uses it for that and it
could be recycled.  However, we have gotten so many negative comments
about the space cadet keyboard (you seem to be in the minority) that
most of us feel that it was not a good idea, and we are reluctant to
introduce the use of more of its random keys.

The real problem you are talking about is that there is no way to
quickly select a window you want if you are making active use of more
than one window of the same flavor.

One thing we could do is to use System followed by digits as commands
for user-defined window bindings.

You may argue that numbers are less mnemonic than letters.  However, in
your own message, note that you assigned T to mean Telnet to SPEECH,
which is a little weird since you probably really want to SUPDUP to
SPEECH, and you might be Telnetting to somewhere else as well.  So
letter, while they can be slightly more mnemonic, are still pretty
random sometimes.

If you still wanted letters, we could use System Meta-T (or Meta-S or
whatever), although that seems to be getting rather obscure.

Date: Sunday, 21 March 1982, 12:12-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Interned pathnames propagating bad information
To: RWK at SCRC-TENEX, turnip at MIT-AI
Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX

I agree that Zwei should assume that any file without an explicit
Package property in its -*- line is in the User package.  I have seen
people bitten by this several times.  Perhaps the right way to do this
is to have the file-property-list parser always put in a Package
property, defaulting to User if there isn't actually any Package
property in the line, rather than putting the change into Zwei itself.

And Set Package should certainly change the file plist as well as the
editor's idea.  I'd even like to see it change the -*- line in the
buffer.  It is a real pain having this information around in many
different places and forms and having to copy it from one to the other,
since it can become inconsistent so easily.

Date: Sunday, 21 March 1982, 12:09-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: (TRACE TIME)
To: RWK at SCRC-TENEX, BUG-LISPM at SCRC-TENEX

If you do put this in, have warm booting print out a message saying that it
is untracing things if it finds that anything actually was traced.

Date: Sunday, 21 March 1982, 12:29-EST
From: David Chapman <Zvona at MIT-AI>
To: AGRE at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 20 Mar 82 21:41-EST from Philip E. Agre <AGRE at MIT-AI>

    For the record anyway, it would be very helpful if someone would implement
    the following suggestion: it is a royal pain that &REST arguments can't
    be passed back because of stack lossage, so there should be something
    called something like &LIST that does a COPYLIST and binds to variable
    to the copy.  Habitual use of this feature would get rid of lots of bugs
    and improve storage locality too.    - phiL

The Yale T compiler explicitly conses a rest list unless it can
prove that the rest vector is not passed back to anyone.  This
seems like the right thing.  Apparently it is not difficult to
implement this, and does not result in very much unneccessary
consing.

Date: 21 March 1982 06:14-EST
From: Richard Greenblatt <RG at MIT-AI>
To: BUG-LISPM at MIT-AI

The mail system bites again.  The previous message
about software maintenance was from The Software
Staff of LMI and not from Theodore H. Einwohner (THE).

Date: 21 March 1982 06:14-EST
From: Richard Greenblatt <RG at MIT-AI>
To: BUG-LISPM at MIT-AI

The mail system bites again.  The previous message
about software maintenance was from The Software
Staff of LMI and not from Theodore H. Einwohner (THE).

Date: 21 March 1982 04:15-EST
From: Theodore H. Einwohner <The Software Staff of LMI at MIT-AI>
Sender: RG at MIT-AI
To: BUG-LISPM at MIT-AI

Subject:  LISP MACHINE software maintenance at MIT

  We feel that it is in everyone's best interest to continue the 
tradition of keeping non-proprietary LISP machine core
system software at the lab, and we are making a concerted effort
keep it that way.  Considering everything, this arrangement has
worked out quite well during the past year, and we view with
concern the unilateral action of Symbolics in attempting
to change the agreed upon status quo.

  We wish to make clear that we will not be "overrun."
The choice the lab (and the LISP machine community as a whole)
faces is whether to have two sets of LISP machine software
floating around or one common one.  Needless to say, having
two somewhat incompatible sets of software floating around
will be great source of pain for all concerned.  
  
  Our ties to MIT bug reports will be improved significantly 
in the near future.


We will assist in the creation of system 80 in the next few days.


Date: 21 March 1982 00:53-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.31, ZMail 40.7, LMFILE-Remote 5.3,
Experimental Remote-File 3.0, Experimental Local-File 35.1,
microcode 849, on Lisp Machine Six:

There should be a function which would write the users SENDS and his
reponses (in the correct order) into a file.  I want to save the
conversations I had in the Converse window to look at later.

Date: 20 March 1982 21:41-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

For the record anyway, it would be very helpful if someone would implement
the following suggestion: it is a royal pain that &REST arguments can't
be passed back because of stack lossage, so there should be something
called something like &LIST that does a COPYLIST and binds to variable
to the copy.  Habitual use of this feature would get rid of lots of bugs
and improve storage locality too.    - phiL

Date: 20 March 1982 18:45-EST
From: Martin David Connor <MARTY at MIT-AI>
Subject:  A suggestion for the Lisp Machine community to discuss
To: INFO-LISPM at MIT-AI, BUG-OZ at MIT-AI, KRD at MIT-AI,
    GJS at MIT-AI, BRADY at MIT-AI, PHW at MIT-AI
cc: MINSKY at MIT-AI, TK at MIT-AI

I was not really sure who I should send this message to; It relates
to an issue that would seem important to most everyone, and especially
to those who consider Lisp Machines important to their research.  I
wish to beg the pardon of anyone who is inconvenienced by this
message.  I am leary of mailing lists for this very reason.

I thought now was a good time to raise certain questions that we will
very probably have to be deal with in the near future.  What follows
is my analysis of the current Symbolics Inc. agreement with the EE/CS
department, and how I feel we could benefit froma similar agreement.
     
     Date: Thursday, 18 March 1982, 14:29-EST
     From: The Software Staff of Symbolics at SCRC-TENEX
     Subject: Release of Symbolics software at MIT
     To: INFO-LISPM at MIT-AI
     
     Through an agreement between Symbolics, Inc. and MIT's EE/CS department,
     Symbolics' Lisp Machine software is now available for use by MIT users.
     
     Symbolics is making available all software that we maintain to MIT
     users.  This includes the Symbolics File System, Tape System, Canon
     Laser Printer Software, and Font Editor, as well as any other software
     that is being developed for distribution to Symbolics customers.  New
     releases will be made available to MIT at least as often as to Symbolics
     customers.  In practice, MIT will probably be given releases more
     often than this, to provide faster response to trouble reports.

I assume that this means that they are giving us the software at no
charge. What are giving them is possibly the best test market and
debugging user community in the world.  The tradeoff may be worthwhile.
     
     Symbolics systems can be distinguished because their system version
     numbers are greater than 200; the current system being released is
     System 204.  The master copies of the sources from which Symbolics
     systems are created are kept at Symbolics; copies of these sources are
     being kept on MIT-EECS (the TOPS-20 system of the EE/CS department,
     which is providing the disk space to hold these sources).  Please note
     that MIT-EECS is a very heavily loaded system, and its routine use
     should be avoided.  We expect lisp machine users to be considerate
     in this regard.

This begins to foreshadow my suggestion.  As an AI Lab researcher I
would not want to have to depend on a system outside the Lab for
accessing system sources.
     
     The sources are on the LIB: structure of the MIT-EECS machine.  The
     Symbolics systems are configured to know that all system sources live on
     this machine; if you access a system source file with the Meta-.
     command or otherwise, the system will connect to MIT-EECS to read in the
     file.  This way, Meta-. will find the correct version of the source,
     corresponding to the software in the Lisp environment.  Furthermore,
     if you do LOAD-PATCHES, the patch files will be searched for on MIT-EECS.
     
     When Symbolics bands for MIT are booted, they say "EE" instead of "MIT"
     in the last line of the herald message.  This is because these bands use
     a different set of site-configuration files, in order to make the SYS
     host be EE instead of AI.  This convention may change in the future.
     
     The MIT-EECS machine requires you to log in before you can access files.
     Anyone may log in by using the user name "Anonymous", without giving the
     file job a password; this will give you read-access to all of the
     sources.  Of course, if you have your own account on MIT-EECS, you may
     use that; all users have read-access to all the sources.

This situation is also far from ideal.  As an AI Lab person I feel a
bit restricted to have to ask for permission to access sources.
     
     We want to provide the same fast response to bugs that MIT Lisp Machine
     users are accustomed to.  Therefore, bug reports sent to Symbolics from
     MIT will be answered as soon as possible, and patch files will get moved
     to MIT-EECS promptly.
     
     In order to make it easy for MIT users to introduce bug fixes and
     changes into the Symbolics software, system maintainers at MIT may
     modify the copies of the sources that are stored on MIT-EECS.  Symbolics
     will normally merge such changes into the master source files at
     Symbolics; however, we reserve the right to reject any changes we feel

The right of Symbolics to refuse changes would be bothersome, but the
fact that there is a "site" file which I am told can contain patches
which are very specific to a particular site would seem to help
matters.  

     are incorrect or inappropriate.  When new releases are provided to
     MIT-EECS, sources will be copied from Symbolics to MIT-EECS, and any
     changes that were rejected will disappear from the sources.  (The source
     files on MIT-AI are merged with Symbolics sources only infrequently.)
     
     The administrators of the MIT-EECS machine have decided to control
     write-access to these sources, on a per-user basis.  If you feel you'd

op. cit. (already cited)

     like to have access to modify Symbolics sources stored on MIT-EECS, send
     mail to the list LISPM-ACCOUNTS@EE.  Please note that this control is
     being maintained by MIT-EECS personnel, and not Symbolics personnel.
     
     This software is provided to MIT under the terms of the Lisp System
     License Agreement between Symbolics and MIT.  MIT's license to use this
     software is non-transferable.  This means that the world loads,
     microloads, sources, etc. provided by Symbolics may not be distributed
     outside of MIT without the written permission of Symbolics.

This is a somewhat problematic point for some people.  I do not have
very big problems with it.  I assume that we can give application
programs freely to others, and as for the system, I think it a
distraction from most people's research to maintain a LISP machine
world.  The time it would take, and the hacker hours would not justify
it, not to mention that those best at it are not here.  If I am only going
to support a Lisp Machine world, I might as well get paid well for it.
As a hacker, I can say that I am here to do things that I could not do
at most companies.  I would suspect that many people have similar
motivations in their research.
     
     System 204 already exists in many forms on MIT machines; some of these
     bands have different systems loaded.  People who wish to receive advice
     on which software packages would best suit their needs, or who wish
     assistance in installing system 204 should send mail to
     BUG-LISPM-SCRC@SCRC.

     System 204, and all associated software, is now released to users.  It
     comes with Symbolics microcode 865, and ZMail 42.  There are a number of
     INCOMPATIBLE CHANGES in this software.  The system release announcement
     can be found in EE:LIB:<LISPM.DOCUMENTATION>SYSTEM-204.RELEASE and
     in AI: LMDOC; SYS204 MSG.

--------------

Now to my suggestion.

The new AI machine OZ, will have 1.4 gigabytes of disk space. 
I suggest that we store the Symbolics sources there.  
I think this idea has the following attractive features for the Lab:

- Each of the major groups of Lisp Machine users at the Lab may
  choose what software they wish to run.  The sources can be on OZ,
  and can be accessable to those who want them.  

- This does not negate the possibility that we could have other Lisp
  Machine system software on the same machine.

- We would not have to depend on the heavily loaded EE machine for
  storage of software.

- We would not have to ask permission of EE people to access the
  sources. I would not expect too much of a problem in this regard, but
  I see no reason for this indirection if we can just as well have
  our own sources.

- The AI Lab will quite likely be the major Lisp Machine user on
  Campus, and will have a very strong need to have the sources
  available.

What I would propose is that we seek an agreement with Symbolics
whereby they will store their sources at MIT-OZ, and for our
consideration of testing software and reporting bugs and allowing them
access to the software we write as well as using our computational
resources, they will incorporate our patches and at no charge will
supply any software that they would supply to their normal customers.
I would also like to see some words to the effect that we may give
away certain specific kinds of software that we develop to whoever
wants it.

That is my basic suggestion.  

I see the Lisp Machine as a tool, and thus I think we should use them
rather than build them. Use them to create new ideas.  

This represents my current thinking, and I wish it to be clear that
this is a suggestion.  I hope it will serve as a basis for clearer
more rational discussion between all the people who are affected by this
issue.

Hacking Tomorrow;

Marty


Date: Saturday, 20 March 1982  16:51-EST
From: MOON at SCRC-TENEX
To:   rwk at SCRC-TENEX
Subject: (TRACE TIME)
cc:   bug-lispm at SCRC-TENEX

    Date: Saturday, 20 March 1982, 07:30-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: (TRACE TIME)
    To: BUG-LISPM at SCRC-TENEX

    In System 204.36, ZMail 42.6, LMFS 24.1, Tape 8.0, Canon 12.3,
    Symbolics 10.1, microcode 865, on Spaniel:

    Trace most anything that gets used in important places and you
    lose your ass.  In a moment of utter stupidity I did (TRACE TIME)
    and then couldn't even warm boot.  Fortunately I was able to
    simulate an (UNTRACE TIME) from CC, but it would seem to me that
    there should maybe be a WARM initialization that does (UNTRACE),
    so at least you'll be able to warm boot if you trace something
    you shouldn't?

    If nobody objects I'll put this in.
I doubt that the initialization would be run soon enough to save you.

I suspect there is no solution to this problem, although maybe something
along the lines of what Maclisp trace does (knowing about certain functions)
might help.  (The Lisp Machine system is so much more complex, and all
written in Lisp, so it might well not help.)

Date: Saturday, 20 March 1982  16:24-EST
From: MOON at SCRC-TENEX
To:   Chris Ryland <Ryland at SRI-KL>
Cc:   bug-lispm at ai
Subject: file activity line in wholine

I believe this has already been fixed in a system you don't have at Flair yet.

Date: Saturday, 20 March 1982  16:17-EST
From: MOON at SCRC-TENEX
To:   Kent M. Pitman <KMP at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: Patching systems that aren't loaded

Why don't you just load the system, disk-save it, make the patch,
disk-restore, load-patches, disk-save?

Date: Saturday, 20 March 1982  16:12-EST
From: MOON at SCRC-TENEX
To:   Robert W. Kerns <RWK at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX, BUG-ZWEI at SCRC-TENEX
Subject: Let's do our software debugging with an oscilliscope!

The actual bug is that Howard forgot to add (SELF NIL) to *BREAK-BINDINGS*
when installing the new flavor system.

Date: Saturday, 20 March 1982  16:00-EST
From: HIC at SCRC-TENEX
To:   Robert W. Kerns <RWK at SCRC-TENEX>
Cc:   bug-lispm at SCRC-TENEX, dph at MIT-ML
Subject: Error in SUPDUP to SPEECH

The local editting and buffered stuff was flushed in 204, since the
cretinous style of SUPDUP made it a pain to convert.  Thus, the
several bugs relating to this code are "fixed" in 204.

I don't know why RWK couldn't have asked me before sending out suppositions.

Date: Saturday, 20 March 1982  15:56-EST
From: HIC at SCRC-TENEX
To:   Robert W. Kerns <RWK at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX
Subject: (TRACE TIME)

I'm not too happy with this as a general solution.

Date: 20 March 1982 15:17-EST
From: Philip E. Agre <AGRE at MIT-AI>
Subject: SYSTEM-T SYSTEM-S: not getting mail
To: RWK at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: Saturday, 20 March 1982, 07:48-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: SYSTEM-T SYSTEM-S
    To: agre at MIT-AI
    Cc: BUG-LISPM at SCRC-TENEX
    
    Ah, I see why you don't want it changed, except that you're missing
    out on a lot of featurism by not using SYSTEM-S for SPEECH too.
    Perhaps all you would need to make you happy would be an easy way
    to stick a given subsystem on a SYSTEM key of its own?

Either a subsystem or a particular window.  Perhaps the MACRO key
could be used for this.  There should be a table of what you get by
doing MACRO-X for various alphabetic X.  You should be able to hack
this table through a program, say (SET-MACRO-KEY 'T '(TELNET
MIT-SPEECH)) in your init, or through the keyboard, MACRO-T means set
the macro key table so that MACRO-T gets me back to the currently
selected window.  Perhaps something could be set up to make MACRO key
definition even more general, but I'm not sure what other sorts of 
things people might want to use it for.

By the way, you better not flush the space-cadet keyboards in future
editions of the Lisp Machine.  I think all those keys should mean 
something!!

[So much for the hypothesis that I'm not getting mail to me that also
goes to bug-lispm.  Screw.]

Date: Saturday, 20 March 1982  14:54-EST
From: BEE at SCRC-TENEX
To:   Kent M. Pitman <KMP at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: Patching systems that aren't loaded

Unfortunately, since the patch file must be compiled, it is possible that it might
depend on macros in that system. Thus you cannot compile it without loading the 
system first.

Date: Saturday, 20 March 1982, 13:36-EST
From: Clark M. Baker <CMB at SCRC-TENEX>
Subject: scroll bars
To: BUG-LISPM at SCRC-TENEX

In NWS in System 204.37, ZMail 42.6, LMFS 24.1, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, on Basset:

Clicking the left button in the scroll region does not seem to move the
current line to the top anymore.

Also, sending this mail to BUG-NWS didn't work.

Date: Saturday, 20 March 1982, 07:48-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: SYSTEM-T SYSTEM-S
To: agre at MIT-AI
Cc: BUG-LISPM at SCRC-TENEX

Ah, I see why you don't want it changed, except that you're missing
out on a lot of featurism by not using SYSTEM-S for SPEECH too.
Perhaps all you would need to make you happy would be an easy way
to stick a given subsystem on a SYSTEM key of its own?

Date: Saturday, 20 March 1982, 07:42-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Interned pathnames propagating bad information
To: Alias for KMP <turnip at MIT-AI>
Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at SCRC-TENEX
In-reply-to: The message of 20 Mar 82 01:25-EST from Alias for KMP <turnip at MIT-AI>


    Date: 20 March 1982 01:25-EST
    From: Alias for KMP <turnip at MIT-AI>
    In System 79.25, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

    I loaded a file into an editor buffer. It had no associated package, so it
    took on the package KBE: because I was already editting a file in that package.
    I am not sure I approve of this behavior.
I am sure that I do not.

    I then wrote the file to AI:KMP;FSF > and FS:KMP;FSF.LISP#>. Then I went into
    a ZWEI breakpoint and did (QC-FILE "AI:KMP;FSF") and it didn't compile right
    because the KBE package shadows LET and I hadn't loaded the shadow definition.
    So I said fine, I'll go to USER:. So I went to a Lisp Listener in USER: and 
    did QC-FILE again the same way, but it still compiled in KBE:. Now since the file
    doesn't have the word KBE: in it anywhere and since I was in USER: in the listener,
    it was odd to me that it should happen this way. I assume the info comes from
    the interned pathnames. This is probably a bug.
No, I wouldn't call this a bug.  What package something is compiled in should
not depend on what package you happen to have current when you compile it.
The package really is a property of a given file.  The problem is just that
the package had never been set currectly.

    So I went back to the editor and did M-X Set PackageUSER and went back to the
    lisp listener and tried again. It still compiled in KBE. That was my bug, because
    the file defaults for the buffer were now AI:KMP;FSF.LISP#>. Fine. So I did
    C-X C-W AI:KMP;FSF > assuming the file properties as now understood by ZWEI for
    the FS: file would correctly be inherited by AI:KMP;FSF > ... they were not. This
    I believe to have been your bug. I went back to my lisp listener and tried the
    QC-FILE again and it still compiled in KBE:.
Yes, I believe this is a bug.  ZWEI should set the properties in the
generic pathname when it writes out a file.
    I went back into the editor and did M-X Set PackageUSER yet again, and sure
    enuf, this time it worked. I was able to compile the file in USER: as I had
    wanted to originally.

    I have seen this screw someone in the past and they didn't have the slightest
    idea what was going on or where the invalid package info was coming from.
    Took me a while looking at their stuff and finally I figured out it was probably
    due to interned pathnames. Interning anything is dangerous unless carfully 
    controlled. I hope these bugs can be fixed to avoid others' future confusion.
Well, I would quibble that the problem is not the interned pathnames.
The problem is the uncontrolled propogation of defaulted information.
Even if it did assume KBE for the package, it should not have saved that
information since it didn't actually know.  When it DID have information
from the user, then it did NOT save it.  It wouldn't matter to the symptoms
whether it saved it in an INTERNED pathname, or as an actual property of
the file on disk.

I think ZWEI should assume USER unless a file has a property list saying
otherwise, and M-X Set Package should SET THE FILE'S PROPERTY LIST.
Also, ^X^W should update the information in the pathname, for the name
it writes out to.

Anyway, thanks for your comments, Kent.  I'll see about getting this
fixed up.

Date: Saturday, 20 March 1982, 07:30-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: (TRACE TIME)
To: BUG-LISPM at SCRC-TENEX

In System 204.36, ZMail 42.6, LMFS 24.1, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, on Spaniel:

Trace most anything that gets used in important places and you
lose your ass.  In a moment of utter stupidity I did (TRACE TIME)
and then couldn't even warm boot.  Fortunately I was able to
simulate an (UNTRACE TIME) from CC, but it would seem to me that
there should maybe be a WARM initialization that does (UNTRACE),
so at least you'll be able to warm boot if you trace something
you shouldn't?

If nobody objects I'll put this in.

Date: Saturday, 20 March 1982, 07:19-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Let's do our software debugging with an oscilliscope!
To: BUG-LISPM at SCRC-TENEX, BUG-ZWEI at SCRC-TENEX

In System 204.36, ZMail 42.6, LMFS 24.1, Tape 8.0, Canon 12.3,
Symbolics 10.1, microcode 865, on Spaniel:

In ZWEI, do BREAK
(defun foo () standard-input)
(foo) ==> #<DTP-CLOSURE 123723>
(compile 'foo)
(foo) ==> SI:TERMINAL-IO-SYN-STREAM

This ridiculous behaviour combined with the non-closure nature of
SI:TERMINAL-IO-SYN led me to have to figure out why my machine would
halt on something each component of which worked when tried by hand.  No
fun, I say.  Specifically, you can't pass STANDARD-INPUT into a
PROCESS-WAIT, because it will try to allocate a background interactor
and halt.  You can't see that you're really passing in
SI:TERMINAL-IO-SYN-STREAM when doing this in a break loop in ZMACS,
because if you ask for the value of STANDARD-INPUT it lies to you.  The
only way to find out what's happening is to let it halt and debug from
the debugging cable.

Date: Saturday, 20 March 1982, 05:50-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Error in SUPDUP to SPEECH
To: dph at MIT-ML
Cc: bug-lispm at SCRC-TENEX
In-reply-to: The message of 19 Mar 82 17:34-EST from dph at MIT-ML


    Date: 03/19/82 17:34:13
    From: dph@MIT-ML
    In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

    While in a supdup window to a twenex host (mit-speech), type ahead in
    order to stop output (two successive ctrl-c's), caused the supdup window
    to bomb with error: SUBSCRIPT BEYOND THE LENGTH IN AR-1
    while in the function (METHOD SUPDUP:RECORDING-SUPDUP BUFFERED-TYO) <-
			  (METHOD SUSPDUP:BASIC-NVT TYPEOUT-TOP-LEVEL)
    Arguments: arg0 (OPERATION) TYO
	       arg1 (CH) 4

    Tyepein in the windopw was wedged (although the wholin claimed it was
    in TYI state), so it was impossible to type at the error handler.
I can't reproduce this in 204, nor can I see any way for it to happen in
the source for 204.  Perhaps the bug has been fixed in 204 as a result of
the reorginization that went on in this code for the new flavor stuff.
If you try it in 204 and it happens again, please send another note.

Quite likely this was a result of a protocol violation by SPEECH; it may
be difficult to get it to reproduce it.  In any event, the reason it wedged
is that SUPDUP works as two processes, one for input and one for output.
It was the output side which got into the error handler, yet only the
input side talks to the terminal.  Everything you typed got sent but
nothing echoed got displayed.  Definately confusing; errors in the output
side should go to a background interactor....

Date: Saturday, 20 March 1982, 02:38-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: TELNET and SUPDUP
To: Philip E. Agre <AGRE at MIT-AI>
Cc: CSTACY at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 19 Mar 82 22:41-EST from Philip E. Agre <AGRE at MIT-AI>

    Date: 19 March 1982 22:41-EST
    From: Philip E. Agre <AGRE at MIT-AI>
    I disagree w/ the proposal to have TELNET and SUPDUP be the same kind
    of window.  I frequently operate in the mode of having an AI window,
    a SPEECH window, and sundry other windows and randomly moving forth
    between them with much frequency.  This would be hard if both the AI
    and SPEECH windows were of the same sort; at present I can type
    System-S to get to AI and System-T to get to SPEECH without having to
    remember where they are on the window stack or anything like that.
    So please don't implement CSTACY's suggestion of 19 March 82.
    Thanks.   - phiL
I don't understand.  Why don't you use System-T to go to AI and System-S
to go to SPEECH?  Makes about as much sense.  Do you have some reason for
not using SUPDUP to SPEECH?  If system were to figure out the best protocol
based on the system type, then you'd just do System-T to get to the one
you want, and you wouldn't have confused users using TELNET to go to SPEECH
when they really wanted SUPDUP.

Date: 20 March 1982 01:25-EST
From: Alias for KMP <turnip at MIT-AI>
Subject: Interned pathnames propagating bad information
To: BUG-LISPM at MIT-AI

In System 79.25, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

I'll tell this in story form because the form that picks out just the important
points ends up taking longer and providing less info...

I loaded a file into an editor buffer. It had no associated package, so it
took on the package KBE: because I was already editting a file in that package.
I am not sure I approve of this behavior.

I then wrote the file to AI:KMP;FSF > and FS:KMP;FSF.LISP#>. Then I went into
a ZWEI breakpoint and did (QC-FILE "AI:KMP;FSF") and it didn't compile right
because the KBE package shadows LET and I hadn't loaded the shadow definition.
So I said fine, I'll go to USER:. So I went to a Lisp Listener in USER: and 
did QC-FILE again the same way, but it still compiled in KBE:. Now since the file
doesn't have the word KBE: in it anywhere and since I was in USER: in the listener,
it was odd to me that it should happen this way. I assume the info comes from
the interned pathnames. This is probably a bug.

So I went back to the editor and did M-X Set PackageUSER and went back to the
lisp listener and tried again. It still compiled in KBE. That was my bug, because
the file defaults for the buffer were now AI:KMP;FSF.LISP#>. Fine. So I did
C-X C-W AI:KMP;FSF > assuming the file properties as now understood by ZWEI for
the FS: file would correctly be inherited by AI:KMP;FSF > ... they were not. This
I believe to have been your bug. I went back to my lisp listener and tried the
QC-FILE again and it still compiled in KBE:.

I went back into the editor and did M-X Set PackageUSER yet again, and sure
enuf, this time it worked. I was able to compile the file in USER: as I had
wanted to originally.

I have seen this screw someone in the past and they didn't have the slightest
idea what was going on or where the invalid package info was coming from.
Took me a while looking at their stuff and finally I figured out it was probably
due to interned pathnames. Interning anything is dangerous unless carfully 
controlled. I hope these bugs can be fixed to avoid others' future confusion.

-kmp

Date: 20 March 1982 00:56-EST
From: Kent M. Pitman <KMP at MIT-AI>
Sender: turnip at MIT-AI
Subject: Patching systems that aren't loaded
To: BUG-LISPM at MIT-AI

In System 79.25, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

There should be a way to patch a system which is not loaded without
doing anything more than loading the DEFSYSTEM for that system.
That command should take or prompt for information about the version
number of the system to patch. 

Rationale:

 The format of patch files and patch directories should be invisible
 to the user, so editting the patch files/dirs by hand should be discouraged.

 There is a lot of overhead to my loading my system (which I was just 
 about to dump into a band). I do not want to dump a band with an editor
 window already started. I would have to load the system once, go into the
 editor and patch the system, reboot, load the system again, load patches,
 and then dump. That's twice as much work as is called for. The patch I want
 to make is totally trivial and could easily be created without having the
 system loaded.


Date: 19 March 1982 22:41-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: CSTACY at MIT-AI
cc: BUG-LISPM at MIT-AI

I disagree w/ the proposal to have TELNET and SUPDUP be the same kind
of window.  I frequently operate in the mode of having an AI window,
a SPEECH window, and sundry other windows and randomly moving forth
between them with much frequency.  This would be hard if both the AI
and SPEECH windows were of the same sort; at present I can type
System-S to get to AI and System-T to get to SPEECH without having to
remember where they are on the window stack or anything like that.
So please don't implement CSTACY's suggestion of 19 March 82.
Thanks.   - phiL

Date: 19 March 1982 22:38-EST
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-LISPM at MIT-AI

On at least three occasions recently I have read RG's mail to find that responses
to my various bug reports (e.g., the exchanges over C-U prompting) never made it
into my mailbox.  I suspect that there is something wrong with the conversation
between the SCRC-TENEX and AI mail-handling programs.  It's strange.  Could
someone check it out?
By the way, my .MAIL.;NAMES > entry reads:
(AGRE (R-OPTION NOQC))
I don't know if this is affecting anything.

dph@MIT-ML 03/19/82 17:34:13
To: (BUG LISPM) at MIT-AI
In System 79.31, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

While in a supdup window to a twenex host (mit-speech), type ahead in
order to stop output (two successive ctrl-c's), caused the supdup window
to bomb with error: SUBSCRIPT BEYOND THE LENGTH IN AR-1
while in the function (METHOD SUPDUP:RECORDING-SUPDUP BUFFERED-TYO) <-
                      (METHOD SUSPDUP:BASIC-NVT TYPEOUT-TOP-LEVEL)
Arguments: arg0 (OPERATION) TYO
           arg1 (CH) 4

Tyepein in the windopw was wedged (although the wholin claimed it was
in TYI state), so it was impossible to type at the error handler.


Date: Friday, 19 March 1982, 10:44-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: EB at MIT-AI, BUG-LISPM at MIT-AI

Regarding the "Notice from the FileComputer"; I don't know where this
message comes from, but possibly it is being sent incorrectly.  I am
otherwise unable to reproduce your Converse problem; Converse seems to
have no problems with embedded spaces.  So I don't think there's a
Converse bug; it seems as if the message is being sent incorrectly or
something.

Date: Friday, 19 March 1982  02:54-EST
From: HIC at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at MIT-AI>
Cc:   BUG-LISPM at SCRC-TENEX, DEG at SCRC-TENEX, RWK at SCRC-TENEX
Subject: STEP, TRACE

    Date: Thursday, 18 March 1982  23:20-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>
    To:   DEG, RWK
    cc:   BUG-LISPM
    Re:   STEP, TRACE

    Maybe rather than TRACE-OUTPUT we really want to have a DEBUG-IO, which
    would be a stream explicitly for debugging tools to use in order to stay
    out of the way of the real program.  TRACE-OUTPUT is a little bit too
    specific to generalize well to STEP and so on.

Yes, I agree with something of this form.  How does this relate to
EH:ERROR-HANDLER-IO?

Date: 19 March 1982 07:57-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: BUG-LISPM at MIT-AI

Instead of seperate TELNET and SUPDUP windows, I would like to have just
one of window which could be made (with  commands maybe) to use
one or the other protocol.  Perhaps it could emulate various terminals
in TELNET mode also, and toggle wallpapers and local-editing processing.
I find that I rarely need to use TELNET, and that when I do I am not
also using SUPDUP; I think the default should be to start in SUPDUP.

Date: Thursday, 18 March 1982, 13:23-PST
From: Chris Ryland <Ryland at SRI-KL>
Subject: file activity line in wholine
To: bug-lispm at ai

Currently, only 3 digits of filepos are displayed.  How about, for output
files, showing nnK instead of the first three digits (and, perhaps, nnM
for truly huge files)?

Date: 18 March 1982 23:20-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: STEP, TRACE
To: DEG at SCRC-TENEX, RWK at SCRC-TENEX
cc: BUG-LISPM at SCRC-TENEX

Maybe rather than TRACE-OUTPUT we really want to have a DEBUG-IO, which
would be a stream explicitly for debugging tools to use in order to stay
out of the way of the real program.  TRACE-OUTPUT is a little bit too
specific to generalize well to STEP and so on.

Date: 18 March 1982 23:54-EST
From: Kent M. Pitman <KMP at MIT-AI>
Subject: Inefficient DESETQ expansion
To: ALAN at MIT-AI
cc: BUG-LISPM at MIT-AI

(DESETQ (A . B) C)
 ==> (PROGN (SETQ B C)
	    (SETQ A (CAR B))
	    (SETQ B (CDR B)))

For this special case, I should think the obvious

 (PROGN (SETQ A (CAR C))
	(SETQ B (CDR C)))

would be better. Especially since the current compiler is not
smart enough to optimize things later. I imagine it might mean
either a special case or some hairier optimization that looks to
see if the initial SETQ ends up doing anything good,  but I think
destructuring a cons is a very common thing to want to do, so 
maybe...

-kmp

ps I'm using this on a tight inner loop, which is why I'm
   quibbling about what ends up being one instruction. I hate
   writing ugly code just because I know it compiles better.

Date: 18 March 1982 23:50-EST
From: Dexter Pratt <DEXTER at MIT-AI>
To: EB at MIT-AI, BUG-LISPM at MIT-AI

    Date: 16 March 1982 23:04-EST
    From: Edward Barton <EB at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine One:

    Could press:print-file maybe be smart enough to try again when it
    gets some temporary error like BUSY while trying to connect to the
    Dover?  One tires pretty soon of typing C-M-R y.

patched by rg 

Date: Thursday, 18 March 1982, 18:17-EST
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: STEP, TRACE
To: RWK at SCRC-TENEX
Cc: BUG-LISPM at SCRC-TENEX, DEG at SCRC-TENEX

    Date: Thursday, 18 March 1982, 14:08-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    Subject: STEP, TRACE

	Date: Sunday, 14 March 1982, 15:36-EST
	From: David E. Goldfarb <DEG at SCRC-TENEX>
	Subject: STEP, TRACE

	Is there any good reason that STEP does not use TRACE-OUTPUT?

    Then where would it get its input?

Well, in my current case, the best (actually, the only feasible) place
was from trace-output.  It would seem to me that this is true just about
always; the only exception would be if someone was simultaneously
tracing something to a write-only stream and also stepping a function.
I can not think of any practical case in which this would occur.  BTW,
I've changed the source so as to use trace-output (it had been query-io
previously).

				- David

Date: Thursday, 18 March 1982, 14:29-EST
From: The Software Staff of Symbolics at SCRC-TENEX
Sender: DLA at SCRC-TENEX
Reply-to: DLA at SCRC-TENEX
Subject: Release of Symbolics software at MIT
To: INFO-LISPM at MIT-AI

Through an agreement between Symbolics, Inc. and MIT's EE/CS department,
Symbolics' Lisp Machine software is now available for use by MIT users.

Symbolics is making available all software that we maintain to MIT
users.  This includes the Symbolics File System, Tape System, Canon
Laser Printer Software, and Font Editor, as well as any other software
that is being developed for distribution to Symbolics customers.  New
releases will be made available to MIT at least as often as to Symbolics
customers.  In practice, MIT will probably be given releases more
often than this, to provide faster response to trouble reports.

Symbolics systems can be distinguished because their system version
numbers are greater than 200; the current system being released is
System 204.  The master copies of the sources from which Symbolics
systems are created are kept at Symbolics; copies of these sources are
being kept on MIT-EECS (the TOPS-20 system of the EE/CS department,
which is providing the disk space to hold these sources).  Please note
that MIT-EECS is a very heavily loaded system, and its routine use
should be avoided.  We expect lisp machine users to be considerate
in this regard.

The sources are on the LIB: structure of the MIT-EECS machine.  The
Symbolics systems are configured to know that all system sources live on
this machine; if you access a system source file with the Meta-.
command or otherwise, the system will connect to MIT-EECS to read in the
file.  This way, Meta-. will find the correct version of the source,
corresponding to the software in the Lisp environment.  Furthermore,
if you do LOAD-PATCHES, the patch files will be searched for on MIT-EECS.

When Symbolics bands for MIT are booted, they say "EE" instead of "MIT"
in the last line of the herald message.  This is because these bands use
a different set of site-configuration files, in order to make the SYS
host be EE instead of AI.  This convention may change in the future.

The MIT-EECS machine requires you to log in before you can access files.
Anyone may log in by using the user name "Anonymous", without giving the
file job a password; this will give you read-access to all of the
sources.  Of course, if you have your own account on MIT-EECS, you may
use that; all users have read-access to all the sources.

We want to provide the same fast response to bugs that MIT Lisp Machine
users are accustomed to.  Therefore, bug reports sent to Symbolics from
MIT will be answered as soon as possible, and patch files will get moved
to MIT-EECS promptly.

In order to make it easy for MIT users to introduce bug fixes and
changes into the Symbolics software, system maintainers at MIT may
modify the copies of the sources that are stored on MIT-EECS.  Symbolics
will normally merge such changes into the master source files at
Symbolics; however, we reserve the right to reject any changes we feel
are incorrect or inappropriate.  When new releases are provided to
MIT-EECS, sources will be copied from Symbolics to MIT-EECS, and any
changes that were rejected will disappear from the sources.  (The source
files on MIT-AI are merged with Symbolics sources only infrequently.)

The administrators of the MIT-EECS machine have decided to control
write-access to these sources, on a per-user basis.  If you feel you'd
like to have access to modify Symbolics sources stored on MIT-EECS, send
mail to the list LISPM-ACCOUNTS@EE.  Please note that this control is
being maintained by MIT-EECS personnel, and not Symbolics personnel.

This software is provided to MIT under the terms of the Lisp System
License Agreement between Symbolics and MIT.  MIT's license to use this
software is non-transferable.  This means that the world loads,
microloads, sources, etc. provided by Symbolics may not be distributed
outside of MIT without the written permission of Symbolics.

System 204 already exists in many forms on MIT machines; some of these
bands have different systems loaded.  People who wish to receive advice
on which software packages would best suit their needs, or who wish
assistance in installing system 204 should send mail to
BUG-LISPM-SCRC@SCRC.

System 204, and all associated software, is now released to users.  It
comes with Symbolics microcode 865, and ZMail 42.  There are a number of
INCOMPATIBLE CHANGES in this software.  The system release announcement
can be found in EE:LIB:<LISPM.DOCUMENTATION>SYSTEM-204.RELEASE and
in AI: LMDOC; SYS204 MSG.

Date: Thursday, 18 March 1982, 14:08-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: STEP, TRACE
To: David E. Goldfarb <DEG at SCRC-TENEX>
Cc: BUG-LISPM at SCRC-TENEX
In-reply-to: The message of 14 Mar 82 15:36-EST from David E. Goldfarb <DEG at SCRC-TENEX>



    Date: Sunday, 14 March 1982, 15:36-EST
    From: David E. Goldfarb <DEG at SCRC-TENEX>
    Subject: STEP, TRACE
    To: BUG-LISPM at SCRC-TENEX
    Cc: DEG at SCRC-TENEX

    In Experimental System 204.26, Experimental ZMail 42.4,
    Experimental LMFS 23.18, Experimental Tape 8.0,
    Experimental Symbolics 10.1, Experimental Canon 12.3, microcode 865, on Spaniel:

    Is there any good reason that STEP does not use TRACE-OUTPUT?

				    - David
Then where would it get its input?

Date: Thursday, 18 March 1982  14:08-EST
From: MOON at SCRC-TENEX
To:   Jonathan D. Taft <Taft at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: Your converse bug

    Date: 29 June 1990 09:42-EDT
    From: Jonathan D. Taft <Taft at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    DAEDALUS 31.1, microcode 849, "", on Lisp Machine Two:

    I used (qsend "foo@cadrn) typed my message and Ended it.
    My message seemed to get sent, my machine frobbed and
    frobbed, allowed me to do a tiny bit, and the frobbed
    and frobbed some more. It finally left me in Converse with
    a record of the previous message as having been sent and
    with a new header addressing another message to foo@cadrn.

    I didn't want to send another message to foo.
    I didn't want to end up in converse.
    I think converse is one of the ugliest creations I have
     ever seen. I wanted to use qsend. I wanted to send only
     one message to foo. I wanted nothing to do with converse,
     why did the machine choose to demand to force this thing
     under my fingernails completely at random ?

These bugs were fixed a long time ago at Symbolics (they are mainly due to
incorrect initialization in Converse).  DLA and I tried to make a patch for
system 79 to fix them, however the patch doesn't work there because the
version of Converse in system 79 is so old.  I suggest you either use
system 204 or try to make a patch for system 79 that completely reloads
Converse (which will require killing the old window and maybe debugging
some reinitialization problems that might crop up).  By the way Converse
comes from MIT, not Symbolics; we just fixed the bugs.

Date: 18 March 1982 11:11-EDT
From: Jerry Roylance <GLR at MIT-AI>
Subject:  Paging Hack
To: BUG-LISPM at MIT-AI
cc: GLR at MIT-AI


How difficult would it be to make an optional bitmap display of the current
page table?  As pages came in and went out, their corresponding
pixels on the screen would change.  Bored programers could watch
the pixels dance around as their programs paged.
Displaying all 64K pixels takes about 10% of the screen.

Date: 18 March 1982 09:25-EDT
From: James J. Dempsey <jjd at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Eleven:

I can't seem to supdup to MIT-VAX from a cadr.  I get the
error:

>>>>TRAP 1527 (TRANS-TRAP)
The instance variable SUPDUP:LAST RESYNCH-CHAR-COUNT is unbound
While in the function SUPDUP:L-E-SUPDUP-RESYNCH-REPLY-RECIEVED

then the window hangs and refuses input.

			--Jim--

Date: Thursday, 18 March 1982, 09:23-EST
From: David Chapman <ZVONA at MIT-AI>
To: ALAN at MIT-MC
Cc: BUG-LISPM at MIT-AI, bug-lmman at MIT-AI
In-reply-to: The message of 17 Mar 82 19:44-EST from Alan Bawden <ALAN at MIT-MC>

    I LIKE the fact that I can use ~D to print a list of fixnums in
    base ten.  My code will break if format starts insisting on numbers there.

Hmm, the documentation is inconsistent.  It begins with ``arg, a number,
is printed as a decimal integer.''  That was as far as I got.  On the
next page, it goes on to say ``If arg is not a number, it is printed in
~A format and decimal base.''

Date: 18 March 1982 05:00-EDT
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, Eye-saving, on Lisp Machine Six:

I got a message that started out as follows:

Notice from the FileComputer:

Converse thought the message was from "the@MIT-LISPM-27".  This
conclusion looked sort of silly and wouldn't have been
especially useful for sending a reply.

Date: 17 March 1982 19:44-EST
From: Alan Bawden <ALAN at MIT-MC>
To: Zvona at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 17 March 1982 17:49-EST
    From: David Chapman <Zvona at MIT-AI>

    In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine Janis:

    format ~d should do check-arg numberp.  

    (format nil "~d" "foo bar") => "foo bar"

I hope not.  I LIKE the fact that I can use ~D to print a list of fixnums in
base ten.  My code will break if format starts insisting on numbers there.


Date: 29 June 1990 09:42-EDT
From: Jonathan D. Taft <Taft at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.1, microcode 849, "", on Lisp Machine Two:

I used (qsend "foo@cadrn) typed my message and Ended it.
My message seemed to get sent, my machine frobbed and
frobbed, allowed me to do a tiny bit, and the frobbed
and frobbed some more. It finally left me in Converse with
a record of the previous message as having been sent and
with a new header addressing another message to foo@cadrn.

I didn't want to send another message to foo.
I didn't want to end up in converse.
I think converse is one of the ugliest creations I have
 ever seen. I wanted to use qsend. I wanted to send only
 one message to foo. I wanted nothing to do with converse,
 why did the machine choose to demand to force this thing
 under my fingernails completely at random ?


Date: 17 March 1982 18:42-EST
From: Edward Barton <EB at MIT-AI>
To: ZVONA at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 17 March 1982 17:49-EST
    From: David Chapman <Zvona at MIT-AI>

    In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    microcode 849, 60.45Hz, on Lisp Machine Janis:

    format ~d should do check-arg numberp.  

    (format nil "~d" "foo bar") => "foo bar"

I disagree.  I think it is useful to be able to use ~D to print out
a big piece of list structure and have the embedded numbers come out
in decimal.

Date: 17 March 1982 17:49-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.29, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Janis:

format ~d should do check-arg numberp.  

(format nil "~d" "foo bar") => "foo bar"

Date: Wednesday, 17 March 1982, 15:43-EST
From: James E. Kulp <JEK at SCRC-TENEX>
Subject: M-X Print Buffer
To: BUG-LISPM at SCRC-TENEX

In Experimental System 204.32, Experimental ZMail 42.5,
Experimental LMFS 23.18, Experimental Tape 8.0,
Experimental Symbolics 10.1, Experimental Canon 12.3, microcode 865, on Spaniel:

I still think using the word hardcopy would be more consistent.

Not having M-X Print Buffer run as a background process is a loss as it takes your
editor away.  It should be like Terminal-Q (make a copy) or at least after pressifying
into a local temp file it should spawn a background process to send it over the net.

Date: Wednesday, 17 March 1982  12:32-EST
From: MMCM at SCRC-TENEX
To:   Clark Baker <CMB at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX

    Date: Wednesday, 17 March 1982, 08:57-EST
    From: Clark Baker <CMB at SCRC-TENEX>
    1) Go to the editor and insert 1000 a's.
    2) Enter the following keyboard macro: search for an a, rubout, insert a
       b.
    3) Execute the keyboard macro 100 times.
    4) While that is happening, do a System L.

    The unexpected result is that ZMacs will "steal" the display away from
    lisp or any other system you try to run.  The same thing happened when I
    was in System F, asked for a directory which was taking a while.  I when
    back to the editor and when System F was done, it grabbed the screen
    away from the editor.  Al of these windowns have the "Wait until
    exposed" typein and typeout attribute.  What gives?
What gives (as usual) is that there isn't an activity system.
Intra program selection (prompt for search) is not distinguished from
inter program selection.

Date: Wednesday, 17 March 1982, 09:03-EST
From: Clark Baker <CMB at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 204.32, Experimental ZMail 42.5,
Experimental LMFS 23.18, Experimental Tape 8.0,
Experimental Symbolics 10.1, Experimental Canon 12.3, microcode 865, on Basset:

In system menu, split screen command, frame option:  First you use the
frame option, setting the name of the frame and the system key letter to
place it on.  This is fine.  The you click on existing window.  A menu
of existing windows appears.  When you select one of these,  it has to
create the mini picture of the screen layout.  This goes where the frame
menu is so the frame menu must get moved somewhere else.  The final
result (and bug) is the the mouse gets confused (you would too) and ends
up warped to the frame menu.

Date: Wednesday, 17 March 1982, 08:57-EST
From: Clark Baker <CMB at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 204.32, Experimental ZMail 42.5,
Experimental LMFS 23.18, Experimental Tape 8.0,
Experimental Symbolics 10.1, Experimental Canon 12.3, microcode 865, on Basset:

1) Go to the editor and insert 1000 a's.
2) Enter the following keyboard macro: search for an a, rubout, insert a
   b.
3) Execute the keyboard macro 100 times.
4) While that is happening, do a System L.

The unexpected result is that ZMacs will "steal" the display away from
lisp or any other system you try to run.  The same thing happened when I
was in System F, asked for a directory which was taking a while.  I when
back to the editor and when System F was done, it grabbed the screen
away from the editor.  Al of these windowns have the "Wait until
exposed" typein and typeout attribute.  What gives?

Date: 16 March 1982 23:04-EST
From: Edward Barton <EB at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.28, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine One:

Could press:print-file maybe be smart enough to try again when it
gets some temporary error like BUSY while trying to connect to the
Dover?  One tires pretty soon of typing C-M-R y.


Date: Tuesday, 16 March 1982  16:50-EST
From: MOON at SCRC-TENEX
To:   David M. Neves <Neves at MIT-MC>
Cc:   BUG-LISPM at MIT-MC
Subject: Getting files to an Alto

The Alto address is printed by the alto when you boot it.  It looks like
e.g. 2#105# which translates into the octal number 1105 (i.e. multiply
the first number by 400 and add the second number, all in octal).

At the Alto end you run the EFTP program.  You need the version patched
by me (it types out "Moon's EFTP" when started) to fix a bug in handling
of negotiation about the packet size to use.  I believe that version is
the installed version at MIT, but if it isn't you can find it on my
directory on the IFS.  <moon>eftp.run would be the file name; use FTP
to retrieve it.  The EFTP program takes one-letter commands, probably ?
prints help.  R receives a file.  You need to give it the name of the
Lisp machine it's coming from, or the number (value of chaos:my-address)
if it's one of the Lisp machines whose address is incorrect in the
separately-maintained Alto host table.


Date: 16 March 1982 15:40-EST
From: David M. Neves <Neves at MIT-MC>
Subject: Getting files to an Alto
To: BUG-LISPM at MIT-MC

I need to get a Bravo file to an Alto so that I can pressify it and then
print it out.  I've heard that there is a way of getting a file to an
Alto via the Lispm.  Unfortunately I can't understand how to do this
by looking at the code of the appropriate commands (i.e.
chaos:eftp-text-to-alto).

My questions:
 1.  How do I get the "ALTO-ADDRESS" of an Alto that the lispm software
requires?

 2.  What do I need to do on the Alto end to receive the file?

  -thanks, dave

Date: Tuesday, 16 March 1982  12:23-EST
From: MOON at SCRC-TENEX
To:   JCMA at MIT-AI
Cc:   bug-lispm at MIT-AI
Subject: Turning off incoming Converse messages but still receiving them

It sounds to me like what you really want is the option that notifies you
about incoming messages without popping up the window.  This comes in two
flavors; just the sender of the message can be printed, or the entire message.
I think if you go into Converse and type HELP it will tell you the name
of the variable to set in your init file.

Date: Tuesday, 16 March 1982, 10:06-EST
From: JCMA@MIT-AI
To: dlw@SCRC-TENEX
Cc: bug-lispm@MIT-AI
In-reply-to: The message of 14 Mar 82 17:52-EST from Daniel L. Weinreb <dlw at SCRC-TENEX>

    Date: Sunday, 14 March 1982, 17:52-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    To: JCMA at MIT-AI, BUG-LISPM at MIT-AI

    That's not strictly true; you might want to shut off Qsends, and then
    select the Converse buffer to look at previous messages, and still not
    want to see new ones.  I think the behavior you suggest would really be
    harder to understand in the long run.  Ideally, Converse should display
    whether or not sending is enabled; maybe this could appear in its mode
    line or something.

The answer would seem to be to have converse keep track of received
messages while qsends is off and not update the converse window.  When
the user types something like M-X update converse window, the
undisplayed messages are put up on the converse window.  A further
feature would be the ability to just update specific conversations.  It
seems to me that the main point of turning off qsends is to avoid
time-consuming interruptions, assuming receiving a message is not
computationally expensive.  Thus, one can have one's cake and eat it too
by being able to turn off notifications and still be able to retreive
messages at some later time. 

Date: Tuesday, 16 March 1982, 08:28-EST
From: Bruce E. Edwards <BEE at SCRC-TENEX>
Subject: Rational arithmetic bug
To: CWH at MIT-MC
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 28 Feb 82 02:07-EST from Carl W. Hoffman <CWH at MIT-MC>

I spazzed in testing this. I have fixed the bug here, and will patch it at MIT
today for System 79. It is also fixed in System 204 with patches.

Date: Tuesday, 16 March 1982, 07:56-EST
From: Bruce E. Edwards <BEE at SCRC-TENEX>
Subject: Rational arithmetic bug
To: CWH at MIT-MC, BUG-LISPM at MIT-AI
In-reply-to: The message of 28 Feb 82 02:07-EST from Carl W. Hoffman <CWH at MIT-MC>

I have looked at this, and cannot make it happen. Does it still lose?

kmp@MIT-MC 03/16/82 00:23:15 Re: Making new editor windows from an editor break
To: (BUG LISPM) at MIT-MC
In System 79.26 on Cadr-22:

Typing System Control-E from in the error handler from a break loop in 
Zwei exhibits bizarre effects. An editor window is created with no 
mode line. Typing to the window eats characters, but you can't see 
what's happening. If you System E to reselect the other editor window,
you can see that what you've been typing to the second editor window
has been being read and interpreted silently by the error handler ...
I would really like not to have had to get out of that error handler
in order to get to an editor buffer; if I'd had access to an editor, I
could have corrected and proceeded the error. As it was, I didn't see 
how I could do that.


Date: 15 Mar 1982 1252-PST
From: Chris Ryland <Ryland at SRI-KL>
Subject: MEDFNT replacement
To: Info-LISPM at MIT-AI

I've put a MEDFNT font replacement in AI:LMLIB;MEDFNT QFASL .  It' a
typewriter-style font which I happen to like (since I created it pixel
by pixel and tuned it over a long period of time).  Further, I use it as
as the standard font.  (It's a MEDFNT replacement to maximize its
availability in standard system-type fonts (many of which use MEDFNT).)
I do a (TV:SET-DEFAULT-FONT 'FONTS:MEDFNT) after loading it, and then
a (CLEAR-RESOURCE 'TV:SYSTEM-MENU) to make the system menu get recreated
in its new image.

You may hate it.  I happen to like it and think it's a real eye-saver
as a default font.
-------

Date: 15 March 1982 17:06-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
To: MMCM at SCRC-TENEX
cc: BUG-LISPM at SCRC-TENEX

Giving the number means don't update the in-core version?  If you don't
mind my saying so, I think that is a horrible user-interface.  It is
inconsistent and unmnemonic; one probably would not expect it.  Would
anything break if the calling sequence to this function were changed
(to take two arguments)?

Date: 15 March 1982 16:59-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
To: KMP at MIT-AI, BUG-LISPM at MIT-AI
cc: REH at MIT-AI

There is no way that ONCE-ONLY could be any more conservative and still
be useful; in order to work in your case, it would have to ALWAYS
generate a lambda-binding.  ONCE-ONLY is not a panacea.  In particular,
it can change orders of evaluation; this should have been more clearly
documented in the manual.  In fact, maybe ONCE-ONLY is too hairy and should
not have been installed, in which case it is my fault.  I guess an
INFO-LISPM note should be sent out about this.

Date: Monday, 15 March 1982  12:22-EST
From: MMCM at SCRC-TENEX
To:   Daniel Weise <Daniel at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: si:set-system-source-file

    Date: 13 March 1982 23:41-EST
    From: Daniel Weise <Daniel at MIT-AI>
    It is unclean for si:set-system-source-file to require
    the name of the system as a symbol.  All the other system 
    maintainance functions accept strings.
I believe it does accept a string.
					    A bad side
    of effect of this is that one must call make-system with
    a symbol and not a string the first time to get the system to load,
    and all later calls to make-system can then use a string.
    Another bad side effect of this is that the symbol is in 
    a package somewhere and I must do (make-system ':nodes)
    because my init loads into user:.
This hasn't been true for some time, string-equal is used for comparison.

Date: Monday, 15 March 1982  12:13-EST
From: MMCM at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX

    Date: Saturday, 13 March 1982, 00:49-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    It appears that SET-SYSTEM-STATUS, when given the major version number
    of the version that is currently loaded in the system, will only
    set the status in the patch directory on disk and not in the in-system
    version.  This seems to be a bug, unless I am confused, which is quite
    possible.
Giving a number means don't update the in core version.

Date: 15 March 1982 05:06-EST
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, Eye-saving, on Lisp Machine Six:

If one gets into ZWEI, kills the currently selected buffer, and, when
asked for the name of a buffer to select, gives the name of the
just-killed buffer, ZMACS gets an error: Some argument to AR-1, NIL,
was of the wrong type. C-Z'ing out of the error gives another of the
same type. This is in a freshly booted machine, the buffer being
BUFFER-1.

The first time I tried this, I had a file in the buffer. I got the
same error, but there were also window system problems, and I was
punted to the cold-load stream. I had already run Zmail this time, so
something obscure might have been done to the window system (maybe
there was an odd number of windows) to cause the more extreme
behavior.

-pgs

Date: 15 March 1982 04:07-EST
From: Kent M. Pitman <kmp at MIT-AI>
Subject: CASEQ/SELECTQ
To: BUG-LISPM at MIT-AI

In System 79.26, ... microcode 849, on Lisp Machine Twenty-two:

(selectq x ((1) 'a) (t 'b))

compiles into a call to MEMQ on '(1) rather than EQ on 1. This is
especially distressing to people like me who always put the test
quantities in parentheses and the otherwise/t thing without parens
for syntactic clarity.

Is anyone ever going to put some time into making the compiler
understand dense ranges of selected numbers so it can just create
a dispatch vector? eg,
 (caseq x ((1) ...) ((2) ...) ((3) ...) ...)
needn't sit around doing memq tests all the way down. Being able
to just jump directly to the right clause would be great. I have some
applications for this on heavily called functions which cannot really
be coded fast in any way I know of. Creating an array of functions
and funcalling them still means special variables or argument push
overhead. I know this isn't a new idea, but it sure would be nice if
it was one that got followed through on.

Date: 15 March 1982 01:59-EST
From: Kent M. Pitman <kmp at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: REH at MIT-AI

I think if anything ONCE-ONLY should produce extra bindings where it is
not sure. I am very uncomfortable with the following behavior which it
currently has:

(defun f (x y)
  (once-only (x y) `(g ,x ,y ,x ,y)))

(f 'x '(setq x (1+ x)))
  => ((LAMBDA (G2249) (+ X G2249 X G2249)) (SETQ X (1+ X)))

Date: 14 March 1982 18:18-EST
From: Carl W. Hoffman <CWH at MIT-MC>
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, Mathlab, on Lisp Machine Fifteen:

I recall there being a time when if a search failed from within a
keyboard macro, execution of the macro halted.  I tend to write keyboard
macros which look like:

    C-S foo  M-Rubout bar

If I don't find foo, I don't want to replace it with bar.


Date: Sunday, 14 March 1982, 17:52-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: JCMA at MIT-AI, BUG-LISPM at MIT-AI

That's not strictly true; you might want to shut off Qsends, and then
select the Converse buffer to look at previous messages, and still not
want to see new ones.  I think the behavior you suggest would really be
harder to understand in the long run.  Ideally, Converse should display
whether or not sending is enabled; maybe this could appear in its mode
line or something.

Date: Sunday, 14 March 1982, 15:36-EST
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: STEP, TRACE
To: BUG-LISPM at SCRC-TENEX
Cc: DEG at SCRC-TENEX

In Experimental System 204.26, Experimental ZMail 42.4,
Experimental LMFS 23.18, Experimental Tape 8.0,
Experimental Symbolics 10.1, Experimental Canon 12.3, microcode 865, on Spaniel:

Is there any good reason that STEP does not use TRACE-OUTPUT?

				- David

Date: Sunday, 14 March 1982, 15:21-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: bug-lispm at SCRC-TENEX

If anybody is interested in the intentions and plans of Symbolics
regarding software maintenance, feel free to ask me about it.

I think it would be better for everyone if this mailing list were used
for Lisp Machine bug reports rather than political discussions.

Date: Sunday, 14 March 1982, 07:48-EST
From: JCMA@MIT-AI
To: BUG-LISPM@MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, Eye-saving, on Lisp Machine Six:

If you turn off qsends and get a converse window, you don't
receive messages. Converse should know that if a user is looking
at the converse window that user is willing to receive messages
as long as the converse window is selected.

Date: 14 March 1982 04:27-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  What is this new BattleField?
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI, JMTURN at MIT-AI

I've always considered the running and maintenance of any program,
large or small, in the LispMachine software and hardware environment
to be a BattleField! No clear delineation of what is system internal
and what is not, little accountability, ream upon ream of practically anonymous
code. So I think you are making a big thing out of nothing when you describe
the Symbolics activities of late in terms of setting up of battle lines.
Sharing of code is one thing, but when it comes to putting a lot of
effort into sharing of all the ugly little implementation details on
a day-to-day basis I say its not worth it. (Under any circumstances
I would rather share a single good idea than receive thousands of lines
of the same old system code.) Lets be practical here!



Date: 13 March 1982 23:41-EST
From: Daniel Weise <Daniel at MIT-AI>
Subject: si:set-system-source-file
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.0, microcode 849, 60.45Hz, on Lisp Machine One:

It is unclean for si:set-system-source-file to require
the name of the system as a symbol.  All the other system 
maintainance functions accept strings.  A bad side
of effect of this is that one must call make-system with
a symbol and not a string the first time to get the system to load,
and all later calls to make-system can then use a string.
Another bad side effect of this is that the symbol is in 
a package somewhere and I must do (make-system ':nodes)
because my init loads into user:.

Maybe it's time to turn this quick hack into a clean hack.

Daniel

Date: 13 March 1982 23:34-EST
From: Daniel Weise <Daniel at MIT-AI>
Subject: I want the cursor up here!
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.0, microcode 849, 60.45Hz, on Lisp Machine One:

As long as BUG-FOO is sticking a subject: field in the header,
it may as well put the cursor right after it.  It is easier
to move the cursor off the header than onto it.  To put the subject
in one must move the cursor up there, then move it back down
to send the message.

Date: 13 March 1982 23:29-EST
From: Daniel Weise <Daniel at MIT-AI>
Subject: crapping on the color screen.
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
DAEDALUS 31.0, microcode 849, 60.45Hz, on Lisp Machine One:

I do not want a converse window popping up on the color monitor
just because that's where the mouse was when someone sends to me.

I do not want an inspector appearing on the color screen just because
the mouse was there when I hit system-I.

I do not want finger displays there either.

I only want my IC layout there.

Would you please give me a way to turn off this obnoxious behavoir?
Maybe a switch *shit-upon-the-color-display* which says whether to
be obnoxious?

Don't tell me why this behavior is there, I know why it's there.
I just want to be able to turn it off so all those windows go to
the bw monitor where they belong.

Daniel

Date: 13 March 1982 23:26-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: JMTURN at MIT-AI, BUG-LISPM at MIT-AI

No one should feel worried about a lack of anyone able to
build new bands.  Both RG and I can do so, and it is not
terribly hard to learn how.  RG is on leave for two months,
but returning after that, and he is really in the neighborhood
anyway.

In the past the Lisp machine system has been shared between
MIT and the two Lisp machine companies.  This is the way it
should be.  It seems that Symbolics may be trying to do a power
play and use the lab as a pawn in an attempt to screw LMI.
This is unfair to the lab, as well as destructive (for the lab,
for the world in general, and possibly for Symbolics too--
many people say Symbolics will do better if LMI does well!).
The two lisp machine companies have plenty of other areas
to compete in; there is no need for them to compete in the
basic system software such as the compiler, editor, flavor
system and window system, making incompatibilities that are
bad for everyone.

We at the lab should show both companies very clearly that we
don't like being used as a battlefield, and that we expect them
to keep their competition constructive in the future.

Date: Saturday, 13 March 1982, 23:03-EST
From: David L. Andre <DLA at SCRC-TENEX>
Subject: A status for STATUS
To: BAK at MIT-AI
Cc: BUG-LISPM at MIT-AI, DLA at SCRC-TENEX

How do you propose this be done?  Pop up a window?  Better would
probably be to usurp the who-line documentation window for the period
that the STATUS key is depressed.

Date: Saturday, 13 March 1982, 23:04-EST
From: David Chapman <Zvona at MIT-AI>
To: bug-lispm at MIT-AI

I have been roundly chastised for my suggestion that Symbolics
sources be kept on AI.  MIT will continue to build bands, and MIT
sources will be on AI.

Having two sets of incompatible software around is going to be a
pain in the neck, but it is important that the Lab continue to
support its own software.  With a little cooperation, this
catastrophe could be avoided.

Date: Saturday, 13 March 1982, 22:08-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: Zvona at MIT-AI
Cc: bug-lispm at MIT-AI

    Date: Saturday, 13 March 1982, 20:58-EST
    From: David Chapman <Zvona at MIT-AI>
    I would like to be able to trim strings only at the beginning or
    only at the end.  string-trim could take an extra argument for
    this.
Try STRING-LEFT-TRIM and STRING-RIGHT-TRIM.

Date: Saturday, 13 March 1982, 20:58-EST
From: David Chapman <Zvona at MIT-AI>
To: bug-lispm at MIT-AI

I would like to be able to trim strings only at the beginning or
only at the end.  string-trim could take an extra argument for
this.

Date: 13 March 1982 19:26-EST
From: William A. Kornfeld <BAK at MIT-AI>
Subject: A status for STATUS
To: BUG-LISPM at MIT-AI

Dave Dyer made a suggestion for a use for the STATUS key which seems
useful.  A Twenex (and Interlisp) convention is that typing ctrl-T at
anytime gives the instantaneous status of the machine at that moment
without breaking or otherwise changing the state of the computation.  
In Interlisp you find out the highest couple of functions on the stack
and the system load average.  Hacking STATUS so that it shows you the
highest couple of functions plus the process you happen to be in would
be quite useful.

Date: Saturday, 13 March 1982, 00:49-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: BUG-LISPM at SCRC-TENEX

In Experimental System 204.25, Experimental ZMail 42.4,
Experimental LMFS 23.18, Experimental Tape 8.0,
Experimental Symbolics 10.1, Experimental Canon 12.2, microcode 865, on Setter:

It appears that SET-SYSTEM-STATUS, when given the major version number
of the version that is currently loaded in the system, will only
set the status in the patch directory on disk and not in the in-system
version.  This seems to be a bug, unless I am confused, which is quite
possible.

Date: 12 March 1982 23:43-EST
From: Carl Richard Feynman <CARLF at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine Nine:


	The explanation which appears when I type "network help" in supdup
does not go away. Instead supdup prints over it.
			-- Carl

Date: 12 March 1982 23:12-EST
From: Ken Haase <KWH at MIT-AI>
To: BUG-LISPM at MIT-AI

Whoops.  Sorry-  I just figured out how to do the right thing
with the keyboard macro....

Date: Friday, 12 March 1982 16:55-PST
To:   Bug-LISPM at MIT-AI
From: J. Random LISPM User <GULIBL at MIT-AI>
Subject: A story

As the moonlight creeps across your coverlet, the activity manager
comes in and tucks you in for your final goodnight, shooing away all
the window mis-selections which had been bothering your sleep...  You
sleep, restfully, knowing all the while that the error handler is
going to solve your nightmares.  Before you drift off into
slumberland, you remember, and exult: not only do you have a wonderful
activity manager, and the best error system a boy could dream of, you've
been told that they're
 ... --->>> *** \\\ OBJECT ORIENTED /// *** <<<--- ...

(Sorry.)

Date: 12 March 1982 19:04-EST
From: David Chapman <zvona at MIT-AI>
Sender: DAM at MIT-AI
To: BUG-LISPM at MIT-AI, BUG-LMFILE at MIT-AI

Hmm, lmfile's definition of PROBEF has changed incompatibly so that 
probef of a link to a non-existent file is nil, whereas it used to be t.
Now, this is reasonable, except that the old version was what I wanted
in a particular application and there is now no way to get the old
functionality back (except writing my own function to open the file
':probef and parsing the error string.)  A similar problem arose when
probef was changed to return nil on dead hosts.  Seems to me it ought
to give more information about exactly in what way the file didn't 
exist.

I suppose that "this will all be fixed in the new error-system".

I was gritching about our programs not running at a reasonable rate
with the amount of memory we have, and someone suggested that of
course the problem would be fixed by the new error system...

Date: 12 March 1982 18:51-EST
From: Daniel Huttenlocher <DPH at MIT-AI>
To: GREGOR at MIT-AI
cc: BUG-LISPM at MIT-AI, eric at MIT-EECS,
    schiller.sysmaint at MIT-MULTICS

    Date: 12 March 1982 15:25-EST
    From: Gregor J. Kiczales <Gregor at MIT-AI>

        Date:  11 March 1982 22:29 est
        From:  Schiller.SysMaint at MIT-MULTICS
        To:  Daniel Huttenlocher <dph at MIT-AI>
        cc:  "bug-lispm@SCRC-TENEX" at MIT-MC, "Eric@MIT-EECS" at MIT-MC
        In-Reply-To:  Message of 11 March 1982 00:32 est from Daniel Huttenlocher

        Currently EE is running an access control program...

    It isn't really a matter of Symbolics people being able to update the
    sources when EE load is high. General LISPM users always need to be able
    to access LISPM sources (e.g. META-.).

DLW told me that Eric said that (I know this sounds like a whose on first
joke) things would be fixed on ee to allow file jobs to log in.  I guess
that this did not get conveyed to bug-lispm.  I agree that the problem is
a big one if not sovled, but it looks like it will be.

Date: Friday, 12 March 1982, 16:53-EST
From: David Chapman <Zvona at MIT-AI>
To: bug-lispm at mc
In-reply-to: The message of 12 Mar 82 15:25-EST from Gregor J. Kiczales <Gregor at MIT-AI>

    It isn't really a matter of Symbolics people being able to update the
    sources when EE load is high. General LISPM users always need to be able
    to access LISPM sources (e.g. META-.).
Well, foo.  If sys 79 is no longer seriously supported, as JMTurn
suggests, we can flush the sources on AI and have Symbolics
sources here.  No one here, except maybe RG, who isn't quite here,
can build a new band, and 79 is decaying fast.  If LMI generates
new new software, we would need a duplicate set of directories
for that, but we can cross that bridge when we come to it.  Maybe
LMI sources could be kept on the Filecomputer (note that FS: has
complete sys 79 sources as it is.)

Date: 12 March 1982 15:25-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: DPH at MIT-AI, Schiller.SysMaint at MIT-MULTICS
cc: GREGOR at MIT-AI, Eric at MIT-EECS, bug-lispm at SCRC-TENEX

    Date:  11 March 1982 22:29 est
    From:  Schiller.SysMaint at MIT-MULTICS
    To:  Daniel Huttenlocher <dph at MIT-AI>
    cc:  "bug-lispm@SCRC-TENEX" at MIT-MC, "Eric@MIT-EECS" at MIT-MC
    In-Reply-To:  Message of 11 March 1982 00:32 est from Daniel Huttenlocher

    Currently EE is running an access control program that doesn't let
    people login when the system load is above 15. Above that level the
    system becomes very useless. Because EECS is primarily a teaching
    machine for the department, it is my opinion that when the load is that
    high, the symbolics people should probably not be using it at all,
    therefore I didn't implement a way for file jobs to circumvent the load
    control limits.

    If at any time it is ESSENTIAL for you to access that machine, it is
    possible for us to allow individuals to exceed the load limit.  To do
    this you should try to contact Eric, Pat O'Donnell, Joe Frisbee or
    myself when you need access.

		    -Jeff

It isn't really a matter of Symbolics people being able to update the
sources when EE load is high. General LISPM users always need to be able
to access LISPM sources (e.g. META-.).

Date: Friday, 12 March 1982  13:16-EST
From: MOON at SCRC-TENEX
To:   Kent M. Pitman <KMP at MIT-AI>
Cc:   BUG-LISPM at MIT-AI, DICK at MIT-ML, GJC at MIT-MC, KMP-AI at MIT-AI,
      RICH at MIT-AI
Subject: FOLLOW-STRUCTURE-FORWARDING 

I will take a look at it.  I think it was written in macrocode on the
assumption that it would be used only rarely not in inner loops.  Out
of curiosity, what are you using it for?

Date: Friday, 12 March 1982, 10:58-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Bug-Lispm
To: JMTURN at MIT-AI, BUG-LISPM at MIT-AI

You will soon get a message explaining the Symbolics policy about
software maintenance.  Sit tight and you will get it soon.

Date: 11 March 1982 19:27-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
To: BUG-LISPM at MIT-AI

Hey, everyone: there are copies of system 204 floating around.  It is
experimental (as it tells you when you boot it).  You have not seen
system release notes on it.  Don't expect to be able to just take off
and use it.  We'll get release notes out soon, but until then don't
try too hard to use 204.  Thanks.

Date: 12 March 1982 02:59-EST
From: Kent M. Pitman <KMP at MIT-AI>
Subject: FOLLOW-STRUCTURE-FORWARDING 
To: BUG-LISPM at MIT-AI
cc: RICH at MIT-AI, KMP-AI at MIT-AI, DICK at MIT-ML, GJC at MIT-MC

In System 79.23, ucode 849 on Cadr-22:

The function FOLLOW-STRUCTURE-FORWARDING runs amazingly slowly.
According to circumstantial evidence given by BEE's metering
stuff, a sizable fraction (maybe 12%) of time in the
Programmer's Apprentice was being spent in this function, which
is called from a data-compaction routine we wrote.

Anyway, I made some minor mods to that function which I think
are correct and seem to nearly double its speed (~59usec instead
of ~110usec in cases where the argument was not
structure-forwarded, which I suspect is the norm).  The mods are
in AI: KMP; FSF >. The function as I have modified it is much
larger and some of the cond branches look like they have
somewhat redundant code in them, but the speed seems to be
increased a lot for so doing. In particular, I assume that
interrupts only needed to be bound off in the case of the
%MAKE-POINTERs to make sure they get their args appropriately
synchronized. (Is this a reasonable assumption?) The major speed
gain comes from not bothering to bind interrupts for the easy
case of an arg that isn't structure-forwarded, but minor speed
gains are gotten in each of the two other cond branches, too, i
think (though i didn't in fact time them).

Anyway, maybe someone can check over my code to make sure I
didn't goof anywhere and if it looks good, install it with the
system. Modifying this one little function this way sped up the
PA system by 6%. Hopefully other people will benefit similarly.
Btw, I don't understand why this function is written in
macrocode at all; seems like it's the sort of thing that ought
to be written in microcode. I wonder how much more speed gain
could be gotten that way? Comments?

-kmp

Date: 12 March 1982 01:10-EST
From: Kent M. Pitman <kmp at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DICK at MIT-ML

Is there some reason that a file plist indicator cannot be created which says
it is ok for the package named in the file plist to be autocreated without user
intervention if it has not already been declared?

Date: 12 March 1982 00:52-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: Converse patch
To: BUG-LISPM at MIT-AI

I didn't try recieving messages, I only tried to see if I could
create a Converse window after loading it. The patch only
loses receiving messages.

Date: Friday, 12 March 1982  00:39-EST
From: MOON at SCRC-TENEX
To:   David L. Andre <DLA at MIT-AI>
Cc:   BUG-LISPM at MIT-AI, CWH at MIT-AI
Subject: Patch 204.4 has problems in system 79

I guess the Converse in system 79 is too old.  It's strange, since Jmturn said
he loaded the patch and it worked.  I guess you can either punt or recompile
the source that is there (it's the latest; I transferred it a couple of days
ago) in system 79 and make a patch that reloads the whole damned thing (and
also includes the manual fixup in 204.4).

Date: 12 March 1982 00:01-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Patch 204.4 has problems in system 79
To: MOON at MIT-AI
cc: CWH at MIT-AI, BUG-LISPM at MIT-AI

Patch 204.4, which should have fixed the Converse slowness,
doesn't work when loaded into system 79.  It bombs out when
CONVERSE-FRAME-1 gets a :ENTER-REQUEST message, which
isn't supported.  I'm not sure what's going on, any ideas?

BTW, it is currently the uninstalled patch 79.27.

Date: Thursday, 11 March 1982  23:49-EST
From: MOON at SCRC-TENEX
To:   Gregor J. Kiczales <Gregor at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: NOT NOT

No!  (NOT (NOT X)) is the same as X when used as a predicate.  It is
not the same when used as a value.  Consider (EQ 105 (NOT (NOT 105))).

Date: 11 March 1982 23:23-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 79.26, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.5hz, on Lisp Machine Twenty:


(defun FOO (x)
  (not (null x)))
FOO

(compile 'FOO)
FOO

(disassemble 'FOO)
16 MOVE D-PDL ARG|0 	      ;X
17 (MISC) NOT D-PDL
20 (MISC) NOT D-RETURN

FOO


From page 12 of the blue manual 

	"One often writes 
	  (cond ((not (null lst) ..)..
	rather than
	(cond (lst ..) ..)
	
	There is no loss of efficiency since these will compile into
	exactly	the same instructions."
	
Please add something like this to wherever the being maintained
version of QCOPT is.

(add-optimizer not  not-null-opt)
(add-optimizer null not-null-opt)

(defun NOT-NULL-OPT (form)
  (let ((arg (cadr form)))
    (cond ((and (listp arg)
		(or (eq (car arg) 'not)
		    (eq (car arg) 'null)))
	   (cadr arg))
	  (t form))))

Date: 11 March 1982 22:43-EST
From: James M. Turner <JMTURN at MIT-AI>
Subject: Bug-Lispm
To: BUG-LISPM at MIT-AI

It should be noted (as I understand it) that bug reports sent
to bug-lispm will probably not be fixed if it is a System 79 bug
as opposed to a Symbolics 20n bug. This is because the Symbolics
people have declared they will no longer make patches to MIT
systems, and most of the competant patchers are at Symbolics.

I would personally love to know where patches are going to come from
in the future. Any suggestions? The only solution I can see is for 
some random MIT person to transport Symbolics patches to MIT...


					James

