-*- Text -*-

In system 204, flavors have been reimplemented.  The changes were made
in order to increase performance; message passing is now much faster.
Unfortunately, certain incompatible changes had to be made in the flavor
system.  If your program uses flavors, you must at least recompile it
in system 204 to make it work in system 204.  In addition, if you use
some of the more advanced features of flavors, your program may need
some changes before you recompile it.

The most important reason for this is that instance variables are no
longer always implemented as special variables.  Simple uses of flavors
should not be affected much, but many more advanced things have changed.

In the previous implementation of flavors, instance variables used to be
implemented as symbols.  Functions that worked on symbols, such as SET,
SYMEVAL, BOUNDP, and so on, used to work on instance variables.  In
addition, functions that are called by methods of an instance could
refer to the instance variables of that instance; you used to do that by
declararing the instance variables as "special", by using the
DECLARE-FLAVOR-INSTANCE-VARIABLES special form.

DECLARE-FLAVOR-INSTANCE-VARIABLES is now gone.  Instance variables 
are now a whole new kind of variable.  Like local variables, they
are NOT symbols any more.

If you want to write a function that can be called by a method of a
flavor and access that flavor's instance variables directly, you must
define the function with the new DEFUN-METHOD special form.  A use of
this form looks like:

  (DEFUN-METHOD function-spec method-flavor arglist &BODY body)

This has the same effect that used to be had by surrounding a DEFUN
by DECLARE-FLAVOR-INSTANCE-VARIABLES: the function that is defined
can be called any time that SELF is an instance of a flavor one
of whose components is method-flavor.  (A flavor is considered
to be one of its own components.)  For now, function-spec must
be a symbol; this restriction may be lifted in the future.

DEFUN-METHOD works by defining two functions: one is a function named
function-spec, and the other is a function named (:DEFUN-METHOD
function-spec).  An optimizer is also added to function-spec (since
currently optimizers can only be added to symbols, function-spec is
constrained to be a symbol for now.)  The function named function-spec
can be called from anywhere, as long as SELF is bound to an
appropriate instance.  The environment will be correctly set up, and
the internal :DEFUN-METHOD will get called.  This requires calling
into the Flavor system, and has some performance penalty over sending
a message.  However, if function-spec is called from a context where
the compiler can know the current "Flavor" (in other words, some
constraints on what SELF can be), then the optimizer on function-spec
will turn into a call to the :DEFUN-METHOD internal function,
generating inline code to pass the correct environment.

Also, because of the optimizer, DEFUN-METHOD acts like a subst in that
better code will be generated if the DEFUN-METHOD is defined in a file
earlier than where it is used.  This is contrary to most of the uses of
DECLARE-FLAVOR-INSTANCE-VARIABLES, which often define the function after
it is used.  You should reorder such functions if you want to optimize
performance.  However, it should be stressed that DEFUN-METHODs are not
much faster than message-passing any more, even when the optimized
version of the call is being used.

Note that it is now faster to send a computed message then it is to call
a computed function that is a DEFUN-METHOD!  That is, if you have to use
FUNCALL to call the function being defined with a DEFUN-METHOD, this is
actually slower than sending a message in which you have to have a form
that computes the name of the message at run time.  This is because when
FUNCALL is being used on a DEFUN-METHOD, the optimized version of the
function call cannot be used.

Any use of functions that take symbols as arguments that expect the
symbol to be bound to the instance variable value will cease to work.
The one exception is VALUE-CELL-LOCATION, which, when given a quoted
argument form which is a symbol that is the name of an instance
variable, will compile correctly.  This means that (LOCF
instance-variable) will work.  However, it will NOT RUN INTERPRETED.
BOUNDP's of instance variables need to be changed to the special form
INSTANCE-VARIABLE-BOUNDP, which takes one subform, namely a symbol,
which it does not evalute (e.g. (BOUNDP 'FOO) should be changed to
(INSTANCE-VARIABLE-BOUNDP FOO)).  VARIABLE-BOUNDP and VARIABLE-LOCATION
will be introduced in a future system; they will work compiled and
interpreted for all types of variables (special, local, and instance).

Uses of SET of an instance variable should be changed to
SET-IN-INSTANCE, SYMEVAL to SYMEVAL-IN-INSTANCE, and VALUE-CELL-LOCATION
with unquoted arg to LOCATE-IN-INSTANCE.  These other functions
introduce a speed penalty, unfortunatly.  Performance critical code that
uses these should be reevaluated, and perhaps changed to send messages
instead.

DEFSELECT-METHOD is also defined analogously.

Uses of #'(LAMBDA ...) that expect to be called in the environment of
an instance will work as long as they are called from a method of the
same flavor as the method they were used in.  Otherwise, the internal
function should be turned into a DEFUN-METHOD or, preferably, defined
as a method.

If you really do need instance variables to be bound when an instance is
entered, then use the :SPECIAL-INSTANCE-VARIABLES declaration in the
DEFFLAVOR.  Its format is just like :GETTABLE-INSTANCE-VARIABLES.  The
named instance variables will be dynamically scoped.

(FUNCALL-SELF ...) now expands into (FUNCALL SELF ...), since that's how
it has to work now.  Note: if you were depending on FUNCALL-SELF to not
redo special instance variable bindings, then your code won't work.  Use
LET-GLOBALLY, which is probably what you really wanted, or use the BIND
subprimitive.  If you don't understand this, then it probably doesn't
affect you.

The macro SI:FLAVOR-SELECT-METHOD has been renamed to
SI:FLAVOR-MESSAGE-HANDLER.  User code should not be using this
anyway.

Writing new method combinations is somewhat more involved then it used
to be.  If you have method combinations of your own, contact Howard
Cannon at Symbolics (HIC@SCRC-TENEX).

The handlers returned by GET-HANDLER-FOR can no longer be used as functions
with FUNCALL.  The most common use of GET-HANDLER-FOR was in code sequences
such as
	(let ((h (get-handler-for self ':mess)))
	  (if (not (null h)) (funcall h ':mess args...)))
This should be replaced by:
	(funcall self ':send-if-handles ':mess args...)

