Date: 18 Sep 1981 09:31:42-PDT
From: CSVAX.fateman at Berkeley
To: INFO-LISPM@MIT-AI, Moon@MIT-AI
Subject: Re:  Common Lisp
Cc: CSVAX.jkf@Berkeley, CSVAX.slower@Berkeley

	From Moon@MIT-AI  Fri Sep 18 00:00:19 1981
	Date: 18 September 1981 02:33-EDT
	From: David A. Moon <Moon at MIT-AI>
	Subject: Common Lisp
	To: INFO-LISPM at MIT-AI
	
	Not everyone may be aware of the Common Lisp effort currently going on.
	All of the post-Maclisp lisp systems are currently developing a common
	^^^?
	subset of lisp which they will all be compatible with,
	allowing programs to be written to operate on any of these lisps. 
	....
	The lisp systems currently
	involved are Lisp Machine Lisp (in all its incarnations, MIT and
	commercial), CMU's Spice Lisp, and the various NILs (VAX and S-1
	currently, pdp-10 later).
	....

	This message is just to make sure that everyone knows what is happening.
I hope you get this message, and more details of what you are talking about,
to people who might be interested in this.  You mention only a very
small subset of post-Maclisp systems. Some users/developers of other 
post-Maclisp systems might like to contribute. (Franz, VAX Interlisp,
Griss' Portable "Standard Lisp" are among the obvious others.)
	
	

Date: 18 September 1981 02:33-EDT
From: David A. Moon <Moon at MIT-AI>
Subject: Common Lisp
To: INFO-LISPM at MIT-AI

Not everyone may be aware of the Common Lisp effort currently going on.
All of the post-Maclisp lisp systems are currently developing a common
subset of lisp which they will all be compatible with, allowing programs
to be written to operate on any of these lisps.  In addition to portability,
an important goal is to fix many of the long-standing problems with the
Maclisp language, providing a cleaner, more consistent language.

There will be a carefully-maintained manual for this Common Lisp
language which all the systems will follow.  This effort is expected to
bear fruit around the end of this year.  The lisp systems currently
involved are Lisp Machine Lisp (in all its incarnations, MIT and
commercial), CMU's Spice Lisp, and the various NILs (VAX and S-1
currently, pdp-10 later).

When the Lisp Machine adopts Common Lisp, there will be a number of
incompatible changes.  These changes will all be made at the same time
and will be announced a couple of months in advance.  As far as possible
changes will be made in an upward-compatible fashion so that old
programs will continue to work, but there will be several cases where
this will not be possible.  Where a Lisp Machine feature is changed,
both the old version and the new version will be present during an
interim period.  I expect that the changed Lisp Machine system will not
be installed until after the Common Lisp manual is published and
available.  We will attempt to make this changeover as painless as
possible, however you should expect some pain.

There are no plans to convert pdp-10 and Multics Maclisp to Common Lisp.
There will be a partial compatibility package, but Maclisp will not be
able to adopt some of the more difficult features of Common Lisp.  The
Lisp Machine will continue to provide for the ability to run programs
that also run in Maclisp.

Details of these changes will be announced later when we know what they are.
This message is just to make sure that everyone knows what is happening.

Date: 16 September 1981 23:13-EDT
From: Daniel L. Weinreb <DLW at MIT-AI>
Subject: Note about Zwei
To: INFO-LISPM at MIT-AI

In Zwei/Zmacs, a certain simple heuristic is used to speed up parsing
buffers full of Lisp code: any line that begins with an open parenthesis is
taken to be the beginning of a top-level Lisp expression.  If you have an
open parenthesis at the beginning of a line and it is NOT the beginning of
a top-level expression, you will confuse the editor's parsing very badly.
Many people seem to have been confused by this behavior.  This heuristic
may be stupid, but without it parsing of the buffer would be unacceptably
slow; we all have to put up with it.

Date: 16 September 1981 23:09-EDT
From: Daniel L. Weinreb <DLW at MIT-AI>
Subject: Window system documentation
To: INFO-LISPM at MIT-AI

There are a lot of files on the LMWIND directory.  Most of them have been
abandoned long ago and are completely obsolete.  Don't just go around
reading all of them or you will get a lot of misinformation.

The ONLY up-to-date file on basic window system primitives is WINDOC.
I hope to get this published very soon.  Everything else on the
subject of basic window system primitives is obsolete.

Date: 15 September 1981 10:35-EDT
From: John Batali <Batali at MIT-AI>
Subject: cifout
To: INFO-LISPM at MIT-AI


Ignore that. I meant to mail that to info-dpl

Sorry

Date: 15 September 1981 08:50-EDT
From: John Batali <Batali at MIT-AI>
Subject: (CIFOUT *ME* <file>)
To: INFO-LISPM at MIT-AI


The behaviour of cifout on "top" ogjects is wrong. Currently, the
function notices that its argument is a prototype and just outputs its
definition, without a "C"  command calling it.  The problem with this
(besides the lack of the Call) is that if someone has made an object
with bnodes and tries to make cif by doing (cifout *me* ..) the bnodes
don't appear in the cif because his cell isn't the top-level object --
the buffer is.

I propose the following solution which I will implement if no one
objects:

Cifout of a TOP? object causes each of its parts to be cifouted as if
they were top-level (ie bnodes are defined) and the end of the file is
a set of C commands to each of the objects.  In particular, this means
that there is no DS command defining anything corresponding to the
buffer, its parts are C'd at top level in the cif.

For the most common case of *me* having only one part, this is, I
think, the prefered behaviour.  If there is more than one part, the
user may sometimes want them packaged into a symbol, however the
solution I described will make perfectly valid cif.  

                  CalTech bites dead horsies,
                  John

Date: 7 September 1981 03:11-EDT
From: Richard M. Stallman <RMS at MIT-AI>
Sender: RMS0 at MIT-AI
Subject: Lexical variables
To: LISP-FORUM at MIT-AI, INFO-LISPM at MIT-AI

I've just finished implementing a feature I call LEXICAL-CLOSURE
which makes nonspecial variables into downward-only lexical variables:

(defun foo (a)
   (mem (lexical-closure '(lambda (pat elt)...)) ...))

allows the inner lambda to access the variable a even though not special.

So far it only works in compiled code, and it isn't installed.

I have two questions I want input on:

1) should it be necessary to write LEXICAL-CLOSURE explicitly to have
this feature?  Perhaps writing an unquoted lambda-expression should
do this?  Perhaps (FUNCTION (LAMBDA ...)) should do this?

2) Should I change the interpreter so that variables behave always
as they do in the compiler?  That is, if not declared special,
they would be completely local, unless the lexical-closure mechanism
(under whatever user interface is used) makes them visible to an internal lambda.

Note that expressions such as ((lambda ...) args) are compiled open by all`
lisp compilers I know of, so that explicit lexical-closure is not
needed in that case, and won't be in the future either.
This makes me feel that it would be inconsistent to reqire an
explicit lexical-closure in any other case just to get the same behavior.

Moon@MIT-MC 08/30/81 01:05:42 Re: New system released
To: info-lispm at MIT-AI
System 73.10 is now considered to be released for general use.  I believe
it is only installed on CADR-6 at the moment, but it should migrate to
other machines in the near future.  Please do not use any copies of
system 73 with minor versions less than 10.

This system comes with microcode 786, and will probably not work with older
microcode versions.  Microcode 786 is compatible with older systems.

This system comes with Zmail 33.4.  The Zmail changes are documented in a
separate release message to INFO-ZMAIL.

The following system changes may be of interest.  There are no really
incompatible changes this time.

The M-X Bug command in the editor now always prompts for the recipient
name, since so many people could not figure out how to get that
behaviour.

The meaning of :INCLUDED-FLAVORS and :NO-VANILLA-FLAVOR has been changed
in the flavor system.  A new option, :REQUIRED-FLAVORS, now exists.  Details
are in the file LMMAN;FLAVOR (the manual chapter on flavors).

The argument to ESC F is interpreted slightly differently.  The self
documentation reflects this change.  In particular, ESC F fingers on
your login machine, which should work now even if it is a Tops-20.

FORMAT now has a $ operator, identical to the one in Maclisp FORMAT.  Documentation
online in LMMAN;FD.FIO.

If ZWEI:*MOUSE-CLICK-ALWAYS-SELECTS* is non-NIL, mouse clicks in the
editor always select the window.

The #X reader macro now works correctly, the form following the #X is read with
IBASE bound to 16. and SI:XR-EXTENDED-IBASE-P bound to T.  This causes things of
the form: "+A0F" and "+FOO" to be interpreted as fixnums rather than as symbols.
It does NOT yet work to bind BASE to something larger than 10., use format to
print hex numbers if that is what you want.

Previously unannounced # reader macro: "#|".  Text between #| and the matching |#
is treated as a comment.  They nest correctly.  The are useful for long comments
or commenting out sections of code.

For MacLisp compatibility, defstruct no longer requires its keyword arguments
to be in the keyword package.  It now treats them in a similar manner to
the way LOOP treats its keywords.  Unless you are trying to be compatible
with MacLisp, you are encouraged to continue to type those colons.

New function TV:SET-DEFAULT-FONT intended to be called by users to
change what font they want programs to display in by default.
Associated are the variable TV:*DEFAULT-FONT*, the message
:CHANGE-OF-DEFAULT-FONT, and the flavor TV:NO-CHANGE-OF-DEFAULT-FONT-MIXIN.
(This mostly works, there are some small bugs with it which will be
fixed some time later.)

A new function PRESS:PRINT-XGP-FILE behaves like the /XGP option to the
:DOVER program.  This is useful for printing Bolio output.

The compiler's temporary area handling has been changed slightly.  The compiler
now binds DEFAULT-CONS-AREA only while doing its internal processing
(WHICH INCLUDES CALLING THE USER'S MACROS).  It no longer does input or output
with the temporary area in effect.  Note however, that it is still the case
that the conses of the source program read in are allocated in the temporary
area (data types other than conses are not put in the temporary area by READ.)

New status functions, (STATUS OPSYS) and (STATUS SITE), for compatibility
with Maclisp.  (STATUS FILESYS), a member of the same family, is
deliberately omitted since the Lisp machine can deal with more than one
file system at a time.

Date: 13 August 1981 00:12-EDT
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Suggested ZMacs change.
To: INFO-LISPM at MIT-AI

The present behavior of the Control-X B command, in Zmacs, when you give
it the name for a new buffer to create, is to feep the first time you
try to give the name and let you win the second time.  The present
behavior is annoying, inconsistent with the rest of the uses of the
completing reader, and incompatible with Emacs.  I think it should be
changed to just use normal "impossible-is-OK" completion, which would
mean that if you typed a string that was not exactly the name of an
existing buffer, and then typed Return, it would create a buffer by that
name and go there, instead of feeping the first time and doing what
I said the second time.  Does anyone object?

Date: 8 August 1981 13:56-EDT
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: For your information: why the left button works the way it does in Zwei.
To: INFO-LISPM at MIT-AI

Every month, somebody asks us why the left button in Zwei behaves as it
does.  I am tired of sending out personal messages on this topic, so
here is the answer one last time for everyone to read.  The
single-click-left in the Lisp Machine editor currently selects the
window on which you click, but does not move "point" to that spot.  The
reason for this is that sometimes you want the window to be selected,
but you do not want point to be moved.  If point is in a useful
position, and you just want to select the window without losing that
position, you can just click left on the window.  If clicking left were
to both select the window AND move point, there would be no way to just
select the window.

It appears that some people prefer the way it works now, and others do not.
There appears to be a fundamental conflict here, and there seems to be no
option preferable to the current setup.

Date: 31 July 1981 23:13-EDT
From: Mike McMahon <MMcM at MIT-AI>
Subject: System 72 released
To: INFO-LISPM at MIT-AI

System 72 is now officially released.  It comes with microcode 774.
There are a large number of important changes in this system, so this
message summarizes them first:

The BREAK key is no longer special in Supdup and Telnet
The semantics of RETURN-FROM have been changed
RETURN with one argument treats multiple values differently
Minor compiler changes
New commands in the error handler for special variables, single-stepping,
 and new functions BREAKON, UNBREAKON
New display in the who-line: active network servers
Name changes: process-create, tv:define-blinker, :which-operations-p,
  :handle-message-p, time:chaos-time, time:print-chaos-times obsolete
Changes to patch and make-system systems
Changes to #\ syntax:  #\I is now #\ROMAN-I, #\CONTROL-Q is new
New functions and macros: ONCE-ONLY, PROCESS-WAIT-WITH-TIMEOUT, FIXNUMP,
 FLONUMP, ZWEI:LOAD-FILE-INTO-ZMACS
Site configuration changes


>> Supdup and Telnet escape key.

The crock wherein both Network and Break work as the Telnet and Supdup
escape character has finally been declared obsolete.  There is now only
one escape character, and its initial default setting is to the Network
key, which was put on the keyboard precisely for that purpose.

>> RETURN-FROM:

RETURNs inside the arguments of a RETURN-FROM no longer return to the
place specified by the RETURN-FROM.  Now, they return to the innermost
PROG.  Example:

(PROG FOO ()
  (SETQ A (PROG ()
            (RETURN-FROM FOO (RETURN 1)))))

returns 1 from the inner PROG, and sets A to 1.

Note well: this improvement is incompatible with something the manual
tells you to do, under RETURN-LIST.

>> Multiple values:

RETURN and RETURN-FROM with only one expression-argument, such as
(RETURN (FOO)) and (RETURN-FROM BAR (FOO)), now pass back all the
values of that argument.  The canonical way to return a specific
sequence of values now is (RETURN (VALUES A B C)), etc.

For compatibility, RETURN and RETURN-FROM with several
expression-arguments still return the first value only of each one.
If you want to make sure to return precisely one value, do
(RETURN (VALUES A)).

RETURN-LIST is logically superfluous, since it is the same as
(RETURN (VALUES-LIST ...)), but it is still supported.

MULTIPLE-VALUE-RETURN is now the same as RETURN, and will eventually be
flushed.  You'll get a compiler warnings if you are using it.


>> Compiler changes:

An undeclared free variable now gets a "declared special" warning for
each function in which it appears free.

LET, LET*, VALUES and VALUES* are no longer macros.


>> Error handler:

You can now look at the special bindings of a frame with the
Control-Meta-S command, or at the binding of a particular variable as
visible in a given frame with Meta-S.

The error handler can now be used to step through compiled or
interpreted code.  In compiled code it stops on function calls and
returns.  In interpreted code it does essentially what the old stepper
does, though with different commands and output.  Stepping is done using
the "trap on exit" bits of stack frames and the "trap on call" bits
of stack groups.

The commands C-X, M-X and C-M-X control "trap on exit".  C-X toggles
the trap on exit bit of the frame you are looking at.  If the bit is
set, returning from or throwing through the frame causes a trap to the
error handler, which you can continue from with C-C.  M-X sets the bit
for the current frame and all outer frames.  C-M-X clears the bit for
all those frames.  Setting the bit for a lot of frames is useful for
seeing how far out a looping program is getting.

M-D controls "trap on call".  It toggles a bit which, if set, causes
the next function call to trap to the error handler.  You proceed
from the trap with C-C.  The frame of the call that trapped is
automatically set to trap on exit as well.

C-D continues from an error and sets the "trap on call" bit as well.

You can start stepping at any error using one of the above commands.
Alternatively, do (BREAKON 'FOO) to cause a trap on calling FOO.
(UNBREAKON 'FOO) turns this off.  BREAKON can take a second arg
whose value is a condition on which to trap; if you specify several
conditions for the same function (using multiple calls to BREAKON),
a trap occurs if any condition is true.  UNBREAKON also accepts
a second arg, which says which condition to take away.  With only
one arg, UNBREAKON removes all break conditions.

Every error now signals SOME condition.  Random macrocode errors
signal NIL, and random microcode errors signal condition :ERROR.

You can now declare that a function is an "error reporter".  This
means that its function is to test for and report errors, and errors
detected inside it should be reported as having happened in the
error-reporting function's caller rather than in the error-reporting
function itself.  FOr example, FERROR is now an error-reporting
function.  Make this declaration by giving the function name
a non-nil :ERROR-REPORTER property.

>> Who-line display.

The who-line now displays information about any servers which are
running at the present time.  This information is displayed in the same
portion of the who-line as file transactions.  For instance, if your
who-line says "BAND-TRANSFER serving CADR-3", then CADR-3 is currently
using your BAND-TRANSFER server.  If your wholine says "3 Active
Servers", then there are three other processes trying to use your
machine remotely.  You can find out more about them by saying
(TV:DESCRIBE-SERVERS).  Should you wish to make them go away, the
incantation is (TV:CLOSE-ALL-SERVERS <reason>), where <reason> is a
string.  This is done automatically in such functions as DISK-RESTORE.

>> Naming.

The battle for naming consistency continues to be waged: PROCESS-CREATE
has been renamed to MAKE-PROCESS, and TV:DEFINE-BLINKER has been renamed
to TV:MAKE-BLINKER.  The old names will continue to work indefinitely.

DEFSELECT and the STREAM-DEFAULT-HANDLER now both understand the
:OPERATION-HANDLED-P and :SEND-IF-HANDLES messages, just as all flavor
instances do.  So it should now be safe to use these messages on
any stream in the system.  The old names :WHICH-OPERATIONS-P and
:HANDLE-MESSAGE-P have been flushed; use :OPERATION-HANDLED-P.

>> Marking Systems as experimental, released, obsolete, etc.

Systems (of the patch and make- sort) now have a status associated with
them, which is displayed when the machine boots and in the label.  It is
updated by (SI:LOAD-PATCHES).  Currently defined statuses are
:EXPERIMENTAL, :RELEASED, :OBSOLETE and :BROKEN.  When a system is
recompiled, the status of the new system version that creates is set to
:EXPERIMENTAL.  (This can in fact be overridden by the :INITIAL-STATUS
argument to DEFSYSTEM.)  The function SI:SET-SYSTEM-STATUS can then be
used to declare the system released or broken as needed.  The format of
patch directories is not compatible, but the old format is recognized
and converted (giving a status of :RELEASED) when necessary (e.g. Add
Patch or SET-SYSTEM-STATUS), so users should not need to do anything to
their systems that don't need compiling.

>> Syntax for characters.

The names of the Roman numeral keys have been changed from #\I, #\II,
etc. to #\ROMAN-I, #\ROMAN-II, etc.  The old names will no longer work.
If you have a program that uses these names, you will get an error if
you try to recompile it or load its source; all you have to do is switch
to the new names.  The reason for this change is to remove an ambiguity
regarding the letter "I" in the following new feature:

It works to say #\Control-Meta-B, #\HYPER-SUPER-CTRL-, and so on.  In
specifying the names of the shift keys, case is ignored, they cn be in
any order, and CTRL can be spelled either "CONTROL" or "CTRL".  If the
last character is non-alphanumeric (e.g. a parenthesis), it should be
slashified as usual.  (The old way to do this was with things like
#/B and #/.  This old syntax will continue to work, but the new
one is, for obvious reasons, preferrable in new programs.)

>> Various new functions and macros on the GLOBAL package.

A macro that helps you define macros, ONCE-ONLY, has been installed.
See LMMAN; MACROS > for documentation.  PROCESS-WAIT-WITH-TIMEOUT is
like PROCESS-WAIT but lets you specify a timeout as well; see LMMAN;
PROCES >.  FIXNUMP and FLONUMP of one argument exist and have the
obvious meanings.

ZWEI:LOAD-FILE-INTO-ZMACS allows loading a file into the file editor
from an init file or otherwise outside the editor context.

The functions TIME:CHAOS-TIME and TIME:PRINT-CHAOS-TIMES have been
renamed to CHAOS:HOST-TIME and CHAOS:PRINT-HOST-TIMES for the sake of
systems without chaosnets.

>> Site configuration changes

The way the system keeps track of network hosts, console locations, file and
time servers, default host for logging in, presence of special devices such
as dover and elevator, and other details of the site-specific configuration
has been changed.  See MMcM if this affects you (it probably doesn't).

GJC@MIT-MC 07/31/81 16:55:31
To: INFO-LISPM at MIT-MC
The plotting package used in Macsyma for a number of years now
runs independant of macsyma on the lisp machine. It has contourploting,
3d-hidden-line plotting, parametric plotting, with input from
functions, arrays, or lists. Needless to say, it has lots of options
and switches, and extensive (macsyma-level-oriented) documentation
in MC:SHARE;PLOT2 USAGE. The lisp interface is a bit of a kludge,
so if you would like to use it drop me a line.

-gjc



Moon@MIT-MC 07/31/81 04:48:42 Re: Beeping
To: info-lispm at MIT-AI
If you want your Lisp machine only to flash the screen when a "beep" occurs,
and not to make any noise, set the variable BEEP to :FLASH (rather than its
initial value of T).  This is preferable to turning down the volume knob on the
keyboard all the way, since that way the next user sometimes thinks the keyboard
is broken.  BEEP can also be set to :BEEP (to beep without flashing) and to
NIL (do nothing at all when beeping, not recommended).

Date: 11 July 1981 18:06-EDT
From: Mike McMahon <MMcM at MIT-AI>
Subject: New system release
To: INFO-LISPM at MIT-AI

System 71 is now officially released.  It comes with microcode 767.

The major change for this system is the addition of logical pathnames,
which allow the file computer used when accessing a file to be
determined at OPEN time.  This change should be for the most part
invisible to the user, but if you run across a pathname with host SYS:,
that's what it is.  The curious are referred to LMMAN; PATHNM for more
details (s.v. Logical Pathnames).

The system system and the patch system have been integrated.  To make
your system patchable, you now need only include (:PATCHABLE) in the
DEFSYSTEM options.  The major version for a patchable system is now
incremented when you recompile that system via MAKE-SYSTEM, not when you
load it for the first time.  To compile but not increment the major
version, give the :NO-INCREMENT-PATCH keyword (in addition to :COMPILE).
To just increment the version, give :INCREMENT-PATCH.  The function
SI:ADD-PATCHABLE-SYSTEM is now gone and should be removed from system
initializations.  What it used to do will now be done automatically by
MAKE-SYSTEM on a patchable system.

The processing of component system in a DEFSYSTEM can now be made to
depend on other transformations.  This is useful for having a set of
macro files for all the components.  To do this, use the
:DO-COMPONENTS transformation, which takes one argument of the
dependencies.  Look at LISPM; SYSDCL for an example.

TV:WINDOW-CREATE has been renamed to TV:MAKE-WINDOW for consistency with
other functions.  The old name will continue to work indefinitely.

Date: 5 Jul 1981 12:01:46-PDT
From: CSVAX.fateman at Berkeley
To: RMS@MIT-AI
Subject: undeclared specials
Cc: info-lispm@mit-ai

the best message would appear one time and give a list of the free-using
functions.

Date: 5 July 1981 01:39-EDT
From: Richard M. Stallman <RMS at MIT-AI>
To: INFO-LISPM at MIT-AI

When the compiler gives you a warning about a free variable that
hasn't been declared special, should it give the warning again for
each function which uses the variable?  Or should it give the warning
only once for any particular variable, as it does now?

Date: 25 June 1981 19:49-EDT
From: David L. Andre <DLA at MIT-AI>
To: INFO-LISPM at MIT-AI

Due to my great foresight and intricate testing of patch 70.12, anything
which touches CC's symbol table (particularly CC-LOAD-UCODE-SYMBOLS) in
systems 70.12 through 70.14 will probably halt the machine.  Please
don't consider these systems released.  All is fixed in 70.15.

		-- Dave

RWG@MIT-MC 06/23/81 04:51:44
To: INFO-LISPM at MIT-MC
i finally figured out how to edit monstrously long methodnames that
show up in the Inspector:  Set \, break, (1+ \), window EH, Edit.
anybody got a better approach?

Date: 22 June 1981 03:03-EDT
From: David A. Moon <Moon at MIT-AI>
Subject: New system release
To: INFO-LISPM at MIT-AI

System 70.4, with microcode 766 and Zmail 28.7, is now ready for public
release and distribution.  It can be found on CADR-6 and a few others.
The following changes deserve mention:

This system requires microcode 766.  Trying to run it in an older microcode
will cause it to die totally.  The newer microcode is compatible with
previous major versions of the system, so it is safe to leave it installed.

The mouse should now be very much easier to use, because heavy paging
will no longer interfere with tracking of the mouse position and
recognition of clicks.  Anyone encountering a problem or finding that
their program no longer works, please contact Moon.  (I don't expect any
problems, but substantial changes have been made.)  (This facility
was added in patch 70.4).

The default host for the LOGIN function is now the machine "associated"
with a particular lisp machine.  These associations are kept in the same
file as the physical locations (LMIO; LMLOCS >).

New initialization lists, LOGIN and LOGOUT, which are run at login and
logout time, guaranteed to be run alternately.  They currently only
contain FS:FILE-LOGIN and the like.   -- DLA

PRESS:PRINT-FILE and friends now take keyword arguments.

There is a new special form, CHECK-ARG-TYPE.  It is a variant of
CHECK-ARG: instead of taking a predicate form, it takes any value which
can be passed as the second argument to TYPEP.  It is documented in the
Lisp Machine Manual source; see AI: LMMAN; ERRORS > for details.

The operations :OPEN, :RENAME, :DELETE, :DIRECTORY-LIST,
:COMPLETE-STRING, and :CHANGE-PROPERTIES on pathnames now take slightly
different arguments.  If this affects you, you really should be using
the functional interface and not sending messages to the pathnames
directly.

Date: 13 June 1981 10:32-EDT
From: Patrick G. Sobalvarro <PGS at MIT-AI>
Subject: attempt to avoid duplication of effort
To: INFO-LISPM at MIT-AI

Has anyone written a 3-d wire-frame graphics package for the Lisp
machine? I don't need hidden line computations, but I do need
clipping. This is for an interactive program, and the turtle package
isn't quite fast enough.

Date: Thursday, 11 June 1981, 11:57-EDT
From: JMTURN at MIT-AI
To: INFO-LISPM at MIT-AI

How can I write a menu which prints a (format nil ...etc...) string as the
menu item? I've tried:
	:item list
	(((string nil ...etc...) :funcall foo)
	 ((string nil ...etc...) :funcall bar))
But it barfs, saying that some atom is undefined. Does the menu-system support
this?

GJC@MIT-MC 06/06/81 18:01:59 Re: "CGOL, and algebraic notation for Maclisp"
To: INFO-LISPM at MIT-MC
Mainly for purposes of running old code, the CGOL parser has been
ported to the LISPM. It is available by (LOAD "MC:LIBMAX;CGOL").
It causes the sharpsign-altmode readmacro to mean
"read one expression in the alternate syntax," i.e. the same as
#.(CGOLREAD). The infix syntax may be nice for math expressions, e.g.

   (defun f (x) # X+Y+Z/Q**R+SIN(X) )

other than that it may be of interest for random hacks such
as "PASCAL" or "C" parsers.

-gjc


Date:  5 June 1981 2224-EDT (Friday)
From: Guy.Steele at CMU-10A
To: info-lispm at MIT-MC
Subject:  %AOS-TRIANGLE
CC: rpg at SU-AI
Message-Id: <05Jun81 222422 GS70@CMU-10A>

In the next release the name and definition of %AOS-TRIANGLE will
indeed be changed.  Its name will be changed to %HARASS-READTABLE-MAYBE,
and its definition will be changed to order submarines from Hi-Fi Pizza.
--Quux


Date: 5 June 1981 19:30-EDT
From: Howard I. Cannon <HIC at MIT-MC>
To: INFO-LISPM at MIT-MC

%AOS-TRIANGLE should not be considered installed.  Its name and
definition will probably change.  Sorry for any inconvenience.


Date: 5 June 1981 01:58-EDT
From: Mike McMahon <MMcM at MIT-AI>
Subject:  system 69 released.
To: INFO-LISPM at MIT-AI

Since everyone seems to be using system 69 already anyway without
significant problems, it is now officially released.  Here are the
relevant change notes.

The system comes with microcode 757.  The %DRAW-xxx microcode functions
may now be used on arrays as well as sheets.  It also fixes some bugs in
the metering facilities.

SXHASH now ignores alphabetic case in strings, since EQUAL does.

There are new array types: ART-HALF-FIX, containing signed 16-bit
integers, ART-FPS-FLOAT, containing pdp-11/VAX/FPS floating-point
numbers, and ART-FAT-STRING, containing 16-bit characters.  STRINGP is
true for ART-FAT-STRING arrays as well as ART-STRING arrays.  An
ART-FAT-STRING is printed just like a string, the extra 8 bits being
ignored for that purpose.

MAKE-PLANE has been changed incompatibly to make its arguments
compatible with MAKE-ARRAY.  It now takes RANK as its first argument,
required, and after that it takes keyword arguments.  The keywords are
named :TYPE, :DEFAULT-VALUE, and :EXTENSION.

There's a new global function IGNORE, defined as
(DEFUN IGNORE (&REST IGNORE) NIL).

All of the time printing functions will accept NIL as a value for the
stream argument, meaning that the printed representation of the time
should be returned as a string rather than printed to any stream.
Actually, this has been true all along; but now it is official and we
promise it will continue to work.

TELNET now tries to negotiate for remote echoing.  This should improve
behavior when Telnetting from a Lisp Machine to a TOPS-10.  Please
report any new problems.

There is a new microcode function %AOS-TRIANGLE.  Consult someone if you
somehow imagine you want to use it.

Files compiled in system 69 may not load into older worlds because of
FS:MAKE-FASLOAD-PATHNAME not being defined.  If this screws you, it is
safe to M-C 'FS:MAKE-PATHNAME-INTERNAL for this function.


Date: 22 May 1981 03:33-EDT
From: David A. Moon <Moon at MIT-AI>
Subject: Small probability of clobbered files
To: INFO-LISPM at MIT-AI

There is a small chance that files written from Lisp machines to AI or MC
between midnight last night and midnight tonight (i.e. 3 hours before this
message was sent), may be clobbered.  The clobberage would take the form of
pieces (roughly 500 characters) missing out of the middle of the file.
This was caused by a bug in ITS version 1216.  I don't think it is too
likely that this actually happened to anyone, however it did happen to me
once.  Be paranoid.

Date: 15 May 1981 01:32-EDT
From: Pandora B. Berman <CENT at MIT-AI>
Subject: mouse problems
To: JPT at MIT-MC
cc: INFO-LISPM at MIT-AI

the way to deal with mice that die is: take dead mouse to John
Purbrick's office (911). If John is there, describe the problems with
the mouse: whether the degredation of behavior was slow or sudden,
what happened when it died, whether it was plugged into the keyboard
or the console, which machine it was attached to, etc. Otherwise,
write a note explaining same and attach to mouse. The table near the
door has mice on it; place the dead mouse (with note) in the BAD MOUSE
box and take a mouse not in the box to replace the dead one you
brought in.  DO NOT TAKE MICE EXCEPT TO REPLACE DEAD ONES THAT YOU
BRING IN.  

Exception to the above replacement algorithm: if the mouse dies on one
of the Course Six lispms (CADRs 10, 11, 13, 14, 17) DO NOT take the
mouse away from the machine. Instead, notify ERIC (the Course Six
computer room meister) that the mouse is dead, along with the
circumstances as described above. He is in charge of ensuring live
mice for these lispms.

Date: 5 May 1981 23:12-EDT
From: Mike McMahon <MMcM at MIT-AI>
Subject:  new system release
To: INFO-LISPM at MIT-AI

System 68 is now released to the users.  It has been around on a number
of machines for some time anyway, and will make it to the rest soon.
Except for the couple of things noted below, this system is an
accumulation of bug fixes from the previous system.  Please note that
early (and some intermediate) versions of this system have serious
problems and you should make sure you have the latest patches.  At this
moment, that is system 68.9.

New global function, CATCH-ERROR, which is like ERRSET but returns two
values instead of a list.  The first value is the value of the body form
and the second is non-NIL if an error occurs.

CLEAR-UNIBUS-MAP is called directly from LISP-REINITIALIZE, before
SYSTEM-INITIALIZATION-LIST.  Thus things on SYSTEM-INITIALIZATION-LIST
may initialize unibus-map pages.


Date: 29 April 1981 02:34-EDT
From: Pandora B. Berman <CENT at MIT-AI>
Subject: debugging cables!
To: INFO-LISPM at MIT-AI

the massive (and long overdue -- my fault) debugging cable changeover
has finally (almost) finished. now the following machines are cabled
back-to-back:
1-18	2-8	3-5	15-16	19-20
to debug any of these machines, simply go to the other; the cables are
in place.

cadrs 4-6-9 share two cables; if any of them need debugging you must
check that the master/slave sense of the cable between them is correct.

cadrs 10-11-13-14-17 have three debugging cables among them. the eecs
lispm people (mostly jis and eric) are responsible for switching the
cables around to allow debugging of these machines.

cadrs in 936 have one debugging cable; these are cadr7 and whichever
cadrs are being debugged prior to release for service (currently cadr23).
they must also have the master/slave sense of the cable checked before
trying to debug one machine from the other.

cadr12 does not have the new heavy-duty connectors (we are out of them;
more are being ordered). it and the debugging urchin will get the new
connectors when they arrive.

the appearance and moving around of cadrs will modify this scheme, but in
general wherever possible cadrs will be cabled back-to-back to
prevent users form having to play with cables.

Date: 24 April 1981 15:29-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Does anyone use MAKE-PLANE?
To: INFO-LISPM at MIT-AI

Does anyone have any programs that use MAKE-PLANE?  We're considering
changing its arguments to be compatible with those of MAKE-ARRAY, and
we'd like to know if anyone would mind an incompatible change.

Date: 24 April 1981 12:24-EST
From: Latanya A. Sweeney <LATEE at MIT-AI>
To: INFO-LISPM at MIT-AI

What has si:file-exists-p been changes to?
The file functions have been changed, I must have missed the notice.


Date: 22 April 1981 00:12-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Installing systems
To: INFO-LISPM at MIT-AI, INFO-DAEDALUS at MIT-AI

Lisp machines which initially boot with non-standard 
bands (like Daedalus) cause problems: half the time I
forget this is the case until something fucks up, and it
would certainly confuse a naive user who didn't know
about bands, packages, etc. I think LM's should always
start out with standard systems. The right thing is 
to have users' init files say what system they'd like
to start out with and have the init file load the right
band if necessary, or whatever.

Moon@MIT-MC 04/21/81 23:38:40 Re:  System 67
To: info-lispm at MIT-AI
I just want to point out again that code compiled in system 67 will not
work with microcode older than 752 since older microcode does not support
an instruction that was added to the machine.  The symptom is that the
machine crashes when you try to do an UNWIND-PROTECT.  Microcode 752 will
work okay with older systems.  Hopefully system 67 will soon be installed
everywhere and we can forget about this incompatibility.

It is important that any installed system 67 be no less than 67.5 since
that patch fixes a gross performance problem in FORMAT introduced by system 67.



Date: 21 April 1981 21:05-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Editor compatibility questions
To: INFO-LISPM at MIT-AI

What is your opinion of making the standard ZWEI command set more
compatible with EMACS?  Specifically, what do you think of these
proposed changes:

1) Make Altmode, C-C and C-^ always defined as bit prefixes.

2) Making the names of M-X commands and option variables in ZWEI the
same as those in EMACS whenever possible.

3) Allow arguments to M-X commands to be delimited with Altmodes, in
which case they would be read in the same minibuffer as the command
name.
This would not only be compatible, it would give faster response.
The existing mode of operation with a separate minibuffer for each
argument would still exist.

4) Displaying some sort of position-in-file information,
and the file version number, in the mode line.

I will put all answers in LMDOC;ZWEI ANSWER.

Date: 21 Apr 1981 1407-EST
From: JIS at MIT-SPEECH
Subject: Installing systems on the EE cadrs
To: Info-Lispm at MIT-AI

We have had a rash of problems caused at EE by people incompetantly
installing new system versions. Because we are providing a service
with our Lisp Machines (mostly to people who aren't Lispm "Wizards"),
I am asking people to refrain from installing systems on the EE
cadrs. Similarly people should not be changing the setting of the
current band (unless of course you put it back when you are done)
we leave the machines booting into Daedalus ON PURPOSE. People
have been changing this, causing great confusion for the students
in the VLSI course who don't understand about bands and worlds etc.

		-Jeff
-------

Date: 16 April 1981 00:38-EST
From: David A. Moon <Moon at MIT-AI>
Subject: Minor correction to system 67 release announcment
To: INFO-LISPM at MIT-AI

Filename completion works for ITS also.

Date: 15 April 1981 21:31-EST
From: David A. Moon <Moon at MIT-AI>
Subject:  System 67 released
To: INFO-LISPM at MIT-AI

System 67.1 with Zmail 21.0 and Microcode 752 is released to users.  It is installed
on CADR's 4 and 6 and will migrate to others soon.  If you find it necessary to
deinstall it, be sure to deinstall both the LOD and the MCR, and to send a message
to BUG-LISPM explaining what was wrong with it that required it to be deinstalled.

The following changes may be of interest:

This system requires microcode 752.

The body of an UNWIND-PROTECT may now return multiple values.  Code
compiled in system 67 will not run in microcode older than 751 because of
this.  This change should allow quite a few crocks to be flushed.
NOTE: Currently this only works for external multiple values, e.g.
(defun foo () (unwind-protect (values ...) ...)).  Internal multiple
values, as in (defun foo () (multiple-value (a b c) (unwind-protect ...)))
do not work and code of this form will get a compiler error message.  You
can move the MULTIPLE-VALUE inside the body of the UNWIND-PROTECT.

By the way if you were using the undocumented variables UNWIND-PROTECT-xxx
they no longer exist anymore; you shouldn't have been using them anyway.

A number of other multiple-value anomalies with COND, LET, etc. have been flushed.

Resources have been changed in an upward-compatible fashion.  WITH-RESOURCE
has been replaced by USING-RESOURCE with slightly different arguments.  It
will give an obsolete function warning but will continue to work for a while.
The syntax of DEFRESOURCE has been changed but the old syntax will continue
to work for a while.  Refer to the file AI:LMMAN;RESOUR for details.
TV:SYSTEM-WINDOW-ADD-TYPE and friends have been replaced by DEFWINDOW-RESOURCE.

*CATCH now allows any number of body forms, not just one.  (Actually, there
is a maximum of 63 forms in the body when running interpreted code.  If anyone
notices, which seems unlikely, it will be fixed.)

The compiler no longer generates special code for LIST and LIST-IN-AREA.
Instead, LIST, LIST-IN-AREA, LIST*, and LIST*-IN-AREA are now regular functions,
but written in microcode rather than macrocode.  This should provide a small
increase in speed for LIST and a large speedup for LIST*.  This change
introduces a restriction making LIST* allow a maximum of 63 arguments.
LIST already had this restriction (in compiled code) and no one complained
so I guess it must be alright.

SXHASH has been revised to get rid of the bug that (SXHASH '(A B)) and
(SXHASH '(B A)) return the same number, and for increased speed.  It will
therefore return different answers than in previous systems.  By the way,
the result of SXHASH is guaranteed always to be a non-negative fixnum.

The naming convention for system patch files has been changed from
LMPAT;69.1 to LMPAT;69-1 for compatibility with files systems that
can't deal with dots.

These are mostly incompatibilities with the newly-released manual.  Progress
marches on.

DIRED now works on any file computer.  The $ command in it works now
too.  Deleted files start out with a D on Tops-20 and are really
undeleted if you turn off the D with the U command, when done.

When typing a file name at the editor, the ALTMODE and END keys will cause
completion in the same way as when typing a command.  Currently completion
only works usefully with Tops-20.

A number of file-manipulation functions which have been obsolete for many systems
have been flushed.  Refer to chapters 21 and 22 of the red manual for information
on the replacements for these functions.  The following symbols were removed
from the global package:
 DESCRIBE-FILE FILE-ERROR-STATUS FILE-EXISTS-P FILE-EXPAND-PATHNAME FILE-QFASL-P

The metering system, which is by no means finished nor bug-free yet, is
documented in the file LMDOC;METER >.  Those who want to improve the performance
of their programs can probably get a lot of good out of it even in its present
state.

Date: 10 APR 1981 1259-EST
From: DONNA at MIT-AI (Donna Barry)
To: INFO-LISPM at MIT-AI

The address to obtain a copy of the LISP Manual is: AI Laboratory, Donna Barry,
545 Technology Sq., Rm. 908, Cambridge, MA  02139.  The price is $10.00. Bye

Date: 8 April 1981 13:58-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: The moment you've all been waiting for.
To: INFO-LISPM at MIT-AI

Some copies of the Third Edition of the Lisp Machine Manual have
appeared in Donna's office.  It is ix+471 pages long.  It does document
the Lisp language, including flavors, but does not document the window
system nor the user interface and applications programs of the Lisp
Machine such as the Inspector and Zwei.  There are several boxes full of
manuals, but I don't know whether there are enough to go around for all
the users, and I don't know what the price is if you want to order them
by mail.  Please try not to take more copies than you need.

Please report any problems with the manual.  I am particularly
interested in hearing about actual lies, and about any examples that do
not actually work.  Thanks.

Date:  4 APR 1981 0138-EST
From: Moon at MIT-AI (David A. Moon)
Subject: New system
To: INFO-LISPM at MIT-AI

Someone (or several people) seems to have decided to distribute system 66
without officially releasing it and without announcing it.  It doesn't have
any major changes relative to system 65 except for having more bugs.  I
guess we may as well consider 66.14 to be released.  I can't recommend that
anyone try to use earlier minor versions than 14 since there are serious
bugs in them.  Microcode 747 goes with it.

Date: 18 March 1981 0222-EST (Wednesday)
From: Guy.Steele at CMU-10A
To: Earl A. Killian <EAK at MIT-MC> 
Subject:  Re: FIXing functions
CC: info-lispm at MIT-AI, bug-lisp at MIT-MC
In-Reply-To:  Earl A. Killian's message of 17 Mar 81 18:31-EST
Message-Id: <18Mar81 022249 GS70@CMU-10A>

EAK has pointed out a bug: (CEIL 4.5 2) => 3  -1.5, not 3  0.5.

Date: 17 March 1981 1603-EST (Tuesday)
From: Guy.Steele at CMU-10A
To: info-lispm at MIT-AI
Subject:  FIXing functions
CC: bug-lisp at MIT-MC
Message-Id: <17Mar81 160322 GS70@CMU-10A>

(In the following note, I will let "FX" mean "any one of
FLOOR, CEIL, TRUNC, or ROUND".)

I strongly support the idea that the FIXing functions
return two values: quotient and remainder.  These are not hard
to compile if they are appropriately special-cased.
The compiler can easily tell what is going on in such
situations as:
	(FX Z)
	(FX Z Y)
	(MULTIPLE-VALUE (Q R) (FX Z))
	(MULTIPLE-VALUE (() R) (FX Z))		;i.e., MOD or REMAINDER
and generate appropriate code for each.

To be more precise, it seems to me that the type of the second result
should be floating if either argument is, and an integer if both
arguments are integers.  Also, the one-argument case is exactly the same
as specifying a second argument of 1; hence an appropriate
description of the function is (DEFUN FX (X &OPTIONAL (Y 1)) ...).
Finally, the results Q and R are such that X=Q*Y+R, modulo any
floating-point inaccuracies.

Hence we have the following examples:
		Results
Argument(s)	FLOOR		CEIL		TRUNC		ROUND
4.5		4  0.5		5  -0.5		4  0.5		4  0.5
4.5  2		2  0.5		3  -0.5		2  0.5		2  0.5
7.0  2		3  1.0		4  -1.0		3  1.0		4  -1.0
7  2		3  1		4  -1		3  1		4  -1
7  2.3		3  0.1		4  -2.2		3  0.1		3  0.1
7.5  2.3	3  0.6		4  -1.7		3  0.6		3  0.6
9		9  0		9  0		9  0		9  0
Implementationally it is convenient to break this down into a number
of cases.  Semantically I believe this is the most useful definition.

--Guy

Date: 15 MAR 1981 0016-EST
From: JONL at MIT-MC (Jon L White)
To: ALAN at MIT-MC, DLA at MIT-EECS
CC: (BUG LISP) at MIT-MC, INFO-LISPM at MIT-MC

    Date: 14 March 1981 00:36-EST
    From: Alan Bawden <ALAN at MIT-MC>
	Date: 14 Mar 1981 0007-EST
	From: David L. Andre <DLA at MIT-EECS>
	Is it possible to get, in a single operation, both the quotient and
	remainder in a fixnum division?  I have often wanted to do something
	like:
	(MULTIPLE-VALUE (QUO REM)
	  (FLOOR A B))
    So have I.  Unfortunately it is rather difficult to get this to work
    since arithmetic is performed in microcode, and it is difficult to get
    multiple values out from microcode. .  .  .
I can appreciate your comments about how the hardware loses -- the IBM370
produces a floating-division result much like the PDP-10 FDVL instruction,
and then proceeds to round according to its own fixed rule.  During my
time working for there, I needed to experiment with some alternate
rounding schemes, and was chagrin'd to discover that there was no
way to get the "remainder" part out of the "internal" registers and
into a place where the  macro-code instructions could access it.
  foo.
  I've implemented some internal fixnum functions for NIL, so that 
generic arithemetic can be fully-implemented in LISP -- basically they
represent the four rational operations as implemented by most 2's-
complement computers.  For a real NIL, the compiler is open-coding them 
"by special discernment", rather than by doing a multiple-value-returning
function call; so it only is a matter of being able to get at all the bits 
implicit in the two results.  I've coded up this stuff for the PDP10 too, 
but the COMPLR doesn't open-compile these funs; rather, it calls some
quick, handy little LAP subrs.  Below is reproduced the documentation on 
them from file  MC:NIL;NEWFUN >

SI:FULLADD  (SI:FULLADD x y carry_in) ==> [sum.x+y+carry_in, carry_out]
SI:FULLSUB  (SI:FULLSUB x y carry_in) ==> [difference.x-y+carry_in, carry_out]
  Where the sum and difference indicated are two's complement results,
  and the "carry"s are all restricted to -1, 0 and +1.  Since true
  integer addition cannot be restricted to a finite range, there must be
  "wrap-around" even in these functions.  Thus, let n+1 be the number
  of bits in the FIXNUM (two's-complement) representation;  then
	mx  :==   2^n - 1	;maximum representible (positive) FIXNUM
	mnx :==  -2^n	 	;minimum representible (negative) FIXNUM
  Then both (SI:FULLADD mnx mnx -1) and (SI:FULLSUB mx mnx 1) will
  "wrap-around" (i.e., "overflow").  Thus a fail-safe, but slightly
  pessimistic, test for "overflow" is merely to test the second argument
  for being equal to "mnx".   Happily, the most important system
  usages of these two have an explicit 0 carry_in, but at a few places
  in the BIGNUM implementation they require the full generality.
SI:FULLMUL  (SI:FULLMUL x y carry_in) ==> let productsum == x*y+carry_in
		[productsum.rem.by.2^n,  productsum.div.by.2^n]
  Note that if both x and y are equal to "mnx" as described above, the
  the result will "overflow".
SI:FULLDIV  (SI:FULLDIV low hi divsr) ==> [quotient, remainder]
  The division indicated is  (hi*2^n+low)/divsr



Date: 14 MAR 1981 0148-EST
From: Henry at MIT-AI (Henry Lieberman)
Subject:  Logo graphics for the Lisp Machine
To: INFO-LISPM at MIT-AI


Announcing: Logo graphics for the Lisp Machine!

Want to use the Lisp machine to make line drawings, 
filled-in pictures, color pictures, or animation? 
Looking for higher level and more convenient facilities
than just "Draw from point A to point B"?
The TVRTLE ("TV Turtle") package, originally part of PDP10
Lisp Logo, now runs on the Lisp machine. Some of its
features are:

Simple line drawing and erasing using "turtle geometry"
Flexible relative and absolute coordinate systems, scaling
Floating point coordinates
Drawing points, circles, boxes, text
Automatically filling arbitrary closed curves with patterns
Saving and restoring pictures rapidly as arrays of points
Drawing on color displays, creating new colors
Three dimensional perspective drawing, two-color stereo display
It's reasonably fast

It is fully documented on the XGP file MC:LLOGO;LMTDOC DOC.
The source code lives on AI:LLOGO;LMT > and QFASL files are
LMT QFASL for the black-and-white version, LMCT QFASL for 
the color version, and AI:LLOGO;3D for the three-dimensional
version.

Comments, questions and complaints to Henry Lieberman (HENRY@MIT-AI).



Date: 14 March 1981 00:36-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: Re: P.S. to previous message
To: DLA at MIT-EECS
cc: INFO-LISPM at MIT-MC

    Date: 14 Mar 1981 0007-EST
    From: David L. Andre <DLA at MIT-EECS>

    Is it possible to get, in a single operation, both the quotient and
    remainder in a fixnum division?  I have often wanted to do something
    like:

    (MULTIPLE-VALUE (QUO REM)
      (FLOOR A B))

So have I.  Unfortunately it is rather difficult to get this to work
since arithmetic is performed in microcode, and it is difficult to get
multiple values out from microcode.  The loss in calling the divide
code twice is not great unless you are doing very many bignum divides
of very large bignums very often.

Date: 14 Mar 1981 0007-EST
From: David L. Andre <DLA at MIT-EECS>
Subject: Re: P.S. to previous message
To: MOON at MIT-MC
cc: info-lispm at MIT-AI, (BUG LISP) at MIT-MC, DLA at MIT-EECS
In-Reply-To: Your message of 13-Mar-81 1803-EST

Is it possible to get, in a single operation, both the quotient and
remainder in a fixnum division?  I have often wanted to do something
like:

(MULTIPLE-VALUE (QUO REM)
  (FLOOR A B))

but have had to do 2 separate operations, which I assume is more time
consuming.  As long as these new functions are being installed, and if
the overhead isn't too much, could this be put on all forms of
division which entail any sort of truncation?

		-- Dave
-------

Date: 13 MAR 1981 1732-EST
From: MOON at MIT-MC (David A. Moon)
Subject: P.S. to previous message
To: info-lispm at MIT-AI
CC: (BUG LISP) at MIT-MC

Sorry, I left a couple things out of that message.

FLOOR, CEIL, etc. will accept one or two arguments.  With one argument
they will behave as described in the previous message.  With two arguments,
they will first take the quotient of arg1 divided by arg2 then round the
result accordingly.

QUOTIENT of two arguments is identical to TRUNC of two arguments.
REMAINDER is the corresponding remainder.

I will add a ninth new function, MOD, which is the remainder that
goes with the FLOOR form of division.

Except for exact division, this seems consistent with the discussion of
division of a couple months ago, factoring out the slash-backslash issue.
Exact division really requires rational numbers as a datatype, although
some people have proposed a half-measure which uses flonums to simulate
rationals.  This isn't such a win since arithmetic on such a quotient will
then never turn back into an integer.  I propose to defer exact division.

MOON@MIT-MC 03/13/81 16:51:16 Re: Query about proposed slight change to FIX and FIXR functions (again)
To: info-lispm at MIT-AI
CC: RWG at MIT-MC, (BUG LISP) at MIT-AI
Thank you all for your responses.  Here is a new proposal which will go in
unless anyone objects (I'm not sure how soon, not immediately, although
it may get put into the manual immediately).

We leave FIX the same, change FIXR to round to nearest rather than adding
0.5 and calling FIX, and add eight new functions(!):
	FLOOR = convert flonum to integer, rounding toward -inf
	CEIL = convert flonum to integer, rounding toward +inf
	TRUNC = convert flonum to integer, rounding toward zero
	ROUND = convert flonum to integer, rounding to nearest integer,
		and to an even integer in the event of a tie.
	FFLOOR, FCEIL, FTRUNC, and FROUND are the same except that their
	result is a flonum rather than an integer.

The first four functions are subject to overflow; however they probably
are not guaranteed always to return a fixnum, rather it is implementation
dependent what is the largest integer they will return, and given a number
larger than that they may overflow.  The second four functions can never
signal an error.

FIX is identical to FLOOR.  FIXR will be changed to be identical to ROUND
(unless there is sentiment for leaving FIXR the way it is).

This proposal is compatible with IEEE standard floating point, which
requires that at least TRUNC, ROUND, FTRUNC, and FROUND exist, and recommends
the others, but does not suggest names for any of the operations.

Since this proposal does not involve any changes to FIX, it will be
upward compatible with Maclisp.  Is there any interest in adding these
other functions to Maclisp?  The DPL people (at least) would use 
(some of) them.

TFT@MIT-AI 03/13/81 08:56:49 Re: FIX, etc.
To: info-lispm at MIT-MC
As long as you're talking about making a reasonably complete set of 
"integerators", shouldn't you include a dual to TRUNC (round away from zero)?


RIVEST@MIT-ML 03/13/81 08:13:49
To: info-lispm at MIT-MC
	We might use the names FLOOR and CEILING a la Knuth to refer
to the functions which consistently round towards -inf and +inf
(FLOOR is our current FIX), and TRUNC to round towards zero, and ROUND
to round to the nearest integer (using IEEE idea for 1/2's going to
the nearest even number).
	I'm against making gratuitous changes to the current function
definitions; there's too much code that would have to be changed.  When
we need new functionality, add a new function!
	Ron Rivest



Date: 12 March 1981 15:39-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  Query about proposed slight change to FIX and FIXR functions
To: Moon at MIT-AI
cc: INFO-LISPM at MIT-MC, BUG-LISP at MIT-AI, RWG at MIT-AI

A general comment. I have seen the following catch-phrase in many
lisp and Lispm notes:

    Date: 11 MAR 1981 1758-EST
    From: Moon at MIT-AI (David A. Moon)

    ... exists in Maclisp and its functionality
    may be dictated by the way particular pdp-10 instructions work.
    ...

Frankly it bothers me, and although I feel funny addressing it to
people who are more expert than myself in such things as the pdp-10,
I think I must address it as an issue of intellectual honesty.
(0) many pdp-10 arithmetic instructions are usefull, even if they
    are "simple" and don't have "error checking."
(1) the phrase "may be dictated" considerably weakens the statement.
(2) Because of "1" the reader may be tempted to see an attempt
    at arguing against the "FIX" function via the effective technique
    of "guilt by association" with Maclisp.

In other words, can't we just let Maclisp RIP?

-gjc

I realize I say this at the risk of creating yet another catch-phrase
based on "guilt by association" with GJC.

Date: 11 March 1981 2220-EST (Wednesday)
From: Guy.Steele at CMU-10A
To: David A. Moon <Moon at MIT-AI> 
Subject:  Re: Query about proposed slight change to FIX and FIXR functions
CC: info-lispm at MIT-AI, bug-lisp at MIT-AI, rwg at MIT-AI,
    Scott.Fahlman at CMU-10A
In-Reply-To:  David A. Moon's message of 11 Mar 81 17:58-EST
Message-Id: <11Mar81 222051 GS70@CMU-10A>

[Why wasn't this just sent to LISP-FORUM??]

FIX isn't ridiculous -- it's just incompatible with FORTRAN
(but compatible with ALGOL and a few others).  WHat FIX should
do is very closely related to what integer division, remainder,
modulus, and arithmetic shift should do.  Think about it this way:
FIX divides the argument n by 1, producing integer quotient q and
a remainder r (which will be fractional); it then returns q.
If the remainder has the same sign as the dividend (true remainder),
then FIX rounds towards zero.  If it has the same sign as the divisor
(in this case, always positive), i.e., the remainder is actually a MOD
operation, then FIX rounds towards minus infinity.

Rather than change FIX incompatibly and potentially breaking programs,
I urge that the names FLOOR, CEILING, TRUNC, and ROUND be introduced,
to perform rounding towards minus infinity, plus infinity, zero,
and nearest integer, respectively.  I would be inclined simply not to guarantee
the behavior of ROUND on half-integers, leaving it to the implementation
to decide whether to round up or down; but I am not adamant on this point.

The point of these names is that various languages use the term FIX in
incompatible ways; but the four names proposed are never used for other
than the meanings I have described, and so leave the programmer in no
state of doubt as to what is going on.
--Guy

Date: 11 MAR 1981 1758-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Query about proposed slight change to FIX and FIXR functions
To: INFO-LISPM at MIT-AI, (BUG LISP) at MIT-AI
CC: RWG at MIT-AI

While editing the manual, I noticed that the FIX and FIXR functions round
in a ridiculous fashion.  FIX truncates towards negative infinity,
rather than towards zero (i.e. (FIX -1.5) is -2 rather than -1).  This may
be hard to change since this function exists in Maclisp and its functionality
may be dictated by the way particular pdp-10 instructions work.  FIXR adds
0.5 and then does FIX.  (FIXR does not exist in Maclisp.)

I would like to propose that FIX be changed to truncate towards zero rather
than negative infinity, and that FIXR be changed to round stably as all the
rest of the floating-point operations do.  To elucidate:
	Operation	Now yields	Proposed to yield
	(fixr 1.5)	2		2
	(fixr 2.5)	3		2
	(fixr -1.5)	-1		-2
	(fixr -2.5)	-2		-2
	(fix -1.5)	-2		-1

Any comments?  Change FIXR but not FIX?

Date: 9 March 1981 07:47-EST
From: Robert H. Berman <RHB at MIT-MC>
Subject:  Telnet
To: BARMAR at MIT-MC
cc: INFO-LISPM at MIT-MC


I would to echo BARMAR's comments about documentation for TELNET.  I
use it frequently for connecting to LLL-MFE, which is very
un-MULTICS-like. I have been puzzeled from time to time over unusal
conventions, type-out formats, etc. I would like to ensure that these
"features" become documented options, and just hacks by multics
enthusiasts.

Default is in ourselves, not the stars.

Date: 8 March 1981 22:05-EST
From: Barry Margolin <BARMAR at MIT-MC>
Subject: Telnet
To: INFO-LISPM at MIT-MC

I use the LispMachine Telnet to connect to MIT-Multics quite a bit.  I
have noticed many key-bindings that have been set up that seem very much
designed with this in mind (in addition to the mouse hack), such as
<END> sending a ^X^S, which saves a file or sends mail in Multics Emacs.
 What I would like to know is whether these "features" are documented
anywhere, or if they are just hacks that may go away and I should not
get into the habit of using.
				Thanks,
				barmar


Date:  7 MAR 1981 1556-EST
From: CARLF at MIT-AI (Carl Richard Feynman)
To: INFO-LISPM at MIT-AI

	I am going to write a graphics editor for the Lisp Machine, similar to DRAW on
the Alto. It will be an object-oriented editor that makes use of menus and the mouse. I
would appreciate any advice or recommendations anyone can give me. Information about
other graphic editors would be espescially welcome, as would be offers of help. If you
are interested, there is a further (slightly incoherent) specification of the editor on
CARLF; GRAPH >.

						-- Carl Feynman (CARLF)

	p.s. If anyone has any ideas for what to call the thing, I could use them.
Currently I'm calling it GRAPE, for GRAPhics Editor.

Date:  4 MAR 1981 0148-EST
From: dlw at MIT-AI (Daniel L. Weinreb)
Subject: Broken versions of the system.
To: INFO-LISPM at MIT-AI

There seem to be several Lisp Machines that have bands with systems with
major versions numbers between 60 and 64.  These systems should NOT have
been copied around to all the Lisp Machines, for the simple reason that
they don't work.  They have known bugs in them that are so bad that we
considered the systems unacceptable for release to users.  That is why
you didn't get any announcements about them.  In the future, please do not
copy around bands using new major versions until we announce that they
are ready for release; otherwise you are just asking for trouble.

To remind you of the current state of things: the old system was major
version 59, and the new system, which you can recognize by the
inverse-video mouse-documentation line above the who-line, is major
version 65.  The latest microcode is 739.


Date: 4 March 1981 00:58-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Another new feature.
To: INFO-LISPM at MIT-AI

With the latest microcode (739), while a cold-boot is in progress, the
who-line blinks on and off so that you can see that the cold-boot is
working, and know that the machine is busily winning away, rather than
lying there dead.

Date: 3 March 1981 04:13-EST
From: Mike McMahon <MMcM at MIT-AI>
Subject: Release of new system
To: INFO-LISPM at MIT-AI

System 65.0 with microcode 739 is released to users.  This system contains
a large number of changes which users need to know about.  It is consistent
with the soon-to-be-released new edition of the Chine Nual.

This message is very long, and so begins with a summary.

FILLARRAY and LISTARRAY are Maclisp compatible.
The BREAK and ABORT keys behave differently.
The catch tag SI:TOP-LEVEL has been renamed.
The file LMIO;CHSTBL and the variables it defined are gone.
INTERN with a symbol as argument is a little different.
LOAD-PATCHES is global now and takes different arguments.
The functions <, >, <=, and >= have been changed.
Notifications and errors inside the window system work better.
STRING-SEARCH-SET, STRING-TRIM, etc. have been improved.
(VALUES) works now.
New subprimitives for hacking closures.
Who line changes.
Internal lambdas named differently.
The arguments to READ, TYI, etc. have been changed slightly.
----

FILLARRAY and LISTARRAY are now fully Maclisp compatible; they will
accept arrays of any dimensionality.

The way the ABORT and BREAK keys work has been changed around; the Control
and Meta shifts modify the action of these keys.  Without Control, the key
takes effect when it is read.  Some programs (especially the editor) will
handle this case themselves.  With Control, the key takes effect
immediately, except in "super image" programs such as SUPDUP; in that case
the key must be prefixed with TERMINAL, and the Control shift is
irrelevant.  Without Meta, the BREAK key calls the BREAK function and the
ABORT key aborts to the previous command level.  With Meta, BREAK goes to
the error handler and ABORT resets the process.  This is designed so that
the "double bucky" combination is convenient.  If you have any trouble
remembering this, as usual type TERMINAL HELP and an explanation will be
displayed.
	Old:		New:			Does:
	break		break			deferred break
			control-break		immediate break
			meta-break		deferred error-handler
	terminal-break	control-meta-break	immediate error-handler
	abort		abort			deferred abort one level
			control-abort		immediate abort one level
			meta-abort		deferred abort all levels
	control-abort	control-meta-abort	immediate abort all levels

By popular demand, c-Z will act like ABORT in BREAK and the error handler
again.  Anyone with opinions as to whether or not the CALL key should be
changed also to be consistent with this scheme should mail them to
BUG-LISPM.

The following incompatibilities associated with this may be visible to some
user programs:  The catch tag SI:TOP-LEVEL has been renamed to
SYS:COMMAND-LEVEL.  The :ABORT, :BREAK, and :FORCE-BREAK messages have been
flushed.  The variable TV:KBD-IGNORE-ABORT has been replaced by the
variable TV:KBD-INTERCEPTED-CHARACTERS, which the user can bind to prevent
ABORT and BREAK without Control from getting their default handling.  Good
user-interface dictates that in this case the user program should do
something consistent with the default behavior.

The Chaosnet host table and associated data structures have been
reorganized as follows.  The file LMIO;CHSTBL and the variables
CHAOS:KNOWN-NAME-ALIST, CHAOS:FINGER-ALIST, and
CHAOS:CONSOLE-LOCATION-ALIST have been replaced by the files LMIO;HSTTBL
(generated automatically) and LMIO;LMLOCS and the variable
CHAOS:MACHINE-LOCATION-ALIST.

Calling INTERN (or INTERN-LOCAL) with a symbol as the first arg never
creates a new symbol.  Instead, if the symbol is not found in the specified
package, it is interned there as well as in its original package.  This
does not affect the package cell of the symbol.
Use (INTERN (GET-PNAME sym) pkg) to create a symbol that looks the
same as sym but is in pkg.

LOAD-PATCHES is now on the global package; you don't have to say "SI:" any
more (though it will work if you do).  It now takes keyword arguments.  The
keywords :SELECTIVE and :NOSELECTIVE control whether or not you get asked
about whether to load patches.  The default is :SELECTIVE, meaning that you
get asked.  You can use the :SYSTEMS keyword, followed by a list of system
names to specify which systems to load the patches of.  This is what the
argument to LOAD-PATCHES used to mean.  The default is to load patches for
all systems.  (This change to the arguments is incompatible, but it seems
quite likely that nobody uses the old argument anyway.)

The functions > and < have been upgraded to be exactly the same as GREATERP
and LESSP; that is, they will now accept more than two arguments.  The
functions >=, <=, , and  have been reimplemented to work correctly; the
old implementatation (as macros) did not have the property of evaluating
all arguments exactly once.  As always, all these functions work on all
types of numbers.

:BATCH mode works in MAKE-SYSTEM, saving the compiler warnings in a file
and otherwise conspiring not to want human intervention during compilation.

Notifications (those unsolicited, beeping messages enclosed in square
brackets) have been extensively revised.  They should behave much better
now.  As part of this the interface between the error handler and the
window system has been greatly improved; there should be much less
mysterious behavior.  The function TV:PRINT-NOTIFICATIONS will reprint all
the notifications received since the machine was last cold-booted.  If you
use any of the following, you are obsolete and need to convert (probably no
user programs use any of these):
Deleted messages:  :NOTIFY, :NOTIFY-STREAM, :NOTIFY-OUTPUT, :NOTE-INPUT-WAIT
Deleted variables: TV:BACKGROUND-STREAM-BELL-COUNT
Deleted functions: TV:GET-NOTIFICATION-STREAM, TV:NOTIFY-USER, TV:MAKE-SELF-INTERESTING
If you need help converting, don't hesitate to ask; help will be forthcoming.

The string-manipulation functions that deal in sets of characters, such as
STRING-SEARCH-SET and STRING-TRIM, now accept strings as well as lists for
representing sets of characters.  (string-trim "ab" "bbfooaa") => "foo".

The restriction against returning zero values has been lifted.  This is
only visible when the receiver of the values is a MULTIPLE-VALUE-LIST,
because of the way the language handles calls in which the callee returns
fewer values than the caller asked for.  Try typing (VALUES) at a Lisp
Listener.

New microcoded functions SI:%BINDING-INSTANCES, SI:%USING-BINDING-INSTANCES, and
SI:%INTERNAL-VALUE-CELL exist.  
  (SI:%BINDING-INSTANCES <list-of-symbols>)  "captures" the current bindings
     of a list of variables.  This operation is very similar that
     provided by CLOSURE.  In fact, CLOSURE could have been defined by
     (DEFUN CLOSURE (VARS FUN) (%MAKE-POINTER DTP-CLOSURE 
					      (CONS FUN (SI:%BINDING-INSTANCES VARS))))
     The value of SI:%BINDING-INSTANCES is a list of locatives of even length,
     which alternately point to the internal value cell of a variable and the
     paired external value cell.
  (SI:%USING-BINDING-INSTANCES <instance-list>) "installs" an instance list such as
     created by SI:%BINDING-INSTANCES.  In a manner similiar to the BIND function
     (which should be called %BIND), these bindings are "added" to the current
     binding frame, and remain in effect until it is unwound.  For this reason,
     you probably dont want the "user" to use SI:%USING-BINDING-INSTANCES directly,
     but a simple interface function which uses it.
     SI:%USING-BINDING-INSTANCES checks for redundant bindings and ignores them.
     (A binding is redundant if the symbol is already bound to the desired external
     value cell).  This check avoids excessive growth of the special pdl in some cases
     and is also made by the microcode which "enters" closures, entities, and instances.
  (SI:%INTERNAL-VALUE-CELL <symbol>) returns the current internal value cell of
     <SYMBOL>.  ONE-Q-FORWARD forwarding pointers are followed, but 
     EXTERNAL-VALUE-CELL-POINTERS are not.
  In addition, certain internal changes were made to allow EXTERNAL-VALUE-CELL-POINTER
  datatypes to appear in the PDL-BUFFER.  These should not be visible to the user.

The who line has been reimplemented.  Each field in the who line is now a
window, and new fields can be added by adding windows in a simple fashion.
Along with this feature, the who line can change size, and a new mixin
flavor has been defined to permit changing the size of the "screen", so
that windows scale correctly.  A new default who line line has been added,
called the mouse documentation line, which gives a one line description of
what the mouse can do at any time.  This description is usually supplied by
the window.  We have documented many system facilities, and will continue
to improve the documentation as time permits.  The menu item list format
has been added to in an upwards compatible fashion to permit users to
document their menus.  If people are interested in general, I'll send out a
general note on how to use the documentation facility, and on who line
fields (--HIC).  The who line documentation can be turned on and off with
the function (TV:WHO-LINE-DOCUMENTATION &optional (ON-P T)).  An argument
of T (or no arg), turns it on, and an argument of NIL turns it off.  Note
that the screen is now one line smaller by default.  This will probably
break some code that uses numbers to specify the size of windows (tough, we
warned you not to do that).  The documentation window is in the variable
TV:WHO-LINE-DOCUMENTATION-WINDOW, and if you are bummed out by the reverse
video, you can send it a :SET-REVERSE-VIDEO-P NIL message.

The function TIME:NWATCH-ON is now TV:NWATCH-ON.  Some people have this in their
init files.  It is unnecessary to call this function anyway, since it has been
the default for a long time.

There is a new function-spec, (:INTERNAL function-spec number), which is
used for internal lambdas in compiled programs--"(FUNCTION (LAMBDA (...".
This replaces the old "function-INTERNAL-G6985" symbols.

The functions which take optional stream and eof-option arguments
(READ, TYI, etc.) now interpret these arguments in a more consistent fashion.
Refer to the on-line copy of the manual for details, or ask someone.
The change is not completely upward-compatible but should result in
much more reasonable behavior.

Date: 02 Mar 1981 1634-PST
From: Dick Gabriel <RPG at SU-AI>
Subject: Lisp Timings  
To:   info-lispm at MIT-AI, lisp-discussion at MIT-AI,
      "#TIMING.MSG[TIM,LSP]" at SU-AI

	As most of you know, there will be an attempt made to do a
series of Lisp timings in which various benchmarks submitted by the
Lisp community are tested on a variety of different Lisp systems.
Since there will need to be some translations done in order to run
these benchmarks in systems for which they were not intended, there
is the secondary (!) problem of learning what is really needed to do
these translations more readily in the future.

	I will be co-ordinating this effort and will be distributing
the results when they are in. For this purpose I have set up 3
mailing lists at Stanford:

	LISPTIMING 	 the list of people interested in this topic
	LISPTRANSLATORS, the list of people who have volunteered
			 to do the timing tests (and translations)
			 at the various sites
	LISPSOURCES	 the list of people who will be supplying
			 benchmarks

	You can MAIL to these entities at SAIL (e.g. MAIL
LISPTIMING@SAIL...)  and thus avoid swamping the mailing lists we
have beenusing so far.

	If you care to be on one of these lists, please send me
(rpg@sail) your login name and site exactly as your mailer will
understand it along with which list you wish to be on. If you are
supplying programs or talent, please let me know which Lisp, which
machine, and which OS you are representing.

	In addition, a list of all messages pertaining to this
extravaganza will be on TIMING.MSG[TIM,LSP] at SAIL (you can
FTP from SAIL without logging in). In general, this area will
contain all of the information, programs, and results for this
project.

	If you know of anyone who is not on the net and who may be
able to help, send me a message and a method for getting in touch
with him/her. Over the next few days I hope to establish some of the
methodological considerations (such as GC times) for the project.

			Dick Gabriel	(RPG@SAIL)



Date: 28 Feb 1981 17:15:23-PST
From: CSVAX.fateman at Berkeley
To: HES@MIT-AI
Subject: why I excluded GC times
Cc: CSVAX.fateman@Berkeley, info-lispm@mit-mc, lisp-discussion@mit-mc

including GC times makes for a very messy statistical situation.
GC time (or even if it happens at all) is dependent on the virtual
address space in use at the time, how much of the macsyma system
has been loaded (in the case of the KL-10), etc.  I do not know
about the LM figures, since I am only reporting stuff sent to me,
but the KL-10 and the VAX typically spend 30% additional time in
GC, averaged over various "production" runs.  Trading off GC time
for system paging time is a funny business, though I agree it
is important.


Date:     28 February 1981 1343-est
From:     Barry Margolin             <Margolin at MIT-Multics>
Subject:  Re: Timings
To:       RPG at SU-AI
Cc:       info-lispm at MIT-AI

I think you should also contact someone at MIT-Multics, where they run
MacLisp, although I'm not sure who you should contact.

Date: 27 Feb 1981 16:43:27-PST
From: CSVAX.fateman at Berkeley
To: Deutsch@PARC-MAXC, GJC@MIT-MC
Subject: timings
Cc: INFO-LISPM@MIT-MC, RWS@MIT-XX, CSVAX.fateman@Berkeley, guttag@MIT-XX, masinter@PARC-MAXC

George: are you offering to put Macsyma up in Interlisp?  We already
have some LM /KL-10/ VAX-11/780 benchmarks (KL-10 maclisp):
Vaxima and Lisp Machine timings for DEMO files
(fg genral, fg rats, gen demo, begin demo)
(garbage collection times excluded.)  Times in seconds.

MC        VAXIMA     128K lm     192K lm    256K lm VAXIMA Jul 80
4.119	   17.250   43.333      19.183     16.483    15.750
2.639	    7.016   55.916      16.416     13.950  
3.141	   10.850  231.516      94.933     58.166   
4.251	   16.700  306.350     125.666     90.716    12.400

(Berkeley CS.VAX 11/780 UNIX April 8, 1980,  KL-10 MIT-MC ITS April 9, 1980.)

improvements due to expanding alike1 and a few odds and ends as macros;
also some improvements in the compiler.


Date: 27 Feb 1981 16:22:33-PST
From: CSVAX.fateman at Berkeley
To: RPG@SU-AI, deutsch@PARC-MAXC
Subject: Timings
Cc: info-lispm@mit-ai

add Griss@utah-20 (standard lisp on 10, b-1700, ...)

Date: 27 February 1981 17:35-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  timings
To: Deutsch at PARC-MAXC
cc: INFO-LISPM at MIT-MC, masinter at PARC-MAXC, guttag at MIT-XX,
    RWS at MIT-XX

How about using Macsyma? It has some interesting programs in it,
and it has given the Lispmachine quite a work-out on some large
real problems (or did the Lispmachine give macsyma a work out?).

-gjc


Date: 27 Feb 1981 1354-PST
From: Dick Gabriel <RPG at SU-AI>
Subject: Timings  
To:   deutsch at PARC-MAXC
CC:   RPG at SU-AI, info-lispm at MIT-AI

I will volunteer to co-ordinate the Lisp timing test. I plan to contact:

	Deutsch/Masinter at Parc (InterLisp on MAXC, Dorado, Dolphin...)
	RPG/ROD at SAIL (MacLisp on SAIL, TOPS-20, FOONLY F2)
	VanMelle@SUMEX (InterLisp on TOPS-20)
	Fateman at Berkeley (FranzLisp on VAX)
	Hedrick at Rutgers (UCILISP on TOPS-10?)
	Fahlman/Steele at CMU (SPICELISP on ?, MacLisp on CMU-10)
	HIC at MIT (Lisp Machine)
	JONL at MIT (MacLisp on ITS, NIL on VAX)
	Westfold at SCI (InterLisp on F2)
	Weyhrauch at SAIL (Ilisp on SAIL, LISP1.6 on SAIL)

If anyone has any suggestions about who else to contact or other Lisps
and/or machines to try, let me know soon.

				-rpg-



Date: 27 Feb 1981 13:32 PST
From: Deutsch at PARC-MAXC
Subject: Re: Timings
In-reply-to: RPG's message of 27 Feb 1981 1319-PST
To: Dick Gabriel <RPG at SU-AI>
cc: info-lispm at MIT-AI

Your suggestion sounds great.  What we need is someone to organize the process
just a little.  Such a person would do something like the following:

1) Collect the names of volunteers or contact persons at each site, to send sample
programs to.
2) Collect the sample programs from each site, and disseminate them to the
volunteers or contacts at the other sites.
3) Collect the translated sample programs (in case there was controversy over
whether the translation was "trivial", for example, and for documentation and
historical purposes).
4) Collect the results of the timings run at each site, and disseminate them.

Would you like to volunteer?


Date: 27 February 1981 16:32-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Subject: Re: timings
To: CPR at MIT-EECS
cc: INFO-LISPM at MIT-AI, RWS at MIT-XX

As Peter Deutsch has pointed out this is a crummy benchmark, which was implemented
by relatively unenlighted programming on the CADR. I made it almost 50% faster
in 5 minutes, and the new numbers are much better. They could be made much better,
but basically people aren't interested in hacking uninteresting benchmarks. Things
like a natural language parser or an AI program is more what we are interested in.
There are some data points along this line, but I can't remember the exact numbers.
Hopefully RG has the numbers for the WOODS lunar program tucked away somewhere.

Date: 27 Feb 1981 1319-PST
From: Dick Gabriel <RPG at SU-AI>
Subject: Timings  
To:   deutsch at PARC-MAXC
CC:   info-lispm at MIT-AI    

	Since everyone I know of is trying to make a decision about what
to do about Lisp computing in the next five years, perhaps we should
try to co-ordinate a test that will help everyone make a decision.
For instance, each center (PARC, MIT, Stanford, CMU, Berkeley,...)
can provide a program that is of interest to them (not too big, of course);
each test site will then provide someone to re-code (in a very trivial sense:
turning greaterp into >, adding declarations) those programs into reasonably
efficient code for their system. The authors will provide timing data and
timing points in their code.

	Each center may have a few programs since they may have diverse
communities (SAIL and HPP at Stanford). I would be happy to volunteer to
test programs for SAIL MacLisp, which is a 10 version.
			-rpg-



Date: 27 Feb 1981 12:27 PST
From: Deutsch at PARC-MAXC
Subject: Re: timings
In-reply-to: RWS's message of 27 Feb 1981 1426-EST
To: RWS at MIT-XX
cc: info-lispm at MIT-AI, masinter, guttag@MIT-XX

There is currently a flurry of messages circulating between MIT and PARC
trying to compare the CADR and the Dolphin (the Dorado's smaller cousin). 
Perhaps some attempt should be made to organize the current chaos of conflicting
machines, systems, ideas about what an "interesting/real" program is (as opposed
to TAK or the Baskett benchmark), ...


Date: 27 Feb 1981 1516-EST
From: Chris Ryland <CPR at MIT-EECS>
Subject: Re: timings
To: RWS at MIT-XX, info-lispm at MIT-AI
In-Reply-To: Your message of 27-Feb-81 1452-EST

Forest Baskett of Stanford has some very interesting timings for a
whole slew of machines running a sample program (in either C or
Pascal or both, depending on the machine).  It, as any single-data-
point test, is not to be taken for much.  (It shows the CADRs in a
fairly poor light.)  You might ask him about it (FB@SAIL).  I don't
know if he even knows people know about it.
-------

Date: 27 Feb 1981 1426-EST
From: RWS at MIT-XX
Subject: timings
To: info-lispm at MIT-AI

Has anyone run a "real" Lisp program on both a Lisp Machine and a
10 (or 20)?  We are trying to determine the performance of CADRs
relative to other machines (Dorados, VAXen, Apollos).  Real timings
would be especially useful, but opinions/estimates are also welcome.
-------

Date: 27 February 1981 12:09-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: BAGLEY at MIT-AI
cc: INFO-LISPM at MIT-MC, BUG-HARDWARE at MIT-AI


I'll announce this again (I thought I already sent this note): The new
keyboards seem to have a mode whereby typing a single key will
transmit several garbage characters.  The affected key(s) seem to vary
from incident to incident.  If a keyboard gets into such a mode,
before sending a bug report, unplug it and replug it.  If this does
not fix it, then send a bug report and tell us you preformed this
procedure.


Date: 20 FEB 1981 1637-EST
From: DLW at MIT-AI (Daniel L. Weinreb)
To: INFO-LISPM at MIT-AI

Because someone made a mistake editing the NAMES database, people who
were recently added to INFO-LISPM may have missed some recent messages.
You can look at LMDOC; INFO LISPM on MIT-AI if you haven't gotten any
INFO-LISPM mail in a long time.  The list is fixed now.

Date: 19 FEB 1981 0206-EST
From: dlw at MIT-AI (Daniel L. Weinreb)
To: INFO-LISPM at MIT-AI

The window system documentation (WINDOC) used to say that the messages
of TV:GRAPHICS-MIXIN allow floating point numbers to be given as X and Y
co-ordinates.  That was a mistake in the documentation; they should only
be documented to allow fixnums.  If you want to use floating point, you
should truncate or round them (with FIX or FIXR) yourself.  Sorry for
the confusion.


Date: 18 February 1981 00:00-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: How to not get hit by bugs!
To: ACW at MIT-AI, INFO-LISPM at MIT-AI

(In general, I would prefer if you would ask questions like this of
BUG-LISPM rather than INFO-LISPM, so it doesn't go out to the entire
known universe.  However, now that you've got everyone wondering...)

Yes, in the next system there will be an argument to LOAD-PATCHES (it
will be global in the next system) to tell it not to ask the questions.
We'll explain how it works when the next system is released.

Date: 17 FEB 1981 1919-EST
From: ACW at MIT-AI (Allan C. Wechsler)
Subject: How to not get hit by bugs!
To: INFO-LISPM at MIT-AI


Is there an ARGUMENT that we can give SI:LOAD-PATCHES
so that we don't have to answer questions at all?
That way we could put it in our inits and wouldn't have
to (horrors!) think.

   ---Wechsler

Date: 12 February 1981 23:26-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Fast graphic output to windows.
To: INFO-LISPM at MIT-AI

Several people have asked how they can write functions that will do
graphic output to a window that is more efficient than simply sending
the appropriate messages.  In response to this demand, I have created a
quick-and-dirty document that tells you how to do so.  It is in the file
AI: LMWIND; GRAFIX >.  Please let me know if you find anything unclear
in it; good luck.

Date: 12 February 1981 00:51-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: How to not get hit by bugs!
To: INFO-LISPM at MIT-AI

When bugs are discovered in the installed Lisp Machine system, the
maintainers try to quickly fix the bugs, and create a system patch so
that everyone can benefit from the fix immediately.  Unfortunately, we
often find ourselves getting bug reports regarding bugs that have
already been fixed and patched.  (Like, for example, an annoying bug in
Auto Fill Mode in Zwei was fixed in patch 59.7, but people are still
reporting it.)  So it appears that some people are not loading patches.

It's extremely easy to load up the patches.  You just do
(si:load-patches) and answer "Y" to the questions.  (You can also type
"P" for "Proceed" to get all the rest of the patches to a particular
system.)

If you are slightly more ambitious, you can dump out a new band that
already has the patches, to save the time of loading them in the future.
If you want to know how to do this, read the CONCEPTS and MAKING PATCHES
sections of the file AI: LMDOC; INSTAL NEWSYS.

These patches have lots of nice bug fixes and can save you a lot of
trouble.  Please save yourself trouble and annoyance: load the patches.

(This has been another friendly public service announcement from your
friendly Lisp Machine Group...)

Date: 10 FEB 1981 0048-EST
From: dlw at MIT-AI (Daniel L. Weinreb)
Subject:  Incompatible change to READ, TYI et. al.
To: INFO-LISPM at MIT-AI

As of System 59.19, the functions READ, TYI, TYIPEEK, READCH, and
READLINE interpret their eof-option argument slightly differently.
If an end-of-file condition is encountered inside one of these
functions, then the action taken will be as follows:

  If any object was provided as the eof-option argument, that object
    will be returned by the function.
  If no object was provided as the eof-option argument, an error is
    signalled.

This behavior is not quite compatible with Maclisp, but it is a lot more
consistent than the Maclisp definition and than the previous behavior.
You may have problems if you have a program that reads from streams,
with one of the above functions, without passing any explicit eof-option
argument, expecting -1 or something like that to be returned.  The way
to fix any problems caused by this change is to provide an eof-option
argument explicitly.

This means that it is now possible to provide NIL as an eof-option
argument and have it work (that is, NIL will be returned if end-of-file
is reached).


Date:  8 FEB 1981 0726-EST
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

Does anybody use the feature of FORMAT whereby it allows
a list of intermixed strings and lists instead of a control string?
I would like to change what this does, and I'd like to verify
my expectation that the existing feature is not used.

My motivation has to do with making FERROR and FQUERY work
smoothly with the functions in LMIO1;OUTPUT.

Date: 6 February 1981 01:31-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: The current state of documentation.
To: INFO-LISPM at MIT-AI
cc: CSTACY at MIT-AI

In response to the many pieces of mail I have receive recently asking
about documentation of various things, here is the current state of the
documentation of the Lisp Machine software.

The only published material that exists right now is the Lisp Machine
Manual, Second Preliminary Edition.  This was written over two years ago
and so is not really up-to-date, but most of what it says is accurate so
long as you ignore chapters 20 through 23 inclusive.  There are a lot
of new things that are not in this manual, though.

A new Lisp Machine Manual is being produced.  We are in the initial
proofreading stage, and are working hard on it.  We will try to get this
published as soon as possible.

Flavors are considered part of the Lisp Machine Lisp language, and so
they will be documented in the new manual.  The Flavor chapter of the
new manual has been given to the AI Publication people, to be published
as A.I. Memo #602, so that we can have it ready without waiting for the
entire manual.  With luck, copies will be availible sometime soon.  If
you are really in a hurry, you can :DOVER AI: LMMAN; FLAVOR PRESS to
get a copy.

The Window System is not part of the language, and is in fact such a big
subsystem that it will be documented separately from the Lisp Machine
Manual.  Some basic documentation is availible for printing; you can
:DOVER AI: DLW; WINDOC PRESS.  This is PRELIMINARY documentation; it is
missing a lot of useful stuff and it has only been proofread once and
may contain mistakes.  But until there is something better, it will have
to do.  It concentrates on explaining the concepts of the system and
telling you what messages you can send to existing flavors of windows
and what flavors you can mix together to create new flavors.  It does
not tell you how to write new flavors of window, though.

There is also a document that explains the user interface to Lisp Machine
system programs and the window system.  It is availible for printing, too:
:DOVER AI: LMWIN; OPERAT XGP.

Another free-standing document explains how to use menus, multiple-choice
windows, choose-variable-values windows, and such things.  This will
eventually be merged with the rest of the Window System documentation.
Right now, you can get it by :DOVER AI: LMWIND; CHOICE XGP.

Date: 5 February 1981 12:58-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Patch system change in System 59
To: INFO-LISPM at MIT-AI

As of System 59 (which was just released), compiled patch files have a
second file-name of "QFASL", rather than being named "PQFASL" as they
were in previous versions.  I thought this change would be invisible
to users, but it can cause problems if you use systems whose major
version does not change with System 59, such as Daedalus and Macsyma.

If you try to load patches and find that you get a "File Not Found"
error, and that the file it was trying to load has one of the second
names "QFASL" or "PQFASL", then when it prompts you for a new name to
try, try using the other one, and see if that one works.

We will take further steps to try to prevent this from happening to you,
but if it does, that's how you can get around it for the time being.
Sorry for the inconvenience.

Date: 4 February 1981 01:28-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: New screen editor feature in System 59.
To: INFO-LISPM at MIT-AI

The screen editor in System 59 has a new command called "Create
(expand)".  It is like the "Create" command, except that instead of
asking you for the upper-left and lower-right corners for the new
window, it instead asks you for a single point, and creates a window
that fills up all the area around that single point.  It is just like
creating a tiny window at that point with "Create", and then using
"Expand Window" on it.  This command lets you say "...and now fill the
rest of this area with a Supdup window.".

Date:  3 FEB 1981 2309-EST
From: MMcM at MIT-AI (Mike McMahon)
To: INFO-LISPM at MIT-AI

System 59 is now available for distribution.  The functions MAKE-ARRAY
and MAKE-LIST now take keyword arguments.  Documentation will be
available on them shortly.  They continue to accept their old argument
syntaxes, so no programs should be affected by this change.


Date: 3 February 1981 03:15-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Bug reports
To: INFO-LISPM at MIT-AI

We are very interested in fixing bugs wherein the Lisp Machine seems to
"freeze up".  Sometimes people report having this happen to them, but,
unfortunately, simply hearing "I was typing at the editor when all of
the sudden everything froze" doesn't tell us anything helpful.

The most useful thing you can do is to try to find one of the system
hackers and let us look at the situation.  If this is impossible,
sending a bug report with the following information would be somewhat
more helpful than just saying that things "froze":

Were the blinkers blinking?  Was the mouse tracking?  Was the time of
day incrementing?  What did it say in the who-line?  Did it appear to
lose as the result of some particular command, or just in the middle of
computing away?  Did you do anything unusual that might have caused a
problem?

Thanks for your help.

Date: 28 JAN 1981 0029-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Upcoming small incompatible change
To: INFO-LISPM at MIT-AI

In the next system, SORT-SHORT-LIST and SORTCAR-SHORT-LIST will be removed
from the global package.  The new functions STABLE-SORT and STABLE-SORTCAR,
which are probably what you wanted if you were calling the others, will appear.
This was done mainly to make the documentation not look like a kludge.

Date: 27 JAN 1981 0309-EST
From: dlw at MIT-AI (Daniel L. Weinreb)
To: INFO-LISPM at MIT-AI

A basic explanation of how to make patch files has been added to the
end of the file LMDOC; INSTAL NEWSYS.  This should be of interest
to those of you who maintain patchable systems such as Daedalus
and Macsyma.

Date: 25 JAN 1981 2225-EST
From: rg at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  In the next system (or when ZWEI;COMC and LISPM2;QCFILE are reloaded)
it will no longer be the default that the ZWEI commands COMPILE-BUFFER, 
COMPILE-DEFUN, and COMPILE-REGION  (and the corresponding EVALUATE- commands)
read in the entire thing first, then process it.  Instead, the normal
mode is to alternately read an s-expression and process that s-expression.
This may result in a larger working set and thus more paging, but will
assure correct operation (particularily in case of read-macros, or
macros defined in the file and called in top level evals).
  The former batched mode can be gotten by giving these commands a numeric argument.
  Giving the COMPILE-xxx commands an argument formerly caused 
microcompiling;  now there are separate MICROCOMPILE-BUFFER, MICROCOMPILE-DEFUN
and MICROCOMPILE-REGION commands.
  QC-FILE also will use the alternate mode by default.  It has an extra
optional arg to allow specification of the batched mode.  Probably
this should be hooked up to the SYSTEM system somehow.
 (Note-to-system-hackers: the functions in this part of the world need to
be rewritten to use some form of keyword arguments.)

Date: 25 January 1981 22:20-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Please tell me where to find your NWS application program.
To: INFO-LISPM at MIT-AI

I am working on documentation of the New Window System.  In order to
help me figure out which features of the system are widely used and help
me see what ought to be documented, I would greatly appreciate if any of
you who have written interesting applications would tell me the filename
of the files that contain the code you have written.  If you're not sure
whether it is interesting, tell me anyway.  I am particularly interested
in systems that use frames.  I'd like to see which features are used
heavily and which are not, and how people's programs make use of the
existing facilities.

Please take a second to mail me a filename or two.  No hacker will call
(I won't take up your time with questions).  Your help can improve
the quality and usefulness of the documentation that will benefit
future generations.  Thank you very much.

Date: 22 JAN 1981 0354-EST
From: Moon at MIT-AI (David A. Moon)
Subject: System 56 released to users
To: INFO-LISPM at MIT-AI

System 56 is now ready for general release.  Currently it is the installed
system on a couple of machines; it should get distributed more widely
in the next couple of days.

Most of the changes in this system are internal incompatible changes which
should not affect users.  These changes are in the way regions work, in the
editor, and in the window system.  A few notes:

This system will not run with microcode younger than 720, and that microcode
will not run with older systems.  When using the CC debugger on this system,
load the latest LISPM;QCOM and LCADR;QF into the debugger machine if it is
running an older system.

Any file that contains a COMPILE-FLAVOR-METHODS that creates a combined method
for the :EXPOSE or :DEEXPOSE messages, that defines a blinker, or that uses
the TV:PREPARE-SHEET macro will need to be recompiled for the new system, and
thereafter will not run in the old system.  Note that the TV:SHEET-FORCE-ACCESS
macro generates a TV:PREPARE-SHEET.

SETUP-KEYBOARD-DISPATCH-TABLE has been flushed.  This is mentioned because it is
in the manual.  It has been a year or more since it was useful for anything.

Documentation on the new "system" facility (which replaces pkg-load)
may be found in the file AI:LMMAN;MAKSYS.  This facility was introduced in system 55.

A new function VALUES-LIST, which is to VALUES as RETURN-LIST is to RETURN.

The ABORT key has been changed somewhat, as announced in a previous message.
Control-Z is still synonymous with ABORT in some programs.  If you have
opinions about whether or not this use of control-Z should be flushed, please
mail them in to BUG-LISPM.


Date: 19 JAN 1981 2345-EST
From: AEZ at MIT-AI (Adam Zilinskas)
Subject:  EPROM programmer query
To: INFO-LISPM at MIT-AI

	I heard that the Lisp-Machine group has an EPROM burner. I
will be needing the services of a programmer for 2716's soon. Who
should I talk to for permission to use this programmer?
				Adam Zilinskas
				AEZ at AI
------------

Date: 19 JAN 1981 1616-EST
From: MMCM at MIT-AI (Mike McMahon)
Subject: ZMAIL
To: INFO-LISPM at MIT-AI

Interested persons should know that there is (and has been for some
time) a preliminary ZMAIL document in ZMAIL;POOP XGP (:DOVERable
format).  It is somewhat out of date, and not a beginner's manual.  It
may still be better than unguided experimentation.

There is also an INFO-ZMAIL mailing list.

Date: 16 JAN 1981 1759-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Upcoming user-interface change
To: INFO-LISPM at MIT-AI

In system 56, which is not quite ready for release to users yet, the use
of the Abort key has been made more consistent and useful.

When the Abort key is typed, the program which reads it aborts what it is
doing and throws out to "command level".  BREAK and the error handler
are command levels, and so is anything else that *CATCHes SI:TOP-LEVEL.

The effect is that if you type Abort repeatedly, each successive abort
will go back to an earlier break or error-handler, until you get back to
the top level (read-eval-print loop in a Lisp listener, the editor in an
editor).

This use of the Abort key is turned off by certain programs, such as the
editor.  However, it is always in effect when typing at read-eval-print
loops and the error handler.

The error-handler's meta-Z command has been flushed, since it never worked
very well and since abort now does what meta-Z was supposed to do.

Currently control-Z is the same as Abort, however this is scheduled to
be flushed.  Also the altmode-G feature of Break has been flushed (I
assume no one knows about this, I was under the impression it had been
flushed about 3 years ago).

Control-Abort resets the process, i.e. always throws all the way out of
everything, and then starts the process over again if it is the kind
(like a Lisp listener) that makes sense to start over.  Control-Abort
also happens immediately, whereas Abort happens when it is read.

Date: 16 January 1981 01:22-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Warning of upcoming incompatible user-interface change.
To: INFO-LISPM at MIT-AI

In System 56 (which is not released yet) and after, the character Control-Z will
no longer be intercepted specially, the way it is now.  Instead, the ABORT
character will do what Control-Z used to do.  Right now, in system 55, both
Control-Z and ABORT work; Control-Z won't be supported in system 56.  This
is because Control-Z is not mnemonic at all except to users of a certain
operating system used only at MIT that most people have never heard of.  In
general, the rule for the Lisp Machine user interface will be that ABORT is
used for aborting, quitting, flushing, and things like that.

By the way, what ABORT does now, and will continue to do, is to throw
to the tag SI:TOP-LEVEL.  This is done in a low-level function of keyboard
typein.

The CALL key is completely unrelated to Control-Z, and is not affected
by this change.

An analogous change was made in system 55 (the current system) to the BREAK
function; you can now use ABORT and RESUME to quit out of or return from
a breakpoint.  The magic "altmode-P" symbol is still supported but obsolete.

Date:  5 JAN 1981 2123-EST
From: MMcM at MIT-AI (Mike McMahon)
Subject:  System 55 released
To: INFO-LISPM at MIT-AI

System 55 with microcode 715 is now released to users.  It is installed
on several machines already and should be making its way to the rest
soon.  Please note that this system will not run with microcode versions
older than 715.

Highlights in addition to the usual large number of bug fixes and
additions are:

There are some new more sophisticated metering facilities with microcode
support.  More on this as it develops.  Talk to BEE if you are
interested in their current rough state.

Functions like PKG-LOAD and LOAD-FILE-LIST have been obsoleted by a new
"System" facility, documentation on which will be forthcoming shortly.
The functions RECOMPILE-WORLD-MAP, PKG-LOAD-MAP, LOAD-FILE-ALIST-MAP,
and COMPILE-FILE-ALIST-ALIST-MAP no longer exist.  More or less
compatible functions PKG-LOAD, LOAD-FILE-LIST, LOAD-FILE-ALIST, and
COMPILE-FILE-ALIST will act as interim interfaces to the new system
system.  Please report any problems with them.


Date: 20 DEC 1980 1745-EST
From: BEE at MIT-AI (Bruce E. Edwards)
To: INFO-LISPM at MIT-AI

Today, all the network addresses in Tech Square were changed. Bands that were saved
with the old network addresses will still work, however will not know which machine
they were, and also will not be able to find machines (other than AI and MC) without
the new host table. Easiest thing to do is to do (load "ai:lmio;chstbl >") into
the band and dump it back out.

Date: 18 DEC 1980 2019-EST
From: MOON at MIT-AI (David A. Moon)
Subject: New system released
To: INFO-LISPM at MIT-AI

System 53.15, with microcode 707 and Zmail 8.5, is now released to users.
It should get distributed to all the Tech Square Lisp machines within a day
or two.

The principal change from system 51 is pathnames.  The file name processing
stuff has been completely done over and is now cleaner and easier to use.
If you use anything in the FS: package, you may notice the difference.  The
old FS:FILE-xxx functions continue to work in system 53, but give an obsolete
function warning in the compiler and will be removed in system 54.

Documentation on pathnames is available.  The manual chapter on pathnames
is in the file AI:LMMAN;PATHNM >.  If you want to waste paper, you may
:DOVER LMMAN;PATHNM XGP.

There is a new terminal command, TERMINAL T.  Type TERMINAL HELP for
documentation.

Date: 18 DEC 1980 1807-EST
From: DLW at MIT-AI (Daniel L. Weinreb)
Subject: Maclisp compatibility
To: INFO-LISPM at MIT-AI, (BUG LMMAN) at MIT-AI

The Lisp Machine implements Maclisp "single-character objects" as
symbols, but, as opposed to what it says in the Lisp Machine manual,
they are not interned in the USER package; in reality, they are interned
in the current package, whatever it is.  The system had been
inconsistent about this; in particular, READCH was wrong.  A recent
system patch fixes READCH so that it will return symbols in the current
package rather than the USER package.  If this affects your programs,
you may want to fix them.  JLK says this will not break Macsyma.


Date: 16 December 1980 16:35-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Sender: dlw at CADR8 at MIT-AI
Subject: If you bring new bands to machines or dump bands with disk-save
To: INFO-LISPM at MIT-AI

When you bring a new system band from one Lisp Machine to another, and
then you want to build a special-purpose band like a Macsyma or DPL
band, please leave the regular plain system on ONE band and dump the
special-purpose one on ANOTHER band.  Furthermore, please leave the
default band set to the plain band, not the special-purpose band.
Recently CADR15 has been found with only a Macsyma band and no plain
band, and CADR8 has been found with only a DPL band and no plain band.
Furthermore, the default band on CADR8 was the DPL band, and so it
started up in the DPL package which was confusing to unsuspecting users.
It helps the rest of the user community a lot if you keep
special-purpose bands separate.  Thank you very much.

Moon@MIT-MC (Sent by Moon at CADR3@MIT-MC) 12/11/80 21:02:30 Re: Advice about non-working Mice
To: INFO-LISPM at MIT-MC
If you have an old keyboard, and a sufficiently new version of the system software,
your keyboard can break your mouse by sending random characters.  If the mouse
freezes and won't move, AND the buttons don't work, this has probably happened,
and it won't help to pound the mouse on the table or anything violent like that.

The easiest way to fix this is to warm-boot.  Hopefully this situation will be
fixed soon by the eradication of old keyboards.  You can also fix it by incanting
(%UNIBUS-WRITE 764112 4) although I wouldn't recommend doing this if you aren't
sure you remember the numbers correctly, since you might do something really useful
like turn off your keyboard too.

Date:  9 DEC 1980 1607-EST
From: dlw at MIT-AI (Daniel L. Weinreb)
Subject: People should know that Lisp Machines do not have security.
To: INFO-LISPM at MIT-AI

All users of the Lisp Machine should be aware that the Lisp Machine
system does not maintain any form of security.  It is possible for other
users to spy on your terminal, crash your machine, and generally do
anything to your Lisp environment.  This message is not in response to
any problems anyone has reported (nobody has); this is just a warning to
help prevent any possible problems in the future.

Date:  7 DEC 1980 0348-EST
From: MOON5 at MIT-AI (David A. Moon)
Subject: New version of DEFSTRUCT installed
To: INFO-LISPM at MIT-AI

System 51.2 installs a new version of DEFSTRUCT (Alan Bawden's).
It is supposed to be compatible; if there are any problems please
report them.  Documentation on the many new features available
forthcoming shortly.

Date:  6 DEC 1980 2320-EST
From: Moon at MIT-AI (David A. Moon)
Subject: System 51 released
To: INFO-LISPM at MIT-AI

System 51.1 with microcode 705 is now tentatively installed.

The performance disoptimization in the paging code introduced in system 50
has been fixed.  This necessitates that you use the latest version of LCADR;QF
(which of course is included in system 51) when debugging a system 51 machine
with CC.  Also system 51 will NOT come up in microcode older than 705.

Most "ARGTYP" microcode errors (e.g. doing arithmetic on non-numbers) are now
recoverable by typing the control-C or Resume key and giving a replacement argument.

The "MAR" feature now works reliably.  It never did in the past.

The "alu" functions have been changed incompatibly; all functions and messages
that take an "alu" argument now use the same code numbers as the BOOLE function.
If you use the variables TV:ALU-XOR, etc., the change will be transparent.

BITBLT is faster in the easy case where it is just copying words from one
place to another.  This should make window-scrolling and most cases of window
switching faster.

The keyboard buffer is now 64 characters instead of 24.  This should make it
impossible to fill up the buffer by typing ahead, even when the machine is
paging hard.

As previously announced, STRING-REVERSE-SEARCH-SET and
STRING-REVERSE-SEARCH-NOT-SET now do what the manual has always
documented them as doing.  In previous systems they return 1+ what they
are documented to (except when they return NIL).

TRACE has been changed around somewhat.  It now works to redefine or recompile
a function that is traced (it remains traced).


Date:  6 DEC 1980 1601-EST
From: JLK at MIT-AI (John L. Kulp)
To: INFO-LISPM at MIT-AI

Has anyone out there written an FFT package that runs on a plain Lisp machine?

Date:  2 DEC 1980 0020-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Warning of incompatible change to string functions
To: INFO-LISPM at MIT-AI

In system 51, STRING-REVERSE-SEARCH-SET and STRING-REVERSE-SEARCH-NOT-SET
will do what the manual has always documented them as doing.  Currently they
return 1+ what they are documented to (except when they return NIL).  I have
fixed all callers of these functions in the system (the two outside the file
LISPM2;STRING thought they worked the way the manual says anyway!).  If any
users happen to call these they will need to adjust their code accordingly.

Date: 27 NOV 1980 0122-EST
From: Moon at MIT-AI (David A. Moon)
Subject: New system released
To: INFO-LISPM at MIT-AI

System 50.9 and microcode 701 work well enough to be released to users.  These
are installed on one or two machines and will migrate to more soon.  There are
some minor incompatible changes; the remainder of this message describes the
changes.  Note that using system 50 with a microcode older than 701 will not
work optimally.  Using an older system with microcode 701 will work very poorly.

System 50 requires UCADR 701 or later.  When using the CC debugging program to look
at a machine running system 50, CC should be running in system 50 (or else
load the latest LCADR;QF) or the virtual memory will not work properly and
the machine being debugged will be trashed.

The control-top-letter and meta-top-letter editor commands now work reasonably
on "Space Cadet" keyboards.  For instance, the command to show you the arguments
to the function, a call to which is around point, is control-top-A on the old
keyboards and control-shift-A (the same finger motion) on the new keyboards.

Certain tables are now dynamically allocated, allowing the system to work
with more than 256K of memory.  Also machines with small amounts of memory
will have a few additional available memory pages.

There is a new DEFMACRO keyword, &BODY.  This is like &REST but causes
the editor and grinder to indent the following forms as a "body", i.e. 2
spaces in from the open parenthesis that starts the "call" to the macro.

The "C" command in DIRED is implemented and does the same thing as in
Emacs (source comparison); Meta-X Source Compare and Meta-X Source Compare
Merge are available in Zmacs.

A new function, VALUES, has been installed in the global package; if you
are using this name, you may have a name conflict.  VALUES is a function
of any number of arguments, which returns many values: one for each argument.
You can use this to return multiple values from a function, without using
a PROG anywhere.

The functions in the TIME package have all been renamed, and all their
arguments and returned values have been changed.  In particular, the
WHAT-DATE function has been removed from the TIME package; some people
may use this in init files; you can now use TIME:PRINT-CURRENT-TIME,
which is the same but doesn't print a newline.  Since the time functions
had not been documented anyway, probably nobody is otherwise affected by
this.   The time parser has been greatly spiffed up; if Zmail asks you
for a time, you can now answer in nearly any format that makes sense to
anybody.

The :BLINKER-FUNCTION window initialization keyword has been renamed to
:BLINKER-FLAVOR (for a long time it has been a flavor name rather than a
function name).

The previously announced changes to PUTPROP have been installed; PUTPROP
no longer changes the order of properties in the property list.

All (well, almost all) mouse-sensitive screen areas are now indicated by
outlining rather than inverse video.  This is intended to move toward a
more consistent convention for use of the mouse.

The system now automatically deletes all files on your directory when you
log in.  This is here to encourage users to read these messages, rather than
come and complain to us that they weren't informed of changes.

The special form ZWEI:OPEN-FILE is gone, having been replaced by WITH-OPEN-FILE.
The syntax is essentially the same.  Some users are probably using ZWEI:OPEN-FILE
and will need to switch.

Redefining a traced function no longer automatically untraces it.

BEGF and ENDF are gone; they haven't done anything for two years but may
still exist in some source files.

%HALT is no longer global since it is an internal sub-primitive.
The following symbols are global for the stepper program (they should
have been all along; this was an oversight):  STEP-FORM STEP-VALUE STEP-VALUES

Y-OR-N-P and YES-OR-NO-P no longer accept their arguments in either order.


MOON@MIT-MC 11/22/80 21:23:12 Re:  Incompatible change to PUTPROP
To: INFO-LISPM at MIT-AI
This change will be in the next system, particularly since the Maclisp
behaviour it thought it was being compatible with was imaginary.

JONL@MIT-MC 11/22/80 03:47:07 Re: Re-ordering Property Lists
To: MOON at MIT-AI
CC: INFO-LISPM at MIT-MC
MacLISP's PUTPROP doesn't do any re-ordering of the plist - 
it is DEFPROP or DEFUN which decides that a *functional*
property should be reordered, so that the latest functional
definition should take precedence.  However, PUTPROP will
re-use a plist cell, if its putting a property which already
exists.  I've often felt the need for a function which explicitly
puts the the property at the end of the plist (and conversely
at the beginning).


Date: 22 NOV 1980 0253-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Proposed incompatible change
To: INFO-LISPM at MIT-AI

I would like to change PUTPROP incompatibly.  Currently PUTPROP of a property
that is already on the property list reorders the list to move that property
to the front; thus GETL always sees the property which was added most recently.
This was done in Maclisp mainly (I believe) to fix some problems with loading
interpreted code over compiled code which aren't present on the Lisp machine.

I would like to change it so PUTPROP never rearranges the order of the list.
This is partly motivated by efficiency, but is primarily to allow &REST arguments
to be used as property lists (RPLACD is not allowed on stack lists, which are
what &REST arguments are implemented as.)

Anyone having an opinion for or against please send me mail.

Date: 17 NOV 1980 0108-EST
From: DLW at MIT-AI (Daniel L. Weinreb)
Subject: In fact, we want to hear about more bugs in general.
To: INFO-LISPM at MIT-AI

This is your bi-monthly reminder that only you can prevent bugs.
Please take a little trouble to report bugs when they happen;
if you are not sure that we already know about the problem, assume
we don't.  Currently we only get bug reports from a very small subset
of the users; I can't belive that the majority of you never ever run
into new bugs.  Don't just swear under your breath -- send us a note.
Each bug that ONE of you reports saves ALL of you from the bug.  Be
community minded.  This has been a public service announcement.  Keep
those cars and cdrs coming, folks.

Date: 17 NOV 1980 0104-EST
From: DLW at MIT-AI (Daniel L. Weinreb)
Subject: We want to hear about GC bugs!
To: INFO-LISPM at MIT-AI

If you use the garbage collector, and belive that it is doing
incorrect things (especially causing your machine to die
horribly), please let us know; if possible, call over a hacker
to diagnose the corpse.  Contrary to some opinion, we DO want
to hear about such bugs; right now, as far as we know, there
aren't any such bugs.

(Don't bother to report that it is slow, though; we know that already.
Sigh...)

Date: 10 NOV 1980 0745-EST
From: cent at MIT-AI (Pandora B. Berman)
Subject: hardware fixes
To: INFO-LISPM at MIT-AI

as of now, all installed cadrs (except cadr12) have received a set of hardware updates.
these include  mods to the io board and the disk controller, including the one that
allows band-transfers to work without creating junk. all these cadrs can now use new
keyboards, and should get them; the mod that makes the new kbd work also tends to cause
the system to spuriously warm-boot more often if it has an old kbd. (most of the
cadrs still with old kbds are the dept. machines).

it is suggested that people who transfer bands continue to compare the transfer to
the original, just in case.

cadr12 will be hacked at a time convenient to shipmn and me, and all future cadrs
(15 and >) will hopefully have these mods installed before they are shipped.

all and sundry are reminded that the place to complain of STRICTLY HARDWARE bugs
is (surprise!) BUG-HARDWARE. send mail to bug-hardware if your console blows up
or something similar. do not send (or even cc:) software bugs to bug-hardware; we
can't help you with those, and will only get annoyed at the junkmail.

Date: 6 November 1980 15:45-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Sender: dlw at CADR7 at MIT-AI
To: INFO-LISPM at MIT-AI

When you load the patch that creates system 48.12, the functionality of
the Abort key will be moved to Control-Abort.  In other words, if you
want to abort your program the way you used to do by typing Abort, you
now do it by typing Control-Abort.  (That's Control-Top-Call on
old-style keyboards.)  The Abort key is now a normal character that
will be read in by the :TYI message just like any other key, and so now
you can use Abort as a command to programs.

Date: 6 November 1980 11:38-EST
From: Bruce E. Edwards <BEE at MIT-AI>
Sender: BEE at CADR7 at MIT-AI
To: INFO-LISPM at MIT-AI

DEFSELECT has been changed to accept the property list type of function specification.
The form for this is:
(defselect foo => define a selector and put into function cell of foo
(defselect (foo barny
Washington-area tip.  This seems to cause several bad effects:

	- It's an inconvenience for legitmate users who would like to use those
	tips. They must now come though another host.

	- Requiring people to net-hop adds to the loads on other machines.  In
	the case of DM at night, this means net ports, which, as you may know,
	run out frequently.  This usually has the effect of excluding a
	tourist.

	- It is unfair to the reasonable tourists in the Washington area.

	- It just sheds the obnoxious tourists to other ITS.  As long as you
	are doing this it's difficult to claim that you have a more liberal
	tourist policy.
-------

TANG@MIT-AI 01/25/81 21:33:26
To: USER-ACCOUNTS at MIT-AI
	When will NBS tip become
able to log into AI again?

	I've had to perform all sorts
of gymnastics in order to work on AI
this month, and surely that obnoxious
tourist has gone away. . . .

			Jack Palevich

Date: 25 JAN 1981 1814-EST
From: cpr at MIT-AI (Christopher P. Ryland)
Subject:  SUPDUP feature
To: (BUG LISPM) at MIT-AI

In System 56.27, ZMail 14.5, microcode 720, on Lisp Machine Seventeen:

It would be nice if there were some SUPDUP command option to logout of the
remote host and let you specify another host to connect to.  Currently,
it appears you can only logout of the remote host with BREAK L, which
gets you out of the SUPDUP entirely.


Date: 25 January 1981 18:07-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  PST
To: OSI1P at MIT-DMS
cc: USER-A at MIT-DMS, USER-A at MIT-AI

There is a user PST already WITH an inquir entry. For some reason, DM's inquir
database had lost record of the inquir entry. I just tried to send it over
to DM again -- we'll see in a bit if it takes -- anyway, it looks like you
can't get the name. -kmp


Date: 25 JAN 1981 1807-EST
From: SMATT at MIT-AI (Matt BenDaniel)
To: (BUG LISPM) at MIT-AI

In System 55.18, ZMail 10.2, microcode 715, on Lisp Machine Three:
Please make the mode-line on this machine show the time, and/or tell
me how to do it.


Date: 25 January 1981 17:59-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  Does anyone use LIBLSP;DEBUG and dislike LIBLSP;DEBUG*?
To: RMS at MIT-AI
cc: RWK at MIT-MC, TLP at MIT-MC, DICK at MIT-MC, BUG-LISP at MIT-MC

    MSG:  DEBUG* 1     
    Date: 01/25/81 06:10:12
    From: RMS at MIT-AI
    Re:   Does anyone use LIBLSP;DEBUG and dislike LIBLSP;DEBUG*?

    If nobody complains, I will flush DEBUG and replace it with DEBUG*.
    I don't plan to maintain it, just to install it.
-----
Do not install it. On MC, the DEBUG FASL on LIBLSP; (RWK's) is different
and has been for years. It evolved from TLP's AI version but is much extended.
It is also the version which goes out on the release tape and everyone here
is quite satisfied with it. There are significant differences between it
and DICK's DEBUG* make it warranted to at least retain the MC version of
DEBUG. If you find people don't use TLP's much, you might want to standardize
the naming so that RWK's DEBUG package is used on all sites, and leave 
DICK's as DEBUG* since anyone now using it will expect to find it under
that name anyway. -kmp


Date: 25 January 1981 16:41-EST
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  TOPS-20 pathnames
To: Moon at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 25 January 1981 14:59-EST
    From: David A. Moon <Moon at MIT-AI>
    To:   BUG-LISPM at MIT-AI
    Re:   TOPS-20 pathnames

    TOPS-20 pathnames in the wholine that are too long, such as the above, are displayed
    with a center-dot in them.  Possibly this is a feature, I don't know.
The center dot is a feature tolet you know you've lost.


ALAN@MIT-MC 01/25/81 16:04:26 Re: #^
To: RWK at MIT-MC
CC: (BUG LISPM) at MIT-MC
    RWK@MIT-MC 01/25/81 10:39:18
    In System 55.20, ZMail 10.2, microcode 715, on Lisp Machine Fifteen:

    It is a loss, misfeature, and I would claim outright bug, that #^Y
    = CONTROL-CAPSLOCK-Y.  Not CONTROL-LOWERCASE-Y,
    CONTROL-UPPERCASE-Y, CONTROL-SHIFT-Y, or anything obvious like
    that.  I feel this violates the definition of #^Y.

???  Are you really talking about a bug in the "#^" reader macro?  I
just went to fix such obviously buggey behavior and found the
definition of "#^" to be:

(DEFUN XR-/#/^-MACRO (LIST-SO-FAR STREAM)
       LIST-SO-FAR	;Ignored
       (LET ((CH (FUNCALL STREAM ':TYI)))
	    (OR (< CH #/a)
		(> CH #/z)
		(SETQ CH (- CH 32.)))
	    (DPB 1 %%KBD-CONTROL CH)))

Now I haven't sat down in front of a LispMachine to try this out yet,
but I don't see how this can fail to produce a controlified upper case
character.  (I do think that perhaps it souldn't upper case the
character.)  Are you really only complaining about the way the new
keyboards work and not about "#^"?

EB@MIT-AI 01/25/81 15:38:05
To: USER-A at MIT-AI
I changed the [NUL:] equivalence that I put into .MAIL.;NAMES > for BFINE
on Friday to be [DSK:USERS0;BFINE MAIL].  I couldn't remove it completely
because the INQUIR mailer loop is still there.
Mn is loaded a quick check is made to make sure the function you
are replacing with it is still the same one.  If its not, a warning is
printed giving appropriate source files so you can examine the new
version and update yours appropriately.  You then note down the hash of
the more recent function and the warning message will stop.  The
function WARN-IF-CHANGED is used for doing the checking.  Your source
code will appear something like.


(WARN-IF-CHANGED ZWEI:KILL-BUFFER -7317423. 44.3) ;BAK 10/17/80

(DEFUN ZWEI:KILL-BUFFER (BUFFER &OPTIONAL IGNORE)

     ...my definition...       )

Every time the code is loaded, WARN-IF-CHANGED will compare the hash,
-7317423., with the version defined at that moment and act as described.

Well, you say, figuring out the original bunch of arguments to
WARN-IF-CHANGED looks like a pain in the ass.  True, but help is only a
Zwei command away!  If you type in your file:

(WARN-IF-CHANGED ZWEI:KILL-BUFFER)

and then place the cursor anywhere within the form and hit the command
CtrlTop-W (same new or old keyboard) the form will be textually expanded
to look like:

(WARN-IF-CHANGED ZWEI:KILL-BUFFER -7317423. 44.3) ;BAK 10/17/80

IMPORTANT NOTE: The function that is hashed to get the -7317423. is
whatever happens to be in the function cell at the moment.  Thus make
sure the system function (i.e. not yours) is the one loaded when you hit
CtrlTop-W. 


Date: 17 OCT 1980 0249-EDT
From: cent at MIT-AI (Pandora B. Berman)
Subject: new keyboard on cadr 1 
To: INFO-LISPM at MIT-AI

there is a new keyboard for cadr1. right now it is sitting next
to the cadr1 console instead of attached to it; xconos claimed
that it failed in "the usual way" by not sending characters, so
he took it off the console and reattached the old keyboard that
was sitting nearby. (laurel please look into this).

in the meantime: cadr1 had a new keyboard a few weeks ago, but
it disappeared. the one there now is a replacement. it belongs 
to cadr1. cadr1 must have a new keyboard for it to run the IC 
design programs, and it must run these programs because they can 
only be run on a cadr with a color monitor, and there are only 
two such cadrs (the other being cadr2). THEREFORE, persons 
removing this new keyboard to other places than 907 (except 
those who are performing necessary repairs) will be subject to 
surgical experimentation without anesthesia.

Date:  7 OCT 1980 2358-EDT
From: MOON at MIT-AI (David A. Moon)
Subject: New system release
To: INFO-LISPM at MIT-AI

The previously-announced system, 45.2, has been withdrawn and replaced by 46.1.

Date:  6 OCT 1980 0033-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: New system release
To: INFO-LISPM at MIT-AI

System 45.2 with microcode 692 is now available.  Currently it is only on CADR-6
but it will migrate to other machines soon.  This system fixes several serious
bugs in 44.3.  Note that system 45.2 does not have ZMAIL in it; a 45.3 with
ZMAIL should come out in a day or two.

The following changes may be of interest:

A new special form, WITH-OPEN-FILE.  This should be used in most cases
rather than calling OPEN, since it arranges for proper cleanup upon
abnormal exit.
	(WITH-OPEN-FILE (var filename options)
		body1
		body2 ... )
evaluates the forms body1, body2, ... with var bound to a stream
which is the result of (OPEN filename options).  The stream is
closed after evaluating the body.  The stream is also closed if
control is thrown out of the body, and in this case if if the file
is being written the partially-written file is deleted.

New hash-table facility available.  Documentation is in a section
of the file AI:LMMAN;FD.CON >.

If you don't know about the WITH-INPUT-FROM-STRING and WITH-OUTPUT-TO-STRING
special forms, documentation may be found in the file AI:LMMAN;FD.STR >.

Some serious bugs in the process system have been fixed.  The most
noticeable was that the Abort key did not run unwind-protects!

The usual large number of small bug fixes, especially to file names,
processes, and typeahead.

The special characters that represent function keys now display with their
new-keyboard names.  The page-separator now displays as <PAGE> rather than
<FORM>.  Typing TERMINAL/HELP will give a better display with documentation
on all the function keys on the new keyboard (even if you're on an old keyboard!).

A couple things have been renamed; probably few people were using them.
The :DRAW-FILLED-IN-CHORD message is now :DRAW-FILLED-IN-SECTOR.
If you added anything to TV:WINDOW-TYPES-ITEM-LIST you should
add it to TV:DEFAULT-WINDOW-TYPES-ITEM-LIST instead; the reason is
that this list can be per-screen and per-frame now.  The :STATUS
message returns a new value, :EXPOSED-IN-SUPERIOR.


Date: 26 SEP 1980 1403-EDT
From: DLW at MIT-AI (Daniel L. Weinreb)
Subject: How to use old-style keyboards on Lisp Machines.
To: INFO-LISPM at MIT-AI

Since some of the Lisp Machines still have old-style keyboards, here is
an explanation of how to type some of the new keys on the old keyboards.

To get:		Type:		What it is:
ABORT		TOP/CALL	Asynchronously THROWs out of all functions
				  running in the current process, and restarts
				  the process from its initial function.
CLEAR-INPUT	CLEAR		Flush unread characters (in the rubout-handler
				  buffer).
CLEAR-SCREEN	FORM		Erase or refresh the selected window.
END		TOP/RETURN	Marks the end of input to some programs.
HELP		TOP/H		Gets help, sometimes...
MACRO		BACKNEXT	Invokes keyboard macros in the Editor
				  and Zmail.
NETWORK		TOP/BREAK	SUPDUP and TELNET escape.
OVER-STRIKE	BS		Overstrike characters.
SYSTEM		TOP/ESC		Select a window of a specified type.
				   Type SYSTEM HELP for help.
TERMINAL	ESC		Various terminal functions.
				   Type TERMINAL HELP for help.

HOLD-OUTPUT (used with TERMINAL) and QUOTE (used by the Inspector)
are not availible on the old keyboards.

More details can be found in the window system documentation written
by Allan Wechsler; this is not published yet but bootleg copies
are floating around.

Date: 23 SEP 1980 2258-EDT
From: Moon at MIT-AI (David A. Moon)
To: INFO-LISPM at MIT-AI

If you have system 44.2, you should upgrade it to system 44.3 by cold-booting it,
loading the file AI:MOON;44.3, and dumping it back out.  Answer yes to all the
questions.  If you have a band based on system 44.2 with your own programs loaded
into it, you should upgrade it the same way.  This fixes some small but annoying bugs.

Date: 22 SEP 1980 0351-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: New system release
To: INFO-LISPM at MIT-AI

System 44.2 with microcode 692 is now the "installed new" system.  It is
currently installed on CADR's 3, 6, and 8, and should migrate to more shortly.

The main changes from system 40.1 of note (besides bug fixes) are:

The process system has been revised.  Processes are now flavor objects and
there are some new scheduler features (I don't know if the new scheduler
features claim to work yet.)

Use of TOPS-20 for file storage is really supposed to work now.

There are floating-point arrays.  The array type symbol is ART-FLOAT.
These are intended to reduce consing when doing floating-point array
computations.  Accessing a floating-point array is actually somewhat slower
than accessing an ART-Q array with flonums in it, but storing a "temporary"
flonum into an ART-FLOAT array does not create a "permanent" flonum that
would later need to be garbage-collected.  All floating-point arithmetic
operations are now 4.5 microseconds (about 20%) faster, due to removal of
some overhead.

Date: 21 SEP 1980 0623-EDT
From: RG at MIT-AI (Richard Greenblatt)
Subject: Poor video from CPT monitors
To: INFO-LISPM at MIT-AI

  The video quality of several CPT monitors
seems to be a strong function of how long they
have been powered on! The monitor currently
on CADR-4, for example, looks perfectly ok
for a quite a long while after powerup, but
eventually becomes barely usable.
  This probably also explains why a number of
monitors flushed for "poor focus" work perfectly
OK when tried later.
  We should determine what causes this.  (Probably
something getting hot).
  Until we can work out a better solution, I ask
users to turn off certain CPTs when they are not in
use.  Currently, I think CADRs 1,4,9, and 10 will
benefit.  Hopefully, we can soon come up with
a real fix.


Date: 14 SEP 1980 1347-EDT
From: rg at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

Due to a bug in the cold load generator, attempting to
load a microcompiled function with COMPILER:MA-LOAD gives
an error message in systems since 32 or so.  In 40 series systems,
the problem can be patched by reading in the file LISPM;UCFIX >.  
This bug has been fixed in the source.


Date: 14 SEP 1980 1335-EDT
From: rg at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  Due to a bug in the cold load generator,


MOON@MIT-MC 09/13/80 23:19:01 Re: Copying new systems from one machine to another
To: info-lispm at MIT-AI
Apparently there have been several incompetently-installed new systems
recently.  If you want to know how to do this, read the file
AI:LMDOC;INSTAL NEWSYS.  After copying a band you must always compare
it to see if it copied correctly since there is a probably-hardware
bug which has not yet been found which frequently corrupts a band
that is being copied.

Date: 9 September 1980 09:15-EDT
From: Howard I. Cannon <HIC at MIT-MC>
To: info-lispm at MIT-AI

World 40.1 is now available.  It includes support for using a TOPS-20
as a file computer, and knows about hosts SPEECH, EE, and XX, as well as
AI and MC.

In order to implement this, some major changes were made to the
internals of the file system, mostly dealing with filename parsing.
For internal reasons, a new package called FS (or FILE-SYSTEM) was
created, consisting of the files QFILE and FNUTIL.  Parsed filenames
are now instances.  Look at AI:LMIO;FNUTIL > for details.

If any of your code calls SI:FILE-EXPAND-PATHANME, SI:FILE-SET-FN2, or
SI:GET-FILE-SYMBOLS, it may no longer work.  We do not expect many
users to be calling these functions.  If you have problems converting,
MMCM or I (HIC) would be happy to help you.

Of course, the only way that the new TOPS-20 file job will get fully
tested is by use.  It seems to work well enough to read and write both
text and binary files.  Some of the more esoteric features have not
yet been tested.  Please report any bugs giving as much information as
possible to BUG-LISPM.


Date: 25 AUG 1980 0151-EDT
From: DLW at MIT-AI (Daniel L. Weinreb)
Subject: Documentation
To: INFO-LISPM at MIT-AI

Have you ever tried to find out something by looking in the Lisp
Machine Manual and not found what you were looking for?  Whenever this
happens, I would greatly appreciate if you would drop a note to
BUG-LMMAN.  Thank you.

(Please don't bother to report things that the manual does not
*purport* to document, such as the new window system and software
written since the manual was published; I already know about all that.)

ALAN@MIT-MC 08/23/80 04:45:16 Re: defstruct query
To: INFO-LISPM at MIT-MC
(Sorry about the empty message I just sent to you all, but this
keyboard has a key labeled "CALL" in the upper right corner that sends
a control-C.)

Does anyone use the obscure feature of defstruct where if you say:

(defstruct (foo)
	   ((mumble 1010 234 (mumble-a mumble-b mumble-c))))

defstruct expands into code including:

(setq mumble-a 0
      mumble-b 1
      mumble-c 2)

???

I would like to flush this bit of syntax in favor of allowing a
keyword options list in each slot (so you can specify type information
etc. in an entendable way).  I can still support the feature if anyone
really insists, but it would be nice in any case if they could be
convinced to convert their defstructs to a new format.

(I suspect there may be a better way of solving whatever problem this
feature is addressing anyway, so I would like to hear from whoever is
using it.)

ALAN@MIT-MC 08/23/80 04:10:23
To: INFO-LISPM at MIT-MC


MOON@MIT-MC 08/04/80 23:49:42 Re: Disk errors
To: info-lispm at MIT-AI
If you have a sufficiently-recent system disk errors are logged and you can
print out this log, either from the machine itself if it is up or from another
machine over the debugging interface if it has died with fatal disk errors.
The functions for this are respectively SI:PRINT-DISK-ERROR-LOG and
CADR:CC-PRINT-DISK-ERROR-LOG.  If you get screwed by fatal disk errors,
you should mail a bug-report to CADR including the machine it happened on
and the output from one of these functions.

The logging has existed for a long time but the functions for printing the log
probably only appeared in 32.3 or thereabouts.

Date:  3 AUG 1980 2224-EDT
From: ACW at MIT-AI (Allan C. Wechsler)
Subject:  Strange psychological phenomenon
To: INFO-LISPM at MIT-AI


At first, when unused to BOLIO, I found the font specification
sequences disconcerting: it was hard for me to read unboliized
(unboliated?) text, partly because of the random 3's and *'s
scattered throughout.

Suddenly I have become acclimatized.  And behold, here in
an editor buffer displayed in spartan Cptfont, text enclosed
by 2 and * began to appear italicized, and text enclosed by
3 and * began to appear in boldface.  This happened only
when I wasn't thinking about it.  Has anyone else noticed this
weird adjustment?

   ---Wechsler


Date: 21 JUL 1980 1248-EDT
From: ACW at MIT-AI (Allan C. Wechsler)
Subject:  Caps-, mode-, and alt-lock.
To: INFO-LISPM at MIT-AI


   Perhaps these could be used to toggle modes in the Editor.

   One might use them to turn filling on or off, or to 
enable abbrevs, or some such.  In Lisp mode one of them might 
be used to put you into Comment Mode or something.

   Those buttons are there, after all.

   ---Wechsler


Date: 20 JUL 1980 2135-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Volunteer labor solicited
To: INFO-LISPM at MIT-AI
CC: cwh at MIT-MC

Someone should convert the contents of the LMDEMO; directory to work in the
new window-system.  Sources are mostly on MC:.

Date: 19 JUL 1980 1557-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Use of old keyboards with new window-system
To: INFO-LISPM at MIT-AI

Most of you probably already know this already, but just in case you don't:

There are certain keys used by the new window-system which only exist on the
new large keyboards.  To type those characters on the old keyboards, use the
Top key, as follows:
	Top Esc = System	(used for switching between programs)
	Top Call = Abort	(like control-G in Maclisp)
	Top Return = End	(used for ending input, mail for instance)
	Top H = Help		(this one is not new)

Date: 19 JUL 1980 1500-EDT
From: RG at MIT-AI (Richard Greenblatt)
Subject: microcompiler
To: INFO-LISPM at MIT-AI

AI:LMDOC;MCDOC > is a preliminary poop-sheet on the microcompiler.

Date: 19 JUL 1980 0300-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: New system pre-release
To: INFO-LISPM at MIT-AI

System 32.1 and microcode 674 are tentatively released.  Currently
they only exist on CADR-1, but very shortly they will migrate to
CADR's 6 and 2; if no bugs show up I hope that this system can get
installed on all the machines within a week or so.  That will involve
some disruption to users, although you can of course DISK-RESTORE to
an older band if your programs have not yet been converted to the
latest system (but don't expect great amounts of sympathy for bug
reports!)

In addition to the changes in system 30, mainly involving removing the
vestiges of the old window-system, this system includes a relatively
bug-free new window-system and editor.  The garbage collector works
again.  This system includes the micro-compiler (ask RG if you want to
know how to use it.)  There are some new facilities for transferring
bands between machines which are faster and hopefully more reliable.
The microcode primitives for the old window-system have been removed
(TV-DRAW-CHAR, TV-ERASE, etc.); if you call them unfortunately the
machine will crash rather than giving you an error.  There are the usual
large number of small bug fixes.

Any qfasl file compiled in a system before 30 should be recompiled
in this system, because many symbols have been removed from the GLOBAL
package.  The list is at the end of this message; note that this is
the same list as for system 30 except that UNTYI has also been moved
from GLOBAL to USER.  (It was on the list before but it was not actually
moved due to an oversight.)

Please do not recompile any system programs in worlds older than this,
as that is very likely to cause hidden bugs.

There is a new package, TIME.  Some of the date/time functions that were
formerly in the CHAOS package randomly, are now in the TIME package.
They work better and present a more reasonable interface.  Note that
this includes NWATCH-ON and WHAT-DATE which many people call in their
init files.

The roman numeral keys on the new keyboards will only be used as mouse
buttons if the "mode lock" key, located just below them, is latched down.

The following symbols have been removed from GLOBAL; if you use any of
these in your programs you have a problem and need to convert.  Some of
these symbols are obsolete, a few were misspellings, and some have been
moved into SYSTEM.  A lot of these symbols are used as keywords,
properly requiring a colon prefix, but had been globalized so that old
programs without the colon prefix would work.  Said old programs will
now need to be fixed.

These symbols no longer exist in GLOBAL:

/' /, /; /] /` ACTIVE-WINDOWS CC-LOAD-UCODE-SYMBOLS
COMPLETING-READ-PROMPT-SIMPLE COMPLETING-READ-SIMPLE CONSOLE-IO-PC-PPR
CURRENT-JOB CURRENT-STACK-GROUP DECODE-DEFINITION ED-INITIALIZE
ED-READ-TAG-TABLE ED-REDEFINE-KEYS EDPROP EDT EDVAL EXPOSED-WINDOWS
FILE-COMMAND FILE-COMMAND-BUFFER FILE-COMMAND-CAREFUL FILE-ERROR
FILE-MAPPED-OPEN FILE-PROPERTY-VARIABLES FOR-CADR FORCE-KBD-INPUT
FREEZE-WHO-LINE GET-UNIQUE-ID INHIBIT-AUTOEXPOSE-FLAG
INHIBIT-SCREEN-RESTORATION-FLAG INHIBIT-SCREEN-SAVING-FLAG
INITIAL-STACK-GROUP INTERRUPT KBD-SIMULATED-CLOCK-FCN-LIST
KBD-SUPER-IMAGE-P LOCK-SCREEN-LAYOUT MAKE-TYPEOUT-STREAM MENU-CHOOSE
MENU-CLASS MENU-CREATE MOUSE MULTIPLE-VALUE-PASS-BACK PAINT PC-PPR
PRINT-NAME-CELL-LOCATION PROCESS-FORCED-INPUT
PROCESS-FORCED-INPUT-INDEX PROCESS-INPUT-PROCESS REAL-IO
SCHEDULER-STACK-GROUP SCREEN SELECTED-PROCESS SELECTED-WINDOW
STANDARD-PC-PPR SWITCH-REGISTER TOP-WINDOW TRIVIAL-PROCESS
UNFREEZE-WHO-LINE WHO-LINE-FROZEN WHOSTATE XOR

Also a whole bunch starting with prefixes DRAW-, JOB-, MOUSE-,
PC-PPR-, SCREEN-, and TV-.

These have been moved into the SYSTEM package:

%%HEADER-REST-FIELD %%HEADER-TYPE-FIELD %ARRAY-LEADER-LENGTH
%ERROR-HANDLER-STACK-GROUP %HEADER-TYPE-ARRAY-LEADER
%HEADER-TYPE-BIGNUM %HEADER-TYPE-COMPLEX %HEADER-TYPE-ERROR
%HEADER-TYPE-FEF %HEADER-TYPE-FLONUM %HEADER-TYPE-RATIONAL-BIGNUM
%INITIAL-STACK-GROUP %INITIALLY-DISABLE-TRAPPING ACTIVE-PROCESSES
LENGTH-OF-ATOM-HEAD

Moved into SI:

LOCALLY-KNOWN-DEVICES

These are keywords that were formerly global:

ACTIVATE-P ARG1 ARG2 BINARY BLACK BLINK BLINK-FCN BLINKER-P BLOCK BOTH
BOTTOM BOTTOM-MARGIN CAR-NUM-MODE CAR-SYM-MODE CDR-NUM-MODE
CDR-SYM-MODE CLEAR-INPUT CLEAR-OUTPUT COMPACT-CONS COMPLETE CONFIRM
CONSTRUCTOR DEFAULT-POINTER DEFS DYNAMIC END-LINE-FCN END-SCREEN-FCN
FINISH FOLLOW-P FONT-MAP FONTS FORCE-OUTPUT FORM FRESH-LINE GC
GROUPED-ARRAY HALF-PERIOD HEIGHT IN INCLUDE INTEGRAL-P LEFT LEFT-MARGIN
LINE-IN LINE-OUT LISTEN MORE-FCN MORE-P NAME NOCOMPILE NOCONFIRM NOLOAD
NORELOAD NORMAL OUT PC-PPR PDL PLANE-MASK READ-ONLY READ-POINTER
RECURSIVE REFERENCES REGION-SIZE REGULAR-PDL-AREA REGULAR-PDL-SIZE
RELOAD REPRESENTATION REVERSE-VIDEO-P RIGHT RIGHT-MARGIN ROVING-P SAFE
SELECTIVE SET-PC-PPR SG-AREA SIDEWAYS-P SINGLE SIZE SIZE-MACRO
SPECIAL-PDL-AREA SPECIAL-PDL-SIZE STATIC STRING-OUT STRUCTURE
SWAP-SV-OF-SG-THAT-CALLS-ME SWAP-SV-ON-CALL-OUT TOP TOP-MARGIN UNTYI
UNTYO UNTYO-MARK VISIBILITY VSP WHICH-OPERATIONS WHITE WIDTH WRITE

The following symbols have been added to GLOBAL.  (There may have been
others added since whichever system you are used to using.)
BEEP, INSPECT, %%KBD-HYPER, %%KBD-SUPER,
COND-EVERY, SELECTQ-EVERY, DESTRUCTURING-BIND,
GET-HANDLER-FOR, LOCATE-IN-INSTANCE, SET-IN-INSTANCE, SYMEVAL-IN-INSTANCE,
DEFINE-USER-OPTION-ALIST, DEFINE-USER-OPTION, CHOOSE-USER-OPTIONS,
RESET-USER-OPTIONS, WRITE-USER-OPTIONS,
DEFRESOURCE, WITH-RESOURCE, ALLOCATE-RESOURCE, DEALLOCATE-RESOURCE


Date: 14 JUL 1980 1921-EDT
From: Moon at MIT-AI (David A. Moon)
To: INFO-LISPM at MIT-AI

Someone deinstalled the new system from CADR-1.  It is reasonable to do
this if something changed in it is interfering with your work and seems
to be broken.  It is NOT reasonable to do this without sending mail
to bug-lispm saying what you did and why.  Bugs that aren't reported
don't get fixed.

Date: 12 JUL 1980 0233-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: P.S. to previous message
To: INFO-LISPM at MIT-AI

System 30.3 is tentatively installed on CADR-6 as well as CADR-1.

Date: 12 JUL 1980 0220-EDT
From: MOON at MIT-AI (David A. Moon)
Subject: New system pre-release
To: INFO-LISPM at MIT-AI

System 30.3 has been tentatively installed on CADR-1 for the benefit of those
who want to test their programs.  There are a number of incompatible changes
described later in this message which will necessitate recompilation for
some people and actual program changes for those who are still using functions
of the old window-system.  The 30 series system will be installed on most
machines sometime next week, assuming there aren't too many bugs.

Please do not copy this system to any other machine yet (in fact 30.3 will not
boot on a machine without a color screen, but that will be fixed in 30.4,
hopefully tomorrow.)

Please do not recompile any system programs in worlds older than this,
as that is very likely to cause hidden bugs.

Lisp machine systems 30 and above contain only the "new" window system.
The vestiges of the old window system present in previous systems (with
the "nws" designation) have been removed.  In addition, the GLOBAL
package has been cleaned up.  It is advisable that you recompile your
programs in this system before trying to run them, both because of
symbols having changed packages and because of some other changes
including the value of the #\MOUSE-n-n syntax.  If you need help
in converting please contact HIC, Moon, or MMcM.

There is a new package, TIME.  Some of the date/time functions that were
formerly in the CHAOS package randomly, are now in the TIME package.
They work better and present a more reasonable interface.

The following symbols have been removed from GLOBAL; if you use any of
these in your programs you have a problem and need to convert.  Some of
these symbols are obsolete, a few were misspellings, and some have been
moved into SYSTEM.  A lot of these symbols are used as keywords,
properly requiring a colon prefix, but had been globalized so that old
programs without the colon prefix would work.  Said old programs will
now need to be fixed.

These symbols no longer exist in GLOBAL:

/' /, /; /] /` ACTIVE-WINDOWS CC-LOAD-UCODE-SYMBOLS
COMPLETING-READ-PROMPT-SIMPLE COMPLETING-READ-SIMPLE CONSOLE-IO-PC-PPR
CURRENT-JOB CURRENT-STACK-GROUP DECODE-DEFINITION ED-INITIALIZE
ED-READ-TAG-TABLE ED-REDEFINE-KEYS EDPROP EDT EDVAL EXPOSED-WINDOWS
FILE-COMMAND FILE-COMMAND-BUFFER FILE-COMMAND-CAREFUL FILE-ERROR
FILE-MAPPED-OPEN FILE-PROPERTY-VARIABLES FOR-CADR FORCE-KBD-INPUT
FREEZE-WHO-LINE GET-UNIQUE-ID INHIBIT-AUTOEXPOSE-FLAG
INHIBIT-SCREEN-RESTORATION-FLAG INHIBIT-SCREEN-SAVING-FLAG
INITIAL-STACK-GROUP INTERRUPT KBD-SIMULATED-CLOCK-FCN-LIST
KBD-SUPER-IMAGE-P LOCK-SCREEN-LAYOUT MAKE-TYPEOUT-STREAM MENU-CHOOSE
MENU-CLASS MENU-CREATE MOUSE MULTIPLE-VALUE-PASS-BACK PAINT PC-PPR
PRINT-NAME-CELL-LOCATION PROCESS-FORCED-INPUT
PROCESS-FORCED-INPUT-INDEX PROCESS-INPUT-PROCESS REAL-IO
SCHEDULER-STACK-GROUP SCREEN SELECTED-PROCESS SELECTED-WINDOW
STANDARD-PC-PPR SWITCH-REGISTER TOP-WINDOW TRIVIAL-PROCESS
UNFREEZE-WHO-LINE WHO-LINE-FROZEN WHOSTATE XOR

Also a whole bunch starting with prefixes DRAW-, JOB-, MOUSE-,
PC-PPR-, SCREEN-, and TV-.

These have been moved into the SYSTEM package:

%%HEADER-REST-FIELD %%HEADER-TYPE-FIELD %ARRAY-LEADER-LENGTH
%ERROR-HANDLER-STACK-GROUP %HEADER-TYPE-ARRAY-LEADER
%HEADER-TYPE-BIGNUM %HEADER-TYPE-COMPLEX %HEADER-TYPE-ERROR
%HEADER-TYPE-FEF %HEADER-TYPE-FLONUM %HEADER-TYPE-RATIONAL-BIGNUM
%INITIAL-STACK-GROUP %INITIALLY-DISABLE-TRAPPING ACTIVE-PROCESSES
LENGTH-OF-ATOM-HEAD

Moved into SI:

LOCALLY-KNOWN-DEVICES

These are keywords that were formerly global:

ACTIVATE-P ARG1 ARG2 BINARY BLACK BLINK BLINK-FCN BLINKER-P BLOCK BOTH
BOTTOM BOTTOM-MARGIN CAR-NUM-MODE CAR-SYM-MODE CDR-NUM-MODE
CDR-SYM-MODE CLEAR-INPUT CLEAR-OUTPUT COMPACT-CONS COMPLETE CONFIRM
CONSTRUCTOR DEFAULT-POINTER DEFS DYNAMIC END-LINE-FCN END-SCREEN-FCN
FINISH FOLLOW-P FONT-MAP FONTS FORCE-OUTPUT FORM FRESH-LINE GC
GROUPED-ARRAY HALF-PERIOD HEIGHT IN INCLUDE INTEGRAL-P LEFT LEFT-MARGIN
LINE-IN LINE-OUT LISTEN MORE-FCN MORE-P NAME NOCOMPILE NOCONFIRM NOLOAD
NORELOAD NORMAL OUT PC-PPR PDL PLANE-MASK READ-ONLY READ-POINTER
RECURSIVE REFERENCES REGION-SIZE REGULAR-PDL-AREA REGULAR-PDL-SIZE
RELOAD REPRESENTATION REVERSE-VIDEO-P RIGHT RIGHT-MARGIN ROVING-P SAFE
SELECTIVE SET-PC-PPR SG-AREA SIDEWAYS-P SINGLE SIZE SIZE-MACRO
SPECIAL-PDL-AREA SPECIAL-PDL-SIZE STATIC STRING-OUT STRUCTURE
SWAP-SV-OF-SG-THAT-CALLS-ME SWAP-SV-ON-CALL-OUT TOP TOP-MARGIN UNTYI
UNTYO UNTYO-MARK VISIBILITY VSP WHICH-OPERATIONS WHITE WIDTH WRITE

The following symbols have been added to GLOBAL.  (There may have been
others added since whichever system you are used to using.)
BEEP, INSPECT, %%KBD-HYPER, %%KBD-SUPER,
COND-EVERY, SELECTQ-EVERY, DESTRUCTURING-BIND,
GET-HANDLER-FOR, LOCATE-IN-INSTANCE, SET-IN-INSTANCE, SYMEVAL-IN-INSTANCE,
DEFINE-USER-OPTION-ALIST, DEFINE-USER-OPTION, CHOOSE-USER-OPTIONS,
RESET-USER-OPTIONS, WRITE-USER-OPTIONS,
DEFRESOURCE, WITH-RESOURCE, ALLOCATE-RESOURCE, DEALLOCATE-RESOURCE

Date: 4 July 1980 15:19-EDT
From: Mike McMahon <MMCM at MIT-AI>
Subject: INFO-ZWEI
To: INFO-LISPM at MIT-AI
cc: INFO-ZWEI at MIT-AI

I have created this mailing list, primarily for periodic announcements
of new commands and features in the LISP Machine editor.  There seems
to be a large information gap here.  Please add yourself if you are
interested.  Some of you on BUG-ZWEI might want to put yourself here
instead.  In a few days time, i shall mail summaries of commands that
(1) do not exist in EMACS and (2) are new to NZWEI.

Date: 30 JUN 1980 2102-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Changing your default base
To: GLS at MIT-AI
CC: INFO-LISPM at MIT-AI

Note that you cannot expect to win by doing (SETQ BASE 10. IBASE 10.), because when
the machine is warm-booted it has no way to know whether the current value of those
symbols is the value you want, or some random value that they were temporarily bound
to at the time it crashed.  If you want change of base to work through warm-booting,
you must:	(ADD-INITIALIZATION "BASE" '(SETQ BASE 10. IBASE 10.) '(:NOW))
which will re-evaluate the form upon warm-boot.  I don't think there is any
trivial way to make this get un-done when you log out (but presumably most people
cold boot instead of logging out.)

Warm-booting is a last-resort mechanism and you can't expect perfect cleanliness
in its behavior, especially if you know how it works!

Date: 25 June 1980 09:22-EDT
From: Howard I. Cannon <HIC at MIT-MC>
Subject:  New window syste
To: INFO-LISPM at MIT-AI

I have seen examples of some people's new window system code, and have
noticed a very common occurance -- the mixing of old and new window system
symbols in the same piece of code.  This works now, because both window
systems are loaded into the new window system world, but will not work
as soon as we build a new window system only version, which will probably
be system 30.  In order to insure not falling into this trap, there is
a very simple rule: Any symbol beginning with TV- belongs to the old window
system, and about 98% of new window system variables are in the TV package.
Therefore, in some trivial cases replacing TV- with TV: does the trick
(e.g. TV-ALU-IOR --> TV:ALU-IOR).  For some things it's harder.  The
class of primitives (TV-DRAW-LINE, TV-DRAW-CHAR, TV-ERASE) have
analogs in the new window system, but these should not be used.  In most
cases, they want to be replaced with messages sent to the window
of interest (which might be TERMINAL-IO if no window is being used
explicitly).  The messages are :DRAW-LINE, :DRAW-CHAR, and :DRAW-RECTANGLE,
respectivly.  [Note: some of these messages only appear in worlds
later than 29.27 -- if you need them, though, I can point you at a file to
load].

In the latter case, the reason for not using the primitives directly are
too detailed to get into here, but I'd of course be happy to explain
it to anyone who is interested.  I am also available for small amounts of
help in converting your system -- especially getting started.

--Howard


Date: 15 JUN 1980 0023-EDT
From: RMS at MIT-AI (Richard M. Stallman)
Subject: Incompatible change to PROG
To: INFO-LISPM at MIT-AI

Soon PROG will bind all the variables in parallel
instead of sequentially.  This only makes a difference
if you have initializations which depend on other
variables bound by the same PROG.

If you want to bind variables sequentially, use PROG*,
which is presently the same as PROG and will not change.

Old QFASL files will continue to work as before.
The change takes effect only when the program is recompiled.

I plan to create LET* and DO*, which will both do sequential
binding like PROG*, at some time in the future.

Date:  1 JUN 1980 1718-EDT
From: RG at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

CADR-1 (in Room 907) now has a color monitor system
compatible in all respects with that of CADR-2.

Date: 30 MAY 1980 0631-EDT
From: JONL at MIT-MC (Jon L White)
Subject: READ flushing atom delimiters
To: MOON at MIT-MC
CC: (BUG LISP) at MIT-MC, INFO-LISPM at MIT-MC

    Date: 30 May 1980 00:23-EDT
    From: David A. Moon <Moon at MIT-AI>
      .  .  .  I f the delimiter is a "useless" or "whitespace" character,
    it will be thrown away, rather than being UNTYI'ed back into the stream
    so that it can be TYI'ed later.  This will happen regardless of whether 
    the symbol or number is seen at top level or is inside of an expression,
      .  .  .
    Certain programs, such as reader macros, may be broken by this.  For them,
    a special variable which they may bind is provided.
    If READ-PRESERVE-DELIMITERS is bound non-NIL around a call to READ,
    all delimiters are preserved regardless of whether they are whitespace
    or meaningful characters.  .  .  .
    I would like to request a compatible change to Maclisp, to avoid 
    divergence and incompatibility on this point.
As it happens, GSB and I made this change to one version of a recent XLISP,
probably about version 1984 or so, but had to take it back when GSB
found he didn't have the time to accomodate his LMS and COBOL code.
What we were hoping to do was provide an additional function, say,
READ-AND-BREAK-CHAR, which would return both the item read and the
termination character.  For backwards compatibility, someone may raise
an objection to not haveing a "backwards-compatible-switch" (i.e.
READ-PRESERVE-DELIMITERS), but for future use, the explicit request
to return the termination character seems like a better approach for
those very few programs which want it.  Any comments?


Date: 30 MAY 1980 0023-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Change to READ
To: INFO-LISPM at MIT-AI
CC: (BUG LISP) at MIT-AI

In the next Lisp machine system released, the way READ deals with delimiting
characters for those S-expressions that need one (symbols, numbers) will be
subtly changed.  If the delimiter is a "useless" or "whitespace" character,
it will be thrown away, rather than being UNTYI'ed back into the stream
so that it can be TYI'ed later.  This will happen regardless of whether the symbol
or number is seen at top level or is inside of an expression, and regardless of
whether input is being read from the keyboard or from a file.  This was chosen
after much consideration and dithering, because it is simpler and more
understandable than a scheme where the delimiter is sometimes retained and
sometimes discarded.

Certain programs, such as reader macros, may be broken by this.  For them,
a special variable which they may bind is provided.  If READ-PRESERVE-DELIMITERS
is bound non-NIL around a call to READ, all delimiters are preserved regardless
of whether they are whitespace or meaningful characters.  I believe there are
no programs other than LMS (which doesn't run on the Lisp machine currently)
which care about this.  However, if you have a problem with this change
READ-PRESERVE-DELIMITERS should make it easy to fix your code.

This change obviates most of the need for the function SI:READ-FOR-TOP-LEVEL,
however that function is still around for the purpose of ignoring unmatched
close parentheses and because there are many places that call it.

I would like to request a compatible change to Maclisp, to avoid divergence and
incompatibility on this point.

MOON@MIT-MC 05/23/80 03:12:21 Re: Keys in 936
To: info-lispm at MIT-AI
The key to room 38-301 disappeared from room 936 some time ago and
has not been brought back.  Apparently some users have been borrowing
that key and using it as their personal key.

I would like to point out that those keys are there NOT for the
convenience of random users who feel like getting into some room,
but rather for use in emergencies so that we can get into every
room where Lisp machines are and where the Chaosnet goes.  Without
those keys, if the network breaks, well, tough, we can't fix it
and no one can get any work done, until we can get into the room
in question some other way.

So, please do not remove any keys from 936.  And if you feel you
must remove them anyway, please bring them back as soon as possible.
And if you forgot to return the 38-301 key, please return it now,
preferably anonymously.

Date: 21 MAY 1980 1607-EDT
From: rg at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

 John Purbrick's force sensitive joystick "mouse" is available
for trial use.   For the time being, it will live in his office,
and anyone who want to try it out can drop by, pick it up, and plug
it in directly in place of the regular mouse.
  This mouse may be particularily suitable for controlling certain
kinds of parameters as opposed to pointing on the screen, altho
it seems to work out fairly well for pointing as well.
  There is some hope that this kind of mouse could eventually
be built directly into the keyboard (as suggested by Carl Hewitt),
and thus be accessible without removing your hands from the keyboard.

Date: 16 MAY 1980 0331-EDT
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

WHen new versions are installed, it will be possible to
decompose a list by saying (setf (list a b) foo)
or (setf (cons a b) foo), etc.  list* is also allowed.
Quoted arguments to cons or list are ignored so
an arbitrary backquote pattern can be used:
(setf `(a ,b c ,d) foo) sets b to the cadr and d to the cadddr
doing nothing about a and c.  Multiple levels of list structure work.
If foo evaluates to an atom you get an error.

Eventually there will be a match predicate macro which will
check that the a and c are there without setting the variables b or d.

Date:  5 MAY 1980 2213-EDT
From: RMS at MIT-AI (Richard M. Stallman)
Subject: FORMAT
To: INFO-LISPM at MIT-AI

Since FORMAT is now as hairy and ugly as TECO,
I have written a more Lispy replacement, RMS;OUTPUT >.
It may be more verbose for simple things, but ought to
yield more readable code for anything complicated
since you use the ordinary Lisp control constructs.


Date: 24 April 1980 14:55-EST
From: "Guy L. Steele, Jr." <GLS at MIT-AI>
Subject: DEFVAR and DEFCONST
To: INFO-LISPM at MIT-AI


    From: David Chapman <ZVONA at MIT-AI>

    I sometimes change the value of a constant in the source and then would like to
    be able to use c-t-c to reset it. GLS's suggestion would not allow this.

    MOON@MIT-MC 04/21/80 20:25:32 Re: DEFVAR and DEFCONST
	I would recommend that DEFCONST not always reinitialize the variable
	involved, but should complain if the variable is bound and is
	not EQUAL to the newly computed value?
    Why?  The point of DEFCONST is to be the one that always reinitializes
    it, so that you can change the value.  What did you have in mind with
    this suggestion?

Having this sort of error-check would guarantee consistency in the case that
a DEFCONST for a given constant appeared in more than one file (which would
be useful for various reasons).  Maybe there should be a third thing --
but it seems to me that a "constant" should be constant.  My suggestion
would allow you to change the constant, but only after an error break.
Maybe the criteria for giving an error should be the same as those for
giving an error in FDEFINE.

HIC@MIT-MC 04/22/80 13:07:32 Re: New window system
To: info-lispm at MIT-AI
I will be talking about the new window system this Thursday, April 24,
from 3:00 to 5:00 PM in the playroom.  I will discuss it from both the
user and programmer point of view.  I strongly suggest that anyone
who plans on using the new window system as a programmer attend.


Date: 21 April 1980 20:46-EST
From: David Chapman <ZVONA at MIT-AI>
Subject: DEFVAR and DEFCONST
To: INFO-LISPM at MIT-AI

I sometimes change the value of a constant in the source and then would like to
be able to use c-t-c to reset it. GLS's suggestion would not allow this.

Date: 21 APR 1980 0804-EST
From: GLS at MIT-AI (Guy L. Steele, Jr.)
Subject: DEFVAR and DEFCONST
To: INFO-LISPM at MIT-AI

I would recommend that DEFCONST not always reinitialize the variable
involved, but should complain if the variable is bound and is
not EQUAL to the newly computed value?

Date: 20 APR 1980 2032-EST
From: RG at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  DEFCONST is clearly an improvement on DEFVAR-SETQ, so I have flushed
the latter in favor of the former.

Date: 20 APR 1980 0730-EST
From: GLR at MIT-AI (Jerry Roylance)
Subject: DEFVAR
To: MOON at MIT-MC
CC: INFO-LISPM at MIT-AI


It would be nice if the compiler substituted for a (DEFCONST FOO 'BAR)
and didn't bother to tell the rest of the world about the definition.

MOON@MIT-MC 04/19/80 23:40:06 Re: DEFVAR
To: info-lispm at MIT-AI
I think there should be two special forms for defining symbols with global
variables, one called DEFVAR and one called DEFCONST.  DEFCONST should reinitialize
the symbol every time it is seen, while DEFVAR should reinitialize it only if
it is unbound (the theory being that since it is a variable its current value
should not be disturbed.)  There should also be a variable you can bind while
loading a file to cause all its DEFVARs to be redone.  I suspect that DEFVAR's
present behavior while imperfect probably has the least problems short of
reading the user's mind.

However, note that (DEFCONST FOO value) has the same effect as
(DEFVAR FOO) (SETQ FOO value) and therefore may be superfluous.

Date: 19 APR 1980 1341-EST
From: RG at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  The feature of DEFVAR that it only initializes the variable if
it was previously unbound sometimes leads to hard to find bugs.
I have defined DEFVAR-SETQ in the source which always does a setq if
initialization is given.  Really tho, I think the default should be
the other way, with DEFVAR always doing the initialization, and 
something else doing it only if the variable is unbound.  It
might not be too late to change this, although it would be
moderately painful.

Date: 18 APR 1980 0106-EST
From: MOON at MIT-AI (David A. Moon)
Subject: Incompatible change
To: INFO-LISPM at MIT-AI

If you call MAKE-SYMBOL with more than one argument, you will need to change
your code in the next world.  It is highly unlikely that anyone does, but
I am announcing it anyway just in case.  See the documentation in LMMAN;FD.SYM
if it matters to you.

Date:  5 APR 1980 0414-EST
From: RG at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  27 series cold loads are making their appearance.  Two important things
to note:
  (1)  CAR or CDR of a CLOSURE, ENTITY or INSTANCE is an error.  Do a
     (%MAKE-POINTER DTP-LIST xx) if you want the function part.  Eventually,
     it will send a message to an ENTITY or INSTANCE if CAR or CDR of it is
     taken.
  (2)  When using the console program CC to look at a core image of a 27 or higher
     cold load, be sure you have the latest version of QF.  (The simplest way
     to be sure of this is to be using a 27 or higher system to do the CC).
     This is because a microcode change affects the procedure for
     determining where the swapping partition is.  If you use an old CC,
     you could clobber the disk!!

  Version 27 has JERRYB's ESCAPE package by default.  Most other changes
are bug fixes or hooks for the microcompiler.

Date: 29 MAR 1980 0015-EST
From: Moon at MIT-AI (David A. Moon)
Subject: CADR-7 parity errors
To: INFO-LISPM at MIT-AI

If there are any parity errors on CADR-7 after the date of this message,
I want to know about them.  The two memories currently plugged in to that
machine (#13 and #19) contain an experimental modification.  Please send
me mail if you get any main memory parity errors.

Date: 21 March 1980 16:46-EST
From: Gerald R. Barber <JERRYB at MIT-AI>
Subject:  escape key package
To: INFO-LISPM at MIT-AI


Any comments on the new escape key package would be appreciated.

Date: 21 MAR 1980 1424-EST
From: jerryb at MIT-AI (Gerald R. Barber)
To: INFO-LISPM at MIT-AI


I have written a set of functions to allow the use of the <esc> keys in
a more reasonable fashion.  It resides in JERRYB;ESCAPE.

An interesting application is the use of the keys in the manipulation of windows,
obviating the need for the mouse in many cases.

Loading the file and doing <esc><help> will list all defined escape keys.

The function KBD-ESC-INSTALL-FUNCTION is used for defining new keys or the
escape key  (lambda) may be used to bind a key in realtime while  (pie) can
unbind a key.

Note that whatever you hang on an escape key runs in its own process to protect
the keyboard process.


Date: 12 MAR 1980 1629-EST
From: dkm at MIT-AI (David K. Mellinger)
Sent-by: ___017 at MIT-AI
To: INFO-LISPM at MIT-AI

Please remove me from the INFO-LISPM mailing list. Thank you.  dkm

Date: 11 MAR 1980 1626-EST
From: GYRO at MIT-AI (Scott W. Layson)
Subject: new iteration facility
To: INFO-LISPM at MIT-AI

ARE YOU undone by DO?  Do you find mapcar pretty, but too few of the things
you want to map over are lists?  Have you seen Pete Szolovits' FOR package,
and wondered that people would want Lisp to look like Cobol?  Take a look
in  ai:apiary;gmap >  for the new wave in Lisp iteration!

This version is still experimental.  YOUR suggestions can help improve it.
Try it out!

-- Scott Layson

Date: 10 March 1980 14:58-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: CENT at MIT-AI
cc: INFO-LISPM at MIT-AI

CADR7 has been getting parity errors recently.  They are of suspicious origin.
We are currently involved in a manhunt for the culprit.  Be wary
of using it for anything lengthy and/or important.

Date:  9 MAR 1980 2204-EST
From: DANNY at MIT-AI (W. D. Hillis)
To: INFO-LISPM at MIT-AI

	For those of you who are confused about the status of CADR-9. There are two
consoles on this machine: one in 918a (locked), one around the corner in 921 (unlocked).
This has been the case since the machine was installed; I apologize for not publicizing
better in the first place. Switching between the consoles involves changing a plug (unlocked).
Get someone to show you which one.
                                      -Danny

Date:  7 MAR 1980 2342-EST
From: Moon at MIT-AI (David A. Moon)
Subject: New Lisp machine system release
To: INFO-LISPM at MIT-AI

System 26.3 and microcode 616 are installed on CADR-1 and CADR-6.  This
system has a lot of bugs fixed, and (we may hope) doesn't have more than
its share of new ones.

If you want to help out, follow the instructions in the file AI:LMDOC;INSTAL NEWSYS
and copy this system onto your favorite machine.

MOON@MIT-MC 03/04/80 12:01:08 Re: Marksman
To: info-lispm at MIT-AI
If you have a problem with CADR10, which is a problem with the marksman
disk, please follow the instructions posted on the wall, which will mail
me information about what happened.  

Date:  3 MAR 1980 0139-EST
From: Moon at MIT-AI (David A. Moon)
Subject: Slightly incompatible changes in next world
To: INFO-LISPM at MIT-AI

1. The system will start using the variables ++, **, +++, ***, and //.  These
   symbols are not global now, but will be in the next system.
   // will hold the list of multiple values of the last form; like * but you
   get a list of the values rather than just the first.
   ++ will hold the previous value of +, and +++ the value before that.
   ** will hold the previous value of *, and *** the value before that.
   These are not a substitute for a full-blown history feature, but in their
   simplicity should make interacting with the read-eval-print loop easier.
2. If formerly you had (format x "~{~S~}" y), now you must say
   (format x "~{~S~^, ~}" y).  If you never heard of this, don't worry
   about it.
3. The system will thrash a little less.  Let me know if this inconveniences
   anyone.

Date: 19 FEB 1980 2233-EST
From: moon at MIT-AI (David A. Moon)
Sent-by: MMCM at MIT-AI
Subject: If your file-job goes away
To: INFO-LISPM at MIT-AI

It now sleeps for 5 minutes before killing itself, giving you a chance to
debug why it went away, or find a system programmer to do so for you.  Please do.

ALAN@MIT-MC 02/05/80 21:50:30 Re:  #:
To: INFO-LISPM at MIT-AI
CC: JONL at MIT-MC

Yes, that's right!  Its time to put another # macro character up for
approval!  This time it is "#:".  This one does nothing in the
LispMachine reader, but in MacLisp it throws away all characters
untill another ":".  This is so that people can write compatable code
with package prefixes for the LispMachine and MacLisp ("#:SI:FOO" read
as "SI:FOO" on the LispMachine and as "FOO" in MacLisp.)

Suggestions, barfage, etc. are welcome.

Date: 2 FEB 1980 0125-EST
From: MOON at MIT-AI (David A. Moon)
Subject: If you use the file LMIO1;EFTP
To: INFO-LISPM at MIT-AI

You can no longer load this in the same way.  To load it now, first load LMIO1;EFTP
then do the following:
	(SETQ CHAOS:SERVER-ALIST NIL)
	(LOAD "LMIO;CHSNCP")
	(LOAD "LMIO;CHSAUX")
	(CHAOS:INITIALIZE-NCP-ONCE)
then warm-boot the machine.

The reason for all of this is that in the next system EFTP will be installed
as part of the default system.

Date: 24 JAN 1980 0923-EST
From: MOON at MIT-AI (David A. Moon)
Subject: (STATUS FEATURE STRING)
To: INFO-LISPM at MIT-AI

There was a typo which spelled this (STATUS FEATURE STRINGS).  It has been
corrected; the correction will appear in system 26.0.  I hope no one cares.

Date: 22 JAN 1980 0805-EST
From: JONL at MIT-MC (Jon L White)
Subject: Feature:  "STRING" or "STRINGS"
To: NIL at MIT-MC
CC: INFO-LISPM at MIT-MC

Multics maclisp has used (STATUS FEATURE STRING) to indicate the
presence of the string data type, whereas the LISPMachine uses
(STATUS FEATURE STRINGS).  Rees and others and I propose that NIL
have the status feature "STRING" to indicate the presence of all
the NIL string primitives, as described in MC:NIL;NEWFUN >, and
have the status feature "STRINGS" to indicate the additional presence
of the named functions found on pages 79 thru 83 of the LISPM manual.
The maclisp STRING package will begin doing this too.
N.B.: Exceptions - NSUBSTRING wont be done, due to implementational problems
                   STRING wont be done, due to LISPM's inconsistent definition
Reasoning: status feature BIGNUM rather than BIGNUMS, etc for the
           basic data type capability.


Date: 19 JAN 1980 2347-EST
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

Can anyone think of a good name for a function which would return all
its arguments as values?  That is, 

(DEFUN FOO (&REST ARGS)
   (PROG () (RETURN-LIST ARGS)))

Date: 18 JAN 1980 1051-EST
From: JONL at MIT-MC (Jon L White)
Subject: STRING coercion
To: GSB at MIT-MC
CC: NIL-I at MIT-MC, INFO-LISPM at MIT-MC, WELG at MIT-MC
CC: fahlman at CMU-10A

The maclisp string package now has STRING accepting a list as
argument, in which case it does something like
  (APPLY 'STRING-APPEND (MAPCAR 'STRING <list-argument>))
In particular, this means that STRING will work as a general
compress-list-of-characters/fixnums-into-string.   Would the 
LISPM be capable of extending the definition of STRING too?
(N.B.: the phrase "something like" means that it is only one
level deep - kludged for speed - thus (STRING '( (65. 66.) 67.))
loses, whereas (STRING '(ABC "def" 71.)) ==> "ABCdefG")
Note also the addition of helpfun functions STRING-EXPLODEN
and STRING-PRIN1, for the maclisp-without-nilaid world.


MOON@MIT-MC 01/03/80 16:19:36 Re: Slight change in next world
To: info-lispm at MIT-AI
In the next Lisp machine system, the variable DEFAULT-ARRAY-AREA
will be gone.  In most cases you can use NIL to mean "allocate
storage in the default area".  Otherwise, use the variable
DEFAULT-CONS-AREA.  (Hopefully there are no user programs that
use this variable, but a warning seems in order.)

Date: 30 DEC 1979 2013-EST
From: RMS at MIT-AI (Richard M. Stallman)
Subject: Axiom of Choice
To: INFO-LISPM at MIT-AI

The Axiom of Choice has been implemented.  To turn it on,
load LISPM2;CHOICE QFASL.  Enabling this axiom will allow
some programs to be greatly simplified, but may make others
impossible, so be warned.

Work on GCH is continuing but don't expect anything
for a few more months.

ALAN@MIT-MC 12/16/79 07:17:57 Re: ##
To: INFO-LISPM at MIT-MC
If I hear no objections I am going to flush ##.
(How could anyone object?)

We have had well over a year to flush out all occurences of ## so
any remaining ones can only be found by pulling out the rug.

(if you don't know what ## does suffice it to say that "##<space><char>"
is the same thing as "#/<char>".)

MOON5@MIT-MC 11/09/79 23:11:49 Re: New system installation
To: INFO-LISPM at MIT-MC
System 20 is now installed on CADR-3.

If you need to use one of the system 19 bands, you will have to
revert the microcode back from 604 to 579.  When done, please remember
to change it back.  There is a plain system 20 and a Macsyma in system 20;
hopefully someone will make a vision system 20 shortly.

Installing new systems on all of these machines takes a lot of time; I
would like to have users take over some of this burden.  Instructions
on how to do it may be found in the file AI: LMDOC; INSTAL NEWSYS.  The
version numbers of the current microcode and current system may be
found at the front of this file.  There is not yet a newer system wanting
to be installed, but if you are interested you could read the file and
see if it makes sense to you.

However, it is easy to break the machine doing this, so if you want to
be helpful but don't totally understand the instructions, please don't
try to figure it out by experimentation, ask me or another Lisp machine
wizard.  Also, these instructions will not work in system 19; it will
appear to work but the system you get will fail to boot. 

MOON@MIT-MC 11/05/79 00:34:38 Re: Garbage collector
To: KDF at MIT-AI
CC: INFO-LISPM at MIT-AI
You can get rid of all typeout by the garbage collector by setting
the variable SI:GC-REPORT-STREAM to NIL.  It was originally intended
that the default value of this be NIL, and only those who were interested
would turn it on.  Anyone with an opinion about what the default should
be, send me mail.

You can also set SI:GC-REPORT-STREAM to the value of TERMINAL-IO evaluated
in a Lisp listener, to make the messages go to that Lisp listener.  Don't
set it to the value of STANDARD-OUTPUT; that won't work because it simply
indirects through the value of TERMINAL-IO in the current environment.

Date: 29 OCT 1979 1049-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Time wrong
To: INFO-LISPM at MIT-AI

If you want your Lisp machine to know the right time, load in the
file LMIO;CHSAUX.  Or wait until 2 AM Tuesday morning, when the bug
will evaporate by itself.

Date: 18 OCT 1979 0615-EDT
From: ALAN at MIT-AI (Alan Bawden)
To: INFO-LISPM at MIT-AI
CC: KMP at MIT-MC

The file AI:LISPM2;LET QFASL contains destructuring LET, LET* and DESETQ.
I have not made them part of the standard world so you have to load
this file if you want them.  If enough people think it is worth it then
we can make them standard.

MILLER@MIT-AI 10/12/79 07:23:52
To: Info-Lispm at MIT-MC
What garbage collection scheme is currently in use?  Are changes
planned?   Thanks, Mark



Date: 11 OCT 1979 0113-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Funny characters
To: INFO-LISPM at MIT-AI

The file server for lisp machines now supports the full character set (formerly
some characters would be lost).  Characters that don't fit in pdp10 ascii are quoted
by preceding them with a rubout; this is somewhat compatible with the XGP.
This means you can use  (lambda), 	 (gamma or "yu-shiang whole fish"),  (integral),
etc.  If you read this message on the 10 you will see how those characters appear
in files on the 10.

MOON@MIT-MC 10/10/79 11:44:42 Re: Garbage collector
To: INFO-LISPM at MIT-MC
I would be interested in feedback from any users who use the garbage
collector regularly.  Does it have bugs in it (does the machine crash
when you use it)?  Is it too slow?  Do you change any parameters or
otherwise tailor it?  I am especially interested in doing some 
performance analysis on a "real-life" situation; contact me if you
are interested in helping me measure its performance on your program.
Right now, I'm not as interested in hearing ideas for new and different
schemes of things; that will come later.

Date: 10 OCT 1979 0452-EDT
From: JERRYB at MIT-AI (Gerald R. Barber)
To: INFO-LISPM at MIT-AI

Com-links are now available for the CADR's.  Both initiator and recipient must
load the file LMIO;COMLNK QFASL then doing:

	(com-link cadrx)

will put you in an ITS style comlink with whoever is at cadrx.  It is a little
rudimentary at the moment as it has no rubout handler etc.  Right now only
two way com-links are supported.

Date: 8 OCT 1979 1037-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Argument names coming out as NIL
To: INFO-LISPM at MIT-AI

In system 20, if you find that c-t-A in the editor, or the arglist
function, is claiming that the arguments to a function are all called
"NIL", that function needs to be recompiled; there was a certain period
when the compiler was generating the wrong thing.  Please send in a bug
report listing any of these that you find, or if it's in your own program,
just recompile it.

Date: 6 OCT 1979 1006-EDT
From: Moon at MIT-AI (David A. Moon)
To: INFO-LISPM at MIT-AI

System 20.0 is tentatively installed on CADR1.  It fixes all (most?)
of the annoying bugs in system 19.  It also includes some improvements
to be documented later.

Date: 2 October 1979 01:41-EDT
From: Gerald R. Barber <JERRYB at MIT-AI>
Subject:  ARPA Demo band
To: INFO-LISPM at MIT-AI

Please don't flush the band labeled "19.6 ARPA Demo".  In view of the coming
world turmoil we would like to preserve a niche of sanity for our
demonstration.
		Thanks,
		Jerry

Date: 15 SEP 1979 0135-EDT
From: RG at MIT-AI (Richard Greenblatt)
To: INFO-LISPM at MIT-AI

  System 19.4 has sequence breaks!  To turn them on, do (SI:SB-ON <mask>),
where <Mask> is a bitwise decoded number that controls which conditions can cause
a sequence break.
   The 1 bit enables the CALL key,
   The 2 bit enables all keyboard keys,
   The 4 bit causes a SB on the receipt of any CHAOSnet packet.

   A sequence break forces a call to the scheduler.  Due to its round robin
nature, the scheduler will examine all other processes before returnning to
the one which was running at the time of the sequence break.

   The CALL key will reset the current process if the selected window is a 
lisp-listener.  Otherwise, it will reset and select the TOP-WINDOW.
  <escape>B causes a break, ie, forces a call to the error handler.
You can do all the usual things, inspect the stack, etc, including
continuing via cntrl-C.
  It seems to work fairly well (ie hasnt dropped dead on me for quite a while).
I recommend (SI:SB-ON 2) unless you are actually having problems of CHAOSnet
connections dropping during long thinks, in which case, 6 might be worth a try.
  A warm boot turns off SBs, so you must turn them on again if desired.

Date: 14 SEP 1979 2114-EDT
From: MILLER at MIT-AI (Mark L. Miller)
Subject:   Lisp Machine Architecture
To: RG at MIT-AI, INFO-LISPM at MIT-AI
CC: GJS at MIT-AI, H at MIT-AI, TK at MIT-AI, DLW at MIT-AI
CC: MILLER at MIT-AI

(a) Is it possible to get some Manuals for Lispm language for distribution
    here (here = TI)?

(b) What documentation, if any, exists for the processor, architecture,
    operating system, whatnot of the Lisp Machine (i.e., implementors
    documents, not just user manuals), and of that, which is public?
    (e.g., does anyone regard the design as proprietary etc.?)  I have
    started to succeed in generating excitement here about Lisp and
    the need to build engines for running it.  Listings of code useful?

(c) Anyone interested in consulting on things like whether it is worth
    having tags, having separate processor to do GC in parallel, what
    things are best done in microcode, etc.?

Regards, Mark

Date: 12 September 1979 23:06-EDT
From: Alan Bawden <ALAN at MIT-AI>
Subject: Control characters in # macro. & RMSs suggestion.
To: INFO-LISPM at MIT-AI
cc: ALAN at MIT-AI, CWH at MIT-MC, NIL at MIT-MC, BUG-LISP at MIT-MC

	If no one objects then I will make #^<char> be the same as
#/<char> for the LispMachine reader.

MOON@MIT-MC 09/11/79 20:09:05 Re: Characters
To: info-lispm at MIT-AI
Any opinions on the following proposal?

The keyboard routines should translate control-lowercase-letter
to control-uppercase-letter so that no program has to deal with
two different representations for each control and meta letter.
An equivalent way of saying the same thing is that the control,
meta, hyper, and super shifts would imply shift lock (caps lock).
This implies that #/a and #/A would read as the same number.

Date: 11 SEP 1979 0608-EDT
From: RG at MIT-AI (Richard Greenblatt)
Sent-by: RG1 at MIT-AI
To: INFO-LISPM at MIT-AI

  Series 19 system is installed on CADR1.  It has a number of changes,
including an initial implementation of sequence-breaks!  However,
sequence breaks are not on by default, and for the time being,
I'm not telling how to turn them on.

Date: 6 September 1979 19:17-EDT
From: Alan Bawden <ALAN at MIT-AI>
Subject:  #= vs. #.
To: NIL at MIT-AI, INFO-LISPM at MIT-AI, CWH at MIT-MC, JONL at MIT-MC

	Well it looks like #= loses. NIL has already used #= so we are
stuck with #. . This will be installed sometime in the near future.

Date: 5 SEP 1979 2031-EDT
From: JONL at MIT-MC (Jon L White)
Subject: Note on #= and #.
To: ALAN at MIT-MC, CWH at MIT-MC
CC: INFO-LISPM at MIT-MC, NIL at MIT-MC

Twas actually from me.


Date: 5 SEP 1979 2027-EDT
From: POW at MIT-MC (Peter O. Wilson)
Subject: #=
To: ALAN at MIT-MC
CC: CWH at MIT-MC, NIL at MIT-MC, INFO-LISPM at MIT-MC

This is already fixed in the NIL syntax, and probably can't be moved
as easily as the other thins which were experimental (infinities).
Why not stick with #.?  Its already done in LIBLSP;SHARPM, which
we ought to adverrtize soon as an "emerging" standard (and hopefully
make autoloadable in maclisp if no one really objects).


Date: 5 SEP 1979 2013-EDT
From: ALAN at MIT-AI (Alan Bawden)
To: INFO-LISPM at MIT-AI, NIL at MIT-AI, CWH at MIT-MC, JONL at MIT-MC


    CWH@MIT-MC 09/05/79 02:54:02
    Have you put #. in yet?  If not, I'll do it as I'd like
    to use it.  A brief announcement may also be in order.

 For those of you who don't know #. was supposed to be read-time evaluation (as opposed
to #, which is load-time evaluation (and is broken)).
 A better character has been suggested: "=" !
#=(+ 23 9) really looks like the right thing to me and if no one objects I will
make it standard.

Date: 3 SEP 1979 0250-EDT
From: Moon at MIT-AI (David A. Moon)
Subject:  Directory editing
To: INFO-LISPM at MIT-AI

The next Lisp machine system released, probably 18.4, will have the c-X D
and m-X Dired commands, similar to those in Emacs.  There are a few additional
hairy features (type ? for help) and of course you can use the mouse to position
the cursor to a particular file.

Date: 31 AUG 1979 2341-EDT
From: Moon at MIT-AI (David A. Moon)
To: INFO-LISPM at MIT-AI

System 18.3 (with microcode 555) is now installed on all Lisp machines.
Please report any problems to BUG-LISPM (using ITS mail or the ^XM command
in Zwei.)

Date: 29 AUG 1979 0332-EDT
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

To load and start spacewar, do (load "lmio1;load swar").

Date: 28 AUG 1979 0043-EDT
From: ALAN at MIT-AI (Alan Bawden)
Subject: New # macro character?
To: INFO-LISPM at MIT-AI
CC: NIL at MIT-AI

	Would anyone object to a new # macro character "N"? #N would do the
analogous thing for NIL (the language) that #M does for MacLisp and #Q does
for the LispMachine. Thus #N FOOBAR would cause FOOBAR to be read in only
for NIL and be ignored in MacLisp and on the LispMachine.

Date: 27 AUG 1979 1018-EDT
From: JONL at MIT-MC (Jon L White)
Subject: LISPM execution times for MACSYMA
To: CWH at MIT-MC, rg at MIT-AI
CC: GJS at MIT-MC, INFO-LISPM at MIT-MC, NIL at MIT-MC

Very Good!  That analysis, about page-out time to make room
for new consing, was most interesting, and looks right.
One more thing, however, I'd sure like to see, is the same
sort of thing done with the GC turned on; that is, I'd like
to know how much the mechanisms of the Baker-GC slow down
the operations.  If your previous analysis is correct (about
the page-out cost), then Baker-GC should be disproportionatly
expensive for MACSYM as compared to, say, WOODS.


Date: 27 AUG 1979 0719-EDT
From: RG at MIT-AI (Richard Greenblatt)
Sent-by: RG0 at MIT-AI
Subject: LISPM Execution times
To: RG at MIT-AI, GJS at MIT-AI, INFO-LISPM at MIT-AI
CC: nil at MIT-MC

  CWH and I timed the examples reported by RJF for VAX and KA-10
on the LISPM.  The results highlight an interesting point.  About
half the real time delay as seen by the user was disk swap delay
swapping stuff out of physical memory to make room for freshly CONSed
data.  (The LISPM creates freshly consed pages directly
in physical core without swaping them in).  To show this, the 
examples were run both "regular" and immediately after doing
a (si:page-out-area working-storage-area).  The page-out-area
updates the disk copy of pages, thus creating a resovoir
of physical pages which can be immediately purged without writing
them out.
  All times reported for the LISPM are net elapsed wall clock time
and as such, include the full time of all disk transfers.  Loops
executing problem 1 100. times and problem 2 10. times were measured.
With the 256K machine immediately after a page-out-area, 
there appeared to be very little swapping going on, judging from the run-bar.

machine (all compilied)   (x+y)^12          (x+y+z)^20
KA-10 (RJF)               .116               1.54
VAX Franz (8/16, RJF)     .20                2.54
128K LISPM                .19-.24            2.37
256K LISPM                .11                1.6-1.8
128K L. after page out    .12                .9-1.1
256K L. after page out    .09                .7

  The most interesting figure is the last one, which
illustrates most clearly the point mentioned earlier.  
Note that this problem will not be significantly changed by arbitrarily
large amounts of physical memory.  However, increasing the
page size (or at least the quanta transferred in a disk op)
would help.
  During the run on the
128K LISPM after a page swap out, there was little or no swapping
for the first half or so of the run, then swapping
started, evidently as the pool of flushable physical pages
was exhausted.  Comparing the times, it appears that
almost all the difference between the 128K and 256K
LISPMs was caused by this effect.  That is, presumably
the only reason the 256K machine was faster in the "regular"
trial was that when a page was selected for swapout, there
was a greater chance of selecting a data page as opposed to a
program page, simply due to the greater number of data pages
present in physical memory.  In this example, the data page
would probably not be needed again, while the program page
probably would be.
  This effect probably also goes some distance toward explaining
the long standing mystery as to why the LISPM appeared to be 2-3 times
KA-10 speed on WOODS, but about equal on MACSYMA.  Computationally,
it really is about 2 times as fast on the MACSYMA example as well, but
that one happens to be CONS intensive.  In the future,
then, one should be aware of whether one is selecting CONS intensive
examples, and make appropriate allowances.
  To summarize, in the past the cost of CONS has been considered to
consist of two terms, the CONS time itself and the GC time eventually
required to reclaim it. (GC time was not considered in any of the
forgoing).  In the case where one is considering elapsed time
and a large virtual memory, there is another cost, namely, 
time taken to swap stuff out of physical memory so as to make room
in which to CONS.  This later cost can be quite significant.
  Being aware of the problem, there are various schemes one
can imagine to help ameliorate it, but that is a subject for
another day.

Date: 25 AUG 1979 2243-EDT
From: MOON at MIT-AI (David A. Moon)
Subject: HIC's message
To: INFO-LISPM at MIT-AI

Continuing from file errors with the error handler does work.  Type control-C
(in system 18.)

Date: 25 AUG 1979 2004-EDT
From: HIC at MIT-AI (Howard I. Cannon)
To: INFO-LISPM at MIT-AI

Continuing from an asynchronous mark on output (namely, directory
or disk full while actually writing the file) seems to work now for both binary
and ascii files.  Unfortunatly, this is very hard to test, and I'd appreciate
people trying to use it and letting me know if they lose.  It has not been
tested for variable byte-size files yet (non-16bit), though it may work (it has
been tested a long time ago...).  In system 18.1, to continue from such an
error return T from FILE-PROCESS-ERROR.  Eventually, proceeding with the error
handler will be made to work.

Date: 25 AUG 1979 1803-EDT
From: cent&moon at MIT-AI
Sent-by: CENT at MIT-AI
Subject: CADR1 console
To: INFO-LISPM at MIT-AI

the cadr1 console (as well as some of the cabling on the machine) has
been updated to the design used on later consoles. this means that the
cadr1 console now has a real wired base and a real power supply instead
of kludges. the connections from the machine to the keyboard and the
mouse remain kludged; they will be updated when we figure out how to
do the connectors the right way.

Date: 23 AUG 1979 0151-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Incompatible changes coming!
To: INFO-LISPM at MIT-AI

Lisp machine system 18 and microcode 555, which must be used together,
contain some incompatible changes.  Most of these probably only affect
system programs, which have been fixed, but they are being announced in
case any users have programs which would be affected.

This system is installed on CADR1 and CADR6.  It will be installed on
all the other machines in a few days, so if you are going to have trouble
with the new system please find out before then.

The function-calling microcode has been extensively revised.  The ^ and EXPT
functions should now work completely.  However, any user programs (hopefully
there are none) that use the macros in LISPM2;SGDEFS (stack-group and pdl
formats) will need to be at least recompiled and possibly revised. 

The way the microcode treats multiple values has been changed as the first
step of making multiple values "work right".  More about this later.   Any
programs that return multiple values should be recompiled; they will still
work in system 18 due to a kludge in the microcode, but they will crash the
system in system 19, because the compiler wasn't really generating the right
code.  Programs that receive multiple values returned by other functions
have no problem.  Use of the MULTIPLE-VALUE-CALL macro, and of crockish code
sequences involving %OPEN-CALL-BLOCK, should no longer be necessary. 

The format of the item-list in a menu has been changed.  Consult the
documentation in the front of the file LISPM2;MENU.  If you have a program
that uses menus and uses other than simple a-lists as item lists, you
will need to change.

The :RUBOUT-HANDLER stream operation has been changed.  A new argument has
been added in front of the existing arguments, which is an alist of options.
Normally you want to supply NIL. 

The RUBOUT-HANDLER-CONTROL-CHARACTER-HOOK has been flushed.  Presumably
no one is using it.

If you need help converting your programs, and if this message isn't
sufficient help, please consult me.  

Date: 23 AUG 1979 0024-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Lower-case parentheses
To: INFO-LISPM at MIT-AI

If you want to experiment with lower-case parentheses, load the file MOON;LCPARN
(lower-case-parentheses t) turns it on, an arg of nil turns it off.  () and []
are interchanged in lower-case parentheses mode.  If there is substantial interest
in this it will probably be installed as a standard option you can turn on.

Note that on the new keyboards to arrive in a month or so the round
parentheses will be both where they are now (upper case) and where
square brackets are now (lower case). 


Date: 20 AUG 1979 1230-EDT
From: AGRE at MIT-AI (Philip E. Agre)
Subject: cadr-2
To: INFO-LISPM at MIT-AI

I would like to make a request of the members of the Lisp Machine users'
community.  Please, do not use cadr-2 unless it is the only available
machine.  My work and several others' requires the use of the color
monitor, which is attached to cadr-2.  I do not like to ask people to
move their work because of the inconvenience to them, especially if
their projects take several minutes to load in, and I would never ask
someone to leave cadr-2 when they are using the color screen or when
there are no other cadr's available, but I also have work to do.
Therefore, I would greatly appreciate everyone doing me this favor.  
Thank you.       - Phil Agre

Date: 19 AUG 1979 2340-EDT
From: BAK at MIT-AI (William A. Kornfeld)
To: INFO-LISPM at MIT-AI

I have a couple of macros that allow you to define functions to take keyed arguments.
For example, a function defined as follows:

(defun-keyed foo (arg1 &keyed arg2 arg3)  ...  )

takes one unkeyed and two keyed arguments.  An invocation of this function might
look like:

(foo '(a b)
     arg3 '(c d)
     arg2 '(e f))

The keyed arguments can go in any order.  It also knows about optional arguments and
in particular gets around the screw of not getting the defaults of optionals arguments
early on the arglist because you wanted to specify a later optional argument.  I have
found keyed arguments most useful in situations where there are many optional arguments
and you only want to specify one or two at a time.

The package introduces no inefficiencies except at macro-expansion time and is
relatively transparent to the user.  It currently does not run under MACLISP, though
this should be fixed soon.  The code is in BAK;DEFKEY QFASL and documentation at the
front of BAK;DEFKEY > .  Comments and suggestions appreciated.

Date: 13 AUG 1979 0050-EDT
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

In the next version, &OPTIONAL (FOO 69 FOOP)
will be allowed in DEFMACROs.


Date: 13 AUG 1979 0008-EDT
From: RMS at MIT-AI (Richard M. Stallman)
To: INFO-LISPM at MIT-AI

In the next version:
*) there will be no default init file.  Anyone who thinks that there
is a use for having one should talk to me about it.
*) (LOAD file pkg T) will give no error if the file does not exist.
*) logging in will read in a fix file, which should be called
LISPM1;Fnn.m > where nn.m is the system version, and should
be present on AI and on MC.  This should make it possible to fix bugs faster.
The fix file for each minor version can start out nonexistent, because
it is assumed that the previous minor version's fix file was loaded in
before this one was dumped.  The fix file is loaded into USER
so any forms in it intended for other packages must have prefixes.


Date: 12 AUG 1979 1244-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: Someone changed ASCII
To: INFO-LISPM at MIT-AI

Will whoever thought he was improving the function ASCII (in LISPM;QFCTNS)
about two days ago please communicate with me?  Users should not be editing
Lisp machine system files, particularly not when they are going to break things.

Date: 12 AUG 1979 1048-EDT
From: Moon at MIT-AI (David A. Moon)
Sent-by: ___033 at MIT-AI
Subject: New system installed
To: INFO-LISPM at MIT-AI

System 17.6, which has been installed on all machines except the ones in 902,
should be relatively free of bugs.  Note that there have been some minor
incompatible changes in the window system; if you have window-oriented code
that doesn't work any more, and you can't figure out how to fix it, consult
RMS or me or MMcM.  The main changes involved blinkers.

If you find it necessary to de-install this system on some machine, be certain
to send mail to bug-lispm explaining what was wrong with it.

This system will be installed in 2 or 3 days on the machines in 902 unless
there are complaints.

Date: 10 AUG 1979 2351-EDT
From: MMCM at MIT-AI (Mike McMahon)
Subject: New Hacks
To: INFO-LISPM at MIT-AI

(CADR:SALVAGE-EDITOR) in MMCM;SALVAG QFASL is like (ZWEI:SAVE-ALL-FILES) but for the
other machine, this should be useful in moments of desperation.
C-T-S in ZWEI in later 17 systems is a pattern-matcher search.

Date: 9 AUG 1979 2001-EDT
From: MOON at MIT-AI (David A. Moon)
Subject: De-installing new system
To: INFO-LISPM at MIT-AI

Someone de-installed the new system (17.1) that was on CADR6, using
set-current-band to revert to an older system.  Whoever did this ought
to have sent some mail to BUG-LISPM explaining what they thought was
broken about the new system.

Date: 8 AUG 1979 0652-EDT
From: MMCM at MIT-AI (Mike McMahon)
To: INFO-LISPM at MIT-AI

In the next world, lisp machine init files will follow the standard convention of
HSNAME;UNAME LISPM, rather than UNAME;.LISPM (INIT).  This should do away with
any need for the (INIT) directory.

Date: 6 AUG 1979 0342-EDT
From: Moon at MIT-AI (David A. Moon)
Subject: System 17 will save compiler messages
To: INFO-LISPM at MIT-AI

Messages printed during compilation, either via QC-FILE or from the editor
(but not via COMPILE) will be saved in an editor buffer named "Compiler Warnings".

The following variables will control this feature:

	COMPILER-WARNINGS-BUFFER
		NIL to turn off the feature (e.g. when debugging the editor)
		otherwise a string which is the name of the buffer to use.
	CONCATENATE-COMPILER-WARNINGS-P
		If NIL (the default), the old contents of the buffer are killed
		each time a compilation is started.  If non-NIL all warnings
		are saved.

Compiling from the editor in 2-window mode, with this buffer in one of the
windows, should do interesting things.  It won't do the most optimal thing.

Date: 3 AUG 1979 1751-EDT
From: MOON at MIT-AI (David A. Moon)
Subject: Prepare now for the future
To: INFO-LISPM at MIT-AI

In the next lisp machine system release, there will be a new reader syntax.
The "#/" syntax will be modified so that if you insert an alpha, beta, or
epsilon character between the # and the / you will get a control, meta,
or control-meta character.  This is useful in command tables for programs
which take single-character commands from the keyboard.

