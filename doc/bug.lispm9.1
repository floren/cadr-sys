Date: 30 January 1982 00:10-EST
From: Andrew L. Ressler <ALR at MIT-ML>
Subject:  Patches
To: BUG-lispm at MIT-AI

Finish Patch in the editor does not cause the patch comment to appear in
print-system-modifications.  Even calling LOAD-PATCHES will not cause the
patch version to show up in the modifications.  I propose the following:

When a patch is started with ADD PATCH, a NIL comment should appear in the
system modifications just like it does in the patch file.  Then when the
patch is finished it should replace the NIL in the comment field with the
actual comment.  This has the wonderful advantage that anyone can tell that
there is a patch in progress as well as the result.

Date: Friday, 29 January 1982, 22:55-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: Make-system bug
To: BUG-LISPM at SCRC-TENEX

In System 78.67, ZMail 38.8, Symbolics 8.15, Tape 6.5, LMFS 21.42, Canon
9.13, microcode 841, on Terrier:

If you do:

	(defsystem foobar
	  (:pathname-default "SCRC:<MOON>")
	  (:module frob ("NO-SUCH-FILE"))
	  (:readfile frob))
	(make-system 'foobar)

it comes back with no error, failing to detect that the filename was misspelled.
This happened to me in system 202 also (in fact it took until today to realize
that the reason it didn't work was a typo in the file name).

The same thing happens if the transformation is :compile-load

Date: 29 January 1982 10:48-EST
From: Kent M. Pitman <KMP at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: RICH at MIT-AI, DCB at MIT-AI

It would be nice if COMPILE-LOAD-INIT queried you about each module and
each dependency that was going to cause it to be recompiled. eg, if i make
an inconsequential change to a macro package that supports a whole system
(let's say I add a comment somewhere or even change a macro that will not
affect existing code but will allow me to be able to write new things
(upward-compatible extension)), then suddenly the whole system has to be
recompiled. It would be nice if the system told me why a module was going to
be recompiled and offered not to bother ... this is not the same as
selective. i still want files that have to be recompiled to get recompiled.
i just want them to not get recompiled if the only reason that they would
be is the dependency. eg,
 Say MACRO is a module which all the other modules in my system depend on.
 Say FOO and BAR comprise module ALPHA and both have newly written sources.
 Say BAZ and GUNK comprise module BETA and only BAZ has a newly written source.
The interaction would presumably look like:
 MACRO has been recompiled.
  The file GUNK has to be recompiled as a result unless the changes to MACRO
  will not affect its compilation. Should I recompile it anyway? (Y, N, or S) <Help>
    Y = Yes, N = No, S = Source compare MACRO < and MACRO > to see changes made.
  Should I recompile it anyway? (Y, N, or S) N
...etc. If you don't think it's appropriate for COMPILE-LOAD-INIT to do
this, then maybe a COMPILE-LOAD-INIT-QUERY or something. But I think something
must be offered to deal with this problem of having to recompile the system
for no good reason ... 

RICH and DCB mentioned the same problem is hitting them. I doubt many users
of COMPILE-LOAD-INIT haven't been hit with this or if they haven't that they
can avoid it forever ... I'd say it's a pretty important issue. The ideas 
above are just one way of tackling it. I don't care if you do that or something
completely different on the low level; I (we) just need the high-level problem
addressed.

-kmp

Date: 29 January 1982 20:20-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Generating new host tables
To: MMcM at SCRC-TENEX, RWK at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

    Date: Friday, 29 January 1982, 13:18-EST
    From: Mike McMahon <MMcM at SCRC-TENEX>
    To: DLA at MIT-AI
    Cc: BUG-LISPM at MIT-AI

	Date: 29 January 1982 01:04-EST
	From: David L. Andre <DLA at MIT-AI>
	SI:RECOMPILE-WORLD always generates a new host table, regardless of
	whether it has to.
    Are you sure you aren't being faked out by not having sys:site; defined?
    That would cause the .lisp file to appear not to exist and therefore to be
    in need of regeneration.
Yes.  I get screwed regardless.

Date: 29 January 1982 19:24-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: COMPILE-LOAD-INIT
To: KMP at MIT-AI
cc: BUG-LISPM at MIT-AI, RICH at MIT-AI, DCB at MIT-AI

This is the same as the ADA and MESA "compilation safety" mechanism
and people get screwed the same way by them.

ADA people sometimes propose having each object file remember exactly
which macros it depended on, and only recompiling if one of them has
changed.  I don't know if any of them have tried to actually do this.

Date: 29 January 1982 18:17-EST
From: Charles Rich <RICH at MIT-AI>
Subject: PACKAGE-DECLARE
To: BUG-LISPM at MIT-AI

In System 78.50, ZMail 38.5, Reasoning Utility Package 1.1, microcode 836, on Lisp Machine Twenty-two:

It is not clear to me why PACKAGE-DECLARE cannot be included in
QFASL files.  The apparent reason is that the macro returns NIL;
but conceptually it is very tempting to include the package declaration
for a system FOO in the defsystem file for FOO which is compiled.
Also, the documentation doesn't quite come right out and say that
this function only works interpreted.

Date: 29 January 1982 14:37-EST
From: Howard Shrobe <HES at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.51, ZMail 38.5, Local-File 32.12, Experimental DAEDALUS 29.5, microcode 843, on Lisp Machine Two:

in zwei if you expunge directory of a directory which is on the file-computer (fc:)
it will barf with an error message that the stream has been called with an expunge mesage
with too many args

Date: Friday, 29 January 1982, 13:18-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
To: DLA at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 29 January 1982 01:04-EST
    From: David L. Andre <DLA at MIT-AI>
    SI:RECOMPILE-WORLD always generates a new host table, regardless of
    whether it has to.
Are you sure you aren't being faked out by not having sys:site; defined?
That would cause the .lisp file to appear not to exist and therefore to be
in need of regeneration.

Date: 29 January 1982 10:54-EST
From: Howard Shrobe <HES at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.52, ZMail 38.5, microcode 849, 60Hz, on Lisp Machine One:

when doing a view directory which is more than one screenful (i.e. it causes more
processing) if you repond to the -more- with anything indicating that you don't want
to see the rest of the directory then the directory stream is left open.

Date: 29 January 1982 02:16-EST
From: Michael Travers <MT at MIT-AI>
To: BUG-LISPM at MIT-AI

AI:LMPAT; is full up.

Date: 29 January 1982 01:04-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

SI:RECOMPILE-WORLD always generates a new host table, regardless of
whether it has to.

Date: 29 January 1982 00:56-EST
From: David L. Andre <DLA at MIT-AI>
Subject: DISK-SAVE after garbage collection.
To: BATALI at MIT-AI, BUG-LISPM at MIT-AI, Moon at SCRC-TENEX
cc: DLA at MIT-AI

I believe your problem is fixed in microcode 849, although I'm not
totally sure.

Date: 29 January 1982 00:34-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Updating who-line time
To: BUG-LISPM at MIT-AI, RWG at MIT-AI

The bug is fixed and the time updates properly after a long
without-interrupts now.

Date: Thursday, 28 January 1982  16:00-EST
From: MOON at SCRC-TENEX
To:   David L. Andre <DLA at MIT-AI>
Cc:   BUG-LISPM at SCRC-TENEX
Subject: patch-system hacking

I had a theory that there could be a "patch-status" network server that
could be used to find out cheaply and robustly whether there were patches
to be loaded, or if the system status had changed.  When booted the machine
would try to connect to this server on the sys host, but wouldn't barf if
it failed.  Another theory is to associate this with login somehow.  The
main goal is (a) to avoid making it impossible to boot the machine if the
file server or the network is down, (b) to avoid making booting
substantially slower, (c) to avoid having one file connection to the sys
host and another to the machine you logged in to permanently sitting around.
I never really liked any of these schemes, but maybe something can be done
along these lines.

Date: 28 January 1982 12:47-EST
From: David L. Andre <DLA at MIT-AI>
Subject: patch-system hacking
To: GSB at MIT-MC
cc: DLA at MIT-AI, DLA at MIT-MC, BUG-LISPM at MIT-MC

    GSB@MIT-MC 01/28/82 11:50:27 Re: patch-system hacking
    To: DLA at MIT-MC
    CC: (BUG LISPM) at MIT-MC
    I've had per-minor-version-number system-statuses for some time now
    in the kludge i maintain for Maclisp.  They are essentially just that;
    each of the entries in the patch-directory can have a field which is
    the new system-status for that minor version.
I like this, because it doesn't break programs which rely on the version
number being the CAR of every patch entry.

    About the only other thing i found i just had to add was a protocol for
    changing the system status out from under a dump.  Essentially, the
    dumped maclisp job has to call a function which looks at the patch directory
    and re-reads the system status for its exact version number.  This
    of course is hidden away in stuff which does jcl parsing and init file
    loading;  but it is fairly important if, say, it is discovered that
    something is broken after it has been installed.  (Things like load-patches
    automatically do this update since they are accessing the patch-directory.)
I don't think it's reasonable yet to have the system load-patches for
you.  What are other people's thoughts on this?

    p.s.  there should be a function to nicely print the out-of-core stuff,
    somewhat like print-system-modifications.  I called it print-system-history;
    in ml:lsb1;ppatch
At least, a useful extension to LOAD-PATCHES would make you able to view
all the unloaded patches (Perhaps by answering V to the question),
before loading them.


GSB@MIT-MC 01/28/82 11:50:27 Re: patch-system hacking
To: DLA at MIT-MC
CC: (BUG LISPM) at MIT-MC
I've had per-minor-version-number system-statuses for some time now
in the kludge i maintain for Maclisp.  They are essentially just that;
each of the entries in the patch-directory can have a field which is
the new system-status for that minor version.

About the only other thing i found i just had to add was a protocol for
changing the system status out from under a dump.  Essentially, the
dumped maclisp job has to call a function which looks at the patch directory
and re-reads the system status for its exact version number.  This
of course is hidden away in stuff which does jcl parsing and init file
loading;  but it is fairly important if, say, it is discovered that
something is broken after it has been installed.  (Things like load-patches
automatically do this update since they are accessing the patch-directory.)

p.s.  there should be a function to nicely print the out-of-core stuff,
somewhat like print-system-modifications.  I called it print-system-history;
in ml:lsb1;ppatch


kwc@MIT-ML 01/28/82 11:19:21
To: (BUG LISPM) at MIT-ML
could mm kill or save buffers leave the mouse cursor on DO IT, so that I would only
have to press a mouse button in the normal case

Date: 28 January 1982 02:59-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

A long time ago I implemented PACKAGE-DECLARE to operate
at macro expansion time.  Since this is the only function
I ever implemented to work that way, I must have had some
reason in mind, but I can't remember what it is.

Does anyone have any idea what good this could do?

Since people seem to be complaining about it,
if nobody can think of a reason to keep it this way,
I propose to change it to be an ordinary FEXPR.

Or perhaps it should expand into (EVAL-WHEN (COMPILE EVAL LOAD)
around a call to a fexpr.  Then it would be possible to have
a PACKAGE-DECLARE actually followed by code in that package
(necessarily put into that package by package prefixes),
and things will work properly on readfiling, fasloading or
compiling that file in a world in which the package is not yet defined.

The comments in front of the definition of PACKAGE-DECLARE
are no help; they seem to be false.

Date: Thursday, 28 January 1982, 02:11-EST
From: David A. Moon <Moon at SCRC-TENEX>
To: Daniel L. Weinreb <dlw at SCRC-TENEX>
Cc: bug-lispm at SCRC-TENEX
In-reply-to: The message of 27 Jan 82 09:52-EST from Daniel L. Weinreb <dlw at SCRC-TENEX>

    Date: Wednesday, 27 January 1982, 09:52-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    To: bug-lispm at SCRC-TENEX

    Disk errors should try harder to fix themselves.  It is very annoying to
    leave something running on a Lisp Machine and come back only to find it
    saying that it got a disk error and that you should type Control-C to
    retry it.  Why does it need for me to type Control-C?  (It really
    reminds me of the WAITS system message "Please type ^C".) This is
    especially a problem for Lisp Machines being used as file computers.
You don't say, but I assume you're talking about the "offline" error
on Pointer.  That error supposedly means that someone manually has to
turn the disk back on, and then type control-C.  I don't know why the
disk is turning itself back on automatically.  (Nor do I know why it
is going off-line in the first place.)  The errors that the software
thinks are recoverable don't ask for human intervention.

Date: 27 January 1982 18:18-EST
From: David L. Andre <DLA at MIT-AI>
To: BATALI at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 27 January 1982 17:00-EST
    From: John Batali <Batali at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In ZWEI, meta-x view directory of a local file directory gets
    a zmacs-window error.
This is because :DIRECTORY-LIST-STREAM which was incorrectly installed.
It is fixed in the source (I hope).

Date: 27 January 1982 17:00-EST
From: John Batali <Batali at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.52, ZMail 38.5, Local-File 32.12, Experimental DAEDALUS 29.5, microcode 843, Whole Schip, on Lisp Machine Two:

In ZWEI, meta-x view directory of a local file directory gets
a zmacs-window error.  

Date: Wednesday, 27 January 1982, 14:43-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: DAM at MIT-AI, BUG-LISPM at MIT-AI

I have been keeping a file of people's commentaries on DEFSYSTEM.
Several people have complained that it is hard to use, and I am planning
to start working on a proposal for how to fix it, someday.  I don't
actually agree with you that the entire idea of having a system
declaration should be replaced with a program; the little program would
be almost identical in most cases with lots of other such little
programs.  However, providing more clear control over what is going on
does seem to be called for, and there may be a lot of ideas in your mail
that could be successfully incorperated into an updated DEFSYSTEM.  Thanks
very much for your thoughtful comments.

Date: 27 January 1982 14:27-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Compiler Warnings
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    RMS@MIT-AI 01/26/82 00:12:16 Re: Compiler Warnings
    I would like to see a hybrid scheme in which the warnings history list
    is the primary data structure but the Compiler Warnings buffer is also
    available.  It is easy to keep the buffer up to date by remembering a
    copy of the warnings history list used to update it last time,
    finding the differences between the two lists, and updating the buffer
    according to those differences.
This is almost exactly what I proposed.  The only difference, as I see
it, is that the Compiler Warnings buffer doesn't exist by default in my
scheme, and also I have a simpler idea on updating it (set up again when
changed).

    Another desirable feature would be that warnings about functions used
    but not defined could be stuck retroactively onto the warnings lists
    for the calling functions.  This would be the right place for them to
    appear to interact properly with Edit Compiler Warnings.
This is interesting.  In the case of misspelled functions, that would be
a help.  In the case of functions you haven't written yet, it would
serve no purpose.  I agree that the functions called but not defined
should be stored with the errors for the calling functions.  I also
think that PRINT-COMPILER-WARNINGS should continue to print a summary of
these at the end.

Date: 27 January 1982 12:54-EST
From: David A. McAllester <DAM at MIT-AI>
To: BUG-LISPM at MIT-AI

This is yet another message about defsystem. I also found the system
difficult to learn. Of course it is desirable to have some facility
for ensuring system consistency and for incorporating patches.
I however question the wisdom of defining what is essentially
a new restrictive declarative language with obscure procedural
interpretations. This message proposes an alternative approach in which the
user is presented with a set of simple primitive functions for
querying the state of files and the LISP environment. These functions
could be readily used to construct utilities for ensuring the consistency
of systems. The advantage of this approach is that the language in which
system definitions are written is simply LISP with all of its advantages
and flexibility. The following is a detailed presentation of the proposal.

Suppose one was provided with the following four functions:

qfasl-date (filename)

	This function gives the creation date of the qfasl file.

source-date (filename)

	This function gives the creation date of the source file.

loaded-date (filename)

	This function gives the creation date of file from which the
definitions in the current environment were derived (the creation date
of the last loaded version).  If no version has been loaded this
function returns nil.

qc-loaded? (filename)

	This predicate is t if the last loaded version was a qfasl
file.

One could then define the following functions

(defun load-latest (filename)
  (if (or (null (loaded-date filename))
	  (> (source-date filename)
	     (loaded-date filename)))
      (if (> (source-date filename)
	     (qfasl-date filename))
	  (load-source filename)
	  (load-qfasl filename))))

	This function checks to see if the file has not been loaded or
if the loaded version is out of date and in either case loads a current
version of the file. 

(defun compile&load (file compile-requirements)
  (cond ((or (> (source-date file)
		(qfasl-date file))
	     (exists compile-requirements
		     '(lambda (req) (> (source-date req) (qc-file-date file)))))
	 (mapc 'load-latest compile-requirements)
	 (qf-file-load file))
	((or (null (loaded-date file))
	     (not (qc-loaded? file))
	     (not (= (loaded-date file) (qfasl-date file))))
	 (load-qfasl filename))))

	This function checks to see if the compiled version is out of
date (either because of changes to the source or changes to the
compile dependencies) and if so it first loads the latest version of
the compile dependencies and then compiles and loads the file. If the
qfasl file is current the function checks to make sure that this
version of the qfasl file has been loaded and if not loads it.

A "system definition" for a system I have been working on could now be written
as follows:

(defun make-rup ()
  (let ((*directory-defaults* "ai:rup;") ;or some such thing
	(macros '(utgtal utgmac utgmpc utils)))
    (mapcar '(lambda (file) (compile&load file macros))
	    macros)
    (compile&load "brque" macros)
    (compile&load "brtms" macros)
    (compile&load "breq" macros)
    (compile&load "brrup1" (list* "brtms" "breq" macros))
    (compile&load "brntcr" macros)
    (compile&load "brpnot" (list* "brntcr" macros))))

Load dependencies are handled by the execution order.

Note that the macros must be loaded before they are compiled and that this is
naturally handled by the load-latest function. I have talked to many people who
have had to use the obscure :skip transformation in order to achieve a similar
result.

Of course I have not included any options as arguments to make-rup but
this could be arranged. A patches facility could be built by using a
second filename convention "patches" and the following primitives:

patch-from (file)

	This function returns a date such that files created after
that date can be patched via the patch version of file.

patch-to (file)

	This function returns a the date that the patch file was
created. Loading a patch file to an environment created after
(patch-from file) brings the system up to (patch-to file) such that
(loaded-date file) thereafter is the same as (patch-to file).

The function load-current and load&compile could be changed to check
for current patches (or given a switch to do so).

This is of course not a complete specification for system defining utilities.
However I think that such a utility could be constructed in the spirit of
LISP, specifically by providing a set of simple primitives and a few higher
level functions and then letting users write code in a powerful wide spectrum
language that they already know (LISP). I have no intention of working on
this facility and competeing with existing supported software However I
hope that this message will be taken into account if defsystem is ever
rewritte

David McAllester

Date: 27 January 1982 11:33-EST
From: George J. Carrette <GJC at MIT-MC>
Subject:  DEFSUBST and &REST
To: kmp at MIT-AI
cc: BUG-LISPM at MIT-AI

Just extend the subst expander code like you suggest to handle &REST.
When you do tell me about it so I can re-snarf the code for the NIL version.


Date: Wednesday, 27 January 1982, 11:08-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: bil at MIT-MC
Cc: bug-lispm at MIT-AI

Whatever are you doing with keyboard macros that recurses more than 16
levels?  Keyboard macros were based on the corresponding feature in
SUDS, in which it is fairly rare to ever define a macro with more than
four levels of nesting or so.

Date: Wednesday, 27 January 1982, 11:08-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: bil at MIT-MC
Cc: bug-lispm at MIT-AI

Whatever are you doing with keyboard macros that recurses more than 16
levels?  Keyboard macros were based on the corresponding feature in
SUDS, in which it is fairly rare to ever define a macro with more than
four levels of nesting or so.

Date: Wednesday, 27 January 1982, 11:05-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: SETF
To: kmp at MIT-AI, BUG-LISPM at MIT-AI

    Date: 27 January 1982 03:48-EST
    From: Kent M. Pitman <kmp at MIT-AI>

    Is there some good reason why SETF takes only two args? It would be very
    helpful for certain macro applications to make SETF act like SETQ, taking
    arbitrarily many forms in its body. The restriction to two args seems totally
    arbitrary. 

How helpful could it possibly be?  Just have your macro make a bunch of
SETFs and put a PROGN around them.  Do you want RPLACA to also take any
even number of arguments and do lots of RPLACAs?

Date: Wednesday, 27 January 1982, 09:52-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: bug-lispm at SCRC-TENEX

Disk errors should try harder to fix themselves.  It is very annoying to
leave something running on a Lisp Machine and come back only to find it
saying that it got a disk error and that you should type Control-C to
retry it.  Why does it need for me to type Control-C?  (It really
reminds me of the WAITS system message "Please type ^C".) This is
especially a problem for Lisp Machines being used as file computers.

BIL@MIT-MC 01/27/82 05:10:38
To: (BUG LISPM) at MIT-AI
In System 78.51, ZMail 38.5, microcode 840, Mathlab, on Lisp Machine Fifteen:

Recursive keyboard macros seem to have a stack size of only 16. The error
message is "The subscript, 16, was beyond the length, 16, in AS-1 ..."
while in ZWEI:MACRO-PUSH-LEVEL. Surely 16 is a ridiculous limit for recursion.

Date: 27 January 1982 04:07-EST
From: Kent M. Pitman <kmp at MIT-AI>
Subject: DEFSUBST and &REST
To: BUG-LISPM at MIT-AI

In System 78.51, ...

Consider:

  (DEFSUBST SYMBOLCONC (&REST X)
    (INTERN (LEXPR-FUNCALL #'STRING-APPEND X)))

Calls to SYMBOLCONC run fine interpreted and die when you try 
to macroexpand them. I don't seen any reason that

  (SYMBOLCONC X Y Z)

couldn't macroexpand to

  (INTERN (LEXPR-FUNCALL #'STRING-APPEND (LIST X Y Z))).

or

  (LET ((G0001 (LIST X Y Z))) ;must be a real Gensym or nested defsubst calls lose
    (INTERN (LEXPR-FUNCALL #'STRING-APPEND G0001)))

It would be a bit CONS-inefficient (unless LEXPR-FUNCALL optimized this
case, of course, which it probably should but that's another issue...),
but semantically no less correct than the other things DEFSUBST does.

In any case, if you aren't going to go to this trouble, then &REST should
not be valid in DEFSUBST arglists and should be diagnosed at DEFSUBST time
rather than sitting around as time bombs waiting to lose.

-kmp

Date: 27 January 1982 03:48-EST
From: Kent M. Pitman <kmp at MIT-AI>
Subject: SETF
To: BUG-LISPM at MIT-AI

Is there some good reason why SETF takes only two args? It would be very
helpful for certain macro applications to make SETF act like SETQ, taking
arbitrarily many forms in its body. The restriction to two args seems totally
arbitrary. 

Date:  26 January 1982 23:16 est
From:  Barry Margolin at MIT-Multics
Subject:  QSEND addresses
Sender:  Margolin.PDO at MIT-Multics
To:  bug-lispm at MIT-AI
cc:  cwh at MIT-AI

When forming the address for a reply to a qsend, the server is turning a
source of "Margolin.PDO@MIT-Multics-11" into a destination of
"Margolin@MIT-Multics-11," i.e. it is dropping stuff after the period.
This is not the same, and if this is done with a TWENEX userid the
result is even less useful (where the part before the period is the name
of the group).
				Barry Margolin

Date: 26 January 1982 22:51-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: DCP at MIT-MC
cc: BUG-LISPM at MIT-MC, BUG-GMSGS at MIT-MC, NEVES at MIT-MC

    Date: 26 January 1982 12:03-EST
    From: David C. Plummer <DCP at MIT-MC>
    To: BUG-LISPM at MIT-MC, BUG-GMSGS at MIT-MC
    cc: NEVES at MIT-MC

    Monday night and Tuesday morning I noticed several CHAOS GMSGS
    servers with an IOC error.  
    Is the LispM closing the connection early, or is there a bug in
    GMSGS? GMSGS was recently assembled (two days ago), so was a bug  put in?  

I dont think the IOC lossage is a new problem.
The reassembled GMSGS has a fix (mentioned on BUG-GMSGS) which is not
relavent to this bug.



Date: Tuesday, 26 January 1982, 21:21-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: m-X Replace and word abbrev mode
To: Gregor J. Kiczales <Gregor at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 26 Jan 82 20:24-EST from Gregor J. Kiczales <Gregor at MIT-AI>

    Date: 26 January 1982 20:24-EST
    From: Gregor J. Kiczales <Gregor at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In ZWEI in System 78.48, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

    In Word Abbrev Mode, doing a m-X Replace to replace all
    occurrences of one character with another. The replacement
    happens correctley on the abbreviations, but not on their
    expansions.

I cannot judge what you mean.  Can you be more explicit, perhaps
giving an example?  I don't see how abbreviations and expansions
relate to m-X Replace at all.

BTW, what is the " VAX" for in your partition comment?

Date: 26 January 1982 20:27-EST
From: Michael H. Kass <Kass at MIT-AI>
To: BUG-LISPM at MIT-AI

     Suppose I'm using lots of functions in two or more
packages and I don't want to remember or specify which is where.  Is there
a way to give a lispm a list of packages to search when it doesn't
find what it's looking for in the current package?  I'd rather not be
notified in the interpreter when I'm unambiguously using things that aren't in my
current package.

     A similar capability exists in unix that allows you to
specify a list of directories to search for commands.  If the command
isn't found in the first directory, it searches the second etc.  

Date: 26 January 1982 20:24-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In ZWEI in System 78.48, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

In Word Abbrev Mode, doing a m-X Replace to replace all
occurrences of one character with another. The replacement
happens correctley on the abbreviations, but not on their
expansions.


Date: Tuesday, 26 January 1982, 18:07-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Format of PATCH directories
To: DLA at MIT-AI, BUG-LISPM at MIT-AI

Sounds like a complete win.  Be careful not to create any intermediate
states of the world in which it is impossible to load patches because
you don't have a recent enough version of the patch system or anything
like that.  You might possibly want to extend that format slightly to
allow a textual message to accompany the system status keyword;
specifically, you might want a textual message explaining why the system
is :BROKEN.  Maybe this is not worth the trouble but you might want to
consider doing it.

Date: 26 January 1982 17:31-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Packages and QC-FILE
To: KDF at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 25 January 1982 04:50-EST
    From: Ken Forbus <KDF at MIT-AI>
    To: BUG-LISPM at MIT-AI

	    When compiling a file that has no package specified within it, 
    the package the file is "compiled to" is a package set by an EDITOR BUFFER.
    This seems pretty random; for instance, using the window error handler gets
    your code into a buffer with the EH package.  Not knowing about this 
    slightly arcane convention leads to much confusion.  I suggest that
    the package either be an argument to QC-FILE, or at least that it take 
    its default from the package you are running in.

QC-FILE currently has both the features you suggested, however, if the
package is declared on the generic pathname of the file, it will use
that rather than the package you are running in.  It is a bug that the
editor puts an arbitrary package there.  Does anyone have any ideas as
to the consequenses of removing this?

Date: 26 January 1982 17:05-EST
From: David L. Andre <DLA at MIT-AI>
Subject: LIST* optimization.
To: kmp at MIT-MC
cc: DLA at MIT-AI, BUG-LISPM at MIT-MC

    kmp@MIT-MC 01/23/82 03:53:11
    To: (BUG LISPM) at MIT-MC
    Could the one-arg case of LIST* be made to open-code?
Fixed in the source.


Date: 26 January 1982 17:13-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Disk save problem
To: RPK at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 23 January 1982 16:55-EST
    From: Robert P. Krajewski <RpK at MIT-AI>
    I was going to disk-save a band (because it did not have the EH
    ucode table), but decided not to confirm it.  It then started to
    load in the ucode symbols, and then barfed on a wrong-type-argument
    error.
Fixed in the source.

Date: 26 January 1982 16:53-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Format of PATCH directories
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

There is a problem with status in systems which will require changing
the format of the patch directory once again.  I think the change will
be upward compatible.  Basically, if I have a system FOO, when I build
it, it should be :EXPERIMENTAL.  As a rule, until a few patches have
been made, it is still in a state which is unfit to be released.  So
after I've made those few patches, I change the status to :RELEASED.

Now Joe LUser comes along and does (MAKE-SYSTEM 'FOO).  He notices that
the system is released, so he doesn't load any patches.  In fact, the
system is not released until a few minor versions later, and he probably
will get screwed.

A typical new patch directory will look as follows:

((:EXPERIMENTAL "NED")
 (1 "Frob fixed." "FRED")
 (2 "More brain damage." "TED")
 (:RELEASED "ED")
 (3 "Minor fix to mumble." "JED")
 )

Thus the system is not marked :RELEASED until the required patches have
been fixed.  Similarly, it will now be possible to show which patches
were the cause of the system becoming :BROKEN, and LOAD-PATCHES might be
able to warn the user:  "If you load this patch, the system status will
change to :BROKEN.  There are as of yet no patches to fix this
brokenness.  Are you sure you want to continue?".

Date: 26 January 1982 12:03-EST
From: David C. Plummer <DCP at MIT-MC>
To: BUG-LISPM at MIT-MC, BUG-GMSGS at MIT-MC
cc: NEVES at MIT-MC

Monday night and Tuesday morning I noticed several CHAOS GMSGS
servers with an IOC error.  The requesting host was a LispMachine
(today it was LM20; I can't remember who it was last night).  It
got the IOC at CHDUN+5.  the flow of the program near here is:

		SYSCAL FINISH
	CHDUN+4:Send and EOF packet
		 .LOSE
		SYSCAL FINISH

When it tried to send the EOF, the connection was in the LOS
state.  I read in the LOS packet and the message from the LispM
was "No such index exists".  

Is the LispM closing the connection early, or is there a bug in
GMSGS?  GMSGS was recently assembled (two days ago), so was a bug
put in?  There is a seemingly incompatible change at location
LODOL2.  I don't know if this was intended to be a bug fix, or if
it introduced the recent bug with LispMs.


Date: 26 January 1982 12:03-EST
From: David C. Plummer <DCP at MIT-MC>
To: BUG-LISPM at MIT-MC, BUG-GMSGS at MIT-MC
cc: NEVES at MIT-MC

Monday night and Tuesday morning I noticed several CHAOS GMSGS
servers with an IOC error.  The requesting host was a LispMachine
(today it was LM20; I can't remember who it was last night).  It
got the IOC at CHDUN+5.  the flow of the program near here is:

		SYSCAL FINISH
	CHDUN+4:Send and EOF packet
		 .LOSE
		SYSCAL FINISH

When it tried to send the EOF, the connection was in the LOS
state.  I read in the LOS packet and the message from the LispM
was "No such index exists".  

Is the LispM closing the connection early, or is there a bug in
GMSGS?  GMSGS was recently assembled (two days ago), so was a bug
put in?  There is a seemingly incompatible change at location
LODOL2.  I don't know if this was intended to be a bug fix, or if
it introduced the recent bug with LispMs.


Date: 26 January 1982 10:01-EST
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: Temporary CADR1 "fix"
To: INFO-LISPM at MIT-AI

If you are troubled by CADR1's Return key (it typically sends
several Returns), try loading AI:ECC;*CRFIX.  It has the keyboard
process ignore Return, and translate Control-M to Return.

Date: Monday, 25 January 1982, 17:16-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: :SELECT-METHOD function spec.
To: DLA at MIT-AI, BUG-LISPM at MIT-AI

The new function spec sounds like a good idea.  It has all the same
advantages that getting rid of flavor method symbols had.  I'd prefer to
see a new kind of spec (:select-method) rather than see :method
extended.  Flavors and select-methods really are two different things;
if I were debugging and ran into a spec, I'd like it to be apparent
which kind of thing it is a spec for.  The idea of function specs is to
have one kind of spec for each new place that functions get stored;
these are two different places and deserve two different specs.  There
is no reason to start overloading :method with more than one meaning
and introduce possible ambiguity problems.  Having a separate one seems
simpler and clearer to me than combining them.

Date: Monday, 25 January 1982, 08:59-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Compiler Warnings
To: DLA at MIT-AI, BUG-LISPM at MIT-AI

I basically like this idea although I am hardly sure I can see all of
the consequences that might ensue.  One little thing: the warnings of
the form "the undefined function FOO was called by BAR and BAZ", which
appear at the end of a compilation context, have to go someplace.

Another little nice thing about this idea is that if the editor is
broken (or not yet loaded or otherwise not all there), compilations can
proceed anyway.  This is a consequence of the decoupling of the editor
and compiler that you mentioned.

Date: Tuesday, 26 January 1982, 01:07-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: Timing funninesses
To: rwg at MIT-MC
Cc: bug-lispm at SCRC-TENEX

These are all a consequence of the 24-bit fixnum size, which means that
a positive fixnum only holds 8 seconds worth of microseconds.  There are
two time functions involved, one of which truncates the high end of the
32-bit microsecond clock (thus getting long-term accuracy at the cost of
having to be updated more often than every 4 seconds), and the other
truncates the low end of the 32-bit microsecond clock (thus being able
to go for an hour before it wraps around, but not having long-term
accuracy because it does an inexact division to convert to 60ths
of a second.)  The first of these does the left side of the wholine
and the second does the right side of the wholine.  The next Lisp machine
will of course do this better.

RWG@MIT-MC 01/25/82 21:36:33 Re: catatonic timekeeping
To: (BUG LISPM) at MIT-MC
Is it a bug that the date&time in the lower left fall behind when a
(without-interrupts ...) takes > 1 sec?  I didn't think so, but then
I was rndomly asking macsyma to compute fib(1000000)^2 mod 17 the
HARD way, and the lispm commenced multiplications of many seconds
duration.  At one point, the bottom line was
01/25/82 15:59:00  . . .  Console idle 10 minutes
and the only sign of life was mouse-trackage.  Then a process switch
finally occurred, and the bottom line became
01/25/82 15:59:04  . . .  Console idle 15 minutes .
How can the idle-timer know what the date&timer doesn't?

Date: 25 January 1982 22:48-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.51, ZMail 38.5, Local-File 32.12, Experimental DAEDALUS 29.5, Experimental Tester 19.11, Experimental Programmer's Apprentice (Aux) 15.0, Experimental Programmer's Apprentice 16.0, microcode 843, on Lisp Machine Eight:

string-pluralize should string-coerce its argument.

Date: Monday, 25 January 1982, 22:13-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Scramble my Brains
To: bug-lispm at SCRC-TENEX

Sorry, I really didn't mean it!  I meant to say LMFS, not LMFILE.
Of course, I expect the same would probably happen with LMFILE.

Date: 25 January 1982 22:02-EST
From: Kent M. Pitman <kmp at MIT-AI>
Subject: Adding new names for exiting packages
To: BUG-LISPM at MIT-AI

It would be useful to have a function which would add an additional 
refname to a package after the package has been created. I have written
such a function myself, but since it has to call accessors which are
really internal to the system, it is more rightly maintained by the
system implementors. The function as I wrote it is PKG-ADD-REFNAME and 
lives in AI: KMP; PKGADD > if you want to pick it up and look at it.
-kmp

Date: Monday, 25 January 1982, 20:12-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Bizzareness of the month awards again
To: BUG-LISPM at SCRC-TENEX

In System 78.63, ZMail 38.5, Symbolics 8.15, Tape 6.5, LMFS 21.39, Canon 9.12, microcode 852, on Retriever:

If you accidentally get a RETURN inserted into your filename minibuffer
this gets passed to the pathname parser.  The pathname parser for at
least LMFILE gladly sends it along.  The FILE protocol prevents this
from being noticed as part of the pathname, probably just appearing
as a null options list.

Date: 25 January 1982 16:27-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Bands and microcode
To: BUG-LISPM at MIT-AI


Since microcode versions change frequently, sometimes
I have a saved band which wants to run with a different
microcode than is current. At the least, there should be
something like DISK-RESTORE that changes the microcode version.
As it is, I have to use SET-CURRENT-MICROLOAD which can
wedge the machine if I happen to mistype a number.


Date: 25 January 1982 14:47-EST
From: David L. Andre <DLA at MIT-AI>
Subject: :SELECT-METHOD function spec.
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

I would like to propose a new function spec:

(:SELECT-METHOD fcn-spec method)

Fcn-spec must contain a select method.  This refers to the <method>
method for the select method (Whew!).  It would be used internally by
DEFSELECT rather than consing up new symbols.  Any objections?

A possible extension to the :METHOD function spec would make it so that
it would be upward compatible with :SELECT-METHOD.  For example, suppose
that FOO's definition is a select method.  Then (:METHOD FOO :BAR) would
try (:SELECT-METHOD FOO :BAR) if FOO isn't a flavor or a class.  Note
that if the second element of the :METHOD function spec is not a symbol,
there is no ambiguity.  I want to hear some opinions before I do
anything in this direction.


Date: Monday, 25 January 1982, 14:47-EST
From: David Chapman <Zvona at MIT-AI>
To: MMcM at MIT-AI
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 10 Dec 81 13:32-EST from Mike McMahon <MMcM>

    Date: 10 December 1981 13:32-EST
    From: Mike McMahon <MMcM>
    To:   ZVONA
    cc:   BUG-LISPM

	Date: 9 December 1981 20:14-EST
	From: David Chapman <Zvona at MIT-AI>
	In System 78.5, ZMail 38.0, Experimental Tester 17.0, microcode 836, on Lisp Machine Twenty-two:
	si:query-about-redefinition's error should be continuable.
    It is.  Always has been.
OK, but it wants you to return a value.  It ask again when you
continue.

Date: 25 January 1982 10:30-EST
From: John Batali <Batali at MIT-AI>
Subject: Saved band that won't restore
To: MOON at SCRC-TENEX
cc: BUG-LISPM at MIT-AI

  Date: Wednesday, 20 January 1982  17:10-EST
  From: MOON at SCRC-TENEX
  Subject: Saved band that won't restore

   Did you call DISK-SAVE from the initial Lisp listener or from some other process?
   (Perhaps from the Daedalus window?)  Until the next system, the latter does not
   work and often causes symptoms similar to those you describe.

This is the only response I've seen to our problem.  The disk was saved from
the initial LISP listener when I hit the bug.  (We certainly are aware of all
KNOWN disk-save problems.)

Let me emphasize the pain that is involved with this bug.  We typically are trying
to save several hours (usually at least four) of crunching.   This is time during
which the machine and at least one human really can't do much else.  When the chip
is finished we save the band so that we can then run the display, checking, and
mask specification programs on the saved version of the chip.

Is there any interest in looking at the saved band and really fixing this?
Or does the SCHEME chip project die of inadequate hardware support?

     --John

Date: 25 January 1982 08:44-EST
From: Alias for KMP <TURNIP at MIT-AI>
Subject: &body in non-DEFMACRO forms?
To: BUG-LISPM at MIT-AI

In System 78.50, ... Lisp Machine Twenty-two:

(defun f (&body x) x)
(f 'x) => x
(f 'x 'y) ;too many arguments

(defun g (&quote &rest x) x)
(g a) => a
(g a b) ;b unbound

(defun h (&quote x) x)
(h a) => a
(h a b) ;too many arguments (note how this is different kind of error than with g)

I don't understand what the &body should do here. I stumbled across this
behavior accidentally by incorrectly thinking &body meant the same as &rest
outside of DEFMACRO. It seems to do next to nothing -- I would guess it was
ignored altogether except that in the second example, it seems to have thwart
number-of-args-checking in an odd way. The compiler doesn't warn that this
is a bad construct, which is either a bug in the compiler or means I should be
pointed at documentation somewhere on what &body does... If it's a bug, I'd 
say it's prone to cause more than its share of confusion because of its 
resemblance to &rest. An intelligent error message one place or another would 
be helpful... Thanks.
-kmp

Date: 25 January 1982 08:33-EST
From: Alias for KMP <TURNIP at MIT-AI>
Subject: Having text files be part of the system.
To: BUG-LISPM at MIT-AI

I would like a way to associate a text (documentation) file (or several)
with a system. That would allow me to do Tags operations over all my files 
keeping doc files up to date with the sources. Often I change the names of
functions in my system and the doc files would otherwise get out of date with
the source files. Something like

  (:DOCUMENTATION module-name doc-file-name)

would be about right, I suspect.
-kmp

Date: 25 January 1982 08:29-EST
From: Alias for KMP <TURNIP at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.50, ... 

Answering "no" to a DISK-SAVE query about "Do you really want to ..." does not
exit gracefully. It gives an error -- NIL bad arg to > while in DISK-SAVE.

Date: 25 January 1982 04:50-EST
From: Ken Forbus <KDF at MIT-AI>
To: BUG-LISPM at MIT-AI

	When compiling a file that has no package specified within it, 
the package the file is "compiled to" is a package set by an EDITOR BUFFER.
This seems pretty random; for instance, using the window error handler gets
your code into a buffer with the EH package.  Not knowing about this 
slightly arcane convention leads to much confusion.  I suggest that
the package either be an argument to QC-FILE, or at least that it take 
its default from the package you are running in.
		Ken Forbus

Date: Monday, 25 January 1982  04:21-EST
From: MOON at SCRC-TENEX
To:   Laura Bagnall <LAURA at MIT-MC>
Cc:   BUG-lispm at SCRC-TENEX
Subject: Packages and shadowing

    Date: 23 January 1982 11:37-EST
    From: Laura Bagnall <LAURA at MIT-MC>
    Subject:  Packages and shadowing
    To: Moon at SCRC-TENEX
    cc: BUG-lispm at SCRC-TENEX

    But it DIDN'T query me when I redefined a global function.  My file
    redefined ARRAY-DIMENSIONS and when I loaded the file into my new
    package SCHEME without shadowing it, it redefined the global function
    without querying me....
Hmm, it's supposed to.  However, I noticed that nothing prevents the
variable INHIBIT-FDEFINE-WARNINGS from being screwed over by a warm boot.
This will be fixed in the next system; in the meantime you might want
to make sure this is NIL before loading something that might redefine
things.  It might even be that there is a dumped-out, distributed band
with this variable accidentally set to T in it for some reason.

Date: 25 January 1982 01:37-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Compiler Warnings
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

The current implementation of the Compiler Warnings buffer has problems.
Here are my main complaints:

	1.  It noticeably slows the compiler, and pages a lot.

	2.  Its contents are usually things which are not Compiler
	Warnings, rather, things like "Loading DLA; FOO QFASL
	into package USER".

	3.  Recently, it has been unreliable.  Often my warnings
	do not even get there.

	4.  I don't like the [Page]s all over the place; I can't print
	the buffer without using tons of paper.

Here is a proposal for a clean way to do this: The compiler maintains
its own strucuture which remembers compiler warnings on a variable, say
COMPILER-WARNINGS-HISTORY.  Its value is a list, whose elements are
(generic-pathname fcn-warning-1 fcn-warning-2 ...).  For functions which
don't seem to come from a file, the generic-pathname is NIL.  Each
fcn-warning is of the form (fcn-spec exp reason), where exp and reason
are the arguments to BARF.  fcn-specs which have no errors are not on
this list.  Note that only warnings which come through BARF will appear
in this.

COMPILER-WARNINGS-HISTORY is maintained by BARF, which puts all errors
on it itself.  Also, when a file is compiled, the entry for that file is
removed from COMPILER-WARNINGS-HISTORY, and similarly, when a function
is compiled (by itself) the entry for that function is removed from the
history.  The history is set to NIL at BEFORE-COLD.

The Compiler Warnings buffer would be flushed by default.  A new
function (PRINT-COMPILER-WARNINGS &optional for-file stream) would
provide a simple interface for viewing compiler warnings.  Meta-X
Compiler Warnings would setup a compiler warnings buffer and go to it,
and Meta-X Edit Compiler Warnings would setup the buffer and behave as
at present, but might more reliably use COMPILER-WARNINGS-HISTORY to do
its dirtywork.

This scheme would increase modularity by leaving the job of maintaining
compiler warnings to the compiler, and solve problems 1 through 3 above.
Since Edit Compiler Warnings will have to be gone over anyway, I don't
see how fixing number 4 will have too many problems.

Comments and opinions?

Date: Sunday, 24 January 1982  23:23-EST
From: MOON at SCRC-TENEX
To:   bug-lispm at SCRC-TENEX

Date: Sunday, 24 January 1982  19:28-EST
From: MOON at SCRC-TENEX
To:   Alias for WGD <BIL at MIT-AI>
Cc:   BUG-LISPM at SCRC-TENEX

    Date: 24 January 1982 03:32-EST
    From: Alias for WGD <BIL at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.49, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

    (%make-pointer dtp-array-pointer (%p-contents-offset instance 0))
Use %p-contents-as-locative not %p-contents, unless you like having
your machine crash randomly.  Using %p-contents will put an illegal
data type on the stack.  The subprimitives assume you know what you're
doing so they don't check for things like this.  But if a sequence
break happens to occur with that garbage on the stack, the machine will
crash.
    	
    gives the flavor object in the instance but

    (si:%instance-ref instance 0) 

    gives "Foo, a hacker has scren up somewhere ..."
This is a bug in the error handler which I will fix.


Date: 24 January 1982 23:19-EST
From: David L. Andre <DLA at MIT-AI>
To: HIC at SCRC-TENEX
cc: RMS at MIT-AI, BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: Sunday, 24 January 1982  21:14-EST
    From: HIC at SCRC-TENEX
	Date: Sunday, 24 January 1982  19:58-EST
	From: Richard M. Stallman <rms at MIT-AI>

	When there are FILE servers active on the FC,
	Peek P mode bombs out by passing the list (:NAME "File server" :PRIORITY 5)
	to (:METHOD SHEET :STRING-OUT).
    This is due to the installation of code at MIT that requires a patch
    to the process system that wasn't made.
This "installation of code" is only on the filecomputer.  I'll fix one
or the other when I get around to it.

Date: Sunday, 24 January 1982  21:14-EST
From: HIC at SCRC-TENEX
To:   Richard M. Stallman <rms at MIT-AI>
Cc:   BUG-LISPM at MIT-AI

    Date: Sunday, 24 January 1982  19:58-EST
    From: Richard M. Stallman <rms at MIT-AI>
    Sender: ___071 at MIT-AI
    To:   BUG-LISPM at MIT-AI

    When there are FILE servers active on the FC,
    Peek P mode bombs out by passing the list (:NAME "File server" :PRIORITY 5)
    to (:METHOD SHEET :STRING-OUT).
This is due to the installation of code at MIT that requires a patch
to the process system that wasn't made.

Date: 24 January 1982 20:11-EST
From: Andrew L. Ressler <ALR at MIT-ML>
To: BUG-LISPM at MIT-AI

    Date: 24 January 1982 01:32-EST
    From: Kent M. Pitman <KMP at MIT-AI>
    To:   BUG-LISPM at MIT-AI

The following is also another reason why the various file systems should
write their output to a temporary file which will still be there even if it
doesn't get closed properly.
    When building a system, files get compiled and the error messages go to
    a buffer. I think there should be a provision for them to go to a file
    instead/additionally. The reason is that if I boot to a fresh band, do a
    make-system (which compiles some files) and my cadr wedges after having 
    compiled some of the files but not all of them or having compiled all of them
    but not having dumped, i lose all the useful error messages the compiler
    has given me because they are stuck in a buffer that goes away when I have
    to cold boot out. -kmp


Date: 24 January 1982 19:58-EST
From: Richard M. Stallman <rms at MIT-AI>
Sender: ___071 at MIT-AI
To: BUG-LISPM at MIT-AI

When there are FILE servers active on the FC,
Peek P mode bombs out by passing the list (:NAME "File server" :PRIORITY 5)
to (:METHOD SHEET :STRING-OUT).

Date: Sunday, 24 January 1982  19:50-EST
From: MOON at SCRC-TENEX
to:   RMS at MIT-AI
cc:   bug-lispm at SCRC-TENEX
Subject: No tag for sys:command-level

    Date: 22 January 1982 20:22-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.44, ZMail 38.5, microcode 848, 60Hz, on Lisp Machine One:

    I tried to get out of WORM with Abort.

    It got an error no tag for si:command-level,
    in KBD-INTERCEPT-CHARACTER, called from a funny locative,
    which was at the top of the stack....
This is fixed in the source.

Date: Sunday, 24 January 1982  19:22-EST
From: MOON at SCRC-TENEX
To:   Kent M. Pitman <KMP at MIT-AI>
Cc:   BUG-LISPM at SCRC-TENEX

    Date: 24 January 1982 11:35-EST
    From: Kent M. Pitman <KMP at MIT-AI>
    Sender: KBE at MIT-AI
    To: BUG-LISPM at MIT-AI

    In System 78.50, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

    In a breakpoint, + does not get set at the correct time....
This is fixed in the source.  I also fixed the corresponding bug
in the error handler's command/read/eval/print loop.

Date: 24 January 1982 16:43-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, microcode 843, on Lisp Machine Seven:

In zwei, with the minibuffer exposed (getting the name of a file
to find). If a fileserver (MC) sends a filserver going down
message you get a minibuffer pop-up-notification window (type
any character to get rif of this notification etc.). When you
type a character to get rid of the notification, the
notification goes away, but the main buffer ends up being
selected instead of the minibuffer.

Date: 24 January 1982 15:19-EST
From: Michael Travers <MT at MIT-AI>
Subject: Edit Window Attributes
To: MT at MIT-AI, BUG-LISPM at MIT-AI, dlw at SCRC-TENEX

    Date: Friday, 22 January 1982, 10:42-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    Subject: Edit Window Attributes
    To: MT at MIT-AI, BUG-LISPM at MIT-AI

    That you cannot change fonts except to those fonts already in the font
    map is really a deficiency in Choose Variable Values.  There is no
    really good way to let you input a font map (although there are some
    rather poor ways).  Do you have any ideas about how to change that CVV
    window so that you could do what you want to do, within the limitations
    of CVV?

Well, I really don't want to even think about the font map in most
cases, I just want to change the current font.  Maybe the right thing to
do is change the default font map to have NIL in unused slots, and the
:set-current-font message to try to use one of these slots if the font
isn't already in the map.  Then a single funcall would suffice to change
to an arbitrary font, which isn't the best user interface in the world,
but better than the present situation.

Date: 24 January 1982 12:00-EST
From: Knowledge-Based Editor <KBE at MIT-AI>
Subject: RUN-IN-MACLISP-SWITCH vs OPEN-CODE-MAP-SWITCH
To: BUG-LISPM at MIT-AI

In System 78.50, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

When OPEN-CODE-MAP-SWITCH is T and RUN-IN-MACLISP-SWITCH is T, all MAP things
seem to get a diagnostic about PROG tags (in this case, T) not being supported
in Maclisp. They also get a message about ((COMPILER:MAP-RESULT)), initialization
in a PROG not being supported either. Presumably, if the thing which does the
expansion would put an (INHIBIT-STYLE-WARNINGS ...) around the (PROG T ...) and
the (RETURN-FROM T ...) if there is one, these message would not appear. They sure
had me scared for a while tho' trying to figure out what they were about... I thought
for a while it was a problem I had caused in my macro package somewhere.

Oddly, this problem does not occur when Control-Greek-E (in ZWEI) or the COMPILE 
function are used. Only when M-X Compile Buffer (in ZWEI) or QC-FILE is used do
they appear. That made the problem doubly difficult to track down because my simple
test cases didn't have the problem when I was compiling them a function at a time.
It seems to me that it is a bug that the diagnostics given for the two are not
consistent.

-kmp

Date: 24 January 1982 11:35-EST
From: Kent M. Pitman <KMP at MIT-AI>
Sender: KBE at MIT-AI
To: BUG-LISPM at MIT-AI

In System 78.50, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

In a breakpoint in ZWEI, + does not get set at the correct time. If an error occurs
during the evaluation of an expression, after leaving the error handler, + does not have 
the value of the offending expression. In the normal system read-eval-print loop it does.
I would prefer that it did. -kmp

Date: 24 January 1982 05:14-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Packages and shadowing
To: BUG-lispm at SCRC-TENEX, LAURA at MIT-MC

The feature of warning about redefining a function in another package
is turned off for GLOBAL.  There is a feature whereby a package can
specify which symbols it wants to redefine in its superior package,
but nobody wanted to put the list of all system functions and
variables into the definition of SI and COMPILER, etc., so the warning
feature was turned off for symbols in GLOBAL

Perhaps the right thing to do is restrict the blanket exemption for
redefining symbols in GLOBAL so that it only applies if the current
package is a subpackage of SYSTEM.

Date: 24 January 1982 04:32-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Returning only one value
To: KMP at MIT-AI
cc: BUG-LISPM at MIT-AI

I'm not sure that the PROG1 examples are wrong to optimize,
since nobody is really so sure about whether PROG1 "ought" to pass
back multiple values.  The right way to say you want only one value to
use VALUES.  It was certainly a bug that this didn't work.  It is
fixed in the source now (P2VALUES, in QCP2).

Date: 24 January 1982 03:32-EST
From: Alias for WGD <BIL at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.49, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

(%make-pointer dtp-array-pointer (%p-contents-offset instance 0))
	
gives the flavor object in the instance but

(si:%instance-ref instance 0) 

gives "Foo, a hacker has scren up somewhere ..."

Date: 24 January 1982 03:21-EST
From: Kent M. Pitman <KMP at MIT-AI>
Sender: KBE at MIT-AI
Subject: Undesirable compiler optimizations
To: BUG-LISPM at MIT-AI

In System 78.49, ... microcode 836, on Lisp Machine Twenty-two:

(DEFUN TEST  (X) (INTERN X))
(DEFUN TEST0 (X) (PROG1 (INTERN X)))
(DEFUN TEST1 (X) (PROG1 (INTERN X) NIL))
(DEFUN TEST2 (X) (VALUES (INTERN X)))

All of the above compile to the same code. TEST does not do what I wanted
interpreted or compiled. TEST0, TEST1, and TEST2 all do the right thing
interpreted. TEST0 gives a warning that PROG1 has only one arg; both it
and TEST1 optimize out the PROG1 allowing all three values from INTERN to
fall through. This may or may not be a reasonable optimization. I think it
makes the predictability of number of return values very poor. Certainly
the last case, TEST2, I would have expected could only return one value,
but it is also optimized away and the three values from INTERN are allowed
to fall through. There should be some special form that allows one to really
block out the other return values from a function; probably the VALUES 
optimization above should be removed; saying explicitly (VALUES (INTERN X))
instead of just (INTERN X) seems to me a clear indication that I want only
one value back from the function... 
-kmp

Date: Sunday, 24 January 1982, 02:51-EST
From: Mike McMahon <MMCM at SCRC-TENEX>
To: bug-lispm at SCRC-TENEX

Whoever changed :DAEMON-WITH-OVERRIDE to need :BASE-FLAVOR-[FIRST/LAST]
didn't find all of the old uses with NIL.

Date: 24 January 1982 01:32-EST
From: Kent M. Pitman <KMP at MIT-AI>
To: BUG-LISPM at MIT-AI

When building a system, files get compiled and the error messages go to
a buffer. I think there should be a provision for them to go to a file
instead/additionally. The reason is that if I boot to a fresh band, do a
make-system (which compiles some files) and my cadr wedges after having 
compiled some of the files but not all of them or having compiled all of them
but not having dumped, i lose all the useful error messages the compiler
has given me because they are stuck in a buffer that goes away when I have
to cold boot out. -kmp

Date: 23 January 1982 16:55-EST
From: Robert P. Krajewski <RpK at MIT-AI>
Subject: Disk save problem
To: BUG-LISPM at MIT-AI

In System 78.48, ZMail 38.5, microcode 836, 60.45Hz, on Lisp Machine Nine:

I was going to disk-save a band (because it did not have the EH ucode table), but decided not
to confirm it.  It then started to load in the ucode symbols, and then barfed on a
wrong-type-argument error.

Date: 23 January 1982 15:02-EST
From: Jonathan Dieting tfaT <TFAT at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.42, ZMail 38.5, Local-File 32.5, Experimental DAEDALUS 29.1, microcode 843, on Lisp Machine Two:

Sorry I don't know the correct forum to address this question to, so
I aimed it here:

I want to use this machine's local T300 for file storage, but I want a semi-automated
backup feature. Are there any facilities for doing remote file backup ?  I am willing
to run a backup program locally myself, but would like an automated server to eventually
guarantee the stuff gets spooled to tape.  Am I dreaming ?


Date: 23 January 1982 11:37-EST
From: Laura Bagnall <LAURA at MIT-MC>
Subject:  Packages and shadowing
To: Moon at SCRC-TENEX
cc: BUG-lispm at SCRC-TENEX

But it DIDN'T query me when I redefined a global function.  My file
redefined ARRAY-DIMENSIONS and when I loaded the file into my new
package SCHEME without shadowing it, it redefined the global function
without querying me.  ARRAY-DIMENSIONS is a very low-level function and
I was not able to recover without rebooting.  When I included 
(shadow array-dimensions) in my PACKAGE-DECLARE the problem went away.
I am sure that the redefined function was put into the global package
because when I INSPECTED global:array-dimensions it had my file-name
listed as the source.

kmp@MIT-MC 01/23/82 03:53:11
To: (BUG LISPM) at MIT-MC
Could the one-arg case of LIST* be made to open-code? This would allow macros
which care about efficiency to still do `(LIST* ,@x) where it might be that
x is a one-length list. Right now, to get this optimization I have to write
macros with code in them like this:

  (cond ((null (cdr x)) `(... ,(car x)))
	(t              `(... (list* ,@x))))

where I would like to just have

  `(... (list* ,@x))

and let the compiler worry about optimizing the trivial case.
-kmp


Date: 23 January 1982 03:51-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

At the moment, the usual procedures for assembling the ucode
do not work at AI because HIC defined a new data type in QCOM
and hasn't yet put the matching changes into UCADR.
It caused some assembly errors.  I figured out that the right
QCOM to use now is version 489.

I am not terribly mad at HIC for this, since to me this sort
of thing is inevitable and just has to be accepted.  But I
would like you all to imagine the vituperation I would have
received if I had done this.

Date: Friday, 22 January 1982, 22:10-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: Packages and shadowing
To: Laura at MIT-MC
Cc: BUG-lispm at SCRC-TENEX
In-reply-to: The message of 22 Jan 82 18:02-EST from Laura at MIT-MC

The (mis)feature that it complained about defining a function in the
global package was removed since the manual was published.  It will
query you if you are RE-defining a function, because the function is
defined in two different files.  You can type N to proceed without
redefining the function.  But if you are defining a function that
happens to be global, it will just let you go ahead and do it, since it
can't break anything.  So just going ahead and loading your file should
not break the machine.

There probably isn't a really good way to find out which globals you have
defined.  I can suggest the following function (I suggest you compile it
before running it):

	(defun find-functions-in-file (file)
	   (setq file (funcall (fs:parse-pathname file) ':generic-pathname))
	   (loop for sym being the interned-symbols in 'global
		 unless (eq sym nil)
		   when (eq (si:get-source-file-name sym 'defun) file)
		    collect sym))

This uses only things in the manual except for get-source-file-name
which didn't exist when the manual was written.

Date: 22 January 1982 20:39-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 848, 60Hz, on Lisp Machine One:

I ran DCROCK and typed Abort.

It brought back the hacks menu but left the crock on the screen.
Then I moved the mouse out of the menu and it went away,
and the dcrock started running again.

That's a nice feature but I don't think this is the best way
to invoke it.  Partially because when I clicked on the
lisp listener again I got an error inside the window system.
(This doesn't happen every time I try it, though).

Date: 22 January 1982 20:22-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 848, 60Hz, on Lisp Machine One:

I tried to get out of WORM with Abort.

It got an error no tag for si:command-level,
in KBD-INTERCEPT-CHARACTER, called from a funny locative,
which was at the top of the stack.

I can't find any way to make that Lisp listener function again.




ABACUS gets confused if any character other than +, - or a digit is typed.
Rubbing it out does not unconfuse it.  It also does not say how
to end a number.



Live bounce leaves its display on the screen when it is done.




Escher and Birds should say how to get the next display to happen.

Laura@MIT-MC 01/22/82 18:02:41
To: (BUG LISPM) at MIT-AI
In System 78.34, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

I am having trouble with name conflicts.  So, you say, put it in it's own package.
That I have done.  The trouble is that packages don't seem to work as advertised
and I wish they would.  I have this very large file that happens to have some
functions with the same name as functions in the GLOBAL package.  When I
specifically say 

(package-declare foo global 1000
	()
	(shadow global-function-name))

the global-function-name is correctly shadowed.  However, I don't happen to know
which names in my file are already found in the GLOBAL package, so I can't
specifically shadow them until I find them.  The manual claims "If foo attempts to
redefine a function such as car which is present in the global package but neither 
shadowed nor externed, confirmation from the user will requested".  However,
confirmation was NOT requested.  As a result, the only method I have discovering
whether I have redefined a global function, when I really wanted to have my own
definition of that function, is to load the file and wait for the machine to barf.
Any suggestions?

Thanks, Laura

Laura@MIT-MC 01/22/82 18:02:41
To: (BUG LISPM) at MIT-AI
In System 78.34, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

I am having trouble with name conflicts.  So, you say, put it in it's own package.
That I have done.  The trouble is that packages don't seem to work as advertised
and I wish they would.  I have this very large file that happens to have some
functions with the same name as functions in the GLOBAL package.  When I
specifically say 

(package-declare foo global 1000
	()
	(shadow global-function-name))

the global-function-name is correctly shadowed.  However, I don't happen to know
which names in my file are already found in the GLOBAL package, so I can't
specifically shadow them until I find them.  The manual claims "If foo attempts to
redefine a function such as car which is present in the global package but neither 
shadowed nor externed, confirmation from the user will requested".  However,
confirmation was NOT requested.  As a result, the only method I have discovering
whether I have redefined a global function, when I really wanted to have my own
definition of that function, is to load the file and wait for the machine to barf.
Any suggestions?

Thanks, Laura

Date: 22 January 1982 17:42-EST
From: Charles Rich <RICH at MIT-AI>
Subject: DEFSYSTEM
To: BUG-LISPM at MIT-AI

Another suggestion for a basic facility which would
greatly increase the user programmability:

How about adding a psuedo simple transformation :IF
with the syntax (:IF condition (transf) (transf)).
Typically the condition would test a special variable
set by a keyword.  This would provide a very general
method of conditionalizing the construction of systems based on
switches.  I tried to construct this behavior two ways
but finally concluded it has to be installed as a builtin
feature.  First I tried to do it as a defsystem-macro
which would be called as follows (with the appropriate
extra stuff to define :IF and a local variable for the
switch and a keyword to set it, etc.)

  (DEFSYSTEM ...
      (:IF *SWITCH* (:MODULE FOO "foo1") (:MODULE FOO "foo2"))
      (:FASLOAD FOO))

but this lost because the condition was evaluated at
the time the defsystem was DEFINED instead of when MAKE-SYSTEM
was called.

Then I thought of trying to make :FASLOAD-IF a simple transformation
so I could say:

	(:FASLOAD-IF *SWITCH FOO1 FOO2)

but that lost too because the syntax for simple transformations
is fixed by the parser. 

I really think this would be a good idea.   --Chuck.

Date: 22 January 1982 15:04-EST
From: Carl Richard Feynman <CARLF at MIT-AI>
Subject: sudden halt
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 848, 60Hz, on Lisp Machine One:

At 14:55, while I was typing to a ZMAIL reply buffer, doing nothing out 
of the ordinary, everything stopped. The clock did not move, the
cursors did not blink, etc. I could only get a response by
warm-booting. It seems to be OK now. I warm booted out of a Chaos 
background process, according to the blurb that appeared when it
recovered.

				-- Carl

Date: 22 January 1982 15:03-EST
From: Carl Richard Feynman <CARLF at MIT-AI>
Subject: sudden halt
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 848, 60Hz, on Lisp Machine One:

At 14:55, while I was typing to a ZMAIL reply buffer, doing nothing out 
of the ordinary, everything stopped. The clock did not move, the
cursors did not blink, etc. I could only get a response by
warm-booting. It seems to be OK now. I warm booted out of a Chaos 
background process, according to the blurb that appeared when it
recovered.

				-- Carl

Date: 22 January 1982 14:34-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Lisp mode by default.
To: NEVES at MIT-AI
cc: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 21 January 1982 15:09-EST
    From: David M. Neves <NEVES at MIT-AI>
    To: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI

    In zwei in System 78.34, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

    I was reading in ai:lmdoc;bug lispm into the editor and after
    56% of it was read in I got the following error:

    >> error: The argument function-spec was NIL, while in
    SI:function-spec-get <- Zwei:sectionize-buffer <-
    Zwei:sectionize-buffer

    It happened a couple of times.

I have always been skeptical of the wisdom of having the editor come up
in lisp mode by default in files which don't have either a "LISP" type
or a -*-Mode: Lisp-*-.  These problems will always arise as long as
this is the case.

Date: 22 JAN 1982 0931-PST
From: DEKLEER at PARC-MAXC
To:   BUG-lispm at MIT-AI

In ETHER 24.6, System 78.44, microcode 841, on Xerox Lisp Machine One:

     From: Daniel L. Weinreb <dlw at SCRC-TENEX>
     Subject: m-L in the error handler
     To: MOON at MIT-MC, DEKLEER at PARC-MAXC
     Cc: BUG-lispm at MIT-AI
     
     Johan's problem happens when you have a large frame in a small window,
     such that all of the arguments and locals do not fit into the window.
     Try making a medium-sized window, typing foo, and M-L'ing the *EVAL
     frame and you can make the problem happen.  Of course, it does
     go into the usual **MORE** break, so it doesn't really wrap around
     before you can read it.  (Unless Johan is talking about some other
     bug that I don't know about.)

I have **MORE** processing turned off, however, I still think it
shouldn't print more than a screenfull.  In the case in point the
interaction-pane is about half the screen, although I frequently change
its size and maybe the bug is that the error handler somehow gets the
previous size of the pane (it was about 3/4 of the screen in the
previous configuration and I entered the error-handler many times then).

Here is the make-window if it helps.

(tv:make-window  'ELEMENT-FRAME
		     ':save-bits t
		     ':panes `((element element-pane :blinker-p nil :label nil)
			       (pointer pane :label nil :more-p nil)
			       (interaction-pane pane :label nil :more-p nil)
			       (graphics1 graphics-pane :label nil :blinker-p nil :more-p nil)
			       (graphics2 graphics-pane :label nil :blinker-p nil :more-p nil)
			       (menu tv:command-menu-pane
				     :item-list ,*qual-commands*))
		     ':constraints '((init . ((interaction-pane menu)
					      ((menu 3 :lines))
					      ((interaction-pane :even))))
				     (main . ((element pointer interaction-pane menu)
;					      ((menu :ask :pane-size)) **doesnt work.
					      ((menu 3 :lines))
					      ((pointer 1 :lines))
					      ((element :eval *element-height*))
					      ((interaction-pane :even))))
				     (circuit-graph .
					((element pointer graphics1 interaction-pane menu)
					 ((menu 3 :lines))
					 ((pointer 1 :lines))
					 ((element :eval *element-height*))
					 ((graphics1 :eval
					   (fix (* .75 tv:**constraint-remaining-height**))))
					 ((interaction-pane :even)))))
			    ':selected-pane 'interaction-pane)
-------

Date: 22 January 1982 12:11-EST
From: George J. Carrette <GJC at MIT-MC>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 19 January 1982 20:50-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    I would really like to get some responses to my message
    about error recovery from unbalanced parens.

I got a better suggestion. Instead of having huge source files,
use an ISAM file, keyed by DEFUN name, one DEFUN per record.
[Any operating system with reasonable support for COBOL has
 an efficient ISAM implementation.]
The DECLARATIVE (e.g. MACRO) environment is scanned for first,
and you never have to consider aborting the compilation of more
than one DEFUN at a time. The question never comes up.
You might get into this with your filesystem.



Date: Friday, 22 January 1982, 10:49-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: m-L in the error handler
To: MOON at MIT-MC, DEKLEER at PARC-MAXC
Cc: BUG-lispm at MIT-AI

Johan's problem happens when you have a large frame in a small window,
such that all of the arguments and locals do not fit into the window.
Try making a medium-sized window, typing foo, and M-L'ing the *EVAL
frame and you can make the problem happen.  Of course, it does
go into the usual **MORE** break, so it doesn't really wrap around
before you can read it.  (Unless Johan is talking about some other
bug that I don't know about.)

Date: Friday, 22 January 1982, 10:42-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: Edit Window Attributes
To: MT at MIT-AI, BUG-LISPM at MIT-AI

That you cannot change fonts except to those fonts already in the font
map is really a deficiency in Choose Variable Values.  There is no
really good way to let you input a font map (although there are some
rather poor ways).  Do you have any ideas about how to change that CVV
window so that you could do what you want to do, within the limitations
of CVV?

Date: 22 January 1982 10:33-EST
From: Charles Rich <RICH at MIT-AI>
Subject: DEFSYSTEM
To: BUG-LISPM at MIT-AI
cc: DCB at MIT-AI, DAM at MIT-AI

In System 78.42, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

Gentlemen -
  I have recently started using DEFSYSTEM in a fairly
sophisticated way and would like to summarize some thoughts and
suggestions.  My first general comment is that I have mixed
feelings about this utility.  I had a very difficult time
learning how to use it, which for an experienced user such as
myself should raise a warning flag.  I am not sure how much of
this difficulty is a result of the inherent complexity of the
application and how much is due to the poor design of the
utility.  I think there are definitely components of both.  I
think the basic idea of having an external declarative data
structure which expresses dependencies between files is correct.
We have clearly gotten past the point where we can just put
conditionalized top-level forms in files to make the right
things happen at the right time, as we used to in Maclisp --
there are just too many variations in how a large system can
be incrementally modified.
  Now for some specifics:

(1) An important distinction between complex tranformations
[defined by (defmacro (... si:defsystem-macro)) ] and simple
transformations [defined by si:define-simple-transformations]
is not made clear in the documentation, namely that complex
transformations cannot be used as dependencies.  I discovered
this by trying to use :DO-COMPONENTS as a dependency
for compilation of a module of the current system.  By looking
at the source code I found SI:DO-COMPONENTS-INTERNAL was
the corresponding simple transformation.

(2) The documentation of :DO-COMPONENTS could be improved.  The
manual actually says :DO-COMPONENTS is a simple transformation,
which is wrong.  Also, the documentation for :DO-COMPONENTS
just implies that this is a place to hang dependencies for the
components.  It didn't occur to me until I was told that putting
this special transformation in would cause the components to be
done right then rather than as the last transformation by
default.

(3) :COMPILE-LOAD-INIT is a real win for getting the world
recompiled when you change your macros.  However, there is
a problem when you change something in the macro file
which doesn't imply the world needs recompilation (e.g.
a comment or adding a new macro.)  Right now the only way
to hack this is to clobber the file date of the macro
qfasl file backward to before any of the dependent modules.
I suggest adding a keyword to MAKE-SYSTEM called ':TOUCH
(DCB told me UNIX has a similar feature of MAKE) which
sets a flag which controls a conditional in the definition of the 
the :COMPILE transformation:  when the flag is set, the
:COMPILE transformation only resets the file date of the qfasl,
rather than actually calling QC-FILE.  Then you could, for
example, do (MAKE-SYSTEM 'FOO ':COMPILE ':TOUCH) which would
be quite fast and more logical then back-setting the filedate
of the macro file.

(4) Once we are taking all the (EVAL-WHEN (LOAD COMPILE) (LOAD "foo macros"))
type stuff out of source files and putting it in a centralized
defsystem structure, I think it would make sense to take out
other such toplevel forms which rather than loading files, call certain
environment initialization functions.  I really like the idea
of having only source code in source files (and some
DEFVARs and DEFCONST initializations).  How about defining a
simple psuedo-transformation called :EVAL which takes
a list of forms to evaluate.  I succeeded in defining :EVAL
as a complex transformation, but then I couldn't use it in
the dependencies list, and the user defined code for defining
simple transformations really insists that they take module
specs as arguments.

  Well, that's all for now.  Thanks for your audience.  One
last question:  what are your plans for Defsystem?  Is it
going to stick around in its present form?  Are you amenable
to adding features as above?  How high up on the list of priorities
is it?
				-Chuck.

Date: Friday, 22 January 1982, 01:30-EST
From: David A. Moon <Moon at SCRC-TENEX>
To: BIL at MIT-MC
Cc: BUG-lispm at SCRC-TENEX
In-reply-to: The message of 21 Jan 82 18:11-EST from BIL at MIT-MC

    From: BIL@MIT-MC
    Date: 01/21/82 18:11:59

    BIL@MIT-MC 01/21/82 18:11:59
    To: (BUG LISPM) at MIT-AI
    In System 78.44, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

    (apropos 'stream 'zwei) and wait for a *more* and then type break.
    At this point:

    () => GLOBAL:NIL

    Most other symbols, e.g. T, package etc. get trapped upon evaluation.

This is not a bug.  If you break in the middle of a program that has special
variables bound (in this case PACKAGE), you should expect to be in the middle
of that program, not at top level.  It is a bug that the who-line didn't
display something in the package field, to tell you that the package
was different than what it had been; I guess NIL must mean something special
to the who-line routine.

Date: Thursday, 21 January 1982, 23:50-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-lispm at MIT-AI

In System 78.48, ZMail 38.5, Experimental Tester 18.0, microcode 836, " VAX", on Lisp Machine Twenty:

format ~c does the wrong thing on named chars.  Ex:

(format "~c" #\space) => ``c- ''.

Date: Thursday, 21 January 1982, 23:04-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.48, ZMail 38.5, Experimental Tester 18.0, microcode 836, " VAX", on Lisp Machine Twenty:

(defstruct (special ...))
(defstruct (function ...))

complain about cross-file redefinition.  I think this was fixed
once before, maybe it came back.

Date: 21 January 1982 20:44-EST
From: Michael Travers <MT at MIT-AI>
Subject: Detecting mismatched parens better
To: RMS at MIT-AI, ALAN at MIT-MC
cc: BUG-LISPM at MIT-AI

How about using sectionization to recover from such errors?

Date: 21 January 1982 20:31-EST
From: Michael Travers <MT at MIT-AI>
Subject: Edit Window Attributes
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 836, on Lisp Machine Nineteen:

I'd like to be able to set the current font to be any arbitrary font
from this menu.  To my knowledge there is not yet a convienient way to
change the font map, so the change current font line is not very
useful as it stands.

Date: 21 Jan 1982 1311-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: bug-lispm at SCRC-TENEX
cc: DLA at SCRC-TENEX

Another manifestation of the recent DEFAULT-PATHNAME bugs is that
MERGE-PATHNAME-DEFAULTS of a pathname with a NIL name will
not replace the NIL with something else.
-------

BIL@MIT-MC 01/21/82 18:11:59
To: (BUG LISPM) at MIT-AI
In System 78.44, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

(apropos 'stream 'zwei) and wait for a *more* and then type break.
At this point:

() => GLOBAL:NIL

Most other symbols, e.g. T, package etc. get trapped upon evaluation.


Date: 21 January 1982 17:52-EST
From: David A. Moon <MOON at MIT-MC>
Subject:  m-L in the error handler
To: DEKLEER at PARC-MAXC
cc: BUG-lispm at MIT-AI

    Date: 18 JAN 1982 1054-PST
    From: DEKLEER at PARC-MAXC
    To:   BUG-lispm at MIT-AI

    In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine One:

    This is a long-standing complaint.  I wish that M-L in the standard
    error-handler would always (instead of sometimes --- it seems to use
    some strange heuristic) print out as much information as will fit into
    the window it is printing out on.  Typically what happens is that the
    disassembly of the code wraps around and overwrites the description of
    variable values.  I can't read that fast.
What you request is exactly what it does.  So there must be a bug.  Please
provide some specific information.  Perhaps there is some particular flavor
of window on which it does not work?

Date: 21 January 1982 17:34-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
Subject: Detecting mismatched parens better
To: RMS at MIT-AI
cc: DLA at MIT-AI, BUG-LISPM at MIT-AI

    Date: 20 January 1982 22:22-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    Subject: Detecting mismatched parens better

    The idea of checking parens while saving the file is interesting.
    Would someone like to implement this so we can see whether it solves
    the problem?  There can be a switch to turn on the feature, which
    could be overridden by a file property, and ultimately a poll to
    choose the default for the switch.

Couldn't this be done with a hook on the Save Buffer function which
runs Find Unbalanced Parenthesis?

Date: 21 January 1982 16:29-EST
From: David M. Neves <neves at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: MMCM at MIT-AI, jekulp at MIT-MC

In System 78.48, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

   Date: 7 January 1982 15:14-EST
   From: Mike McMahon <MMCM at MIT-AI>
   To: neves at MIT-VAX
   cc: BUG-LISPM at MIT-AI, jekulp at MIT-MC
   
       Date: 5 Jan 1982 16:47:03-EST
       From: neves at mit-vax
       1.  When I tried to ^x^f a file on the Vax while logged into
       MC the Lispm asked me to log will name and password or just
       password.  Because my ITS name is the same as my Unix name I
       just typed in my password (carriage return) but the Lispm just
       prompted me for my name/password again.  Typing both worked.
   Are you sure they are the same?  Remember that case matters to unix,
   so NEVES wouldn't do for neves.
You were right about case.
   
       2.  When I finally got logged in I tried finding my login file
       to test things out.  I ^x^fed /usr/neves/.login .  The lispm
       for some reason wanted to put some file name in front of the
       ".login" and produced buffer.login I believe.  Periods can be
       part of Unix file names and don't have the special significance
       that they do in Tops-20 (i.e. seperating name and extention).
   Well, the lisp machine wants to know about foo.lisp as two separate
   components.  Leading dots could be part of the filename.
I don't understand this.  Are you telling me that if I have a file
on UNIX that starts with a "." I'm screwed?   
   Perhaps you want to change FS:*DEFAULTS-ARE-PER-HOST*?
I don't know what this does and I couldn't tell from the
comment above the defvar.  I tried setting it to T which didn't
seem to make any difference to the defaults I got.
   Defaulting does not work the same way on unix on the lisp machine.

From a brief glance at qfile am I right in saying that UNIX is set
up to do what TOPS20 does, hence the problem with "."?  Is that
why the incorrect ZWEI default "vx:/usr/buffer-1.lisp" comes up
instead of "vx:/usr/neves/buffer-1.lisp"?

   ^_

Date: 21 January 1982 15:09-EST
From: David M. Neves <NEVES at MIT-AI>
To: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI

In zwei in System 78.34, ZMail 38.5, microcode 836, " VAX", on Lisp Machine Twenty:

I was reading in ai:lmdoc;bug lispm into the editor and after
56% of it was read in I got the following error:

>> error: The argument function-spec was NIL, while in
SI:function-spec-get <- Zwei:sectionize-buffer <-
Zwei:sectionize-buffer

It happened a couple of times.


--------------------------------------------------

Just after I typed the above I tried to mail it.  I was logged
into the VAX at the time and it went down.  After hitting END to
mail it I got the following error -  MIT-VAX connection lost (or
something like that)
while in the function
 (Method fs:host-unit validate-control connection) <- (method
fs:file-host-mixin get-host-unit) <- fs:homedir-chaos

Is there a good reason for generating an error in MAIL if the
logged in machine dies?  

Date: 21 January 1982 00:44-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: Detecting mismatched parens better
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

I don't like your proposed paren hack:

1)  First off, I find "( eval-when" un-aesthetic.

2)  It makes certain formerly legal printed representations of lisp
objects now generate errors.  I don't like adding the collumn position
of a parenthesis to the syntax of the language as understood by READ.

3)  It doesn't really work reliably.  Consider:

( eval-when (eval compile)
(defun foo ()
  (let ((base 10.)		;missing close paren here
    (print *foobar*))))

(defun bar ()
  ...)

The missing close paren simply causes the rest of the forms in the
file to be treated as if they were inside the eval-when, there is no
way to tell what the user intended in this case.  I would rather have
the compiler read through to the end of the file and get an error,
than have some hack go off when the next

( eval-when ...

is encountered that decides (incorrectly) to supply the close paren
right then and there and procedes with the compilation.

I cannot imagine that I would ever simply allow something like this to
supply close parens for me.  I would certainly be so suspicious of
whatever it had done that I would fix up the paren error in my file
and then recompile the wrole file beyond that error.  Since that is
almost exactly what I would do today in that case, and since today
that syntax error would be found immediately and no additional
compilation would happen, I see no benefit to the mechanism.

Date: 20 JAN 1982 1825-PST
From: DEKLEER at PARC-MAXC
To:   BUG-lispm at MIT-AI

In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine One:

I am not sure whether this was intended to be a feature, but I consider a bug. 
The flavor TV:MOMENTARY-MULTIPLE-MENU doesn't handle the :SET-ITEM-LIST msg
properly.  If you do a :CHOOSE you can get back undisplayed highlighted items
from the previous :CHOOSE which are not on the current item-list.  :SET-ITEM-LIST should
do a (funcall-self ':SET-HIGHLIGHTED-ITEMS nil) or if fancy
(funcall-self ':SET-HIGHLIGHTED-ITEMS (intersection highlighted-items new-item-list))
or something.

-------

Date: 20 January 1982 22:22-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Detecting mismatched parens better
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI

I agree that macroexpansion errors and reader errors are similar
issues, and I've often wanted warnings for macroexpansion errors too.
A punt vs bomb switch would be fine; then a poll should be used to
determine the best default for it.

But to get the most informative and appropriate warning info after
punting a reader error, it is necessary to get back in synch in the
file, which requires something of the sort I was proposing.

It's also possible that this switch should depend on the context of
compilation (editor buffer vs QC-FILE vs flavor recompilation).  The
advantages of punting are not so significant when compiling single
functions.  My proposal was conceived for QC-FILE, and please think in
terms of QC-FILE (and things which call it) when you evaluate the
proposal or alternative ideas, because the other kinds of compilation
don't have to use them.

The idea of checking parens while saving the file is interesting.
Would someone like to implement this so we can see whether it solves
the problem?  There can be a switch to turn on the feature, which
could be overridden by a file property, and ultimately a poll to
choose the default for the switch.

Note that punting on errors doesn't force the user to wait out the
rest of the compilation.  He can always type C-Abort and fix it right
away.  For that matter, he could do so as soon as he sees a FOO
declared special warning.  He could go fix it and recompile.  But
nobody wants to do this; users find it DESIRABLE to wait for the
warnings from the rest of the file.  I suggest that you might find
it equally desirable not to abort at a reader error--IF the compiler
were going to give the right warnings.

Date: 20 JAN 1982 0858-PST
From: DEKLEER at PARC-MAXC
To:   BUG-LISPM at MIT-AI

In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine One:

The mouse cursor also flashes when IO is being done into a deexposed window.
-------

Date: Wednesday, 20 January 1982  17:10-EST
From: MOON at SCRC-TENEX
To:   Howard Shrobe <HES at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: Saved band that won't restore

Did you call DISK-SAVE from the initial Lisp listener or from some other process?
(Perhaps from the Daedalus window?)  Until the next system, the latter does not
work and often causes symptoms similar to those you describe.

Date: Wednesday, 20 January 1982  16:29-EST
From: MOON at SCRC-TENEX
To:   Gregor J. Kiczales <GREGOR at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: your bug about math:decompose, solve, etc.

These functions only work for arrays of flonums, because the // function
does the "wrong" thing for fixnums.  This may be fixed in the source, I forget.
(I at least made determinants of arrays of integers work.)

Date: Wednesday, 20 January 1982  16:23-EST
From: MOON at SCRC-TENEX
To:   LEBRUN at PARC-MAXC, rms at ai
Cc:   bug-lispm at AI
Subject: special hair in the compiler for unbalanced parentheses

It seems to me that the Find Unbalanced Parentheses command in the editor
is in a much better position to tell you where the unbalanced parentheses
are than the compiler, and the job should be left to it.

If it takes any significant amount of hair to make the compiler recover
from missing close parenthesis errors, I can't see that it is worth it.
I don't think it saves the user much time to try to compile the rest of the
file, since it doesn't take nearly as long to read through the file and
not compile it (as it does now) as to compile it.

Date: Wednesday, 20 January 1982, 12:53-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: MUMBLEF
To: LEBRUN at PARC-MAXC, bug-lispm at MIT-AI

deletef and renamef are supposedly there for Maclisp compatibility;
people may be propagating this naming convention because it is there.
The right names, according to our conventions, are probably
delete-file and rename-file.  However, do we make an incompatible change,
removing the Maclisp-compatible function?  Or should we leave in the ones
that Maclisp has but introduce new names and have both versions for those
operations that Maclisp supports?

Date: 20 January 1982 12:48-EST
From: David A. McAllester <DAM at MIT-AI>
Subject: "too many directory commands"
To: BUG-LISPM at MIT-AI

While trying to view a directory from zwei (meta-x view directory) I got a
"too many directory commands" condition which asked what pathname it sould
use instead. AI was up (though heavilly loaded). No matter what I did the
condition could not be exited. No matter what file name I gave it the same
thing happened again; neither control-g nor control-z did anything.
I finally resorted to a warm boot.

Date: 20 January 1982 11:36-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Detecting mismatched parens better
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

I think you're idea is a kludge in general, but I am not against
something being done if you think it is important.

I do not, however, think that the reader is the right place to hack
this.  It is unnecessarily complicating the syntax of LISP, to say that
indentation is enforced by any certain hairy scheme.  I often type
things to the interpreter which are incorrectly indented, because I feel
no need to indent them correctly.  Your proposal would bomb out for me
there.  You could have the compiler call a special flavor of the reader
which has these hacks, I suppose.

As for your idea that the compiler shouldn't bomb out given bad input,
and should continue with the rest of the file if at all possible, this
has been discussed before, in the context of macroexpansion.  The
conclusion reached was that it was probably best to have a switch
controlling whether the compiler should punt or bomb out on
macroexpansion errors.  Many people, myself included, would just as soon
want to change the source as soon as we get fatal errors, rather than
find that we wasted the time of of an entire compilation.

As an alternative to your proposals, consider the following:

First, the reader errors should be changed to be more descriptive.  It
is probably sufficient to append something like "Your parentheses are
unbalanced" to the current error messages.

Second, It would be fairly simple for editors (trivial for ZWEI) to
check parens before or during writing of LISP mode buffers.  If the
parens don't balance, a warning could be printed, and the user could be
given the option to proceed.

Finally, if you want, a punt/bomb switch could be put into the compiler
which would cover both macroexpansion and reader errors.  But the
current default behaviour shouldn't be changed.  The first two changes
should take away the necessity of changing the reader.

Date: 20 January 1982 10:33-EST
From: Howard Shrobe <HES at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.40, ZMail 38.5, Local-File 32.4, Experimental DAEDALUS 29.1, microcode 843, Daed 29.1, on Lisp Machine Two:

band three on this machine (cadr-2) was saved after a long process which ran with
gc on (it had flipped several times).  When attempting to reboot this band you
get an error message saying that a packet is being returned to ncp which is not
free (I think that's the bug).  If you back out of this error using the error handler
you can run for a while (short while) but the machine will freeze up immediately if
you attempt to enter the editor.

This is the second time we've tried to save a band with the entire scheme chip on it.
Both times we've been unable to disk restore the band sucessfully.  This problem is
extremely painful and is slowing our work down terribly.  Could someone please treat this
as a priority issue.

The band will stay on cadr-2 until someone says they've looked at it or until everyone
says they don't care to try to figure out the problem.

howie

(ps I'll be at HP Labs thurs and fri if anyone wants to look at this and needs more 
information).

Date: 20 January 1982 10:26-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 836, 60.45hz, on Lisp Machine Twenty:

I may be using math:decompose solve etc wrong but:

base
10.

ibase
10.

(setq a (make-array '(2 2)))
#<ART-Q-2.-2. 23376503>

(setq b (make-array 2))
#<ART-Q-2. 23376544>

(math:fill-2d-array a '((102 -52) (200 -2)))
NIL

(aset 5777 b 0)
5777.

(aset 19901 b 1)
19901.

(multiple-value (lu ps) (math:decompose a))
#<ART-Q-2.-2. 23376723>

(setq x (math:solve lu ps b))
#<ART-Q-2. 23376767>

(setq wrong-b (math:multiply-matrices a x))
#<ART-Q-2. 23377237>

(aref wrong-b 0)
5777.0s0

(aref wrong-b 1)
39564.5s0	;<<<<<<<this clearly should be 19901.

Date: 20 January 1982 00:39-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

I agree with LEBRUN about names ending in "F".

Date: 20 January 1982 00:22-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Goal of closeparen error recovery
To: BUG-LISPM at MIT-AI

When there is an unbalanced paren in a file being compiled, the
compiler ought to do more than just print a precise and informative
error message.  It ought to be able to compile the rest of the file
properly, so that the user can get appropriate warnings about the rest
of the functions, so that he can fix more than one error per
compilation attempt.

In order to accomplish this, the compiler must be able to get back in
synch in its input stream, correctly figuring out where a new function
is actually beginning.  The syntax of s-expressions, itself, does not
supply any information that can be used to do this: a paren inside a
function looks like a paren at top level.  It requires some additional
syntactical information.  This could be, the column position of the
start of a list.  It could be anything else, ad lib, but indentation
has the advantage that it is already present in existing source files.
Any other syntactic marker would have to be inserted at every
top-level list, to tell the compiler which those were.  This change
would probably be unpleasant.

It would be easy to have a file property to turn off such indentation
checking for the sake of weirdly indented files, but since most people
follow indentation conventions anyway, they would probably just as
soon have the checking by default.

Date: 19 JAN 1982 1315-PST
From: DEKLEER at PARC-MAXC
To:   BUG-lispm at MIT-AI

In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine One:

From top-level type (tv:menu-choose '(A)).  Leave the mouse in the
pop-up-menu and type C-M-Break.  You get window-system problems using
the cold load stream.  This seems wrong although I admit it is a complex
case.  I suggest that in this situation either (1) the error handler
locks until you move the mouse out of the pop-up-menu or (2) the
pop-up-menu deexposes until you leave the error handler.
-------

Date: 19 JAN 1982 1131-PST
From: LEBRUN at PARC-MAXC
Subject:  MUMBLEF
To:   bug-lispm at MIT-AI

This is to register a mild objection to "globalizing" names ending in
"F" for "file".  It introduces an unnecessary abbreviation and it is
inconsistent with SETF, LOCF, INCF etc for which there is no alternative
convention.  (I have used PRINTF on occasion to mean "generalized
print", for example).

-------

Date: 19 JAN 1982 1153-PST
From: LEBRUN at PARC-MAXC
Subject:  good times
To:   bug-lispm at AI

for another good time, (tyo 0.0)



-------

Date: 19 JAN 1982 1148-PST
From: LEBRUN at PARC-MAXC
Subject:  reading close
To:   rms at AI
cc:   bug-lispm at AI

It would be nice to get better error recovery, but having it depend on
character coulmns too heavily is, well, Fortranoid.  It's OK for the
editor to use such cues as an efficiency hack (I guess) but the compiler
ought to be able to work with any format, no matter how ugly.

I think the idea of using something like #@ as READ "synchronization
marks" is a fine idea, but I dislike having "white space" mean anything
very special.

Certainly any (untrapped) error ought to be reported and not inhibited
by text formatting style?

One possibility would be for various pieces of compiler state be
reported on reading a CLOSE, for example: whether inside a string, sexpr
or whatever, and perhaps nesting level and the position of the start of
the current top-level or other "unfinished" form.

-------

Date: 19 January 1982 20:50-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

I would really like to get some responses to my message
about error recovery from unbalanced parens.

Date: 19 Jan 1982 1419-EST
From: David L. Andre <DLA at SCRC-TENEX>
To: dlw at SCRC-TENEX, bug-lispm at SCRC-TENEX
cc: DLA at SCRC-TENEX
In-Reply-To: Your message of 19-Jan-82 1027-EST

Well, somebody went to a lot of trouble to guarantee that REMQ and 
friends didn't cons up a new list if they didn't have to.
The only alternative to recursion, if we want to keep the same
(undocumented) behaviour, is to run two passes on the list.  This is
probably preferable.

I can't help but draw an analogy to KMP's STRING-TRIM flame.  We're
being pretty hypocritical if we don't treat the two cases the same

Also, if this is changed to copy always, the second value (CHANGEDP)
can presumably be flushed.

See DLA;AI:DLA;REMQ for a REMQ which conses, and only returns
one value.
-------

Date: Tuesday, 19 January 1982  14:28-EST
From: MOON at SCRC-TENEX
To:   Richard M. Stallman <RMS at MIT-AI>
Cc:   BUG-LISPM at MIT-AI
Subject: EH:CURRENT-FRAME as unbound variable doesn't work

This problem is specific to the trans-trap handler.  The problem is that it
should be looking at the location on which the trap occurred in the erring
stack group, probably using some variant of symeval-in-stack-group
(cdr-in-stack-group!).  There are numerous other manifestations of the
problem.  I will try to do something about this, since probably no one
else will.

Date: Tuesday, 19 January 1982  13:55-EST
From: MMCM at SCRC-TENEX
To:   Daniel L. Weinreb <dlw at SCRC-TENEX>
Cc:   BUG-LISPM at MIT-AI, RMS at MIT-AI

    Date: Tuesday, 19 January 1982, 09:44-EST
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    The problem with eh:current-frame is that by the time the EH goes to
    inspect the symbol, the EH itself has bound the symbol because it is
    using it.  I think the right way to solve this is that when an error
    occurs, the basic type of error should be noted and saved immediately
    before the EH is invoked.
Microcode (transport) errors like this should should work much more simply in the
new error system.  I see no point in further kludging the current thing.

Date: 19 January 1982 12:27-EST
From: David L. Andre <DLA at MIT-AI>
Subject: I'm going to flame again about **MORE**
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, Local-File 32.7, microcode 843, on Lisp Machine Filecomputer:

A while ago I recall that discussion here concluded that the default
**MORE** should only take certain characters (like Space) to proceed.
Otherwise, it should feep, clear-input, print an explanation aside the
**MORE**, and wait more.  I am ALWAYS GETTING SCREWED when I'm typing
ahead, and the **MORE** eats my open paren.  Please let's fix this.

Date: 19 January 1982 12:16-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, Local-File 32.7, microcode 843, on Lisp Machine Filecomputer:

In a band which is in 60Hz, if I DISK-RESTORE a "normal" band, the page
bar doesn't work.

Date: Tuesday, 19 January 1982, 10:22-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: bug-lispm at SCRC-TENEX

Somebody should rewrite REMQ, REMOVE, and so on to be iterative instead of
recursive, so that they can be used on long lists without blowing out to the
error handler.

Date: Tuesday, 19 January 1982, 10:10-EST
From: Daniel L. Weinreb <DLW at MIT-AI>
Subject: A hacker screwed up somewhere.
To: moon at MIT-AI
Cc: DLA at MIT-AI, BUG-LISPM at MIT-AI

The problem is that the ETE is (WRITE-IN-READ-ONLY VMA), but SG-CONTENTS
does not understand VMA.  Do you think it would it be correct to change
SG-CONTENTS to use the value of the SG-SAVED-VMA of the stack group when
given VMA as the tag?  I think that would do the right thing in this
case, and it seems better than blowing out, but I'm not sure I
understand where SG-SAVED-VMA comes from well enough to be sure that
this change is safe.

Date: Tuesday, 19 January 1982, 09:44-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: RMS at MIT-AI, BUG-LISPM at MIT-AI

The problem with eh:current-frame is that by the time the EH goes to
inspect the symbol, the EH itself has bound the symbol because it is
using it.  I think the right way to solve this is that when an error
occurs, the basic type of error should be noted and saved immediately
before the EH is invoked.

Date: Tuesday, 19 January 1982, 09:21-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
Subject: init file errors
To: RMS at MIT-AI, BUG-LISPM at MIT-AI

Fixed in the source as you suggested.

Date: 19 January 1982 03:27-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine Four:

Type EH:CURRENT-FRAME at any lisp listener.
It prints a very improbable error message.

You may think this case is not real, but it came up in the course
of debugging new code for the error handler, and was quite confusing.

Date: Tuesday, 19 January 1982  00:37-EST
From: MOON at SCRC-TENEX
To:   Robert W. Kerns <RWK at SCRC-TENEX>
Cc:   BUG-LISPM at SCRC-TENEX
Subject: Flavor redefinition bug

    Date: Sunday, 17 January 1982, 07:41-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>

    If you add a (:REQUIRED-FLAVORS ...) entry in a flavor, and recompile
    the flavor, the methods don't notice the instance variables of the
    required-flavors flavor, until you REMPROP the SI:FLAVOR property.
Fixed in the source.

Date: 19 January 1982 00:01-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: init file errors
To: BUG-LISPM at MIT-AI

Why not just set WIN-P to T right before loading the init file?
This would appear to solve GREGOR's problem while still
solving the other problems DLW refers to.

Date: 18 January 1982 22:21-EST
From: George J. Carrette <GJC at MIT-AI>
Subject: To DEFSTRUCT users.
To: BUG-LISPM at MIT-AI, BUG-LISP at MIT-AI

Do any defstruct users have a "defstruct-define-type" which
is good for extracting and depositing fixnums from various
fields of a BIT-STRING (say represented as an ART-1B array on
the LISPM, or a BIGNUM on the PDP-10).

Date: Monday, 18 January 1982, 21:46-EST
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: Gregor at MIT-AI, BUG-LISPM at MIT-AI

The unwind-protect in login was put in to solve a number of bugs of the
form "if I try to log in, and something goes wrong during the process,
and I abort out, then whenever I try to do anything it thinks I'm logged
in but nothing works because I didn't really get logged in." If anybody
takes out the unwind-protect, I suggest he worry about what to do about
such problems.

Date: 18 January 1982 17:04-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 836, 60.45hz, on Lisp Machine Twenty:

(DEFUN LOGIN (USER-NAME &OPTIONAL (HOST ASSOCIATED-MACHINE) (LOAD-INIT-FILE-P T))
  ;; Do this so LOGIN init list has the correct enviroment.
  (DECLARE (SPECIAL USER-ID HOST LOAD-INIT-FILE-P))
  (LET ((WIN-P NIL))
    (UNWIND-PROTECT
      (PROGN
	.
	.
	(AND LOAD-INIT-FILE-P
	     (LOAD (FS:INIT-FILE-PATHNAME "LISPM" HOST T) "USER" T T))
	(SETQ WIN-P T))
      (IF (NOT WIN-P)
          (LOGOUT))))
  T)

Because the (SETQ WIN-P T) comes after the (LOAD ..) a user who's init
file generates an error (or one of the files the init file loads) can't
type an [Abort] out of that load without getting logged out.

If the reson for having the (SETQ ..) after the load is to make sure
that the host is up, then perhaps there should be something like a probe
before the (SETQ ..).

Unless there is some reason I don't understand for having the
UNWIND-PROTECT with (LOGOUT) maybe it should be flushed altogether. A
small sample of users find it to be an annoying misfeature.

Date: 18 January 1982 17:04-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 836, 60.45hz, on Lisp Machine Twenty:

(DEFUN LOGIN (USER-NAME &OPTIONAL (HOST ASSOCIATED-MACHINE) (LOAD-INIT-FILE-P T))
  ;; Do this so LOGIN init list has the correct enviroment.
  (DECLARE (SPECIAL USER-ID HOST LOAD-INIT-FILE-P))
  (LET ((WIN-P NIL))
    (UNWIND-PROTECT
      (PROGN
	.
	.
	(AND LOAD-INIT-FILE-P
	     (LOAD (FS:INIT-FILE-PATHNAME "LISPM" HOST T) "USER" T T))
	(SETQ WIN-P T))
      (IF (NOT WIN-P)
          (LOGOUT))))
  T)

Because the (SETQ WIN-P T) comes after the (LOAD ..) a user who's init
file generates an error (or one of the files the init file loads) can't
type an [Abort] out of that load without getting logged out.

If the reson for having the (SETQ ..) after the load is to make sure
that the host is up, then perhaps there should be something like a probe
before the (SETQ ..).

Unless there is some reason I don't understand for having the
UNWIND-PROTECT with (LOGOUT) maybe it should be flushed altogether. A
small sample of users find it to be an annoying misfeature.

Date: 18 January 1982 14:46-EST
From: Charles Rich <RICH at MIT-AI>
Subject: DEFSYSTEM
To: BUG-LISPM at MIT-AI
cc: DCB at MIT-AI

In System 78.44, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

A useful extension to the module specification syntax would
be to allow (FOO) to specify all the modules of FOO.
Thus one could have a dependency on loading an external
system without being dependent on the internal module
names of that system.  

Date: Monday, 18 January 1982, 14:20-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: :Component-systems in DEFSYSTEM
To: dcb at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 16 January 1982 10:17-EST
    From: Daniel Brotsky <dcb at MIT-AI>
    In System 78.44, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:
    There should be an easy way to have make-systems on component systems be done
    BEFORE the make-system on the parent system.
That's what :do-components is for.

Date: 18 JAN 1982 1054-PST
From: DEKLEER at PARC-MAXC
To:   BUG-lispm at MIT-AI

In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine One:

This is a long-standing complaint.  I wish that M-L in the standard
error-handler would always (instead of sometimes --- it seems to use
some strange heuristic) print out as much information as will fit into
the window it is printing out on.  Typically what happens is that the
disassembly of the code wraps around and overwrites the description of
variable values.  I can't read that fast.
-------

Date: 18 January 1982 05:14-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Detecting mismatched parens better
To: BUG-LISPM at MIT-AI

Here is a proposal for how to solve the problem that has bothered
KMP, me and probably many other people, that mismatched parens
in files being compiled get bad error recovery.

First, suppose we establish the convention that lists that go "around"
a DEFUN (as EMACS would call it) should have a space after the open
paren.  For example,
( EVAL-WHEN (COMPILE)
(DEFUN ...))

Then it is never legitimate to have two nested lists that both start
in column 0 unless one of them has a space after the "(".

In the reader, each "(" would check its cursor position or look at a
variable holding the previous character read, to see if it was in
column 0.  Then it would peek at the next character to see if it is a
space.  If the "(" was in columnb 0 and not followed by a space,
then a special variable is bound to T; except that if it was already
T, an error is reported.

The error should specify a condition such as :MISSING-CLOSEPAREN
and if the handler continues then the reader should untyi the "("
and then pretend to read enough ")"'s to close all open levels of list
structure.  The compiler would handle the error and set a flag so a
warning would come out later.

This is a simple and clean solution that does the right thing.
BUT-- it requires two characters be untyi'd.  To avoid trying to do
that, make this change: before looking ahead for a space, if the
special variable is T, get the error right away.  If the variable is
NIL, bind it to NIL, then look ahead and set it to T if the next
character was not a space.  This avoids double-untyi'ing because the
char after the "(" is only checked if the "(" does not need to be untyi'd.
It makes the error check stricter: lists flagged with a space after the
paren are only allowed OUTSIDE ordinary defuns.

To facilitate the change-over, lists starting in column 0 with car
EVAL-WHEN and a few other common things could set a flag saying omit
this error check on that file.  A hairier scheme can recognize and
accept those symbols regardless of extra spaces.  Then no
change to source files is required.  But I think the change is
good for other things too.

A possible alternative to space is # as in
(#@EVAL-WHEN (EVAL)
(DEFUN ...))
assuming #@ is made a no-op.

As a separate error check, if the top level READ sees a list that does
not start in column 0, it should get an error, and if the error is
handled, it should skip sexps until it finds one that does start in
column 0.  This error would be :EXTRA-CLOSEPARENS.  Getting the error
sooner in this way would enable the compiler to associate the warning
with the right function.


Opinions?  I am sending this (as opposed to just implementing the
hairier scheme which required no change to source files) as an
experiment to see if a more co-operative attitude on my part will meet
with other people's willingness to co-operate.

Date: 17 January 1982 21:16-EST
From: Erik S. Townsend <Townse at MIT-AI>
Sender: ___017 at MIT-AI
To: BUG-LISPM at MIT-AI

on CADR-1:

(pkg-goto 'hacks)
(smoking-clover '100000 '100)

This sequence builds a very nice clover, which 'smokes' for
about 10 minutes, the dies into a solid yellow-brown screen.
Doing a (brighten) restores the clover.
					-Color hacker

Date: 17 January 1982 19:46-EST
From: David L. Andre <DLA at MIT-AI>
Subject: A hacker screwed up somewhere.
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

In System 78.44, ZMail 38.5, microcode 843, on Lisp Machine Eighteen:

(load "AI: LMFS; FS QFASL")
(nsubst 'foo 'si:system-plist si:site-initialization-list)
>>>>TRAP 20376 (WRITE-IN-READ-ONLY VMA)


Foo, a hacker has screwn up somewhere.  Error:
VMA Unknown tag 

There was an attempt to write into T, which is a read-only address.
While in the function NSUBST  NSUBST  NSUBST

NSUBST:
   Arg 0 (NEW): FOO
   Arg 1 (OLD): SI:SYSTEM-PLIST
   Arg 2 (S-EXP): (FS:DEFINE-SYS-LOGICAL-DEVICE)


Date: 17 January 1982 14:32-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Window error-handler lossage.
To: BUG-LISPM at MIT-AI, BUG-ZMAIL at MIT-AI
cc: rwg at MIT-MC

    Date: 14 JAN 1982 2328-PST
    From: rwg@mc
    To:   BUG-LISPM at MIT-AI

    In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine Two:

    In the window EH, trying to Set Arg an instance var takes CDR of the symbol.

I couldn't duplicate this, but I got some other funny behavior.  What I
did was:
(funcall tv:selected-window ':funcall-inside-yourself #'error "foo")
Then I went into the window error handler.  I "Set Arg"ed #'error to
'error, and "Set Arg"ed the rest arg to ("bar").  I then did a retry,
and got ERROR: foo.  The second arg had been set correctly, but the rest
arg hadn't.

I then attempted to use Set Arg on instance variables.  From that time
on, whenever I used Set Arg, I got the message "That is not an argument
or a local", regardless of what I was pointing at, and even when I
re-entered the window error-handler.

Furthurmore, when I was typing this message (in ZMail), I did c-m-Break,
c-m-W, and got into the cold load stream when the pdl overflowed.
Continuing from that did get me into the window error-handler.

Date: Sunday, 17 January 1982, 13:34-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-lispm at MIT-AI

In System 78.44, ZMail 38.5, Experimental Tester 18.15, microcode 836, on Lisp Machine Twenty-two:

string-trim ought to do string coersion on its first (char-set)
argument if it is not a list.

Date: 17 January 1982 12:20-EST
From: Howard Shrobe <HES at MIT-AI>
To: BUG-LISPM at MIT-AI

John sent me this nnote before leaving for a visit to hp:
    BATALI@MIT-AI 01/15/82 19:02:04

    I was making the scheme chip again.

    After certain points in the construction I would
    force gc (with flip-now and reclaim-oldspace) and
    then save the band. Unfortunately, the second time that
    I did this, I was not able to boot that band.

    It is still here, lod3 on cadr2, and it still won't boot.

                         --John
This is a bug which (I believe) rg fixed once was some patch or other
to the microcode.  my recollection is that disk-save has some arbitary (and
incorrect limit on the highest page it will save).

howi

Date: 16 January 1982 22:34-EST
From: Daniel Huttenlocher <dph at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine One:

In trying to respond to a qsend, when the response was sent it bombed with
with a window system problems using the cold load stream error.  The error
was a failed disk read on unit 0, cyl 56, surf 12, sec 2 which also lost
on several retry attempts.  The lossage occurred while in SI:DISK-RUN called
(via other functions) by SYS:PAGE-IN-WORDS.

kwc@MIT-ML 01/16/82 16:24:29
To: (BUG LISPM) at MIT-ML
the complr told me that the special token CLOSE was read at top level - this is a poor
way to tell me that my parens don't match.

KMP@MIT-MC 01/16/82 14:58:11
To: DLW at MIT-MC
CC: DLA at MIT-MC, ZVONA at MIT-MC, (BUG LISPM) at MIT-MC
ah, i see dla has diagnosed the error. great... I had setq'd chaos:saved-sends
to the null string because it had a non-null string caused by my getting a
send in the middle of a call to disk-save and i didn't want the send coming
out on the dumped band, nor did i want to spend an hour setting up for that
disk-save again. if disk-save doesn't zero this string, it probably
should. if it does, it should probably be documented. something which lets one 
delete existing sends correctly should probably be introduced... -kmp


Date: 16 January 1982 12:12-EST
From: Daniel Brotsky <dcb at MIT-AI>
Subject: defsystem
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

Four points about using defsystem conveniently:

1.  There should be a special defsystem variable which contains the original
keyword-list of arguments to MAKE-SYSTEM [such as '(:compile :noconfirm)].

2.  User-defined transformations should be able to take NO input (not even a
module).

3.  Transformations should be able to take system names as input, not just
module or file names.  One way to do this would be to allow an external module
component to consist of just a system name, which would mean that system.

4.  There should be a :make-system transformation which makes its arguments (by
default with the same keywords as were passed to the top-level make-system, but
this should be alterable).  Note that this allows transformations to depend on
the existence of a system.

Date: Saturday, 16 January 1982, 11:59-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Inspect bug really GRIND-TOP-LEVEL bug
To: Carl Richard Feynman <CARLF at MIT-AI>, BUG-LISPM at MIT-AI
In-reply-to: The message of 14 Jan 82 14:45-EST from Carl Richard Feynman <CARLF at MIT-AI>

    Date: 14 January 1982 14:45-EST
    From: Carl Richard Feynman <CARLF at MIT-AI>
    In System 78.34, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine Four:

    Attempting to inspect the value of si:xr-special-character-names causes an error.

			    -- Carl
Restated bug:  (GRIND-TOP-LEVEL '(QUOTE . 216)) tries to take the CAR of 216.

Date: 16 January 1982 10:17-EST
From: Daniel Brotsky <dcb at MIT-AI>
Subject: :Component-systems in DEFSYSTEM
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

There should be an easy way to have make-systems on component systems be done
BEFORE the make-system on the parent system.

Date: Saturday, 16 January 1982, 09:57-EST
From: Daniel L. Weinreb <DLW at MIT-AI>
To: DLA at MIT-AI, kmp at MIT-MC
Cc: BUG-LISPM at MIT-AI

I have to admit, fs:viewf is pretty useful.  As long as the "command
processor" problem without our user interface remains unsolved, maybe
we should, indeed, just add it to GLOBAL.

Date: 16 January 1982 09:29-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Process SEND Server getting errors
To: ZVONA at MIT-AI, TURNIP at MIT-AI, KBE at MIT-AI, kmp at MIT-MC
cc: BUG-LISPM at MIT-AI

    kmp@MIT-MC 01/15/82 00:03:48 Re: Process SEND Server getting errors
    To: (BUG LISPM) at MIT-AI
    In System 78.43, ZMail 38.5, PA 11.4 on band 6 of Cadr-22 with patches loaded:

    Is my LispM the only one that has a broken SEND server? I have been unable to
    get sends for at least a week now. Consistently whenever I get sends, I get
    notification saying my send server has erred. I have occasionally gotten name
    server errors, too -- I can't tell if they happen always or just some of the 
    time. I can say, however, that I don't get any sends coming through successfully.
    Could someone please suggest something? I'd be glad to supply any helpful 
    debugging info. It's very frustrating. Thanks.

It appears that, unless that band has been transported to other lisp
machines, Cadr-22 is the only one with a broken send server.  The reason
is that somebody has SETQed the variable CHAOS:SAVED-SENDS to a string
without a leader.  I looked at the login history of the band, and ZVONA,
TURNIP, and KBE have all messed with the band.  I hope if any of them
were responsible they will not do so again.

I did not check the NAME server, although I assume any bugs are from the
same source.

In the meantime, when you get a notification that a process got an
error, you can always go to the error by typing Terminal-0-S.  That and
a quick look at the source was all it took for me to diagnose the error.

Date: 16 January 1982 08:28-EST
From: David L. Andre <DLA at MIT-AI>
Subject: string-search-char
To: Moon at MIT-MC
cc: ZVONA at MIT-AI, BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: Saturday, 16 January 1982, 02:28-EST
    From: David A. Moon <Moon at MIT-MC>
	Date: Friday, 15 January 1982, 20:19-EST
	From: David Chapman <Zvona at MIT-AI>
	Is string-search-char supposed to be faster than string-search,
	or why are we supposed to use it when string-search does the same
	thing with the same args?
    It's quite a bit faster.  But I guess no one ever realized that the
    coercion from characters to strings makes string-search do everything
    string-search-char does.
I added a compiler optimizer which compiles string-search into
string-search-char when appropriate, so in compiled code there shouldn't
be a difference in efficiency anymore.

Date: Saturday, 16 January 1982, 02:28-EST
From: David A. Moon <Moon at MIT-MC>
Subject: string-search-char
To: David Chapman <Zvona at MIT-AI>
Cc: BUG-LISPM at MIT-AI

    Date: Friday, 15 January 1982, 20:19-EST
    From: David Chapman <Zvona at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.44, ZMail 38.5, Experimental Tester 18.5, microcode 836, on Lisp Machine Twenty-two:

    string-search-char should barf on a non-character first arg.  I
    keep getting the two arguments backward and then not being able
    to figure out why I'm losing so bad.
It's fixed in the source to do so.  Use control-shift-A in the editor
to remind yourself of argument order.  I use it for almost everything
these days.

    Is string-search-char supposed to be faster than string-search,
    or why are we supposed to use it when string-search does the same
    thing with the same args?
It's quite a bit faster.  But I guess no one ever realized that the
coercion from characters to strings makes string-search do everything
string-search-char does.

Date: Saturday, 16 January 1982, 00:47-EST
From: David A. Moon <Moon at SCRC-TENEX>
Subject: m-S in EH
To: David L. Andre <DLA at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 17 Dec 81 15:32-EST from David L. Andre <DLA at MIT-AI>

    Date: 17 December 1981 15:32-EST
    From: David L. Andre <DLA at MIT-AI>
    Subject: m-S in EH
    To: BUG-LISPM at MIT-AI

    In System 78.19, ZMail 38.2, Local-File 30.3, microcode 836, 60Hz, on Lisp Machine Ten:

    The value of SELF gotten by m-S in the error handler is always NIL,
    regardless of how it displays with c-m-S.
This is fixed in the source (SYMEVAL-IN-STACK-GROUP)

Date: Saturday, 16 January 1982, 00:37-EST
From: David A. Moon <Moon at SCRC-TENEX>
To: Carl Richard Feynman <CARLF at MIT-AI>
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 14 Jan 82 14:45-EST from Carl Richard Feynman <CARLF at MIT-AI>

    Date: 14 January 1982 14:45-EST
    From: Carl Richard Feynman <CARLF at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.34, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine Four:

    Attempting to inspect the value of si:xr-special-character-names causes an error.
This is fixed in the source (of GRIND).  Some day someone should rewrite the
grinder from the ground up, and make it robust.

Date: 15 January 1982 22:56-EST
From: George J. Carrette <GJC at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.42, ZMail 38.5, microcode 843, on Lisp Machine Eighteen:

(SAMEPNAMEP '|FOO| '|foo|) ==> T ; should be NIL.


Date: Friday, 15 January 1982, 20:19-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.44, ZMail 38.5, Experimental Tester 18.5, microcode 836, on Lisp Machine Twenty-two:

string-search-char should barf on a non-character first arg.  I
keep getting the two arguments backward and then not being able
to figure out why I'm losing so bad.

Is string-search-char supposed to be faster than string-search,
or why are we supposed to use it when string-search does the same
thing with the same args?

Date: 15 January 1982 17:35-EST
From: David L. Andre <DLA at MIT-AI>
Subject: ONCE-ONLY bug
To: SHIPMN at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 14 January 1982 23:32-EST
    From: David W. Shipman <SHIPMN at MIT-AI>
    To: BUG-LISPM at MIT-AI

    ONCE-ONLY is broken for the non-trivial case. 
Fixed in 78.44.  My fault, sorry.

Date: Friday, 15 January 1982, 14:56-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: DEFSYSTEM
To: RICH at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 15 January 1982 12:08-EST
    From: Charles Rich <RICH at MIT-AI>
    It would be a lot more useful if the :COMPONENT-SYSTEMS of a system
    were make'd BEFORE the current system rather than after.
Not for the system itself.  But anyway, you can use the :DO-COMPONENTS transformation
to control this.

Date: 15 January 1982 12:08-EST
From: Charles Rich <RICH at MIT-AI>
Subject: DEFSYSTEM
To: BUG-LISPM at MIT-AI

In System 78.42, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

It would be a lot more useful if the :COMPONENT-SYSTEMS of a system
were make'd BEFORE the current system rather than after.

Date: 15 January 1982 11:32-EST
From: Charles Rich <RICH at MIT-AI>
Subject: DEFSYSTEM
To: BUG-LISPM at MIT-AI
cc: DCB at MIT-AI

In System 78.42, ZMail 38.5, microcode 836, on Lisp Machine Twenty-two:

The :PACKAGE option on transformations should not apply
to external module components.

BIL@MIT-MC 01/15/82 10:50:48 Re: clarification of my previous ONCE-ONLY bug
To: (BUG LISPM) at MIT-AI, DLW at MIT-AI
In System 78.43, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

(defmacro pairp (x)
   (once-only (x)
      `(and ,x (listp ,x))))

Then, in an mexp loop,

(pairp (car x)) =>

((lambda ()
    (and G0471 (listp G0471)))
 )


Date: 14 JAN 1982 2328-PST
From: rwg@mc
To:   BUG-LISPM at MIT-AI

In ETHER 24.5, System 78.40, microcode 841, on Xerox Lisp Machine Two:

In the window EH, trying to Set Arg an instance var takes CDR of the symbol.
-------

kmp@MIT-MC 01/15/82 00:03:48 Re: Process SEND Server getting errors
To: (BUG LISPM) at MIT-AI
In System 78.43, ZMail 38.5, PA 11.4 on band 6 of Cadr-22 with patches loaded:

Is my LispM the only one that has a broken SEND server? I have been unable to
get sends for at least a week now. Consistently whenever I get sends, I get
notification saying my send server has erred. I have occasionally gotten name
server errors, too -- I can't tell if they happen always or just some of the 
time. I can say, however, that I don't get any sends coming through successfully.
Could someone please suggest something? I'd be glad to supply any helpful 
debugging info. It's very frustrating. Thanks.

-kmp

ps it's the default band of cadr-22 which exhibits this lossage if you drop in
   and feel like trying it... 


Date: 14 January 1982 23:32-EST
From: David W. Shipman <SHIPMN at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.43, ZMail 38.5, Local-File 31.10, Experimental Spire 1.1, microcode 836, 60Hz, on Lisp Machine Twelve:

ONCE-ONLY is broken for the non-trivial case. 
Eval the following to see the problem:

  (grind-top-level (macroexpand '(once-only (x) `(list ,x ,x))))


Date: 14 January 1982 14:45-EST
From: Carl Richard Feynman <CARLF at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine Four:

Attempting to inspect the value of si:xr-special-character-names causes an error.

			-- Carl

Date: Thursday, 14 January 1982, 10:07-EST
From: David Chapman <Zvona at MIT-AI>
Subject: Difference between characters and bucky bits
To: MOON at MIT-MC
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 14 Jan 82 01:33-EST from MOON at MIT-MC

    MOON@MIT-MC 01/14/82 01:33:31 Re:  Difference between characters and bucky bits
    To: ZVONA at MIT-AI
    CC: (BUG LISPM) at MIT-AI
	Date: 12 January 1982 16:31-EST
	From: David Chapman <ZVONA at MIT-AI>

	Well, this is not a technical problem, because (tyo 839) prints <839>
    If so, it must be a bug in the window system.  It should complain that
    the argument is not a character.
For a good time, (tyo 5.3678e78).
    What happens if you (tyo 839) to a file?  That is the issue.  FORMAT
    has to work for all kinds of streams, including files, not just windows.
There already are escape conventions for printing some printing
characters into files.  Could these not be extended to cover
bucky bits?

Date: 14 January 1982 04:39-EST
From: David L. Andre <DLA at MIT-AI>
To: kmp at MIT-MC
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    kmp@MIT-MC 01/14/82 04:32:29
    To: (BUG LISPM) at MIT-AI
    In System 78.33, ...

    Why is there no (PRINTF "...")? That would be a great utility to have around.
    I hate having to do System-E and M-X View File ... COPYF would be useful, too.
    Presumably COPYF would be like PRINTF except it would expect a filename to
    open and then would PRINTF the file to the stream. PRINTF would take an optional
    already-open stream.
There is already (FS:VIEWF file &optional output-stream), which views a
file.  It wouldn't really serve as a copier, however, because it does
:FRESH-LINE first.  I am working on a copying subsystem...

It is my opinion that VIEWF should be in global.  When I proposed that a
while ago, however, few agreed.

kmp@MIT-MC 01/14/82 04:33:59 Re: cont'd
To: (BUG LISPM) at MIT-AI
In System 78.33,...

and yes, COPYF might also take a keyword like ':BINARY or ':TEXT...



kmp@MIT-MC 01/14/82 04:32:29
To: (BUG LISPM) at MIT-AI
In System 78.33, ...

Why is there no (PRINTF "...")? That would be a great utility to have around.
I hate having to do System-E and M-X View File ... COPYF would be useful, too.
Presumably COPYF would be like PRINTF except it would expect a filename to
open and then would PRINTF the file to the stream. PRINTF would take an optional
already-open stream.


Date: 14 January 1982 03:40-EST
From: David L. Andre <DLA at MIT-AI>
To: kmp at MIT-MC
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    kmp@MIT-MC 01/12/82 02:42:11
    (grind-top-level '(prog nil a b (foo)))

    loses. Two tags in a row seem to do the wrong thing. A space should be
    output after each tag...

Fixed in the source.  I put all tags on separate lines, because after
trying your suggestion, I decided that it was difficult to read in most
circumstances. 

MOON@MIT-MC 01/14/82 01:39:22 Re: new open keywords?
To: KMP at MIT-MC
CC: (BUG LISPM) at MIT-MC
The features you request already exist; do m-. OPEN and look at the
comments in front of it.  (Which is the only form of documentation of
this that exists currently.)  The only problem is that not all of these
features have been implemented in all FILE servers yet.  I presume they
will be within a month or two.

MOON@MIT-MC 01/14/82 01:33:31 Re:  Difference between characters and bucky bits
To: ZVONA at MIT-AI
CC: (BUG LISPM) at MIT-AI
    Date: 12 January 1982 16:31-EST
    From: David Chapman <ZVONA at MIT-AI>

    Well, this is not a technical problem, because (tyo 839) prints <839>
If so, it must be a bug in the window system.  It should complain that
the argument is not a character.

What happens if you (tyo 839) to a file?  That is the issue.  FORMAT
has to work for all kinds of streams, including files, not just windows.

Date: Wednesday, 13 January 1982, 18:21-EST
From: Daniel L. Weinreb <DLW at MIT-AI>
To: BIL at MIT-AI, BUG-LISPM at MIT-AI

Your once-only example works fine for me.  What did you expect it to expand as?

Date: 13 January 1982 13:37-EST
From: Alias for WGD <BIL at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, microcode 840, on Lisp Machine Fifteen:

The following once-only expands incorrectly on (pairp (caar x))

(defmacro pairp (object)
   (once-only (object)
      `(and ,object (listp ,object))))

Date: 13 January 1982 02:01-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  new open keywords?
To: RWK at MIT-MC
cc: BUG-LISPM at MIT-AI

People take my suggestions so literally, sometimes, it amazes me. Let me try
it again from the point you got confused. 

With the keyword for making a temp file, I don't care if it's _LSPM_ OUTPUT
or a file that just doesn't live in the dir or what. It's just a keen idea
to have a safe way to open files knowing they won't bash the old version until
they are complete. I want to save writing the explicit rename in my code
every time. This is almost always the desired behavior. On particularly
losing opsys's yes, you might not be able to do it. But I think allowing the
feature and letting it err where it can't work would still be helpful to the
many places (Twenex, ITS, ...) where something winning can be arranged.
By the way -- there are cases where you do want writeback even if partial.
Puff the Magic Dragon's statistics, for example, probably want to be saved
even if errors occur. There are other applications where partial info is
better than either no info or the old info ... I think they're pretty rare
tho' -- that's why it's odd that this is the default IO mode for output,
rather than an available but not default mode out of which better modes can
be created.

You're right about :DONT-CLOBBER. Checking at OPEN and at CLOSE time could
both be helpful. You might not want to waste your time doing the I/O if you
know in advance the file exists, and you don't want to lose if someone writes
the file while you are doing the same... On systems where it can't be done
100% reliably, you might as well opt for 99%. If the system code can't do
it, neither can the user code -- and you know if you don't provide the 
heuristic version, everyone's just gonna write their own -- and theirs will
probably not be as well though out as the one the system could provide by
default ... so might as well save them time, effort, and mistakes and do the
best you can on it...


Date: 12 January 1982 16:31-EST
From: David Chapman <ZVONA at MIT-AI>
To: DLW at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 20 December 1981 13:53-EST
    From: Daniel L. Weinreb <DLW>
    To:   ZVONA
    cc:   BUG-ZWEI

       Well, why can't whatever it is that translates 142 to <QUOTE> translate 839 to
        <C-M-G>?  That can't be very hard.  Then ~:c can be the same as ~c.
    142 is a character in the 8-bit charcter set; 839 is not.
Well, this is not a technical problem, because (tyo 839) prints <839>
and it is very clear that it could print <C-M-G> instead.  I take it
that your objection is that 839 is "not a printing character".  But
the issue is how to print such characters.  I think it is better to
print them unambigously as characters than to print some string of
other characters.
            It is also an important feature that the format used by
            FORMAT for printing be compatible with the format used by #\ for
            reading.  
        I don't understand how this is related.  That is the functionality of ~@c.
    #\c-m-J works too.  I think the symmetry is important.
I don't see that c-m-J is significantly more similar to #\c-m-J than
<C-M-J> (or <c-m-J>) is.

Perhaps I shouldn't labor this point, but the right thing seems clear
to me, and I don't really understand your objections.

Date: Tuesday, 12 January 1982, 08:59-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: LOAD-PATCHES bombing on SYS: FILE; REMOTE
To: BUG-LISPM at MIT-AI
In-reply-to: The message of 11 Jan 82 23:49-EST from David L. Andre <DLA at MIT-AI>

    How about the convention that any files loaded by patch files be copied
    into the patch directory, where they're safe from recompiling damage?

PLEASE!  (Of course, on file systems with version numbers on QFASL files,
there is an obvious alternative....)


Date: Tuesday, 12 January 1982, 08:57-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: new open keywords?
To: kmp at MIT-MC
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 12 Jan 82 02:53-EST from kmp at MIT-MC

The problem is that the LISP Machine must interface to a large
number of various file systems with differing capabilities.  The ITS
file server always writes _LSPM_ OUTPUT and renames it on closing.
You can't even create a file with an underscore in its name on VMS,
but the VMS file server doesn't put the file into the directory until
close time.  I cannot imagine why you would want the file to appear
until it is closed and accessible, anyway.  An option to force an
incomplete file to appear under the final filename while it is still
being written would seem to me to be worse than useless.

:DONT-CLOBBER could be useful.  But realize that it cannot be
implemented with full reliability on ITS and perhaps other file
systems.  (It can be on VMS).  The check would have to be done at
CLOSE time (although additionally at OPEN time would be nice) since
you don't want to have an incomplete file there until you're done.


kmp@MIT-MC 01/12/82 02:53:51 Re: new open keywords?
To: (BUG LISPM) at MIT-AI
Two things I used to do a lot in Maclisp which it would be nice to see 
provided in the LispM primitively... I have need for both such
features in LispM code I am working on right now...

It would be nice if OPEN accepted a keyword called something like :SAFE
or :DONT-CLOBBER along with a :OUT keyword which would complain if the 
file existed and prompt for a new name to use instead...

Also, as nearly as I can tell, the file opened is either always or never
a temporary filename. An option that says to open as a temporary and 
rename when a close operation is done would also be a win. I don't mean
temporary in the Twenex sense, I mean it in the _LSPM_ OUTPUT sense...
(If this is already the default (which I suspect it is not), I don't see doc
on how you can keep it from happening.) Presumably WITH-OPEN-FILE would
set things up so that the kind of close it did on these sorts of files would
be a failing close and you would have to explicitly close the file in order
to win...


kmp@MIT-MC 01/12/82 02:42:11
To: (BUG lispm) at MIT-AI
In System 78.40, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.2, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

(grind-top-level '(prog nil a b (foo)))

loses. Two tags in a row seem to do the wrong thing. A space should be
output after each tag...


Date: 11 January 1982 23:49-EST
From: David L. Andre <DLA at MIT-AI>
Subject: LOAD-PATCHES bombing on SYS: FILE; REMOTE
To: BATALI at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 11 January 1982 08:58-EST
    From: John Batali <BATALI at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.30, ZMail 38.5, Local-File 30.4, Experimental DAEDALUS 29.1, microcode 837, 78.28 Daed 29.1, on Lisp Machine Two:

    ;;; On a "bare" machine:

    (si:load-patches)
    Patches for System (Current version is 78.40):
    78.31 define host FC, update protocol -- FileComputer.  Load? (Y, N, or P) Proceed.
    Loading AI: LMPAT; 78.31 QFASL into package USER
    Loading SYS: FILE; RMDEFS QFASL > into package FILE-SYSTEM
    Loading SYS: FILE2; PATHNM QFASL > into package FILE-SYSTEM
    Loading SYS: FILE; REMOTE QFASL > into package FILE-SYSTEM

    >>ERROR: (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING) is not a defined method; it is not possible to FDEFINITION-LOCATION it
    While in the function SI:METHOD-FUNCTION-SPEC-HANDLER  FDEFINITION-LOCATION  SI:*EVAL

    SI:METHOD-FUNCTION-SPEC-HANDLER:
    Arg 0 (FUNCTION): FDEFINITION-LOCATION
    Arg 1 (FUNCTION-SPEC): (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING)
       --Defaulted args:--
    Arg 2 (ARG1): NIL
    Arg 3 (ARG2): NIL
     

    ;;; Please advise
This can probably be fixed by reloading Local-File, whose current
released version is 32.  I've marked Local-File 30. obsolete, which it
evidently is.  If this doesn't solve your problem, send more mail and
I'll try harder.

It's also due to the fact that somebody (me) recompiled REMOTE, and
therefore 78.31 is behaving totally differently than before.  I thought
it was taboo to load files from patch files, for this reason.
Unfortunately, sometimes it's just too convenient.

How about the convention that any files loaded by patch files be copied
into the patch directory, where they're safe from recompiling damage?

MOON@MIT-MC 01/11/82 21:58:35 Re:  FDEFINITION-LOCATION error
To: BATALI at MIT-AI
CC: (BUG LISPM) at MIT-AI
    Date: 11 January 1982 08:58-EST
    From: John Batali <BATALI at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.30, ZMail 38.5, Local-File 30.4, Experimental DAEDALUS 29.1, microcode 837, 78.28 Daed 29.1, on Lisp Machine Two:

    ;;; On a "bare" machine:

    (si:load-patches)
    Patches for System (Current version is 78.40):
    78.31 define host FC, update protocol -- FileComputer.  Load? (Y, N, or P) Proceed.
    Loading AI: LMPAT; 78.31 QFASL into package USER
    Loading SYS: FILE; RMDEFS QFASL > into package FILE-SYSTEM
    Loading SYS: FILE2; PATHNM QFASL > into package FILE-SYSTEM
    Loading SYS: FILE; REMOTE QFASL > into package FILE-SYSTEM

    >>ERROR: (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING) is not a defined method; it is not possible to FDEFINITION-LOCATION it
    While in the function SI:METHOD-FUNCTION-SPEC-HANDLER  FDEFINITION-LOCATION  SI:*EVAL

    SI:METHOD-FUNCTION-SPEC-HANDLER:
    Arg 0 (FUNCTION): FDEFINITION-LOCATION
    Arg 1 (FUNCTION-SPEC): (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING)
       --Defaulted args:--
    Arg 2 (ARG1): NIL
    Arg 3 (ARG2): NIL
     

    ;;; Please advise
This was most likely caused by an obsolete combined-method in the file being loaded;
recompiling that file in the correct environment would fix it.  The flavor system
has been changed to defer the error until someone tries to actually call the 
undefined method, however those changes are only in the source.  If you back up
the stack a bit you will see an FDEFINE of (:METHOD foo :COMBINED bar) which
you may control-R out of.

MOON@MIT-MC 01/11/82 18:59:31 Re:  Your bug report about string-search
To: DPH at MIT-ML
CC: (BUG LISPM) at MIT-AI
    DPH@MIT-ML 01/11/82 16:22:27
    To: (BUG LISPM) at MIT-AI
    In System 78.40, ZMail 38.5, microcode 836, on Lisp Machine Nineteen:

    (string-search "" "banana") returns 0, while (string-search-char "" "banana")
    and (string-search-set "" "banana") return NIL.  Seeing that the zeroeth element
    of "banana" is "b" and not the null string, it seems that string-search should do
    what the other two functions do, namely return NIL for this somewhat pathalogical
    case.

string-search doesn't search for elements, it searches for substrings.
Indeed there is a null string in characters 0 up to but not including 0
of "banana", hence string-search is returning the right value.
There is no reason that it should be doing what the other two functions
do, since they (each) do something different.

string-search-char should be giving an error, since the null string is
not a character.  In fact it has a bug; string-search-char does no
type checking on its first argument.  Should it coerce symbols and
strings into characters, as the character function does?

string-search-set could consistently return either 0 or NIL, depending
on whether the glass is half-full or half-empty (whether it is looking
for a character in the (empty) set, or looking for a place where there
isn't a character not in the (empty) set.)  Evidently it is doing the
former.

Date: 11 JAN 1982 1507-PST
From: LEBRUN at PARC-MAXC
Subject:  sail bucky shifts
To:   brooks at AI, moon at AI
cc:   bug-lispm at AI

Sail's so-called "character set" consists of 128 "printing" characters,
plus completely independent control and meta bits (and also a few random
"unprintable" chartacters such as Call, which can also take buckies).

The Sail line editor uses M-<char> to mean insert <char>, and obviously
case matters (to give one example).

You can detect Shift via the Hyper crock.  Caps-Lock seems to require
TV:KEY-STATE.  

Is there a good mechanism for seeing changes in the -Lock keys?

-------

DPH@MIT-ML 01/11/82 16:22:27
To: (BUG LISPM) at MIT-AI
In System 78.40, ZMail 38.5, microcode 836, on Lisp Machine Nineteen:

(string-search "" "banana") returns 0, while (string-search-char "" "banana")
and (string-search-set "" "banana") return NIL.  Seeing that the zeroeth element
of "banana" is "b" and not the null string, it seems that string-search should do
what the other two functions do, namely return NIL for this somewhat pathalogical
case.


Date: Monday, 11 January 1982, 15:29-EST
From: Mike McMahon <MMcM at SCRC-TENEX>
To: DLA at MIT-AI
Cc: BUG-LISPM at MIT-AI

    Date: 7 January 1982 04:40-EST
    From: David L. Andre <DLA at MIT-AI>
    Using M-X Change File Properties, I can change the author of DLA MAIL
    from ".MAIL." to "DLA", but changing it back to ".MAIL." causes an
    "illegal request format" error.
Fixed in the file job.  Any six character name would have failed to work.

Date: 11 JAN 1982 1057-PST
From: DEKLEER at PARC-MAXC
Subject:  :method-combinations appear sticky.
To:   BUG-LISPM at MIT-AI

In ETHER 24.4, System 78.33, microcode 841, on Xerox Lisp Machine One:

If you define a flavor that uses a :method-combination like (:progn
:base-flavor-first :draw) and then remove this :method-combination, it
is impossible to get rid of. (I hadn't realized that you couldn't do
:progn method combination with typed methods.) Just recompiling the
flavor without the :method-combination does not make it go away (i.e.,
I continue get the error about illegal :after :draw methods).
Recompile-flavor, adding instance variables etc. all do nothing.  I
finally gave up and hacked the method-table directly.  There should be
a more winning way.


-------

Date: Monday, 11 January 1982, 11:10-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: RWK at MIT-MC
Cc: Moon at MIT-MC, BUG-LISPM at MIT-AI
In-reply-to: The message of 11 Jan 82 10:25-EST from Robert W. Kerns <RWK at MIT-MC>

    Date: Monday, 11 January 1982, 10:25-EST
    From: Robert W. Kerns <RWK at MIT-MC>
	Moon@MIT-MC 11/16/81 02:12:12
	GET whose first argument is a random data type (e.g. a FEF) returns NIL
	rather than complaining.  This is not a new bug.  It is possible that
	it is a Maclisp-compatibility "feature", I don't know.  Any objections
	to changing it?
    (Reading old mail again...)  This is indeed a MacLisp compatability
    misfeature.  Not only did I flush this in NIL's GET, but NIL's GET
    will complain if it notices an odd-length PLIST, or if you do (GET () ...)
I forgot to state the results:  It found a few lossages where MACSYMA
wanted to do GET on numbers, and on odd-length lists, and similar lossages.
Some of these were bugs, and all have or will be fixed.


Date: Monday, 11 January 1982, 10:25-EST
From: Robert W. Kerns <RWK at MIT-MC>
To: Moon at MIT-MC
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 16 Nov 81 02:12-EST from Moon at MIT-MC

    Moon@MIT-MC 11/16/81 02:12:12

    GET whose first argument is a random data type (e.g. a FEF) returns NIL
    rather than complaining.  This is not a new bug.  It is possible that
    it is a Maclisp-compatibility "feature", I don't know.  Any objections
    to changing it?

(Reading old mail again...)  This is indeed a MacLisp compatability
misfeature.  Not only did I flush this in NIL's GET, but NIL's GET
will complain if it notices an odd-length PLIST, or if you do (GET () ...)


Date: 11 January 1982 09:50-EST
From: Daniel Brotsky <dcb at MIT-AI>
Subject: wild-card types in system transformations
To: BUG-LISPM at MIT-AI
cc: RICH at MIT-AI, DCB at MIT-AI

In System 78.34, ZMail 38.5, microcode 843, 60Hz, on Lisp Machine Four:

There should be some way of having a wildcard-like input file-type list for a
transformation, that is, a transformation which accepts ANY file-type for its
input file(s).  This is needed to define transformations like

(SI:DEFINE-SIMPLE-TRANSFORMATION :IGNORE
  #'(LAMBDA (&REST IGNORE) NIL)
  #'(LAMBDA (&REST IGNORE) NIL)
  (':wild-type)					;this is needed here
  NIL)

which don't perform any actions but DO associate their input files with the
system.

	dan

Date: 11 January 1982 08:58-EST
From: John Batali <BATALI at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.30, ZMail 38.5, Local-File 30.4, Experimental DAEDALUS 29.1, microcode 837, 78.28 Daed 29.1, on Lisp Machine Two:

;;; On a "bare" machine:

(si:load-patches)
Patches for System (Current version is 78.40):
78.31 define host FC, update protocol -- FileComputer.  Load? (Y, N, or P) Proceed.
Loading AI: LMPAT; 78.31 QFASL into package USER
Loading SYS: FILE; RMDEFS QFASL > into package FILE-SYSTEM
Loading SYS: FILE2; PATHNM QFASL > into package FILE-SYSTEM
Loading SYS: FILE; REMOTE QFASL > into package FILE-SYSTEM

>>ERROR: (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING) is not a defined method; it is not possible to FDEFINITION-LOCATION it
While in the function SI:METHOD-FUNCTION-SPEC-HANDLER  FDEFINITION-LOCATION  SI:*EVAL

SI:METHOD-FUNCTION-SPEC-HANDLER:
Arg 0 (FUNCTION): FDEFINITION-LOCATION
Arg 1 (FUNCTION-SPEC): (:METHOD LM-PARSING-MIXIN :STRING-FOR-PRINTING)
   --Defaulted args:--
Arg 2 (ARG1): NIL
Arg 3 (ARG2): NIL
 

;;; Please advise

MOON@MIT-MC 01/11/82 02:26:42
To: Brooks at MIT-AI
CC: (BUG LISPM) at MIT-AI
    Date: 10 January 1982 16:47-EST
    From: Rodney A. Brooks <Brooks at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.35, ZMail 38.5, microcode 843, Screen Saver, on Lisp Machine Eighteen:

    Typing sailmc to the "connect to host:" prompt no longer works - its gives
    a "#<DEFAULT-HOST SU-AI> received a CHAOS-ADDRESS message, which went unclaimed."
    This worked a few months back.
The command is and always has been "mcsail".
Type the HELP key when Supdup is asking for a host.

    Also it seems that when supduped to SAIL a meta-<lower case> gets sent as a
    meta-<upper case>. This used to work right too. (Didn't check whether control
    loses similarly as I couldn't think of a way to distinguish what sail was receiving
    in that case.)
Those characters are not different on the Lisp machine keyboard.  I guess if
Sail wants them to be different we have a problem.

MOON@MIT-MC 01/11/82 02:25:13 Re: EQUAL and STRUCTURE-FORWARDING
To: DLA at MIT-AI
CC: (BUG LISPM) at MIT-AI
You should have said in your original message that you were talking about
instances, not symbols.  Making the definition of EQUAL on instances
flavor-dependent is on the long-term projects list.  Currently EQUAL
on instances is EQ but there is no reason it has to be.  This is entirely
different issue than what you were talking about in your original message
(and still has nothing whatever to do with STRUCTURE-FORWARD, except insofar
as that is one sure-fire way to get two instances with equal instance
variable values.)

Date: Sunday, 10 January 1982, 20:56-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Various flames
To: DLA at MIT-AI
Cc: RMS at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 10 Jan 82 15:30-EST from David L. Andre <DLA at MIT-AI>



    Date: 10 January 1982 15:30-EST
    From: David L. Andre <DLA at MIT-AI>
    Subject: Various flames
    To: RWK at SCRC-TENEX
    cc: RMS at MIT-AI, DLA at MIT-AI, BUG-LISPM at MIT-AI

	Date: Sunday, 10 January 1982, 04:23-EST
	From: Robert W. Kerns <RWK at SCRC-TENEX>
	    Date: 6 January 1982 00:43-EST
	    From: Richard M. Stallman <RMS at MIT-AI>
	    Perhaps it only works in MIT systems.  I don't know the right way to
	    conditionalize a patch that is for SYSTEM at MIT, only.
	Perhaps there should be an MIT patchable system, for all MIT specific
	stuff.  Certainly anything which is MIT only doesn't belong in SYSTEM.
    The solution which has been used is that patchable subsystems may be
    loaded anywhere.  Any patches which affect the subsystem should be
    loaded there, and not in System.  This allows a large number of systems
    to be maintained separately and without conflict.

    I also don't think that you can define a "standard MIT system"; there's
    too many special interest groups.  The standard system should be
    "System", and anything else loaded in as needed.

Right, the problem here is that this patch WASN'T to the standard
system, but to a system belonging to a special interest group, namely
users of RMS's file system.  MIT is a special interest group, though,
in its own right.  For example, patches relating to the MIT CHAOSnet
topology belong in an MIT system.  I guess the right place for RMS's
patch would be an RMSFS system.


MOON@MIT-MC 01/10/82 15:48:17 Re: si:setq-if-unbound
To: RWG at MIT-MC, KMP at MIT-AI
CC: (BUG LISPM) at MIT-AI
The only real reason this function exists, rather than DEFVAR
expanding into (OR (BOUNDP 'var) (SETQ var val)), is a bootstrapping
problem; it used to be the case that DEFVAR was used before OR
had been loading during initial loading of the system.  There is
no reason anyone not faced with this bootstrapping problem can't
simply use the OR BOUNDP code.

MOON@MIT-MC 01/10/82 15:43:02 Re: EQUAL and STRUCTURE-FORWARDING
To: DLA at MIT-AI
CC: (BUG LISPM) at MIT-AI
    Date: 10 January 1982 03:00-EST
    From: David L. Andre <DLA at MIT-AI>
    Subject: EQUAL and STRUCTURE-FORWARDING
    To: BUG-LISPM at MIT-AI

    It seems counterintuitive to me that EQUAL doesn't follow structure
    forwarding.  For instance, if I make two identical non-interned symbols,
    and structure-forward one to the other, they are not EQUAL, although
    everything else one could imagine doing to them treats them as the same.
Actually almost everything I could imagine doing to them treats them as
different: using them as property indicators, doing memq in lists on them,
delq'ing one from a list containing both, etc.  The only operations that
treat them as the same are SET, SYMEVAL, PUTPROP, and their friends.

Equality of symbols is defined to be EQ.  If you have two symbols with
the same print name, value, definition, properties, and package cell,
that doesn't make them equal regardless of whether there is any structure
forwarding in the vicinity.

Date: 10 January 1982 17:34-EST
From: David L. Andre <DLA at MIT-AI>
Subject: EQUAL and STRUCTURE-FORWARDING
To: DLW at MIT-AI
cc: DLA at MIT-AI, BUG-LISPM at MIT-AI

    Date: Sunday, 10 January 1982, 14:38-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>
    Subject: EQUAL and STRUCTURE-FORWARDING
    To: DLA at MIT-AI, BUG-LISPM at MIT-AI

    It doesn't seem counterintuitive to me.  Just because you have
    structure-forwarded their bodies does not mean that they are the same
    object.
It does to the garbage collector.  It is reasonable to assume that
EQness changes when running the garbage collector, because EQ is defined
on that level.  However, I don't think that EQUAL should be defined on
that level.
	     Furthermore, it is defined that symbols are EQUAL to each other
    if and only if they are EQ, and it is impossible to make EQ return T
    here since it is a deep part of the system that EQ works by straight
    pointer-comparison without reading through the pointers.
Maybe using symbols as my example was wrong.  It's just easiest to
demonstrate using MAKE-SYMBOL.  My problem actually came up with
instances.

I realize that I'm treading on shaky ground, but if you've ever had to
put FOLLOW-STRUCTURE-FORWARDING into every primitive which deals with
your object, you might think that there's a better way too.

Date: 10 January 1982 16:47-EST
From: Rodney A. Brooks <Brooks at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, microcode 843, Screen Saver, on Lisp Machine Eighteen:

Typing sailmc to the "connect to host:" prompt no longer works - its gives
a "#<DEFAULT-HOST SU-AI> received a CHAOS-ADDRESS message, which went unclaimed."
This worked a few months back.

Also it seems that when supduped to SAIL a meta-<lower case> gets sent as a
meta-<upper case>. This used to work right too. (Didn't check whether control
loses similarly as I couldn't think of a way to distinguish what sail was receiving
in that case.)

Date: 10 January 1982 15:54-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

I found the timing error in DLA;RESOUR.  It now works.

Date: 10 January 1982 15:34-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Conditional patches
To: BUG-LISPM at MIT-AI

To help people tell which patch files they must recompile, I've
started including the conditional in the one-line description of the
patch.  I recommend this as a general convention unless something
better is invented.

Date: 10 January 1982 15:30-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Various flames
To: RWK at SCRC-TENEX
cc: RMS at MIT-AI, DLA at MIT-AI, BUG-LISPM at MIT-AI

    Date: Sunday, 10 January 1982, 04:23-EST
    From: Robert W. Kerns <RWK at SCRC-TENEX>
	Date: 6 January 1982 00:43-EST
	From: Richard M. Stallman <RMS at MIT-AI>
	Perhaps it only works in MIT systems.  I don't know the right way to
	conditionalize a patch that is for SYSTEM at MIT, only.
    Perhaps there should be an MIT patchable system, for all MIT specific
    stuff.  Certainly anything which is MIT only doesn't belong in SYSTEM.
The solution which has been used is that patchable subsystems may be
loaded anywhere.  Any patches which affect the subsystem should be
loaded there, and not in System.  This allows a large number of systems
to be maintained separately and without conflict.

I also don't think that you can define a "standard MIT system"; there's
too many special interest groups.  The standard system should be
"System", and anything else loaded in as needed.

Date: Sunday, 10 January 1982, 14:38-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: EQUAL and STRUCTURE-FORWARDING
To: DLA at MIT-AI, BUG-LISPM at MIT-AI

It doesn't seem counterintuitive to me.  Just because you have
structure-forwarded their bodies does not mean that they are the same
object.  Furthermore, it is defined that symbols are EQUAL to each other
if and only if they are EQ, and it is impossible to make EQ return T
here since it is a deep part of the system that EQ works by straight
pointer-comparison without reading through the pointers.

Date: 10 January 1982 13:01-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, microcode 843, CStacy special, on Lisp Machine Six:

Using defflavor with :ORDERED-INSTANCE-VARIABLES (I know this is a bad thing). 
	
(defflavor foo
	(a b c)
	()
  :ordered-instance-variables)

(defflavor bar
	(d e f)
	(foo)
  (:ordered-instance-variables a b c d e f))

Gives ERROR: Flavor BAR has misspelled :ORDERED-INSTANCE-VARIABLES A B C.
But the ordering gets done correctly. This is because SI:DEFFLAVOR1
calls SI:VALIDATE-INSTANCE-VARIABLES-SPEC to check the args to
:ORDERED-INSTANCE-VARIABLES. But SI:VALIDATE-INSTANCE-VARIABLES-SPEC 
only works for locally specified (not inherited) instance-variables.
";Check for typos in user-specified lists of instance variables.
 ;This assumes that only locally-specified (not inherited) instance variables
 ;may be mentioned in DEFFLAVOR declaration clauses."

Date: 10 January 1982 06:05-EST
From: Kent M. Pitman <KMP at MIT-MC>
Subject:  String copying
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 9 January 1982 20:50-EST
    From: David L. Andre <DLA at MIT-AI>

        Date: 9 January 1982 00:19-EST
        From: Kent M. Pitman <kmp at MIT-AI>

        In System 78.33, ... microcode 836, ... on Lisp Machine Twenty-two:

        Is it a feature of STRING-RIGHT-TRIM (and SUBSTRING, for that matter) return
        copies of the input string rather than the original in the case where a 
        string EQUAL to the input is to be generated?
    It seems pretty clear in the documentation that this is so.

It seems pretty clear that it happens, but it was far from clear that the
implementors intended it to be a guaranteed feature which code should
be relying on. It's a really awful thing to have built into the semantics of
the primitive. I concur with GJC's remarks about this encouraging poor programming
practices.

        There should be a COPYSTRING function available for people who need a fresh
        copy of the string.
    STRING-APPEND is what you want.

No, STRING-APPEND may be all that is offered, but COPYSTRING is what I want.
I think the (APPEND frob nil) class of idioms is pretty dumb-looking. I assume
that's why the LispM offers COPYLIST instead of making the guy say something
awful like (APPEND obj NIL ':AREA area). In any case, the existence of this 
function was not my point...

My point was -- as GJC correctly guessed -- that if STRING-RIGHT-TRIM
didn't copy, it would be easy for me to write a version that did. Given that it
does copy, I'm forced to go back to STRING-SEARCH and SUBSTRING to write a non-
copying version... The RIGHT base primitive to offer should be the simplest. 
Fine if you want to provide both functionalities, but please include the easy
one in an easy way so users don't have to waste their time re-inventing existing
functionality.


Date: Sunday, 10 January 1982, 04:23-EST
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Various flames
To: Richard M. Stallman <RMS at MIT-AI>, DLA at MIT-AI
Cc: BUG-LISPM at MIT-AI
In-reply-to: The message of 6 Jan 82 00:43-EST from Richard M. Stallman <RMS at MIT-AI>

    Date: 6 January 1982 00:43-EST
    From: Richard M. Stallman <RMS at MIT-AI>

    Perhaps it only works in MIT systems.  I don't know the right way to
    conditionalize a patch that is for SYSTEM at MIT, only.

Perhaps there should be an MIT patchable system, for all MIT specific
stuff.  Certainly anything which is MIT only doesn't belong in SYSTEM.

Date: 10 January 1982 03:00-EST
From: David L. Andre <DLA at MIT-AI>
Subject: EQUAL and STRUCTURE-FORWARDING
To: BUG-LISPM at MIT-AI

It seems counterintuitive to me that EQUAL doesn't follow structure
forwarding.  For instance, if I make two identical non-interned symbols,
and structure-forward one to the other, they are not EQUAL, although
everything else one could imagine doing to them treats them as the same.

Date: 10 January 1982 02:09-EST
From: David L. Andre <DLA at MIT-AI>
Subject: new resources
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

There is some timing error when loading DLA;RESOUR which halts the
machine.  Since it seems to load 50% of the time, and since it works
once loaded, I suggest that anyone who loads it do so first, and keep
trying until you win...

Date: 10 January 1982 01:39-EST
From: David L. Andre <DLA at MIT-AI>
Subject: QSEND damage
To: ZVONA at MIT-AI
cc: BUG-LISPM at MIT-AI, CSTACY at MIT-AI

    Date: Saturday, 9 January 1982, 14:42-EST
    From: David Chapman <Zvona at MIT-AI>
    I did a qsend to someone who apparently was rejecting.
    Pop-up-receive-qsend tried to take an array leader of
    a null string without a leader.

    I did a qsend to someone whose qsend process had lost.  It (tried to) tell me
    that he was rejecting; not the same thing at all.

I'm not sure if I fixed your bugs, but 78.37 fixed all of the damage
associated with QSEND that I could find.  The QSEND-GAGGED hack now
rejects the connection, with the reason being what the message was
previously.  When the QSEND is from another lisp machine, the sender
will be given that reason and asked whether to mail instead.

Date: 10 January 1982 01:30-EST
From: David L. Andre <DLA at MIT-AI>
Subject: New resource features
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

I reimplemented resources so that the free-list is actually an array.
The RESOURCE structure itself is in the array leader.  This should cut
down on paging when using resources.  There is also an :INITIALIZER
keyword for DEFRESOURCE, it does the obvious thing.  And there's a
variable *ALL-RESOURCES*.  RQBs are now implemented as resources in the
source.

To load the resources into system 78, (and whoever recompiles things
should), load the file AI: DLA; RESOUR.  It will load the changes and
change over all the old resources.

kmp@MIT-MC 01/09/82 22:06:18 Re: Saving screen images
To: (BUG LISPM) at MIT-AI
It occurs to me that some environments have displays which do not particularly
care a whole lot about what's really there, but where it is valuable to the
user. A lisp listener is the best example, but there may be others. I wonder if
it would not be useful to have a command which saves the screen array for the
current window in some place where it can be retrieved and restored later by name.
eg, if I do (apropos ...), the information typed out might be useful later. I
might want to save my screen image so I can restore it later rather than doing
another call to apropos later (which would likely take longer). Suppose that doing
Terminal X and Terminal G (named for symmetry with C-X X and C-X G in ZWEI, for
want of a better naming theory) saved and retrieved screen images, prompting for
a name. So if I was in lisp and did 

   (apropos "foo" "bar")

and it did some typeout, i could do Terminal G and it would pop up a window asking
what name I wanted to save my screen image to. I would say something mnemonic
like ``(apropos "foo" "bar")'' and it would save it. Then I could continue my 
session. Later if I did Terminal G it would give me a pop-up menu of the screens
I had saved...

Other operations on saved images, like Killing them, Queueing them to the XGP
(note this is slightly different than queueing a screen image, because it is
smaller), etc. might want to be made available. Also, the saved screen images
might want to be per-window or might want to be global (so you could save them
in one environment and call them back in another...). Deciding the right thing
would require more thought than I have given it -- but I think the idea is sound.


kmp@MIT-MC 01/09/82 21:21:09
To: (BUG LISPM) at MIT-AI
In System 78.36, ZMail 38.5, ... microcode 836, ... on Lisp Machine Twenty-two:

I keep getting notification that my process SEND server got an error.
In the function CHAOS:POP-UP-RECEIVE-SEND-MESSAGE, ARRAY-LEADER is being
called on "", which has no leader. This has happened more than once in
system 78.33 and 78.36, and I expect it to recur so if there is more info
you need in order to debug this, let me know.
-kmp


Date: 9 January 1982 21:10-EST
From: David L. Andre <DLA at MIT-AI>
Subject: si:setq-if-unbound
To: KMP at MIT-AI, RWG at MIT-MC
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

First, things get moved into GLOBAL, not USER.

Second, I see no reason to move SI:SETQ-IF-UNBOUND there.  The only
reason this "crufty special form" should exist is what it does exists
for: Something compact into which DEFVAR macroexpands.

Date: 9 January 1982 20:50-EST
From: David L. Andre <DLA at MIT-AI>
Subject: String copying
To: KMP at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI

    Date: 9 January 1982 00:19-EST
    From: Kent M. Pitman <kmp at MIT-AI>
    To: BUG-LISPM at MIT-AI

    In System 78.33, ZMail 38.5, ... microcode 836, ... on Lisp Machine Twenty-two:

    Is it a feature of STRING-RIGHT-TRIM (and SUBSTRING, for that matter) return
    copies of the input string rather than the original in the case where a string
    EQUAL to the input is to be generated?
It seems pretty clear in the documentation that this is so.

    There should be a COPYSTRING function available for people who need a fresh
    copy of the string.
STRING-APPEND is what you want.

ALAN@MIT-MC 01/09/82 20:48:06 Re: Reading the Readtable
To: DLW at MIT-MC, HENRY at MIT-AI
CC: (BUG LISPM) at MIT-MC
    HENRY@MIT-AI 01/09/82 17:54:04 Re: Reading the Readtable

    My specific application was a kind of printing function which
    wanted to know if a character it was printing out was going to be
    slashified. The original MacLisp code used (STATUS SYNTAX ...).  I
    finally resorted to checking the length of the printed
    representation.

OK, probably what you are doing now is as good as anything.  The
printer has to make this decision too after all.  If you really wanted
a clean way to do this, I could extract the test the printer uses to
determine when to print with "|"'s and or "/"'s.  Notice that simply
having a function that looks in the readtable for the syntax of a
character wouldn't work, because (I presume) you DON'T want to
slashify "E"'s, but "E" does NOT have alphabetic syntax.

    In general, whenever there is a function which "changes the state
    of the world", there also should be some way to examine that
    state, if for no other reason than debugging so the user can see
    what the state is if he forgot what he set it to. Other useful
    applications are saving the current state in a variable, changing
    it temporarily, and restoring the old state later. I find it
    really hard to believe that there's "nothing meaningful that could
    be returned".  What I meant is that since
    SET-SYNTAX-FROM-DESCRIPTION takes keywords, the user thinks of
    those keywords as BEING the syntax of the character, so there
    should be a function (CHARACTER-SYNTAX "A") is :ALPHABETIC, etc.

1) The keywords do not cover all possible syntaxes.  They only cover a
few of the initial characters.  I could make a function that returned
one of these keywords to you if it existed, but there would be nothing
to return in the other cases.  You could force me to think up funny
words to cover all of the characters, but there would be no guarantee
that if a user made his own readtable he would be so kind to you.

2) You are being fooled by the fact that the readtable is an array
indexed by characters into thinking that the things stored therein are
meaningful in a context other than associated with that array.  Taking
the stuff stored in one readtable at location #/: and storing it in
ANOTHER readtable at location #/$ will NOT necessarily cause the "$"
in the second readtable to act like a package prefix.  It might make
it act like a ".".  It might cause the reader to get an array out of
bounds error.  I could write a function that took two characters and a
SINGLE readtable and told you if they had the same syntax, but then
again, in your application you would wind up slashifing all of your
"E"'s because they aren't alphabetic.

3) It is true that the user has no way to tell what the syntax of a
particular character is other than simply trying it.  But I don't see
where it is a general principle that wherever there is a function to
change something there needs to be a way to see if that change has
been effected.  There is a function to draw a line between two points
on your monitor, but there is no function to check to see if there is
ALREADY a line drawn between two points, and people don't go around
asking for one either.

    Date: Saturday, 9 January 1982, 17:53-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>

    You sound upset.  Could you please be calm about this?

I sound upset because I believe that if you though about this for ten
minutes (given that I KNOW that you understand how the reader is
implemented) you would understand that I am not stonewalling or
attempting to force my own views of anything on Henry.  I am simply
trying to point out that it is IMPOSSIBLE to provide something that
has the same contract as MacLisp's (STATUS SYNTAX ...) does.  (Even if
you are not allowed to examing the object returned.)

							    I gather from
    what you say that the problems with Henry's suggestion are (1) it loses
    information, and (2) it might be ambiguous because there might be more
    than one "description" that applies to a particular character.  

NO!  I am trying to say that there character which HAVE NO DESCRIPTIONS!

								    Now,
    indeed, it is going to lose information, and you can't just use the
    "description" to move syntax attributes from one charcter to another.
    However, it would be nice to be able to ask whether a certain character
    is alphabetic in a certain readtable, even though there is other
    interesting information to be had about the character.  

What is meant by alphabetic here?  See below.

							    Furthermore, it
    looks to me (at a glance) like the set of "descriptions" documented with
    si:set-syntax-from-description is non-overlapping.  So it still looks
    like the function Henry is asking for may have some value, although not
    all of the value that you might ideally want it to have.  This would be
    both meaningful and useful without letting you use it later in a
    different readtable.  In answer to your question, yes, I do want them to
    both return ALPHABETIC, and if I care that S can be used in small
    flonums, well, there's no description for that anyway.  Maybe we really
    should have something like two-argument typep, though.

Try and think for a moment what you mean by "alphabetic syntax".  Do
you mean that it is a member of the alphabet?  Then you don't need a
readtable at all.  Do you mean that it has the same syntax as "A" and
"&"?  Then "E" is NOT alphabetic.  Do you mean that it need not be
slashified to get it into the printname of a symbol?  Then "E" will
certainly be alphabetic, but so will "3", ".", "1", and "4".

My best guess is that you mean: "Those characters that when they are
the one and only character in the printname of a symbol don't cause
that symbol to be printed slashified".  This includes all the
characters with :ALPAHBETIC syntax (and more, like "E" and "+"), and
COINCIDENTALLY excludes all the other named syntaxes.  I could write a
predicate to tell you when a character had that property as easily as
I could extract the complete slashifier tester from the printer.  Do
you think that one or the other of these predicates would be useful?

Date: 9 January 1982 20:46-EST
From: David L. Andre <DLA at MIT-AI>
Subject: System 2 L
To: DLW at MIT-AI
cc: BUG-LISPM at MIT-AI, DLA at MIT-AI, rwg at MIT-MC

One thing about which I've complained in the past is that "Terminal" and
"System" key commands don't take the same argument syntax.  (One says
System c-L to make a new lisp listener.)  If a numeric argument syntax
is defined for system keys, I am in favor of System 0 L creating a new
lisp listener, and flushing System c-L.  System 1 L would be the same as
System L, etc.

At any rate, I have wanted System 2 L in the past also, and am in favor
of the change.

Date: 9 January 1982 20:31-EST
From: David L. Andre <DLA at MIT-AI>
Subject: OPEN keywords
To: RMS at MIT-AI, HIC at MIT-AI, MOON at MIT-AI
cc: BUG-LISPM at MIT-AI

The current situation, in which file systems barf at keywords that they
don't know how to handle, seems more reasonable to me than having them
be ignored.  However, before a special thing is done for OPEN, may I
suggest that there are many places in message passing where a single
message comes in more than one "mode".  A rather limited analogy is in
the window system, where :READ/SET-CURSORPOS comes in :CHARACTERS and
:PIXEL modes.  Not all :READ/SET-CURSORPOS messages might come in both
modes, however, and it might be worthwhile to come up with a general way
of determining whether a mode is supported.  One can also imagine a
"tree" message passing structure, where modes have submodes, etc.

Barring that, both RMS's suggestion of :OPEN-KEYWORD-HANDLED-P and
Moon's suggestion of a global list of ignorable open keywords are OK
with me.

Date: Saturday, 9 January 1982, 17:53-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Reading the Readtable
To: ALAN at MIT-MC
Cc: BUG-LISPM at MIT-MC, Henry at MIT-AI

You sound upset.  Could you please be calm about this?  I gather from
what you say that the problems with Henry's suggestion are (1) it loses
information, and (2) it might be ambiguous because there might be more
than one "description" that applies to a particular character.  Now,
indeed, it is going to lose information, and you can't just use the
"description" to move syntax attributes from one charcter to another.
However, it would be nice to be able to ask whether a certain character
is alphabetic in a certain readtable, even though there is other
interesting information to be had about the character.  Furthermore, it
looks to me (at a glance) like the set of "descriptions" documented with
si:set-syntax-from-description is non-overlapping.  So it still looks
like the function Henry is asking for may have some value, although not
all of the value that you might ideally want it to have.  This would be
both meaningful and useful without letting you use it later in a
different readtable.  In answer to your question, yes, I do want them to
both return ALPHABETIC, and if I care that S can be used in small
flonums, well, there's no description for that anyway.  Maybe we really
should have something like two-argument typep, though.


Date: 9 January 1982 17:27-EST
From: George J. Carrette <GJC at MIT-MC>
To: dlw at MIT-AI
cc: BUG-LISPM at MIT-AI, kmp at MIT-AI

The problem with the STRING-TRIM always doing copying is *not* one
of convenience, it is one of missing functionality. If STRING-TRIM
did not always copy then one can write a STRING-TRIM which did always copy.
But with "always-copy" being primitive one cannot write the function
which KMP wants. So unless one can prove that KMP's functionality has
no reasonable application, there is an obvious flaw in the present
choice of string primitive semantics. [The present "always-copy" rule,
although simple, has an implicit bias towards programming with side effects.]

-gjc


Date: 9 January 1982 17:02-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: Reading the Readtable
To: DLW at MIT-MC
cc: BUG-LISPM at MIT-MC, Henry at MIT-AI

    Date: Saturday, 9 January 1982, 14:20-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>

    One problem with the existing feature is that there is no way to ask a
    readtable what is in it.  I admit that I don't know why you would want
    this, but you might.

I know that this is a "problem" with the existing "feature".  To be
able to return ssomething from (STATUS SYNTAX ...) that is USEFUL
(i.e. you can save the number someplace and then us it later in a
DIFFERENT readtable) is IMPOSSIBLE in general without re-implementing
the reader from the ground up and re-introducing various magic
meaningful "syntax bits" ala MacLisp.  I repeat what I said before:
"There is NOTHING MEANINGFUL I could return from (STATUS SYNTAX ...)"

    Also, Alan said:
        I agree that having a symbolic name for a usefull syntax is a good
        idea, but I cannot possibly think up names for all of them.  Remember
        that A is different from E is different from S etc.  Do you have a
        specific syntax that you think deserves a name?

    in reply to Henry's:
        Ideally, it would returns keywords as acceptable to 
        SET-SYNTAX-FROM-DESCRIPTION.

    So maybe Henry is just asking for something that returns the "description"
    without returning that information which differs between A and S.

I don't think I understand at all what it is that you think you are
asking for here.  If I am allowed to ignore the difference between "A"
and "S", then how about the difference between "A" and "(", can I
ignore that too?  Why don't I just always return NIL then?  Do you
propose that:

(get-syntax-description #/A) => ALPHABETIC

and:

(get-syntax-description #/S) => ALPHABETIC

??  What happens if you were actually interested in the fact that "S"
can be used in small flonums?  How am I supposed to decide this?  What
about the difference between "+" and "-", do we judge that to be
signifigant?

    I'd also be interested in knowing what the application is, though; maybe
    there's a better solution that we should be implementing.

Thats what I said.  Before we get off on flaming about all kind of
difficult/impossible ideas that I get to implement in my spare time,
why don't we find out what the application is.  Not for a "better
solution", but for a "POSSIBLE solution".

Date: 9 January 1982 16:39-EST
From: Gerald R. Barber <JERRYB at MIT-AI>
Subject:  System-2-L
To: DLW at MIT-AI
cc: BUG-LISPM at MIT-MC, RWG at MIT-MC

    Date: Saturday, 9 January 1982, 14:28-EST
    From: Daniel L. Weinreb <dlw>
    Re:   System-2-L

    Yeah, I think it is worse than Terminal-3-S, although they're close.
    I'd say that Terminal-3-S is just barely OK and System-2-L is just
    barely not OK.
I disagree, it is easier to remember recency of access on a per window type
basis than for all windows in the system and thus more useful.  I would use
this feature frequently if it were installed.



Date: Saturday, 9 January 1982, 15:42-EST
From: David Chapman <Zvona at MIT-AI>
To: kmp at MIT-AI, BUG-LISPM at MIT-AI
In-reply-to: The message of 9 Jan 82 00:19-EST from Kent M. Pitman <kmp at MIT-AI>

     (LET ((A "FOO")) (EQ A (SUBSTRING A 0 3))) should return T.
I disagree.  I don't want to have to write

(COND ((AND (EQ X 0) (EQ Y (ARRAY-ACTIVE-LENGTH A)))
       (COPYSTRING A))
      (T (SUBSTRING A X Y))) 

if I want to side-effect the string later.

Date: Saturday, 9 January 1982, 15:31-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.0, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

I did a qsend to someone whose qsend process had lost.  It (tried to) tell me
that he was rejecting; not the same thing at all.

Date: Saturday, 9 January 1982, 14:28-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: System-2-L
To: RWG at MIT-MC
Cc: BUG-LISPM at MIT-MC

Yeah, I think it is worse than Terminal-3-S, although they're close.
I'd say that Terminal-3-S is just barely OK and System-2-L is just
barely not OK.

Oh, I see now why you asked for it; I hadn't understood from the first
message.  Well, yes.  This is what we call an "advanced user" feature,
since one would have had to be pretty damned familiar with the window
system to have anticipated all of these effects and then realized that
the little-used System-2-L command (had it existed) would be the right
thing in this case.  Since it is easy to document ("it's like System L
twice"), I wouldn't mind seeing it put in, although I can't belive it is
going to get a whole lot of use...


Date: Saturday, 9 January 1982, 14:42-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.0, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

I did a qsend to someone who apparently was rejecting.
Pop-up-receive-qsend tried to take an array leader of
a null string without a leader.

Date: Saturday, 9 January 1982, 14:22-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
To: kmp at MIT-AI, BUG-LISPM at MIT-AI

But if string-right-trim were defined to not necessarily copy, and you
used "copystring" to copy the result, then you would sometimes end up
copying the string twice, which is also undesirable.  In general, the
string functions that return new strings and don't have something about
being destructive in their names are not destructive.  I'd hate to make
the rule more complicated and start introducing bugs because people made
the natural assumption that string-right-trim always creates a new string.

Date: Saturday, 9 January 1982, 14:20-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
Subject: Reading the Readtable
To: ALAN at MIT-MC, Henry at MIT-AI
Cc: BUG-LISPM at MIT-AI

One problem with the existing feature is that there is no way to ask a
readtable what is in it.  I admit that I don't know why you would want
this, but you might.

Also, Alan said:
    I agree that having a symbolic name for a usefull syntax is a good
    idea, but I cannot possibly think up names for all of them.  Remember
    that A is different from E is different from S etc.  Do you have a
    specific syntax that you think deserves a name?

in reply to Henry's:
    Ideally, it would returns keywords as acceptable to 
    SET-SYNTAX-FROM-DESCRIPTION.

So maybe Henry is just asking for something that returns the "description"
without returning that information which differs between A and S.

I'd also be interested in knowing what the application is, though; maybe
there's a better solution that we should be implementing.

Date: Saturday, 9 January 1982, 13:57-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.0, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

In chose variable values, rubbing out across line
boundaries causes TRAP: BITBLT destination too small.

End key should end typein here.

When you mouse an item to modify, it sets the cursor one
space before where the item begins.  (At least this is
the case when changing the forwarded message seperator in
Zmail Profile.)

Date: Saturday, 9 January 1982, 13:52-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.0, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

In chose variable values, aborting out of setting a
previously null item leaves the string [Abort] there as
though it were a value.

Date: 9 January 1982 13:48-EST
From: David Chapman <Zvona at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.35, ZMail 38.5, Experimental Programmer's Apprentice (Aux) 11.0, Experimental Programmer's Apprentice 11.0, Experimental Dungeon 1.0, microcode 836, Demo with PLI, on Lisp Machine Twenty-two:

When the mouse cursor changes to the scroll cursor (thick
arrow) mouse-sensitive items should be inhibited.  In
Zmail Profile, I thought I was scrolling a page when in
fact I was setting a value.

Date: 9 January 1982 11:54-EST
From: Gregor J. Kiczales <Gregor at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, microcode 836, 60.45hz, on Lisp Machine Twenty:

(defvar foo 1 "a dummy variable")
"a dummy variable"

(documentation 'foo)
NIL

I realize that documentation is defined to work only for
functions (Blue Book page 150), but maybe it should be changed
to be more general. This might cause problems if its argument
is the name of a function and has a VALUE-DOCUMENTATION property.

RWG@MIT-MC 01/09/82 04:33:44 Re: si:setq-if-unbound
To: KMP at MIT-MC
CC: (BUG LISPM) at MIT-MC
I'll bite:  why should anyone use that crufty special form when they can
write a winning macro which doesn't call EVAL and takes 2 n args?

RWG@MIT-MC 01/09/82 04:05:46 Re: System-2-L
To: dlw at MIT-AI
CC: (BUG LISPM) at MIT-MC
    Date: 8 January 1982 22:06-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>

    Your proposed System 2 L command seems to have extremely limited benefit
    to the user.  First, it would be usually be hard to predict what it would
    do; it is not apparent from any easy-to-see visual display at all just
    which window would appear.  
Worse than, eg, Terminal 3 S?
				Secondly, it is only one more keystroke to
    just type System L System L, and since you can do this with one finger
    poised over each key, the latter keystroke sequence is probably easier
    to type despite being slightly longer.
As I tried to say in my note, it has little to do with keystrokes.  I
typed System 2 L because I knew I wanted System L System L, except tha
the latter would screw me by temporarily exposing a fullscreen listener
and consequently deexposing small windows containing debugging info.

However, you are right that it is a very minor deficiency.

Date: 9 January 1982 00:19-EST
From: Kent M. Pitman <kmp at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.33, ZMail 38.5, ... microcode 836, ... on Lisp Machine Twenty-two:

Is it a feature of STRING-RIGHT-TRIM (and SUBSTRING, for that matter) return
copies of the input string rather than the original in the case where a string
EQUAL to the input is to be generated? That seems pretty wasteful since the
string cons'd might be long and it may be that the odds are in favor of there
not being anything to get stripped anyway.

 (LET ((A "FOO")) (EQ A (SUBSTRING A 0 3))) should return T.

There should be a COPYSTRING function available for people who need a fresh
copy of the string. Similarly,

 (LET ((A "FOO")) (EQ (STRING-RIGHT-TRIM "0123456789" A) A)) should return T.


Date: 8 January 1982 22:06-EST
From: Daniel L. Weinreb <dlw at MIT-AI>
To: BUG-LISPM at MIT-AI, rwg at MIT-MC

Your proposed System 2 L command seems to have extremely limited benefit
to the user.  First, it would be usually be hard to predict what it would
do; it is not apparent from any easy-to-see visual display at all just
which window would appear.  Secondly, it is only one more keystroke to
just type System L System L, and since you can do this with one finger
poised over each key, the latter keystroke sequence is probably easier
to type despite being slightly longer.  (Admittedly it takes longer to
execute; I hope that we will finally get this improved soon.)

HIC@MIT-MC 01/08/82 21:57:05 Re: Extra OPEN keywords
To: RMS at MIT-MC
CC: (BUG LISPM) at MIT-MC
Please give me some examples of these keywords.


Date: 8 January 1982 21:43-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: RWG at MIT-MC
cc: BUG-LISPM at MIT-MC

    Date: 01/08/82 07:18:50
    From: RWG
    To:   (BUG LISPM)

    In world 78 at PARC, put a peek in Areas mode and shrink the window
    height down to a line or two including WORKING-STORAGE-AREA.  Expose
    a small listener and another small window, and click left alternately
    on them, or repeatedly in the label area of the peek.  Each click
    eats 64 cells.
So?  Isn't the window system allowed to CONS?


Date: 8 January 1982 21:09-EST
From: Alan Bawden <ALAN at MIT-MC>
Subject: Reading the Readtable
To: Henry at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 8 January 1982 16:52-EST
    From: Henry Lieberman <Henry at MIT-AI>

    How do you ask the readtable what the syntax of a particular
    character is? [Like MacLisp's  (STATUS SYNTAX ...)]
    No function to do this is documented in the Blue manual.
    Ideally, it would returns keywords as acceptable to 
    SET-SYNTAX-FROM-DESCRIPTION.

There is no object that I could return to you in that situation that
would be any more usefull than the original character was.  Where in
MacLisp you would do:

(setsyntax #/$ (status syntax #/:) nil)

on the LispMachine can be accomplished by doing:

(set-syntax-from-char #/$ #/:)

I agree that having a symbolic name for a usefull syntax is a good
idea, but I cannot possibly think up names for all of them.  Remember
that A is different from E is different from S etc.  Do you have a
specific syntax that you think deserves a name?  What is your
application?  Perhaps you can be accommodated in some other way?


Date: 8 January 1982 18:42-EST
From: Kent M. Pitman <kmp at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.33, ZMail 38.5, ... microcode 836, ... on Lisp Machine Twenty-two:

Add SI:SETQ-IF-UNBOUND to the list of things I think have no business being
kept off of the USER: package. Since BOUNDP is a well-formed concept at the 
user level, so too is SETQ-IF-UNBOUND. I hate calling things from SI: and it
is senseless for me to have to write my own USER:SETQ-IF-UNBOUND.

Date: 8 January 1982 16:52-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Reading the Readtable
To: BUG-LISPM at MIT-AI


How do you ask the readtable what the syntax of a particular
character is? [Like MacLisp's  (STATUS SYNTAX ...)]
No function to do this is documented in the Blue manual.
Ideally, it would returns keywords as acceptable to 
SET-SYNTAX-FROM-DESCRIPTION.

Date: 8 January 1982 08:13-EST
From: Robert W. Kerns <RWK at MIT-MC>
Subject: Host table
To: NEVES at MIT-MC
cc: BUG-LISPM at MIT-MC

The host table was updated ages ago to know that MIT-VAX is usually a UNIX.
If you delete the host-unit off of SI:HOST-ALIST (if I remember the variable
right), the LISPM will be forced to ask a host sever, and will get the
up-to-date info on that host.


RWG@MIT-MC 01/08/82 07:18:50
To: (BUG LISPM) at MIT-MC
In world 78 at PARC, put a peek in Areas mode and shrink the window
height down to a line or two including WORKING-STORAGE-AREA.  Expose
a small listener and another small window, and click left alternately
on them, or repeatedly in the label area of the peek.  Each click
eats 64 cells.

Date: 8 January 1982 02:27-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: PATHNM changes and you
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI

    If you still want to use a directory stream, you should define what is
    now READ-DIRECTORY-STREAM-ENTRY to be a message to pathnames,

I defined an operation :DIRECTORY-STREAM-DEFAULT-PARSER, which for
chaos-pathnames returns #'substring and for remote-data-pathnames
returns #'parse-random-sexp.

Date: 8 January 1982 02:21-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: HIC at MIT-MC
cc: BUG-LISPM at MIT-AI

    It is not acceptable to me that random keywords do not give errors.  If the keywords
    you are using can be just as well ignored, then I wonder about the functionality.
If you are trying to say that they must be no-ops or not useful,
you ought to know better.
They can "just as well" be ignored only in that I know how to design
them so that the calling programs continue to work if they are ignored.
This in no way limits what purpose the new open keyword can achieve.
    If they cannot be safely ignored, then ignoring them is asking for lots of trouble.
    In order to supoprsupport many different file systems, things in the system itself
    need to consider the lowest common denominator, or else check explictly when they
    can use a feature supplied by only one file system.
At present there is no way to make such a check.
My initial message suggested implementing one, but I do not seem to be
getting any positive response.

    I do not see any automatic way
    around this.
I suggested two such ways: namely, either ignore unknown keywords, or
have a keyword which says to ignore unknown keywords.

I am raising this issue only for your sake, since I would expect you
would like to avoid having to change your file systems when I need to
introduce new open keywords and make the editor use them.  I am
willing to go to some extra effort to make things continue to work
without your having to change anything, but first you must co-operate
enough to create a mechanism for me to do so.

Date: 8 January 1982 01:58-EST
From: Howard I. Cannon <HIC at MIT-MC>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

It is not acceptable to me that random keywords do not give errors.  If the keywords
you are using can be just as well ignored, then I wonder about the functionality.
If they cannot be safely ignored, then ignoring them is asking for lots of trouble.
In order to supoprsupport many different file systems, things in the system itself
need to consider the lowest common denominator, or else check explictly when they
can use a feature supplied by only one file system.  I do not see any automatic way
around this.


Date: 7 January 1982 21:25-EST
From: David L. Andre <DLA at MIT-AI>
Subject: SETTABLE-PROPERTIES
To: RMS at MIT-AI, MMCM at MIT-AI, BSG at MIT-AI
cc: BUG-LISPM at MIT-AI

I did not get any objections to two new pathname messages
:DEFAULT-SETTABLE-PROPERTIES and :PROPERTY-SETTABLE-P.  I will implement
them and semi-obsolete the :SETTABLE-PROPERTIES on NIL in directory
lists if I don't hear any complaints by tomorrow.

For CHAOS pathnames, properties will be maintained on
(DEFAULT-PATHNAME NIL host NIL NIL T) for this purpose.  Relevant
properties which may be sent via the directory list are:

:SETTABLE-PROPERTIES	   This is what :DEFAULT-SETTABLE-PROPERTIES
			   will return.  If neither other property is
			   present, :PROPERTY-SETTABLE-P will work by
			   MEMQ on this.
:ALL-PROPERTIES-SETTABLE   This will cause :PROPERTY-SETTABLE-P to
			   always return T.
:UNSETTABLE-PROPERTIES	   :PROPERTY-SETTABLE-P will return NIL for any
			   property on this list.

Every time a DIRECTORY-LIST is done, these properties will be updated.
If they do not exist when a :PROPERTY-SETTABLE-P message is done, a
bogus DIRECTORY-LIST will be done to set them up.

:SETTABLE-PROPERTIES of T will be obsolete; that should always be a list
of symbols for the advantage of utilities such as Change File Properties
which want to use them.  I will attempt to make Change File Properties
smart about user defined properties, though I'm not sure I know how.

Date: 7 January 1982 20:03-EST
From: Mike McMahon <MMCM at MIT-AI>
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 4 January 1982 22:40-EST
    From: David L. Andre <DLA at MIT-AI>
    Aborting out of a reply in the pop-up QSEND window leaves you in STOP. 
    This use to work, in fact, was fixed once before...
Fixed in the source.  Someone had broken its unwind-protect, made it use
(RETURN) outside any PROG, and some other random vandalism.

Date: 7 January 1982 17:30-EST
From: David L. Andre <DLA at MIT-AI>
Subject: PATHNM changes and you
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

I looked at your directory listing code, and I really think that you can
speed up the operation of your file system if you don't go through the
intermediary of a directory stream.  You still may want to implement
:DIRECTORY-STREAM for possible use with QFILE someday, or simply because
it's good to have a directory stream of some sort.  However, the default
should be something which conses up the directory list directly from the
internal file system structure.  See my FS for what I mean.

If you still want to use a directory stream, you should define what is
now READ-DIRECTORY-STREAM-ENTRY to be a message to pathnames, and define
your own format of directory stream, which I think you'll probably need.
If you still feel strongly about changing the QFILE format of
DIRECTORY-STREAM, it should be discussed and done in a manner acceptable
to everyone.

			-- Dave

Date: 7 January 1982 17:19-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Pathnm changes
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

I made the following changes to LMIO;PATHNM.

- I removed all references to structured components.  I think I did it
  correctly, but somebody should probably check me.

- I made the default parser for :DIRECTORY-STREAM be SUBSTRING again.  I
  am assuming that no QFILE servers have been changed.

- I made the default :DIRECTORY-LIST be a complaint that it can't be
  done.

- I made the default :DIRECTORY-LIST-STREAM work through
  :DIRECTORY-LIST.  Also the function FS:DIRECTORY-LIST-STREAM is the
  entry point for this.  Since the previous implementation was
  ambiguous, I called the stream operation :ENTRY.

- I made a DIRECTORY-STREAM-MIXIN, which defines :DIRECTORY-LIST and
  :DIRECTORY-LIST-STREAM in terms of :DIRECTORY-STREAM.  This is part of
  CHAOS-PATHNAME.  A comment in the code describes how arbitrarily
  formatted directory streams could be cleanly implemented.


Date: 7 January 1982 15:14-EST
From: Mike McMahon <MMCM at MIT-AI>
To: neves at MIT-VAX
cc: BUG-LISPM at MIT-AI, jekulp at MIT-MC

    Date: 5 Jan 1982 16:47:03-EST
    From: neves at mit-vax
    1.  When I tried to ^x^f a file on the Vax while logged into
    MC the Lispm asked me to log will name and password or just
    password.  Because my ITS name is the same as my Unix name I
    just typed in my password (carriage return) but the Lispm just
    prompted me for my name/password again.  Typing both worked.
Are you sure they are the same?  Remember that case matters to unix,
so NEVES wouldn't do for neves.

    2.  When I finally got logged in I tried finding my login file
    to test things out.  I ^x^fed /usr/neves/.login .  The lispm
    for some reason wanted to put some file name in front of the
    ".login" and produced buffer.login I believe.  Periods can be
    part of Unix file names and don't have the special significance
    that they do in Tops-20 (i.e. seperating name and extention).
Well, the lisp machine wants to know about foo.lisp as two separate
components.  Leading dots could be part of the filename.

    3.  I assumed that when I logged in I could access my files by
    just typing in their name (i.e. foo) and not the whole pathname
    /usr/name/foo.  This was not always the case.  If had a Vax
    file in the buffer then the new file I wanted to find would
    have the right default (i.e. if I was editting /usr/neves/bar and
    wanted to read in foo I would just ^x^f vx:foo.  However if I
    had an ITS file in my buffer and tried to read vx:foo I would
    get part of the ITS file name in the file I wanted read (i.e.
    /neves/foo where neves was the directory of the ITS file I was
    looking at.  (Perhaps this problem had something to do with 
    the ".login" case above?  I remember trying to read in the .login
    file when I was in ITS buffer mode.)
Perhaps you want to change FS:*DEFAULTS-ARE-PER-HOST*?
Defaulting does not work the same way on unix on the lisp machine.

MOON@MIT-MC 01/07/82 14:15:24 Re:  Ignoring unrecognized open keywords
To: RMS at MIT-AI
CC: (BUG lispm) at MIT-AI
Whether it is right to ignore it or to give an error depends on the
keyword.  If it is one that only modifies the operation of OPEN
(say :DONT-UPDATE-REFERENCE-DATE) it is reasonable to ignore it.
But if it is something that fundamentally changes what OPEN does
(e.g. :FLAVOR) it would be totally wrong to ignore it and do something
else besides what the program asked for.  Perhaps there should be
a global variable that contains a list of OPEN keywords that may
be ignored; each file system may push on this list those keywords
that it defines and other file systems may safely ignore.  Perhaps
there should be a second global variable that contains a list of OPEN
keywords that may be ignored if their argument is NIL (or maybe it
should be an a-list for keywords to ignorable arguments).  Needless
to say there should be a common subroutine that one may call with
an unknown keyword and its argument to either ignore it or signal
an error.

MOON@MIT-MC 01/07/82 13:52:59 Re: Split Screen/Layouts
To: Henry at MIT-AI
CC: (BUG lispm) at MIT-AI
There is a split screen option to put the created layout on the System key
(you have to select the frame option first).
The Layouts command is a crock and should be flushed, or else done over.
For one thing, they way it works now makes it inherently impossible to
save layouts on files.

Date: 7 January 1982 11:08-EST
From: Henry Lieberman <Henry at MIT-AI>
Subject: Split Screen/Layouts
To: BUG-LISPM at MIT-AI


A handy thing that would make the Layouts command
more useful is to have a Split Screen option that would
allow you to name a layout when you construct it, to make it
easy to return to should you ever want to. Can you
save layouts on files? This would be helpful also.

Date: 7 January 1982 04:40-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.34, ZMail 38.5, Local-File 31.0, microcode 843, on Lisp Machine Eighteen:

Using M-X Change File Properties, I can change the author of DLA MAIL
from ".MAIL." to "DLA", but changing it back to ".MAIL." causes an
"illegal request format" error.

Date: 7 January 1982 04:02-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: GJC at MIT-AI, BUG-LISPM at MIT-AI

You have it backwards.

The purpose of my proposal is to spare other people the trouble
of changing their file systems when I create and start using
a new open keyword.

If other file systems are going to ignore only specific other
keywords, they must be changed whenever I create a new one.

It is not clear what you mean by "time to be conservative",
but if you mean I should simply abandon ideas which require
new open keywords for LMFILE, I refuse.  I am willing to try
to reduce the impact on others, and that is what my previous
message was for.  I am waiting to see whether other people
are willing to cooperate in trying to compromise.  If they are
not, I will quit trying.

Date: 7 January 1982 03:24-EST
From: George J. Carrette <GJC at MIT-MC>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 7 January 1982 02:53-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    To:   BUG-LISPM at MIT-AI

    I was susprised to discover that various special open keywords
    implemented by LMFILE caused errors when passed to other file systems.
    I had expected them to ignore keywords they did not recognize.

    I still think they should ignore keywords that they don't recognize.

That's the biggest bullshit I've ever heard. Specific pre-determined
keywords, sure. But why be so willing to throw away elementary
and well accepted error-checking principals so lightly?

Face facts, there is more than one file system for the lispmachine,
and those involved have to deal with the fact by means *other*
than: "argument by seeing who has more time to waste going around changing
existing code, may the fastest editor win!" Time to be conservative,
not time to be one of entropy's little helpers.

-gjc


Date: 7 January 1982 02:53-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

I was susprised to discover that various special open keywords
implemented by LMFILE caused errors when passed to other file systems.
I had expected them to ignore keywords they did not recognize.

I still think they should ignore keywords that they don't recognize.
It is easy for a calling program to use a new feature only if it
is implemented by the file stream, but it is not easy for the program
to avoid specifying the open keyword to request the feature if
the pathname flavor does not support the keyword.

An alternative solution would be to provide a new pathname operation
:OPEN-KEYWORD-HANDLED-P, but this would require calling programs
to be more ugly.  Or there could be an open keyword saying don't
give an error for an unrecognized keyword; but then &key cannot
be used to detect the error unless &key is extended somehow.

I strongly suggest that some such solution be implemented;
otherwise, I will inevitably break your code when I make things
use new features of LMFILE and there will not be anything I can
do to avoid it.

Date: 7 January 1982 02:26-EST
From: David L. Andre <DLA at MIT-AI>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI

Okay, I was wrong.
I had thought that VIEW-DIRECTORY and friends required
:DIRECTORY-LIST-STREAM.  However, this is totally the wrong way to
implement new features.  Either it should be "installed" and
"advertised" as an entry point, or it should not exist.  It would be
fairly easy to write :DIRECTORY-LIST-STREAM to default to using
:DIRECTORY-LIST, which I believe is the right thing, should it be
implemented.  A DIRECTORY-STREAM mixin would define :DIRECTORY-LIST and
:DIRECTORY-LIST-STREAM in terms of :DIRECTORY-STREAM.  However, going
around and making random source file optimizations for your code without
consultation is unacceptable.  Maybe somebody else would have had a
better idea.  Maybe they would all agree that there should be an
advertised entry point.  But the lisp machine is hardly the place for
obscure features throughout the software (I know, I know, I'm living in
never-never land).

    I accept that I will have to fix bugs introduced by others that
    first manifest themselves in interaction with correct code that I
    write, because I can't see how this could possibly be prevented.
Yes, but it CAN be minimized.  I of course have had run-ins with other
people.  I expect they have had run-ins with me.  However I have had
many more run-ins with you than anybody else.  Something's wrong.

    Also, the fact that I tend to give compatibility less priority and
    improvement more priority than perhaps you do, makes me more accepting
    of having to change code I maintain to go with an incompatible change
    that someone else makes, if it is an improvement.  I don't feel that
    that is wasted work; it is helping to make the improvement.
Ah, but what is an improvement?  What if other people don't consider it
an improvement?  Who are you to say that your idea which hasn't been
discussed is an improvement?  To a large degree, compatibility IS
improvement.

    The forms of courtesy that you are urging seem reasonable
    but I don't think it is fair to urge me to follow them and
    ignore the question of whether others do so with me.
I do.  People will, in general, reciprocate courtesy.  If they don't,
that is reason to get upset with them (as I am doing with you), but not
to act discourteously on a professional level.  That road leads only to
the friction which you claim you constantly see.

Date: 6 JAN 1982 2329-PST
From: rwg@mc
To:   BUG-LISPM at MIT-AI

In ETHER 24.4, System 78.33, microcode 841, on Xerox Lisp Machine Two:

How about <system>2L switching to the listener you would get by
<system>L <system>L, but without the deexposures implicit in the
first <system>L?
-------

Date: 7 January 1982 01:41-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: (In reply to your message)
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI

    The utility of :DIRECTORY-LIST-STREAM is debatable too, and if you had
    taken the time to propose something like it, you would have been
    informed of the issues involved.  It HAS been pondered before.
I was happy with the speedup.  Aside from that, the introduction of
:DIRECTORY-LIST-STREAM is unrelated to the change to how random
properties are printed, and it doesn't incompatibilize anything.

			     Because :DIRECTORY-LIST-STREAM uses a
    :DIRECTORY-STREAM, you are forcing me to write either :DIRECTORY-STREAM
    or :DIRECTORY-LIST-STREAM for my file system.
My changes don't REQUIRE your file system to support either of these
two.  LMFILE supports :DIRECTORY-LIST-STREAM but actually that was
needed only for testing.

        I don't THINK I use :DIRECTORY-STREAM as my entry point,
        but perhaps I don't understand you.
    The fact that you implemented it such that others must implement it,
    makes it an entry point.
***** I did not do so, and you don't have to implement it, *****
and I don't think I deserve it when people get angry at me over things
which did not even happen.

    Don't YOU get upset when other people break what you are doing without
    consulting you??
Actually, I don't.  You probably don't know about the times that this
happened to me, unless it was you who did it, and I came to you and
discussed calmly how to fix it without screwing you back.  I didn't
yell at anyone after I spent four hours tracking down the microcode
bugs that garbage was left in VMA by writing the map, and when nobody
else bothered to fix it, I ultimately did that too.  The only message
I sent was a calm four line description of the technical details of
the bug I had found.

I accept that I will have to fix bugs introduced by others that
first manifest themselves in interaction with correct code that I
write, because I can't see how this could possibly be prevented.

I expect people to try to think about not breaking what I'm working
on, which I DID DO in this case, but I know that other people can't
anticipate everything that would break my code, and when they do I just
want the other person to be willing to look for a solution that does
what he wants AND what I want.

Also, the fact that I tend to give compatibility less priority and
improvement more priority than perhaps you do, makes me more accepting
of having to change code I maintain to go with an incompatible change
that someone else makes, if it is an improvement.  I don't feel that
that is wasted work; it is helping to make the improvement.

Wrt :DIRECTORY-STREAM, I thought I had worked out that existing uses
would not break, because the properties used by QFILE are explicitly
known and their parsing was not affected by the change I made.

    RMS, when dealing in a group of people, you win some and you lose some.
    You should accept losses and work for the common good of the group, win
    or lose.  Your input is invaluable in the cases where you win, for
    otherwise the group may have not reached such an optimal solution.  But
    work with the group first in mind, accept your losses and you'll find
    out that the world isn't out to get you.

The forms of courtesy that you are urging seem reasonable
but I don't think it is fair to urge me to follow them and
ignore the question of whether others do so with me.

You may think I sound paranoid, but even paranoids have enemies.
I myself thought I was paranoid when I thought people were sneaking
around to avoid me for dinner expeditions, until someone told me it
was true.

I could accept losing some if I felt that people would be open-minded
about considering the idea, and not say no without listening.
But in the times other people did ultimately agree with
me, I often met with an initial condemnation in the absence of
understanding, which I was able to change only through a humiliating
process of pleading for people to pay attention to the details of what
I was saying.  This is painful even if it succeeds.

I am much happier when I feel that my suggestions are being listened
to, because then I feel comfortable bringing them up.

Also, the other Lisp machine hackers are often unwilling to discuss
the projects that they are planning with me.  That I don't discuss my
plans with others much reflects the fact that people refuse to talk
with me.  I often feel that I have to beg to get an audience.
If people WANT me to discuss my plans, they should act as though they
want it.

Date: 6 January 1982 22:53-EST
From: David L. Andre <DLA at MIT-AI>
Subject: (In reply to your message)
To: RMS at MIT-AI
cc: MMCM at MIT-AI, BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI,
    DLA at MIT-AI

    From: Richard M. Stallman <RMS at MIT-AI>
	From: David L. Andre <DLA at MIT-AI>
	Why, RMS, did you start messing with :DIRECTORY-STREAM?
    Because it could not transmit user-defined properties which were not strings.
No file system which supports non-string user-defined properties uses
:DIRECTORY-STREAM.  You are screwing them.

	I fail to see any advantages to the changes you made.  There are now
	three ways of frobbing with directories, where previously there was
	one.
    There are now two external ones and one internal one,
    where previously there was one external one and one internal one.
:DIRECTORY-STREAM, I assume, is the internal one.  It is only internal
to the QFILE system, and nothing else uses or should use it.  There is
no reference to any :DIRECTORY-STREAM in my file system, as it would
certainly be very slow.  Because :DIRECTORY-LIST-STREAM uses a
:DIRECTORY-STREAM, you are forcing me to write either :DIRECTORY-STREAM
or :DIRECTORY-LIST-STREAM for my file system.  Either would be much
slower than :DIRECTORY-LIST.  I assume the same consequenses hold for
Symbolics' file system.

The utility of :DIRECTORY-LIST-STREAM is debatable too, and if you had
taken the time to propose something like it, you would have been
informed of the issues involved.  It HAS been pondered before.

	:DIRECTORY-STREAM is *defined* by the FILE protocol
    No, it was put on a method of the flavor PATHNAME, which seemed to
    indicate the intention on someone else's part that it was more general
    than just QFILE.
:DIRECTORY-STREAM is not supported by PATHNAME.  The default version of
:DIRECTORY-LIST assumes that there is a directory stream, because
there's probably nothing better for it to do; The only other option is
to assume that a :DIRECTORY-LIST cannot be done, and put what is
currently (PATHNAME :DIRECTORY-LIST) onto CHAOS-PATHNAME.
		      Since this seemed reasonable to me, I went along
    with it.
    It is important that SOMEONE ELSE did this.  I thought that
    :DIRECTORY-STREAM was intended (and not just by me) to be the default
    thing for anything to implement, which would imply it was supposed to
    be suitable for things in general to use it.
When I wrote the directory operations for my file system, the main
source of information which I used was a letter from you to BUG-LISPM
asking about :DIRECTORY-LIST, :DIRECTORY-STREAM etc.  The reply was
quite explicit.  You evidently didn't look at the reply.  (I'd find the
letter, but old BUG LISPM mail is on AI pack three, which is fucked)
							   , so messing with it
	necessarily means messing with the file protocol, which necessarily
	means updating the sources on many sites.  :DIRECTORY-LIST is all that
	should be implemented for any file system.  If you use :DIRECTORY-STREAM
	for your entrypoint
    I don't THINK I use :DIRECTORY-STREAM as my entry point,
    but perhaps I don't understand you.
The fact that you implemented it such that others must implement it,
makes it an entry point.

	I will dispense with the specifics of your programming for the rest of
	this letter.  I consider them wrong, but that is not my point.  Rather,
	this incident is just symptomatic of the way you deal with any software
	which is maintained by a group.  You fundamentally change system
	programs used and supported by many other people, without consulting
	them as to the consequences, and evidently without thinking out the
	consequences carefully for yourself.  It is impossible for a group to
	get anything done if any member behaves in such a manner.  You have done
	so, however, many times, much to the anger of the people you deal with,
	myself included.
    I'm sad you feel this way, but your idea of WHAT I did and why seems
    to be mistaken, so it is not clear to me that what I ACTUALLY DID
    is related to the anger.
I stated that I'm not only refering to this case.  This case in itself
doesn't warrant my flaming.  But I see you constantly forcing myself and
other members of the lisp machine group to clean up after you because
you don't think enough about the consequenses, and don't ask before
doing things.  This letter is long enough without twenty examples.

		      One of the most important virtues is admitting what you
	don't know.  I have gained some measure of respect among the people I
	deal with because I don't go and break things in general, and when I do,
	I fix them.  Off the top of my head, I can probably name about a score
	of incidents where you have changed things DIRECTLY IN OPPOSITION to the
	wishes of others.  They have given up dealing with you.  I'm about to.
	Dammit, RMS, you may be smart, but you're shit if you can't deal with
	people.  You have accused people many times of being silently against
	you.  We are, and this is why.
    I expect people to be directly opposed to things I propose merely
    because they were proposed by me.
You are being childish and paranoid by saying this.
				       Specifically, I expect people to
    jump to the conclusion that my actions are stupid without actually
    understanding them.
Don't YOU get upset when other people break what you are doing without
consulting you??  You could be right in what you do, but even if you
are right (and you often aren't), it certainly rubs on people.
			 I expect this because it happens frequently; for
    example, you are doing so now.

    Faced with this, my two choices are to give in to an unfair
    condemnation or to go directly against people.  The first time (wrt
    NWS) I kept giving in in the hope that things would get better.  It
    didn't work, so I decided that I had to stand up for myself.

    Probably I am too quick to expect this to happen, and I may be
    wronging other people by reacting to it in advance when it really
    would not have happened.  But it does still happen (and it is
    happening right now).  It is hard for me to treat other people on the
    basis of expecting them to give any serious consideration to any
    proposal I make when so often they don't.
Bargaining is a two way street.  You forget how many times people agree
with you.  I even agree with you that :DIRECTORY-STREAM is too
restrictive, and possibly it should be changed.  But not without
consultation as to the consequenses!

	People have been very patient with you trying to get it into your skull
	that you are being very unreasonable.
    I think that other people share in the unreasonability and that they
    have often been far from patient.
					       MMcM has been (amazingly) civil
	in his last group of letters on the :DIRECTORY-STREAM stuff.  You have
	not answered most of his arguments, citing the requirements of your file
	system instead.
    I thought that MMCM was primarily citing the possible requirements of
    other file systems without answering my arguments.
Even If your analysis is correct here, then I still don't disagree with
his sense of proportions.  Your file system is experimental and used
practically not at all, compared with the amount of work which is done
on other file systems.
							If it is
    blameworthy on my part it is blameworthy when other people do it,
    but I would call it a misunderstanding.
			 I cannot speak for Symbolics, but I myself would not
	accept your changes were I working there.  Out of your unreasonableness
	grows two different protocols, two different lisp machine systems, to
	which you are supposedly opposed.

	I am unable to work in such an environment.  Either you start showing
	reasonable level of consideration in your programming than you have
	been, or one of us will be leaving.
    I am willing to talk about doing something differently but the
    definition of "reasonable" that most people want me to obey seems to
    be stacked so that they can mistreat me and I can't do anything about
    it.  I can only agree to a kind of "reasonableness" which isn't
    one-sided.
RMS, when dealing in a group of people, you win some and you lose some.
You should accept losses and work for the common good of the group, win
or lose.  Your input is invaluable in the cases where you win, for
otherwise the group may have not reached such an optimal solution.  But
work with the group first in mind, accept your losses and you'll find
out that the world isn't out to get you.

Date: 6 January 1982 16:58-EST
From: Richard M. Stallman <RMS at MIT-AI>
Sender: Pop at MIT-AI
To: BUG-LISPM at MIT-AI

In System 78.5, ZMail 38.0, microcode 836, on Lisp Machine Three:

CADR5 died at QMLP+3, having just executed QMLP, QMLP+1 and QMLP+2.  I
couldn't see anything in the instructions there to explain why the
machine stopped.

Date: 6 January 1982 00:43-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: Various flames
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI


    I am very upset by your recent patches which affect the file system.
    First, they have no place in the patches for System.  For instance,
    78.34 won't load in an enviroment which does not have your file system
    stuff in it.
This is a patch to a file which is part of the standard world load.
What environment won't it load into?  I made the patch on a random Lisp
machine which did not have anything special loaded into it, and it
worked there.

Perhaps it only works in MIT systems.  I don't know the right way to
conditionalize a patch that is for SYSTEM at MIT, only.

Date: 6 January 1982 00:39-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: DLA at MIT-AI
cc: RMS at MIT-AI, MMCM at MIT-AI, BUG-LISPM at MIT-AI,
    BUG-ZWEI at MIT-AI

    Date: 5 January 1982 22:15-EST
    From: David L. Andre <DLA at MIT-AI>

    Why, RMS, did you start messing with :DIRECTORY-STREAM?
Because it could not transmit user-defined properties which were not strings.

    I fail to see any advantages to the changes you made.  There are now
    three ways of frobbing with directories, where previously there was
    one.
There are now two external ones and one internal one,
where previously there was one external one and one internal one.
	  No significantly useful features were added in the process.  More
    levels of abstraction were added in the default methods for
    :DIRECTORY-STREAM and :DIRECTORY-LIST-STREAM.  The documentation will
    necessarily become more complicated.
No level of abstraction was added.  There is no default method for
:DIRECTORY-STREAM, so probably you mean the one for :DIRECTORY-LIST,
but that was already there.  I did not introduce it.

    :DIRECTORY-STREAM is internal to :DIRECTORY-LIST, and nothing else.
Now it is internal to :DIRECTORY-LIST-STREAM as well.
    :DIRECTORY-STREAM is *defined* by the FILE protocol
No, it was put on a method of the flavor PATHNAME, which seemed to
indicate the intention on someone else's part that it was more general
than just QFILE.  Since this seemed reasonable to me, I went along
with it.
It is important that SOMEONE ELSE did this.  I thought that
:DIRECTORY-STREAM was intended (and not just by me) to be the default
thing for anything to implement, which would imply it was supposed to
be suitable for things in general to use it.
						       , so messing with it
    necessarily means messing with the file protocol, which necessarily
    means updating the sources on many sites.  :DIRECTORY-LIST is all that
    should be implemented for any file system.  If you use :DIRECTORY-STREAM
    for your entrypoint
I don't THINK I use :DIRECTORY-STREAM as my entry point,
but perhaps I don't understand you.
		       , you are screwing yourself because you implemented
    your file system wrong.  Now that you realize this, you are screwing
    everyone else rather than changing your implementation.

    I will dispense with the specifics of your programming for the rest of
    this letter.  I consider them wrong, but that is not my point.  Rather,
    this incident is just symptomatic of the way you deal with any software
    which is maintained by a group.  You fundamentally change system
    programs used and supported by many other people, without consulting
    them as to the consequences, and evidently without thinking out the
    consequences carefully for yourself.  It is impossible for a group to
    get anything done if any member behaves in such a manner.  You have done
    so, however, many times, much to the anger of the people you deal with,
    myself included.
I'm sad you feel this way, but your idea of WHAT I did and why seems
to be mistaken, so it is not clear to me that what I ACTUALLY DID
is related to the anger.

    Your problem, RMS, is that you are too quick to flush conventions.  Most
    conventions on the lisp machine have at one time or another, been
    carefully thought out by a group of people, and yet you are willing to
    change them both without consultation and without sufficient thought on
    your part as to the consequences.  Even the conventions that are not
    well thought out exist to aid the interaction of a number of
    programmers.
You are probably right about this.
		  One of the most important virtues is admitting what you
    don't know.  I have gained some measure of respect among the people I
    deal with because I don't go and break things in general, and when I do,
    I fix them.  Off the top of my head, I can probably name about a score
    of incidents where you have changed things DIRECTLY IN OPPOSITION to the
    wishes of others.  They have given up dealing with you.  I'm about to.
    Dammit, RMS, you may be smart, but you're shit if you can't deal with
    people.  You have accused people many times of being silently against
    you.  We are, and this is why.
I expect people to be directly opposed to things I propose merely
because they were proposed by me.  Specifically, I expect people to
jump to the conclusion that my actions are stupid without actually
understanding them.  I expect this because it happens frequently; for
example, you are doing so now.

Faced with this, my two choices are to give in to an unfair
condemnation or to go directly against people.  The first time (wrt
NWS) I kept giving in in the hope that things would get better.  It
didn't work, so I decided that I had to stand up for myself.

Probably I am too quick to expect this to happen, and I may be
wronging other people by reacting to it in advance when it really
would not have happened.  But it does still happen (and it is
happening right now).  It is hard for me to treat other people on the
basis of expecting them to give any serious consideration to any
proposal I make when so often they don't.

    People have been very patient with you trying to get it into your skull
    that you are being very unreasonable.
I think that other people share in the unreasonability and that they
have often been far from patient.
					   MMcM has been (amazingly) civil
    in his last group of letters on the :DIRECTORY-STREAM stuff.  You have
    not answered most of his arguments, citing the requirements of your file
    system instead.
I thought that MMCM was primarily citing the possible requirements of
other file systems without answering my arguments.  If it is
blameworthy on my part it is blameworthy when other people do it,
but I would call it a misunderstanding.
		     I cannot speak for Symbolics, but I myself would not
    accept your changes were I working there.  Out of your unreasonableness
    grows two different protocols, two different lisp machine systems, to
    which you are supposedly opposed.

    I am unable to work in such an environment.  Either you start showing
    reasonable level of consideration in your programming than you have
    been, or one of us will be leaving.

I am willing to talk about doing something differently but the
definition of "reasonable" that most people want me to obey seems to
be stacked so that they can mistreat me and I can't do anything about
it.  I can only agree to a kind of "reasonableness" which isn't
one-sided.

Date: 5 January 1982 22:15-EST
From: David L. Andre <DLA at MIT-AI>
To: RMS at MIT-AI
cc: MMCM at MIT-AI, BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI

Why, RMS, did you start messing with :DIRECTORY-STREAM?

I fail to see any advantages to the changes you made.  There are now
three ways of frobbing with directories, where previously there was
one.  No significantly useful features were added in the process.  More
levels of abstraction were added in the default methods for
:DIRECTORY-STREAM and :DIRECTORY-LIST-STREAM.  The documentation will
necessarily become more complicated.

:DIRECTORY-STREAM is internal to :DIRECTORY-LIST, and nothing else.
:DIRECTORY-STREAM is *defined* by the FILE protocol, so messing with it
necessarily means messing with the file protocol, which necessarily
means updating the sources on many sites.  :DIRECTORY-LIST is all that
should be implemented for any file system.  If you use :DIRECTORY-STREAM
for your entrypoint, you are screwing yourself because you implemented
your file system wrong.  Now that you realize this, you are screwing
everyone else rather than changing your implementation.

I will dispense with the specifics of your programming for the rest of
this letter.  I consider them wrong, but that is not my point.  Rather,
this incident is just symptomatic of the way you deal with any software
which is maintained by a group.  You fundamentally change system
programs used and supported by many other people, without consulting
them as to the consequences, and evidently without thinking out the
consequences carefully for yourself.  It is impossible for a group to
get anything done if any member behaves in such a manner.  You have done
so, however, many times, much to the anger of the people you deal with,
myself included.

Your problem, RMS, is that you are too quick to flush conventions.  Most
conventions on the lisp machine have at one time or another, been
carefully thought out by a group of people, and yet you are willing to
change them both without consultation and without sufficient thought on
your part as to the consequences.  Even the conventions that are not
well thought out exist to aid the interaction of a number of
programmers.  One of the most important virtues is admitting what you
don't know.  I have gained some measure of respect among the people I
deal with because I don't go and break things in general, and when I do,
I fix them.  Off the top of my head, I can probably name about a score
of incidents where you have changed things DIRECTLY IN OPPOSITION to the
wishes of others.  They have given up dealing with you.  I'm about to.
Dammit, RMS, you may be smart, but you're shit if you can't deal with
people.  You have accused people many times of being silently against
you.  We are, and this is why.

People have been very patient with you trying to get it into your skull
that you are being very unreasonable.  MMcM has been (amazingly) civil
in his last group of letters on the :DIRECTORY-STREAM stuff.  You have
not answered most of his arguments, citing the requirements of your file
system instead.  I cannot speak for Symbolics, but I myself would not
accept your changes were I working there.  Out of your unreasonableness
grows two different protocols, two different lisp machine systems, to
which you are supposedly opposed.

I am unable to work in such an environment.  Either you start showing
reasonable level of consideration in your programming than you have
been, or one of us will be leaving.

Date: 5 January 1982 22:14-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Various flames
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

The LMFILE remote and server code are now yours.  I don't care anything
about them, since you've hacked them into an unfathomable state which
includes new undefined messages and explicit support of your file
system.  I have moved the system declarations for LMFILE-SERVER and
LMFILE-REMOTE to LMFILE;SYSTEM.  Do with them as you wish.

I am very upset by your recent patches which affect the file system.
First, they have no place in the patches for System.  For instance,
78.34 won't load in an enviroment which does not have your file system
stuff in it.  Patches to LMFILE-REMOTE, LMFILE-SERVER, and LFS should be
made to those respective systems, and not to the world.

Thank-you for flushing the :STRUCTURED-mumble messages to pathnames.  I
had given up hope.


Date: 5 January 1982 21:27-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

Logged into AI, I had DLA; FOO > as a default c-X c-W.  I typed "EE:"
and then altmode to complete.  After typing my password, I got a "File
system fucked".

Date: 5 Jan 1982 16:47:03-EST
From: neves at mit-vax
To: bug-lispm@mit-ai, bugs@mit-vax

I tried to use the Vax as a filecomputer from the lispmachine and
ran into a few problems.  Some might be on the vax end, others at
the lispm end.

1.  When I tried to ^x^f a file on the Vax while logged into
MC the Lispm asked me to log will name and password or just
password.  Because my ITS name is the same as my Unix name I
just typed in my password (carriage return) but the Lispm just
prompted me for my name/password again.  Typing both worked.

2.  When I finally got logged in I tried finding my login file
to test things out.  I ^x^fed /usr/neves/.login .  The lispm
for some reason wanted to put some file name in front of the
".login" and produced buffer.login I believe.  Periods can be
part of Unix file names and don't have the special significance
that they do in Tops-20 (i.e. seperating name and extention).

3.  I assumed that when I logged in I could access my files by
just typing in their name (i.e. foo) and not the whole pathname
/usr/name/foo.  This was not always the case.  If had a Vax
file in the buffer then the new file I wanted to find would
have the right default (i.e. if I was editting /usr/neves/bar and
wanted to read in foo I would just ^x^f vx:foo.  However if I
had an ITS file in my buffer and tried to read vx:foo I would
get part of the ITS file name in the file I wanted read (i.e.
/neves/foo where neves was the directory of the ITS file I was
looking at.  (Perhaps this problem had something to do with 
the ".login" case above?  I remember trying to read in the .login
file when I was in ITS buffer mode.)

GSB@MIT-ML 01/05/82 15:38:19 Re: using READ in interesting places
To: (BUG LISPM) at MIT-ML
I hope that such things use a well-defined readtable rather than
what may happen to be lying around at the moment.


Date: 5 January 1982 15:30-EST
From: David A. Moon <MOON at MIT-MC>
Subject:  destructuring let
To: naha at MIT-VAX
cc: BUG-lispm at MIT-AI

You can load AI:LISPM2;LET if you want destructuring let.  It is
not installed as part of the system because most Lisp machine system
people feel that destructuring let is a bad idea.

Date: 5 Jan 1982 13:00:31-EST
From: naha at mit-vax
To: bug-lispm@mit-ai

Does Lisp machine have destructuring let?  I couldn't find
anything about it.

Date: 5 JAN 1982 0132-PST
From: GOSPER at PARC-MAXC
To:   BUG-lispm at MIT-AI

Clicking left on WORKING-STORAGE-AREA in A mode in peek in ETHER 24.4, System 78.33,
microcode 841, on Xerox Lisp Machine One calls TV:REGION-ORIGIN-TRUE-VALUE.
After P to package-dwim to SI:, Peek said "Type any char to flush" and ignored
further clicks.
-------

Date: 5 January 1982 03:34-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: MMCM at MIT-AI, BUG-LISPM at MIT-AI

Perhaps there should be a flavor-controlled parameter which says
what should be done for random properties in a directory list.
Perhaps, they should send the pathname a message to parse the
operation.  Then QFILE can parse them as strings and REMOTE as
s-expressions.

Date: 4 January 1982 22:40-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.33, ZMail 38.5, microcode 843, on Lisp Machine Eighteen:

Aborting out of a reply in the pop-up QSEND window leaves you in STOP. 
This use to work, in fact, was fixed once before...

Date: 4 January 1982 21:23-EST
From: Mike McMahon <MMCM at MIT-AI>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 4 January 1982 18:10-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    Or should file systems not be allowed to permit
    values of random properties to be anything but strings?
That's right.  That's the way it works here.  I'd be surprised to learn that
you have implemented permanent storage of arbitrary data types for your file
system and don't store them as strings internally anyway.

Date: 4 January 1982 19:52-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI, rwg at MIT-MC
cc: DLA at MIT-AI

    Date: 31 DEC 1981 0306-PST
    From: rwg@mc
    How do I Inspect the contents of a hash-table?
(describe <hash-table>) works quite well.

Date: 4 January 1982 18:10-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: directory streams
To: MMCM at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 4 January 1982 14:22-EST
    From: Mike McMahon <MMCM at MIT-AI>

    Sorry, it is unacceptable for file servers to have to put "'s around
    all random properties.  Needless to say, most chaosnet servers are not
    lisp machines.
Most chaosnet servers don't allow random properties either; only the
Lisp machines do.  However, if a PDP10 needs to, it is about 10 lines
of code to stick on the quotes and slashify things.
		    It might be reasonable for REMOTE to work that way,
    since it is already restrictive.  But not QFILE.

Let us assume that a user invents a property named FOO and puts a FOO
property of 69 onto a file.  Let us suppose that someone asks for a
directory list, and that it is implemented using a directory stream.
What solution do you propose for enabling the correct value of the FOO
property (69 rather than "69") to appear in the directory list?

Or should file systems not be allowed to permit
values of random properties to be anything but strings?

Or perhaps REMOTE shouldn't use :directory-stream.  Perhaps
only QFILE can use it, and the things that use it should be moved into
CHAOS-PATHNAME.

Date: 4 January 1982 17:37-EST
From: David M. Neves <Neves at MIT-MC>
To: MMCM at MIT-AI
cc: BUG-LISPM at MIT-MC, JEKULP at MIT-MC

    Date: 4 January 1982 14:16-EST
    From: Mike McMahon <MMCM at MIT-AI>
    To: NEVES at MIT-MC
    cc: JEKULP at MIT-MC

    You want (FS:ADD-CHAOSNET-FILE-COMPUTER "VX").  It may be that you
    have to modify the host table inside your machine to know that it is
    running unix and not vms.


Could someone tell me how to modify the host table to think that the
vax is running UNIX?  I thought the default was set to Unix after a
discussion some time ago where it was pointed out that the VAX runs
Unix about 95% of the time.

Date: Monday, 4 January 1981, 14:50:00
From: The Software Staff of Symbolics, Inc.
Subject: Software maintenance at M.I.T.
To: INFO-LISPM at MIT-AI
Sender: MMcM at SCRC-TENEX
Reply-to: MMCM@MIT-AI

Starting now, Symbolics, Inc. will independently maintain Lisp Machine
system software on its own facilities.  In the past, Symbolics personnel
have been making their changes to the copies of the system sources on
the MIT-AI machine.  From now on, changes will be made on the Symbolics
file computer, and new releases, source updates, and patches will be
furnished to M.I.T. as they become available.  These new releases will
be provided to all of the users of Lisp Machines throughout M.I.T., who
may install them as they see fit.

Due to unanticipated difficulties in establishing our high-speed
microwave link to M.I.T., Symbolics currently has no high-bandwidth
communication path; we plan to install a medium-speed phone line
connection and to continue to attempt to install the microwave link, in
order to allow closer cooperation with M.I.T.  Symbolics personnel will
continue to monitor M.I.T. bug reports and fix problems reported by
M.I.T. users; the medium-speed link will pass mail in both directions to
allow us to provide this service.  Since this software work will occur
at Symbolics rather than at M.I.T., it may take longer to fix bugs than
it used to; we hope to minimize the inconvenience to all involved.

MOON@MIT-MC 01/04/82 14:34:40 Re:  Bell
To: KMP at MIT-MC
CC: (BUG LISPM) at MIT-MC
Bell is not a character in the Lisp machine.  This is for the same
reason that :CLEAR-EOL and :INSERT-LINE are not characters, but
stream operations.

Date: 4 January 1982 14:22-EST
From: Mike McMahon <MMCM at MIT-AI>
Subject:  directory streams
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

Sorry, it is unacceptable for file servers to have to put "'s around
all random properties.  Needless to say, most chaosnet servers are not
lisp machines.  It might be reasonable for REMOTE to work that way,
since it is already restrictive.  But not QFILE.

Date: 4 January 1982 14:06-EST
From: Mike McMahon <MMCM at MIT-AI>
Subject:  mail subjects
To: Barry Margolin at MIT-MULTICS
cc: BUG-LISPM at MIT-AI

    Date:  3 January 1982 03:16 est
    From:  Barry Margolin at MIT-Multics
    When going into a mail sending window, a blank "Subject:" line should be
    created just under the blank "To:" line, in order to encourage the
    inclusion of subjects in messages.  I find it extremely annoying to list
    my mailbox and find that half of the messages (usually bug-lispm mail)
    are devoid of subjects.  Most other mailers prompt for this.
This is a zmail user option.

NEVES@MIT-MC 01/04/82 13:52:17
To: (BUG LISPM) at MIT-AI
In System 78.33, ZMail 38.5, microcode 836, on Lisp Machine Twenty:

It is rumored that mit-vax (unix) can now be accessed as a filecomputer.  How does
one tell the lisp machine this?  I don't seem to have any luck just
trying (fs:add-rm-host ...).  -dave

Date: 3 January 1982 20:31-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: MMCM at MIT-AI
cc: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI

    Date: 28 December 1981 16:17-EST
    From: Mike McMahon <MMcM at MIT-AI>

    The current (in the source) changes for :DIRECTORY-LIST-STREAM will not
    work (with QFILE in particular).

    First, there is no way for the :DIRECTORY-STREAM message to refuse to do
    the sorting remotely.  I assume the right behaviour is for the :SORTED
    keyword to be passed on to this message and it can get an error.  This
    error must then cause DIRECTORY-INPUT-STREAM-IO to use the slower local
    sorting method.

It was ok to leave this for later because I knew that the only use of
:DIRECTORY-LIST-STREAM does not use the :SORTED keyword (have you
added any uses?).  To do local sorting, :DIRECTORY-LIST-STREAM can
call :DIRECTORY-LIST passing on the :SORTED flag, then cons a closure
to hand out the elements of the directory list one by one.
QFILE used to assume that sorting had to be local; if you want to keep
doing so, just redefine :DIRECTORY-LIST-STREAM to do that whenever the
:SORTED flag is passed.

:DIRECTORY-LIST-STREAM accomplishes anything only if there is no local
sorting.

Date: 3 January 1982 20:14-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: directory streams
To: MMCM at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 29 December 1981 12:08-EST
    From: Mike McMahon <MMCM at MIT-AI>

        Date: 26 December 1981 23:43-EST
        From: Richard M. Stallman <RMS at MIT-AI>
        I've changed the handling of unrecognized properties in directory
        streams to be to read them, not to take them as strings.
        This is more general.
    On the contrary, strings are more general.  They make no incorrect syntactic
    assumptions.  READ will be confused by /'s, :'s and spaces in dates; by spaces and
    commas in textual lists; by unbalanced parens or double-quotes; stray #'s, etc.
    If you use strings, then M-X Change File Properties always works, you just lose
    the local error checking and canonicalization.  With READ, in addition to getting
    errors you can lose potentially significant case (in filenames and user names).

Sorry, but it is unacceptable for the values of random properties to
be restricted to strings.  They have to be able to be symbols,
numbers, or lists (at least), and they have to appear as such in the
:DIRECTORY-LIST.  The default definition of this operation (which
REMOTE currently uses) was formerly unable to return anything but a
string for unknown properties.

It is ok for protocols transmitting property values to make
assumptions about the value of a property whose meaning is defined by
the system -- such as, that the author is a string -- but they must
not assume that the :LAST-FROBBOZZ-DATE property (which they have
never heard of) has a string as its value.  Its value is probably a
number, and if it is transmitted by PRIN1 and READ everything will work.

You can obtain the old behavior in the new system by outputting the
appropriate properties with PRIN1 rather than PRINC.  However, there
was no way to obtain the new behavior in the old system.

Why transmit ANY property's value with anything other than PRIN1 and
READ?  No circular lists are transmitted thru the directory stream
anyway, and people don't need to be able to read it.  So what if a
date is transmitted as a number in decimal, as long as it turns into
the right thing in the :DIRECTORY-LIST?

    Wouldn't it be more consistent to have SETTABLE-PROPERTIES<NL> turn into
    (:SETTABLE-PROPERTIES T) rather than having to translate (:SETTABLE-PROPERTIES (T))?
It's fine with me either way.

Date: 3 January 1982 17:38-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: mail subjects
To: Barry Margolin at MIT-MULTICS
cc: BUG-LISPM at MIT-AI

I hope nobody does anything to make it a hassle not to put in a
subject.

Date:  3 January 1982 03:16 est
From:  Barry Margolin at MIT-Multics
Subject:  mail subjects
Sender:  Margolin.PDO at MIT-Multics
To:  bug-lispm at MIT-AI, bug-emacs at MIT-AI

When going into a mail sending window, a blank "Subject:" line should be
created just under the blank "To:" line, in order to encourage the
inclusion of subjects in messages.  I find it extremely annoying to list
my mailbox and find that half of the messages (usually bug-lispm mail)
are devoid of subjects.  Most other mailers prompt for this.

kmp@MIT-MC 01/03/82 02:14:31
To: (BUG LISPM) at MIT-MC
Is there a character code for BELL? There doesn't seem to be a #\BELL, nor
does (TYO 7) or (TYO #\CONTROL-G) seem to ring the bell. Is there a well
thought out reason why there should not be a bell char or am I just not
looking in the right place or what? It seems to me perfectly well-formed to
have a bell character which any given stream can output as it likes and tty
streams can beep with if they can. -kmp
ps I already know about (TV:BEEP) and (FUNCALL stream ':BEEP).


Date: 31 DEC 1981 0306-PST
From: rwg@mc
To:   BUG-LISPM at MIT-AI

In ETHER 24.3, System 78.33, microcode 841, on Xerox Lisp Machine One:

How do I Inspect the contents of a hash-table?
-------

Date: 31 DEC 1981 0238-PST
From: rwg@mc
To:   BUG-lispm at MIT-AI

In ETHER 24.3, System 78.33, microcode 841, on Xerox Lisp Machine One:

Why, pray tell, must SXHASH map into 0 all "things that can't be read", e.g.
instances (and therefore, regrettably, lists of instances)?  SXHASH is about
EQUAL.  What does it have to do with READ?  

(Also, the comment in the code says "positive fixnum" when it means non-
negative.)
-------

Date: 30 December 1981 15:12-EST
From: David A. Moon <MOON at MIT-MC>
Subject: cold set band
To: LEBRUN at PARC-MAXC
cc: BUG-LISPM at MIT-AI

    Date: 29 DEC 1981 1800-PST
    From: LEBRUN at PARC-MAXC
    Subject:  cold set band
    To:   BUG-LISPM at MIT-AI

    In ETHER 24.1, System 78.33, microcode 841, on Xerox Lisp Machine One:

    I wish you could change the current band in the cold load environment.
It doesn't have anything like the number of modules loaded that
it would need to do that.

Date: 29 DEC 1981 1800-PST
From: LEBRUN at PARC-MAXC
Subject:  cold set band
To:   BUG-LISPM at MIT-AI

In ETHER 24.1, System 78.33, microcode 841, on Xerox Lisp Machine One:

I wish you could change the current band in the cold load environment.

-------

Date: 29 December 1981 12:08-EST
From: Mike McMahon <MMCM at MIT-AI>
Subject:  directory streams
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 26 December 1981 23:43-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    I've changed the handling of unrecognized properties in directory
    streams to be to read them, not to take them as strings.
    This is more general.
On the contrary, strings are more general.  They make no incorrect syntactic
assumptions.  READ will be confused by /'s, :'s and spaces in dates; by spaces and
commas in textual lists; by unbalanced parens or double-quotes; stray #'s, etc.
If you use strings, then M-X Change File Properties always works, you just lose
the local error checking and canonicalization.  With READ, in addition to getting
errors you can lose potentially significant case (in filenames and user names).

    If SETTABLE-FILE-PROPERTIES is given as "T", it now means
    the symbol T rather than the list with one element (T).
Wouldn't it be more consistent to have SETTABLE-PROPERTIES<NL> turn into
(:SETTABLE-PROPERTIES T) rather than having to translate (:SETTABLE-PROPERTIES (T))?

Date: 28 December 1981 16:17-EST
From: Mike McMahon <MMcM at MIT-AI>
To: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI

The current (in the source) changes for :DIRECTORY-LIST-STREAM will not
work (with QFILE in particular).

First, there is no way for the :DIRECTORY-STREAM message to refuse to do
the sorting remotely.  I assume the right behaviour is for the :SORTED
keyword to be passed on to this message and it can get an error.  This
error must then cause DIRECTORY-INPUT-STREAM-IO to use the slower local
sorting method.

Second, there needs to be a way for to force local sorting, in case one
wishes to change FS:PATHNAME-LESSP (for example to use MLB's
alphanumeric string comparison).

Also, it appears that DIRECTORY-INPUT-STREAM-IO is using CLOSUREP,
restricting the implementation of :DIRECTORY-LIST-STREAM.

Date: 28 December 1981 10:19-EST
From: David A. Moon <MOON at MIT-MC>
Subject: idle time
To: LEBRUN at PARC-MAXC
cc: BUG-LISPM at MIT-AI

It says in the manual that the TIME function wraps around roughly
once a day (this is because it mustn't return a bignum, or even a
negative fixnum); 23 bits of 60ths of a second is about 128K seconds.

Date: 27 December 1981 14:59-EST
From: Henry Lieberman <Henry at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.21, ZMail 38.4, microcode 836, on Lisp Machine Twenty:

If I invoke Zmail from inside the editor (by using Control-Alt or
my editor top level), when you QUIT from Zmail, you wind up waiting
with "Await Exposure" in the who-line. A Control-meta-Abort will get
you out, but it is slightly annoying and didn't used to do this
(in 74 and earlier).


Date: 26 December 1981 23:43-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: directory streams
To: BUG-LISPM at MIT-AI

I've changed the handling of unrecognized properties in directory
streams to be to read them, not to take them as strings.
This is more general.

If SETTABLE-FILE-PROPERTIES is given as "T", it now means
the symbol T rather than the list with one element (T).
I'd prefer that someone else deal with making
M-X Change File Properties do something useful with this.

Date: 26 December 1981 17:09-EST
From: Jon L White <JONL at MIT-MC>
Subject: EVAL-WHEN
To: BUG-LISP at MIT-MC
cc: BUG-LISPM at MIT-MC

Compiler and interpreter should barf if some unrecognized keyword appears.
For example, 
   (EVAL-WHEN (EVAL-COMPILE)
      (DEFMACRO ...)
   )
should give a complaint rather than leaving ... undefined.


Date: 26 December 1981 16:02-EST
From: Richard M. Stallman <RMS at MIT-AI>
Subject: LEXICAL-CLOSURE
To: BUG-LISPM at MIT-AI, LEVITT at MIT-AI

I have fixed the reported bugs.  If you use UCADR 843 and load the
relevant patches, it might work.

Date: 24 December 1981 20:27-EST
From: Pandora B. Berman <CENT at MIT-AI>
Subject: info-lispm msg
To: HQM at MIT-AI
cc: BUG-LISPM at MIT-AI

1) for the nth time, info-lispm is (surprise!) NOT where to
send questions about lispms, their software, hardware, manuals,
or whatever. the right place to send such commentary is
bug-lispm, which includes the lispm maintainers and such lispm
users as care to see all the bug reports and discussions of
how to fix them. info-lispm is a very much larger list, comprising
everyone who wants to see system-change announcements; many people
on info-lispm don't use lispms or even don't have access to any,
so msgs like yours are only junk to them, as well as loading
down COMSAT unduly and eating up unnecessary disk space.
2) i recall having heard that the dover runs too fast to be able 
to print knight tv and lispm monitor screens. there is a command
-- i think <terminal>q, do <terminal><help> to check this -- which
will print lispm monitor screens on the XGP.
3) lispm maintainers: section 1) of this msg is now LMDOC;BUG NOTINF.
i will pretty up the capitalization, and then it can be snarfed
into replies to all similar lusers who send bugs to INFO-LISPM.

Date: 24 DEC 1981 1108-PST
From: LEBRUN at PARC-MAXC
Subject:  idle time
To:   BUG-LISPM at MIT-AI

In ETHER 24.0, System 78.30, microcode 841, on Xerox Lisp Machine One:

I think there may be some problem with the idle time.  I came in this
morning and both our machines thought they had been idle less than two
hours.  There was strong circumstantial evidence that they hadn't been
touched by anyone since I had last used them.  (Except for the cloven
hoofprints on the keyboard.)

I must admit I was a bit dubious about the fat man in the red suit and
those little guys in pointy green hats.  I assumed that they were just
customer service types, but maybe this industrial espionage is getting
out of hand.

I looked at some code, and nothing seems amiss, though I can't read
those comments in Elvish.  Perhaps some wizard should investigate?

-------

Date: 24 December 1981 06:26-EST
From: Henry Minsky <HQM at MIT-AI>
To: INFO-LISPM at MIT-AI
cc: HQM at MIT-AI

Is there any program to print out a Lisp Machine's screen
on the DOVER??

Date: 24 December 1981 00:51-EST
From: David A. Moon <MOON at MIT-AI>
Subject: Help with CC
To: INFO-LISPM at MIT-AI

If your machine breaks or crashes, and you need to use CC on another
machine to debug it, you might try doing (LOAD "AI:LMCONS;CCWHY")
before going into CC.  [This will be installed as part of the system
when the next major version is generated.]  This adds the :WHY command
to CC, which automates the initial analysis of most common problems.
It also adds the :? command, which lists all the colon commands.
Feedback about bugs and suggestions for improvements will be entertained.

Date: 23 December 1981 20:24-EST
From: Henry Minsky <HQM at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, Local-File 30.3, Experimental DAEDALUS 29.1, microcode 837, on Lisp Machine Eight:

I would like to suggest a feature to implement for DEFSTRUCT -- a COPY-DEFSTRUCT
function. It would be nice to be able to make a copy of a structure to play with;
I realize this can be done using the array-copy functions, and this is how I have 
been copying my structures, but it would be nice if the people who knew everything about
defstruct made this easier, since there are details like array headers etc 

Date: 22 December 1981 19:18-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

In System 78.27, ZMail 38.4, Local-File 31.0, microcode 841, 60Hz, on Lisp Machine Four:

It is a loss that if I do (SI:SET-SYSTEM-SOURCE-FILE FOO ...) in my init
file, I am restricted to using :FOO when I do a make system.  This
restriction doesn't exist once the system is loaded, so therefore
shouldn't exist before it is.

Date: 22 December 1981 17:44-EST
From: Glenn S. Burke <GSB at MIT-ML>
Subject: Is everything recompiled?
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI, LEBRUN at PARC-MAXC

I've forgotten which system changes things should have been recompiled from,
but i can note that I haven't yet even had the chance to touch system 78.
Time moves more slowly for some of us.


Date: 22 December 1981 17:02-EST
From: David L. Andre <DLA at MIT-AI>
Subject: (apropos "window") loses
To: BUG-LISPM at MIT-AI, LEBRUN at PARC-MAXC
cc: DLA at MIT-AI

    From: LEBRUN at PARC-MAXC

    (apropos "window") dies on an atomic arg to CAR for
    ZWEI:DEFINE-WINDOW-MACROS

Fixed in 78.28.  There are many references in ARGLIST to "old style"
ARGLISTs and RETURN-LISTs which will be eliminated when everything is
recompiled.  Is it safe to assume that everything is recompiled now?

Date: 22 DEC 1981 1004-PST
From: LEBRUN at PARC-MAXC
Subject:  (apropos "window") loses
To:   BUG-LISPM at MIT-AI

In ETHER 17.9, System 78.25, Experimental Macsyma 21.0, microcode 836,
on Xerox Lisp Machine Two:

(apropos "window") dies on an atomic arg to CAR for
ZWEI:DEFINE-WINDOW-MACROS

-------

Date: 22 December 1981 10:46-EST
From: Daniel Weise <Daniel at MIT-AI>
Subject: Make-system can get confused over which files need loading.
To: BUG-LISPM at MIT-AI

In System 78.27, ZMail 38.4, Local-File 30.4, Experimental DAEDALUS 29.1, microcode 837, on Lisp Machine Eight:

How does MAKE-SYSTEM figure out which files need loading?  I have a
system NODES where all the files have recent qfasl's.  (make-system
'nodes) gets everything loaded properly. (make-system 'nodes ':compile)
yields no files to be recompiled, as expected.  However,
QC-FILE-LOAD'ing a file of the system (I did this with a file in the
last module, which nothing depends on, if that makes any difference)
confuses make-system as to which files need loading-- (make-system
'nodes) after the qc-file-load will ask to load the file which was just
loaded.  This happens regardless of whether the file was changed before
qc-file-load'ing it.

RHB@MIT-MC 12/22/81 08:41:30 Re: supdup server to cadr16
To: CWH at MIT-MC
CC: (BUG LISPM) at MIT-MC
I have been having all sorts of grief with the
supdup to cadr16. Printing seems to get stuck or
lost, response is slow, input echo losses....I don;t
know what the state of the supdup server is, but it looks like it
needs more.

Date: 22 December 1981 01:56-EST
From: David L. Andre <DLA at MIT-AI>
To: HQM at MIT-AI, BUG-LISPM at MIT-AI
cc: DLA at MIT-AI

    how do i get the editor into USER pkg
Meta-X Set Package

Date: 22 December 1981 00:47-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Compiler process lock.
To: MOON at MIT-AI, JERRYB at MIT-AI, RICH at MIT-AI
cc: BUG-LISPM at MIT-AI

I fixed the screws associated with the compiler's process lock in 78.27,
but I only fixed the compiler's process lock in the source.  I think I
caught every possible case.  Also, in system 79, if the compiler has to
wait, it will notify you of what it is doing.

Remind me to keep my nose out of the krufty compiler in the future.

GJC@MIT-MC 12/21/81 23:38:11 Re: Array dimensions.
To: HQM at MIT-MC
CC: (BUG LISPM) at MIT-MC
For an long time lisp programmers have been saying
(do ((j 0 (1+ j)))
    ((= j dimension))
  (foo (aref a j)))

the trick is the "=" test, instead of the ">" test used in FORTRAN.

-gjc


Date: 21 December 1981 23:25-EST
From: Henry Minsky <HQM at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, Local-File 30.3, Experimental DAEDALUS 29.1, microcode 837, on Lisp Machine Eight:

two things:
1) When I walk up to cadr-8 which is in DPL package, and has just been cold booted
and start up an editor, it will be forever in the dpl package... If i do a bkpt
and type (pkg-goto 'user) it is still in DPL when I resume

how do i get the editor into USER pkg

2) I dont like how if you do (make-array 10) you cant access element 10.
It screws up programs which calculate array dims and then try to pass them as 
bounds. i know i can subtract 1, but i dont like the idea. 
maybe (array-dimensions (make-array 10)) should return 9...

Date: 21 December 1981 15:41-EST
From: Christopher C. Stacy <CStacy at MIT-AI>
To: BUG-LISPM at MIT-AI
cc: DANIEL at MIT-AI

    Date: 13 December 1981 21:34-EST
    From: Daniel Weise <Daniel>
    To:   BUG-LISPM

    In System 78.14 on Lisp Machine Eighteen:
    Could QSEND default the host to the host associated with the user (ie,
    the machine she logs into)?  

Patch 78.26 makes Qsend ask you which host, if you forget.
Answering by hitting just Return will defailt to your login host.

Date: 21 December 1981 12:50-EST
From: Mike McMahon <MMCM at MIT-AI>
To: DLA at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 19 December 1981 17:15-EST
    From: David L. Andre <DLA at MIT-AI>
    How does the new host stuff in 78.20 affect everything?
You can no longer have more than one site declared in the same file.  DEFSITE is now
active rather than passive.
The site files live in SYS:SITE; rather than the random few places they used to live.
SI:SET-SITE no longer exists.
A function SI:UPDATE-SITE-CONFIGURATION-INFO is equivalent to the old
(SI:SET-SITE SI:SITE-NAME).
The SYS host setting stuff in SI:SET-SITE has been replaced by a new function SI:SET-SYS-HOST,
which lets you specify enough to get just that one host going.

Date: 20 December 1981 19:50-EST
From: David L. Andre <DLA at MIT-AI>
Subject: Problem with looping in GETHASH-EQUAL
To: JERRYB at MIT-AI, BUG-LISPM at MIT-AI

This problem was introduced when the kludge was added to make
REMHASH-EQUAL store -1's in the previously used slots of
EQUAL-HASH-TABLES.  What was happening was that the entire hash table
was filling with -1s, and GETHASH-EQUAL was looping looking for a slot
with NIL.

I (and RG) fixed the problem thus:  We made REMHASH-EQUAL smart about
-1s, and now it will store a NIL if possible.  Also, it will change
any other -1s to NILs directly below it.  Note that in a worst-case (but
extremely unlikely) scenario, the hash table could still fill up with
-1s, so GETHASH-EQUAL now punts if it has searched through the whole table.
PUT/SWAPHASH-EQUAL don't have that problem.

Anyone with better solutions is welcome to implement them.

Date: 20 December 1981 14:41-EST
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: macro documentation
To: BUG-LISPM at MIT-AI

In System 78.22, ZMail 38.4, microcode 841, 60Hz, on Lisp Machine One:

Currently, (FUNCTION-DOCUMENTATION 'FOO) is generally useless if FOO is a 
macro, because DEFMACRO does not check for a documentation string.
How about having:

(DEFMACRO FOO (ARG1 ARG2)
  "Some documentation..."
  ...macro-body...)

turn into:

(COMPILER-LET ...
  (MACRO FOO (SI:*MACROARG*)
	 "Some documentation..."	; Put here and FUNCTION-DOCUMENTATION will find it.
	 (AND (OR (< (LENGTH SI:*MACROARG*) 3.)...) ...)
	 ((LAMBDA (ARG1)
	    ((LAMBDA (ARG2)
	       (PROGN
		 ;; This is where "Some documentation..." is now.
		 ...macro-body...))
	     ...)) ...)))

Date: 20 December 1981 14:16-EST
From: Daniel L. Weinreb <DLW at MIT-AI>
Subject: Existing Lisp
To: LEBRUN at PARC-MAXC
cc: BUG-LISPM at MIT-AI

"Doing something" refers to the process associated with the listener;
Existing Lisp will try to find one that is sitting there in read,
ideally.  The whole idea of Existing Lisp is to be easy and fast,
which is why you don't get a menu; the meaning is "pick any
one of the random existing Lisps, since they are all the same
anyway".  I think that this turned out not to be a very useful command;
its only function is to avoid creation and/or proliferation of windows,
but I think that's not too important and that it's too complicated for
{the user interface.  The call key has the same problems.

Date: 20 December 1981 13:42-EST
From: Gerald R. Barber <JerryB at MIT-AI>
Subject: Bug in 78.23
To: BUG-LISPM at MIT-AI

In System 78.22, ZMail 38.4, microcode 841, 60Hz, on Lisp Machine Four:

Patch 78.23 is introducing a bug into the flavor system that manifests
itself as an infinite loop within GETHASH-EQUAL which is called from
SI:FLAVOR-METHOD-ENTRY. 

To reproduce this load 78.23 and then do (LOAD "AI:ECC;XMEGA LOAD").
Part way through the loading of OMEGA;MMES (which is about the 10th file
loaded) the machine will go into a loop within GETHASH-EQUAL.

This happens in microcode 836 as well as this one.

Date: 20 December 1981 01:08-EST
From: David A. Moon <Moon at MIT-AI>
Subject: mysterious "failed to complete operation" disk errors
To: BUG-LISPM at MIT-AI

The microcode bug that caused this is fixed in UCADR 841.  I noticed that several
routines were calling DISK-RUN when they should have been calling DISK-READ-WIRED
or DISK-WRITE-WIRED, and consequently failed to get microcode error recovery (and
in fact were led into the buggy part of the microcode fixed in 841.)  Patch 78.23
fixes the two functions in the system with this problem.  File system maintainers
and anyone else who does disk I/O should check their code.  If it calls the wrong
function, fix it.

Date: 19 December 1981 01:19-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.21, ZMail 38.4, Local-File 30.4, microcode 836, on Lisp Machine Eighteen:

On line documentation in the error-handler for c-m-F seems to claim that
+ is bound to a locative which can be modified.  This is in fact not the
case, and I think that it would be useful to indeed have it that way.

Date: 18 DEC 1981 1328-PST
From: LEBRUN at PARC-MAXC
Subject:  Existing Lisp
To:   moon at AI
cc:   bug-lispm at AI

If "doing anything" can be construed as "not the same size" or even
"created in another order" or something then perhaps it makes sense.

I think, if anything, you should get a menu of existing Lisp Listeners
much as you get a menu of existing Windows, though it's just a subset of
Existing Window then.  CALL seems a separate issue.

-------

Date: 18 December 1981 15:07-EST
From: David A. Moon <MOON at MIT-MC>
Subject: Existing Lisp?
To: LEBRUN at PARC-MAXC
cc: BUG-LISPM at MIT-MC

    Date: 17 DEC 1981 1342-PST
    From: LEBRUN at PARC-MAXC
    Subject:  Existing Lisp?
    To:   BUG-LISPM at MIT-AI

    In System 78.17, ETHER 22.0, microcode 840, on Xerox Lisp Machine Two:

    I don't understand the behavior of the Existing Lisp option in the Split
    Screen menu (under the system menu).  It doesn't give a menu of choices
    and as likely as not makes a new Lisp Listener anyway.

It does the same thing as the CALL key; finds a Lisp listener which isn't
doing anything, or if there isn't one makes one.  I don't know whether
this is a good idea for either of these.

Date:  18-DEC-1981 00:44:45.93
From:  Robert W. Kerns <KERNS at MIT-ALCATOR>
Reply-to: RWK at MIT-MC
Subject: MIT-SPEECH
To: DPH at MIT-AI
Cc: BUG-LISPM at MIT-AI, JIS at MIT-AI

The "2 not meaningful refname" error comes from trying to parse a server
OPEN response (which is only sent in the case of successfully opening a
file) from an old server which does not understand some recent improvments
to the FILE protocol.  This change was made in such a way as to be
incompatible with existing file servers, without adaquate efforts to ensure
all file servers were updated before installing it.  You have two options.
One is to find a band with system 74 on it somewhere, and continue to use
that until someone updates SPEECH (as I must update the VMS file servers).
Another is to load the file "MC:RWK;PATH", which is a patch file which allows
the system to understand either syntax.  (It should be copied to AI:RWK;PATH
as well, I guess).

I believe there is some other situation which loading my patch file does not
fix.  I don't recall for sure, but at least it isn't as important as being
able to read and write files.

In the meantime, the apropriate person should import a new file server to
MIT-SPEECH.

Date: 18 December 1981 00:26-EST
From: Mike McMahon <MMcM at MIT-AI>
To: RMS at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 17 December 1981 23:09-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    I am planning to change the default definition of
    :MULTIPLE-FILE-PLISTS to work by means of sending a :PROPERTIES
    message to each pathname.
I think that at the same time you should change FS:MULTIPLE-FILE-PLISTS,
FS:FILE-PROPERTIES, FS:DIRECTORY-LIST, and perhaps OPEN to take an
option giving a list of desired indicators for the property list.  This
is a generalization of the :FAST and :NO-EXTRA-INFO options to
DIRECTORY-LIST.  MAKE-SYSTEM can then be changed to give only the ones
it wants to see.  If my metering of QFILE holds true for REMOTE, this
will enormously speed up MAKE-SYSTEM from LMFILE, assuming that you
won't be shadowing your new :MULTIPLE-FILE-PLISTS definition.

Date: 17 December 1981 23:09-EST
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-LISPM at MIT-AI

I am planning to change the default definition of
:MULTIPLE-FILE-PLISTS to work by means of sending a :PROPERTIES
message to each pathname.

I have received objections to this, but they do not seem cogent.  It
is possible that there is nevertheless some good reason for not making
this change.  Therefore I invite more coherent explanations of any
pruported problems.  Such explanations ought, I hope, to consider
whether there are cleaner alternatives to the present solution which
might serve instead.

Date: 17 December 1981 22:22-EST
From: Daniel Huttenlocher <dph at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.15, ZMail 38.1, microcode 836, 60Hz, on Lisp Machine One:

In Zwei while trying to write out a buffer to a file on host MIT-SPEECH (C-X C-W)
loses with the error "22 is not meaningful in refname USER".  This is also
the case for C-X C-F (although the error is now "13 is not ...") as long as the
file really exists on my TOPS-20 directory.  If I try finding a nonexistent file
it wins.

Date: 17 DEC 1981 1342-PST
From: LEBRUN at PARC-MAXC
Subject:  Existing Lisp?
To:   BUG-LISPM at MIT-AI

In System 78.17, ETHER 22.0, microcode 840, on Xerox Lisp Machine Two:

I don't understand the behavior of the Existing Lisp option in the Split
Screen menu (under the system menu).  It doesn't give a menu of choices
and as likely as not makes a new Lisp Listener anyway.

-------

Date: 17 December 1981 16:43-EST
From: Mike McMahon <MMcM at MIT-AI>
Subject: More on Patchable Systems
To: JERRYB at MIT-AI
cc: BUG-LISPM at MIT-AI

    Date: 17 December 1981 16:16-EST
    From: Gerald R. Barber <JerryB at MIT-AI>
    In System 78.18, ZMail 38.2, Local-File 30.3, Experimental MEGA 2.0, microcode 836, on Lisp Machine Eighteen:
    Is it really true that two patchable systems and their associated patch
    directories cannot live on the same filecomputer directory as shown
    below.  This seems unduly restrictive.  Isn't there a way to force the
    use of the patch file naming convention that is used when the patch
    directory is different from the system default pathname.
Yes, the atom "PATCH" is under system control, as the second argument to the :PATCHABLE
macro.  This is a recent feature, so i could not guarantee that it is documented in the
manual.  So, do

    (DEFSYSTEM foo1
      (:PATHNAME-DEFAULT "ai:jerryb;")
      (:PATCHABLE)
      (:PACKAGE "TV")
      (:MODULE MAIN "besc")
      (:COMPILE-LOAD MAIN))

("AI: JERRYB; PAT10 (PDIR)").  But

    (DEFSYSTEM foo2
      (:PATHNAME-DEFAULT "ai:jerryb;")
      (:PATCHABLE NIL "QATCH")
      (:PACKAGE "si")
      (:MODULE MAIN "maks")
      (:COMPILE-LOAD MAIN))

("AI: JERRYB; QAT10 (PDIR)").  Etc.  Note that on ITS the first letter
of the atom has to be unique, Q69.12 is all there's room for in six
characters.

Date: 17 December 1981 16:16-EST
From: Gerald R. Barber <JerryB at MIT-AI>
Subject: More on Patchable Systems
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, Local-File 30.3, Experimental MEGA 2.0, microcode 836, on Lisp Machine Eighteen:

Is it really true that two patchable systems and their associated patch
directories cannot live on the same filecomputer directory as shown
below.  This seems unduly restrictive.  Isn't there a way to force the
use of the patch file naming convention that is used when the patch
directory is different from the system default pathname.


(DEFSYSTEM foo1
  (:PATHNAME-DEFAULT "ai:jerryb;")
  (:PATCHABLE)
  (:PACKAGE "TV")
  (:MODULE MAIN "besc")
  (:COMPILE-LOAD MAIN))
FOO1

(make-system 'foo1 ':compile)

Going to Increment FOO1 patch version

Increment FOO1 patch version? (Y or N) Yes.
Incrementing FOO1 patch version
No master directory for system FOO1, creating one
FOO1 version 1. created

Going to Make FOO1 patchable

Make FOO1 patchable? (Y or N) Yes.
Making FOO1 patchable
Experimental FOO1 version 1. loaded

T

(DEFSYSTEM foo2
  (:PATHNAME-DEFAULT "ai:jerryb;")
  (:PATCHABLE)
  (:PACKAGE "si")
  (:MODULE MAIN "maks")
  (:COMPILE-LOAD MAIN))
FOO2

(make-system 'foo2 ':compile)

Going to Increment FOO2 patch version

Increment FOO2 patch version? (Y or N) Yes.
Incrementing FOO2 patch version
>>ERROR: FOO2 name does not agree with FOO1 the name in the patch descriptor file
While in the function SI:GET-PATCH-SYSTEM-MAJOR-VERSION  SI:INCREMENT-PATCH-SYSTEM-MAJOR-VERSION  SI:INCREMENT-COMPILED-VERSION-1

SI:GET-PATCH-SYSTEM-MAJOR-VERSION:
   Arg 0 (NAME): "FOO2"
   Arg 1 (NO-ERROR-P): T
c-Z 
* 

Date: 17 December 1981 13:45-EST
From: Gerald R. Barber <JerryB at MIT-AI>
Subject: Patchable systems
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, Local-File 30.3, Experimental MEGA 2.0, microcode 836, on Lisp Machine Eighteen:


I am having trouble making patchable system, if I define a system:

(DEFSYSTEM DIAGRAM-INSERTER
  (:PATHNAME-DEFAULT "ai:omega;")
  (:PATCHABLE "ai:jerryb;")
  (:PACKAGE "PRESS")
  (:MODULE MAIN "insdig")
  (:COMPILE-LOAD MAIN))
DIAGRAM-INSERTER

;; Then I make it for the first time

(make-system 'diagram-inserter ':compile)

Going to Increment DIAGRAM-INSERTER patch version

Increment DIAGRAM-INSERTER patch version? (Y or N) Yes.
Incrementing DIAGRAM-INSERTER patch version
No master directory for system DIAGRAM-INSERTER, creating one
DIAGRAM-INSERTER version 1. created

>>ERROR: DIAGRAM-INSERTER name does not agree with EXPERIMENTAL the name in the patch descriptor file
While in the function SI:GET-PATCH-SYSTEM-MAJOR-VERSION  SI:PATCH-VERSION-NEWER-THAN-LOADED  SI:QUEUE-FILES-AS-NEEDED

SI:GET-PATCH-SYSTEM-MAJOR-VERSION:
   Arg 0 (NAME): "DIAGRAM-INSERTER"
   --Defaulted args:--
   Arg 1 (NO-ERROR-P): NIL
c-Z 
* 

; The contents of the file JERRYB;DIAGRA (PDIR) is:

;;; -*- Mode: Lisp; Package: User; Base: 10.; Patch-File: T -*-
;;; Patch directory for DIAGRAM-INSERTER version 1
;;; Written 12/17/81 13:18:56 by JerryB,
;;; while running on Lisp Machine Eighteen from band 3
;;; with System 78.18, ZMail 38.2, Local-File 30.3, Experimental MEGA 2.0, microcode 836.

(EXPERIMENTAL
 ((0 "DIAGRAM-INSERTER Loaded" "JerryB")
  ))


; However if the system name has 5 letter or less all seems to work fine: 

(DEFSYSTEM foooo
  (:PATHNAME-DEFAULT "ai:omega;")
  (:PATCHABLE "ai:jerryb;")
  (:PACKAGE "PRESS")
  (:MODULE MAIN "insdig")
  (:COMPILE-LOAD MAIN))
FOOOO

* 
FOOOO
(make-system * ':compile)

Going to Increment FOOOO patch version

Increment FOOOO patch version? (Y or N) Yes.
Incrementing FOOOO patch version
No master directory for system FOOOO, creating one
FOOOO version 1. created

Going to Make FOOOO patchable

Make FOOOO patchable? (Y or N) Yes.
Making FOOOO patchable
Experimental FOOOO version 1. loaded

T

Date: 17 December 1981 12:56-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.18, ZMail 38.2, microcode 836, 60Hz, on Lisp Machine Ten:

While doing a M-X Change File Properties (ie, in a choice menu), in the
middle of typing a new date, I got a notification.  After I typed a
space to make the notification go away, I couldn't do anything other
than C-Abort.

Date: 17 December 1981 15:32-EST
From: David L. Andre <DLA at MIT-AI>
To: BUG-LISPM at MIT-AI

In System 78.19, ZMail 38.2, Local-File 30.3, microcode 836, 60Hz, on Lisp Machine Ten:

The value of SELF gotten by m-S in the error handler is always NIL,
regardless of how it displays with c-m-S.

Date: 17 December 1981 15:12-EST
From: Mike McMahon <MMcM at MIT-AI>
To: RMS at MIT-AI
cc: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI

    Date: 15 December 1981 16:30-EST
    From: Richard M. Stallman <RMS at MIT-AI>
    In System 78.13, ZMail 38.1, Local-File 30.3, microcode 836, on Lisp Machine Filecomputer:
    Doing a QC-FILE, an error happened in ZWEI:MOVE-BP because the BP
    was the BP was the symbol COMPILER:D-PDL.  The caller was
    DELETE-INTERVAL, and it got the "bp" from element 3 of the array
    leader of a line, which was the list (COMPILER:D-PDL STRINGP).
That's the LINE-BP-LIST.  It is manipulated by all the subprimitives,
namely insertion, deletion and movement.

    This is probably a temporary area problem, and maybe it is worth finding
    the places that update that slot of a line.
Hardly.  It is worth finding the rest of the places in the compiler that do output
with default-cons-area temporary, though.

Date: 17 December 1981 14:06-EST
From: Gregor J. Kiczales <GREGOR at MIT-AI>
To: DLW at MIT-AI
cc: BUG-LISPM at MIT-AI


    Date: Friday, 27 November 1981, 16:32-EST
    From: Daniel L. Weinreb <dlw at MIT-AI>

    If you are working on a new blinker, and its :BLINK method gets an
    error, then the error is caught in process-scheduler and the rest of the
    blinkers on the screen do not get blinked.  This is annoying.  Could we
    put in a catch-error around the sending of the :BLINK message, as well,
    so that at least the rest of the blinkers would not be affected by one
    bad blinker?

Yes something like this would definitely be a VERY good thing.

Date: 17 December 1981 14:00-EST
From: Mike McMahon <MMcM at MIT-AI>
Subject: Patchable systems
To: JERRYB at MIT-AI
cc: BUG-LISPM at MIT-AI

Put a :SHORT-NAME entry in the system declaration.  I'll change it to
give you a more comprehensible error or something.

