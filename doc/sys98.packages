-*-Fonts:TR12,cptfont,TR12I,HL12B,TR12B; Mode:Text-*-

4The New Package System.*

There is now a new package system, essentially that of Common Lisp plus a few
compatibility features.  Its highlights are:

 Symbols in a package are now marked either internal or external.
 Only the external symbols are inherited by other packages.

 Packages are no longer arranged in a hierarchy; inheritance is no
 longer required to be transitive.  Now you can specify exactly which
 other packages' external symbols are to be inherited by a new package.

 KEYWORD and USER are now two distinct packages.  No symbol is shared
 between KEYWORD and GLOBAL, so that 1COMPILE* and 1:COMPILE* are two
 distinct symbols, and so are 1NIL* and 1:NIL*.  Your code must now be
 careful to use the correct symbol (keyword or global) in all such cases,
 whereas it used to make no difference.

 All package names are now global in scope; they mean the same thing
 regardless of which package is current.  It is also possible to define
 local nicknames which are in effect only in one package, but this is
 not normally done.

 Package prefixes can now contain 1#:* in place of just 1:*.  They also sometimes
 contain two colons in a row.

4Things That Have Not Changed.*

A package is still an object which is used by 1INTERN* to map names into symbols.
At any time on package is current; it is the value of 1PACKAGE*, and is used by
default in 1INTERN* and 1READ*.  Packages can still have their own ("local") symbols
while inheriting additional symbols from other packages.

1READ* still looks up symbols in the current package by default.  It still allows you
to specify another package with a package prefix, a package name followed by a colon,
as in 1SI:FULL-GC*.

There is still a package called 1GLOBAL* which contains the fundamental
function and variable symbols of Lisp, such as 1EVAL*, 1COND*, 1SETQ*, 1T* and 1PACKAGE*.
By default, new packages inherit from this package alone.

There is still a keyword package whose symbols are normally referred to with a
package prefix which is just a colon, as in 1:NOSELECTIVE*.

Nearly all the old documented functions for operating on packages still work, though
not always exactly the same way.

4Specific Incompatibilities.*

1) 1LIST* and 1:LIST* are now two distinct symbols.  No symbol is now shared between
the GLOBAL package and the KEYWORD package.  This means that in many cases
where a colon prefix used to make no difference it is now significant.
You must be careful to use package prefixes when you want the keyword symbol.

The documentation has made the distinction even when it did not matter.
If you are lucky, you followed the documentation as if you did not realize that
1LIST* and 1:LIST* were the same symbol, and your code will work straight off.

2) Files loaded into the USER package will not work if they
omit the colon on keyword symbols, as they were formerly allowed to do.

See the section 4The USER Package*, below, for more information.  With luck,
these problems will be infrequent.

3) 1PKG-SUBPACKAGES* no longer exists.  There is no way to simulate the old
 meaning of this function, since there is no equivalent of "subpackages" 
 which is close enough to the old concept.

4) 1PKG-SUPER-PACKAGE* does still exist, but it uses a heuristic.  Its new definition
manages to satisfy most aspects of this function's old contract, but not quite all.
If you define a package with 1PACKAGE-DECLARE*, 1PKG-SUPER-PACKAGE* will still
return the same package that it used to return.  But for packages defined in other,
newly available ways, there may be no unique way of defining the "superpackage".
The GLOBAL package will probably be returned as the "superpackage" in this case.

5) 1PKG-REFNAME-ALIST* still exists and its value is used in roughly the same way.
However, it is no longer the case that most package names are found there.
In fact, these lists will normally be 1NIL*.

6) 1PKG-FIND-PACKAGE* no longer does anything with its third argument.

7) Some hairy undocumented features of 1PACKAGE-DECLARE* are no longer supported.

8) 1APROPOS*, 1WHO-CALLS* and 1WHAT-FILES-CALL* take different keyword arguments.
They used to accept keywords 1:SUPERIORS* and 1:INFERIORS* to specify whether to
look in the superpackage and subpackages of the specified package.  Now that
packages do not have superpackages and subpackages, the keywords have been
changed to 1:INHERITED* and 1:INHERITORS*.

9) Package names are now treated much like symbol names with regard to case.
In package prefixes, letters are converted to upper case unless quoted with slash
or vertical bar, so it does not matter what case you use.  In functions which
accept a package name to look up a package, the string or symbol you
specify is compared with case being significant.  Thus, if you use a string,
the string must contain upper case letters if the package name does.
If you supply a symbol, you can type the symbol in either case because
1READ* converts the characters of the symbol to upper case anyway.

4The Current Package.

1*PACKAGE*** and 1PACKAGE* are now synonymous names for a variable
whose value is the current package.  1*PACKAGE** is the Common Lisp name.

1PACKAGEP* 2anything*
   returns 1T* if 2anything* is a package.

1PKG-BIND* (2package*) 2body1...**
   executes 2body* with 1PACKAGE* bound to 2package*.

1PKG-GOTO* 2package*
   sets 1PACKAGE* to 2package*, but only if 2package* is suitable.  A package
   which automatically exports new symbols is not suitable, and causes an error,
   without setting 1PACKAGE*.  This is because typing expressions with such a
   package current would create new external symbols and interfere with other
   packages that USE this one.

1PKG-GOTO-GLOBALLY* 2package*
   sets the global binding of 1PACKAGE* (in effect in all processes that do not
   bind 1PACKAGE*) to 2package*.  Error if 2package* automatically exports new symbols.
   Note that the Lisp read-eval-print loop binds 1PACKAGE*, so such loops are not
   affected by the global binding.  Conversely, doing 1PKG-GOTO* inside a Lisp
   read-eval-print loop would not change the global binding.  1LOAD* also binds
   the current package, so in order to change the global binding from your init file,
   you must use this function.

4Finding All Packages.

1*ALL-PACKAGES*** is a new variable whose value is a list of all packages.

The function 1LIST-ALL-PACKAGES*, with no arguments, returns the same list.
This is a standard Common Lisp construct.  Strangely, 1*ALL-PACKAGES** is not.

4Package Naming.*

A package has one name, also called the 2primary name* for extra clarity, and can
have in addition any number of 2nicknames*.  All of these names are defined
globally, and all must be unique.  An attempt to define a package with a name or
nickname that is already in use is an error.

Either the name of a package or one of its nicknames counts as a 2name for* the
package.  All of the functions described below that accept a package as an
argument will also accept a name for a package (either a string or a symbol
whose pname is used).  Arguments that are lists of packages may also contain
names among the elements.  However, for transportable Common Lisp, one
must not use this feature.

When the package object is printed, its primary name is used.  The name is
also used by default when printing package prefixes of symbols.  However, when
you create the package you can specify that one of the nicknames should be
used instead for this purpose.  The name to be used for this is called the
2prefix name*.

Case is significant in package name lookup.   Usually package names should be
all upper case.  1READ* converts package prefixes to upper case except for quoted
characters, just as it does to symbol names, so the package prefix will match
the package name no matter what case you type it in, as long as the actual name
is upper case:
1    TV:FOO* and 1tv:foo* refer to the same symbol.
In the functions 1FIND-PACKAGE* and 1PKG-FIND-PACKAGE*, and others which accept
package names in place of packages, if you specify the name as a string you
must give it in the correct case:
1    (FIND-PACKAGE "TV")* finds the TV package,
1    (FIND-PACKAGE "tv")* finds nothing.
You can alternatively specify the name as a symbol; then the symbol's pname is
used.  Since 1READ* converts the symbol's name to upper case, you can type the
symbol in either upper or lower case:
1    (FIND-PACKAGE 'TV)* and 1(FIND-PACKAGE 'tv)* both find the TV package
1    *since both use the symbol whose pname is 1"TV"*.

Each package has an alist of local nicknames, which are mapped into packages.
These local nicknames serve as additional names for those other packages,
but only when this package is current, and only for the sake of package
prefixes in 1READ*.  It is permissible to define a local nickname
which is the same as the name of some existing package; this is useful for
"redirecting" symbol references with package prefixes to packages other than
the ones named in the code.

Relevant functions:

1PACKAGE-NAME* 2package*
   returns the name of 2package* (as a string).

1PACKAGE-NICKNAMES* 2package*
   returns the list of nicknames (strings) of 2package*.

1PACKAGE-PREFIX-PRINT-NAME* 2package*                          [Not in Common Lisp]
   returns the name to be used for printing package prefixes that refer to 2package*.
   Note that Common Lisp does not have such a feature.

1RENAME-PACKAGE* 2package* 2new-name* &optional 2new-nicknames*
   makes 2new-name* be the name for 2package*, and makes
   2new-nicknames* (a list of strings, possibly 1NIL*) be its nicknames.
   Error if the name or any of the nicknames is already in use.

1FIND-PACKAGE* 2name* &optional 2use-local-names-package*
   returns the package which 2name* is a name for, or 1NIL* if there is none.
   If 2use-local-names-package* is non-1NIL*, the local nicknames of that package
   are checked first.  Otherwise only actual names and nicknames are accepted.
   2use-local-names-package* should be supplied only when interpreting
   package prefixes.  The use of the second argument is not transportable
   Common Lisp.

   If a package is supplied as 2name*, it is returned.

   If a list is supplied as 2name*, it is interpreted as a specification of a package
   name and how to create it.  The list should look like (2name* 2super-or-use* 2size*).
   If 2name* names a package, it is returned.  Otherwise a package with name 2name*
   is created with 1MAKE-PACKAGE* and then returned.  2size* is specified as the size.
   2super-or-use* should be either the name of a single package, to be specified
   as the 2super* argument to 1MAKE-PACKAGE*, or a list of package names, to be
   specified as the 2use* argument to 1MAKE-PACKAGE*.

1PKG-FIND-PACKAGE* 2name* &optional 2create-p*                  [Not in Common Lisp]
   2name* is passed to 1FIND-PACKAGE*.  If that returns a package, 1PKG-FIND-PACKAGE*
   returns the same package.  Otherwise, a package may be created, according
   to the value of 2create-p*.  These values are allowed:

    1NIL* -- an error is signaled if an existing package is not found.
    1T* -- a package is always created.
    1:FIND* -- 1NIL* is returned in that case.
    1:ASK* -- the user is asked whether to create a package.

   If a package is created, it is done by calling 1MAKE-PACKAGE*
   with 2name* as the only argument.

   This function is not quite for compatibility only, since certain values of
   2create-p* provide useful features.

4Creation and Destruction of Packages*

While 1PACKAGE-DECLARE* still works, the standard way to create a package now is
the new function 1MAKE-PACKAGE*.  To eliminate one, use 1KILL-PACKAGE*.

1MAKE-PACKAGE* 2name* &key &optional 2nicknames use super shadow export prefix-name size* 2invisible*
		 2import* 2shadowing-import* 2import-from* 2relative-names* 2relative-names-for-me*
   creates a new package with name 2name* (a string) and nicknames 2nicknames* (a
   list of strings).  It is initially made large enough to hold at least 2size* symbols
   before needing expansion.  The package is returned as the value.

   2use* is a list of packages or names for packages which the new package should
   inherit from, or a single name or package.  It defaults to just the GLOBAL package.

   If 2super* is non-1NIL*, it should be a package or name to be the superpackage
   of the new package.  The new package will inherit from the superpackage
   and from all the other packages which the superpackage inherits from.
   The superpackage itself is marked as autoexporting; see 4External and*
  4 Internal Symbols* for more information.
   Superpackages are implemented for compatibility only; they are not
   recommended for use in any new package definitions.

   2prefix-name* specifies the name to use for printing package prefixes that
   refer to this package.  It must be either the name or one of the nicknames.
   The default is to use the name.

   2shadow* is a list of strings which are names for symbols which should be
   shadowed in the newly created package.  This argument is passed directly
   to the function 1SHADOW*.

   2export* is a list of symbols or names to export in the new package.
   This is handled by the function 1EXPORT*.

   2nicknames* and 2use* are the only arguments allowed in transportable
   Common Lisp.
 
   2invisible*, if non-1NIL*, means that this package should not be put on the
   list 1*ALL-PACKAGES**.  As a result, 1FIND-PACKAGE* will not find this package,
   not by its name and not by its nicknames.  You can make normal use of the
   package in all other respects (passing it to 1INTERN*, passing it to 1USE-PACKAGE*
   to make other packages inherit from it or it from others, and so on).
 
   2import*, if non-1NIL*, is a symbol or a list of symbols to be imported into this
   package.  You could accomplish as much by calling 1IMPORT* after you have
   created the package.
 
   2shadowing-import*, if non-1NIL*, is a symbol or a list of symbols to be imported
   into this package with shadowing.  You could accomplish as much by calling
   1SHADOWING-IMPORT* after you have created the package.
 
   2import-from*, if non-1NIL*, is a list containing a package (or package name)
   followed by names of symbols to import from that package.  Specifying
   2import-from* as 1(CHAOS "OPEN" "CLOSE")* is nearly the same as specifying
   2import* as 1(CHAOS:OPEN CHAOS:CLOSE)*, the difference being that with
   2import-from* the symbols 1OPEN* and 1CLOSE* are not looked up in the 1CHAOS*
   package until it is time to import them.
 
   2relative-names* is an alist specifying the local nicknames to have in this
   package for other packages.  Each element looks like 1(2localname* . 2package*)*,
   where 2package* is a package or a name for one, and 2localname* is the
   desired local nickname.
 
   2relative-names-for-me* is an alist specifying local nicknames by which this
   package can be referred to from other packages.  Each element looks like
   1(2package* 2localname*)*, where 2package* is a package name and 2localname* is
   the name to refer to this package by from 2package*.  You will note that
   the elements of this list are not dotted while those of 2relative-names* are.
   Blame everyone's favorite obnoxious Lisp machine company for this.

1PKG-CREATE-PACKAGE* 2name* &optional (2super* 1PACKAGE*) (2size* 1200*)   [Not in Common Lisp]
   creates a new package named 2name* of size 2size* with superpackage 2super*.

1DEFPACKAGE* &quote 2name* 2keywords-and-values*...			    [Not in Common Lisp]
  is a new way to create a package.  All the arguments are simply passed to
  1MAKE-PACKAGE*.  The differences between this function (actually, macro) and
  1MAKE-PACKAGE* are:

    1DEFPACKAGE* does not evaluate any arguments.

    Re-evaluating a 1DEFPACKAGE* for an existing package is allowed, and modifies
    the existing package in accordance with changes in the definition.

    The editor notices 1DEFPACKAGE* and records it as the "definition" of the package.

Package attributes in a file's 1-*-* line can now have this format
    1Package: (2name** 2keyword* 2value* 2keyword* 2value1...)**;
which means that the package to be used is 2name* and, if that package does
not exist, it should be created by passing 2name* and the keywords and values
to 1MAKE-PACKAGE*.

1PACKAGE-DECLARE* &quote 2name* 2super* 2size* 2unused* 2body1...**          [Not in Common Lisp]
   creates a package named 2name* with superpackage 2super* (another name)
   and initial size 2size*.  The 2unused* argument must be 1NIL*.  2body* is now
   allowed to contain only these types of elements:
     (1SHADOW* 2names*)
         passes the names to the function 1SHADOW*.
     (1EXTERNAL* 2names*)
         does nothing.  This controlled an old feature that no longer exists.
     (1INTERN* 2names*)
         converts each name to a string and interns it in the package.
     (1REFNAME* 2refname* 2packagename*)
         makes 2refname* a local nickname in this package
         for the package named 2packagename*.
     (1MYREFNAME* 2packagename* 2refname*)
         makes 2refname* a local nickname in the package named 2packagename*
         for this package.  If 2packagename* is 1"GLOBAL"*, makes 2refname* a
         global nickname for this package.

1PKG-ADD-RELATIVE-NAME* 2in-pkg* 2name* 2for-pkg*		            [Not in Common Lisp]
  defines 2name* as a local nickname in 2in-pkg* for 2for-pkg*.  2in-pkg* and 2for-pkg*
  may be packages, symbols or strings.

1PKG-DELETE-RELATIVE-NAME* 2in-pkg* 2name*			            [Not in Common Lisp]
  eliminates 2name* as a local nickname in 2in-pkg*.

1KILL-PACKAGE* 2name-or-package*
   kills the package specified or named.  The name 1PKG-KILL* is also allowed
   for compatibility.  This function is not in Common Lisp.

4Package Inheritance.*

You now have complete control over which packages are inherited by which
other packages.  Inheritance no longer has to be transitive.  X can inherit from Y
and Y from Z but without X inheriting from Z also.  Inheritance can also be
multple.  X can inherit from two unrelated packages Y and W.  However, in any
case, only 2external* symbols are inherited.  More information on internal vs
external symbols is in the following section.

In the past, a package would inherit only from its superior, its superior's superior, and so on.
Thus, if BAR and QUUX were two subpackages of GLOBAL, you had the ability to
make a new package FOO inherit from BAR and GLOBAL, or from QUUX and GLOBAL,
or just from GLOBAL; but you could not decide to make FOO inherit from
BAR alone, or QUUX alone, or from BAR and QUUX, or from BAR and QUUX and GLOBAL.
Now you can choose any of these possibilities.

The functions 1USE-PACKAGE* and 1UNUSE-PACKAGE* are used to control the inheritance
possibilities of an existing package.  The 1:USE* argument to 1MAKE-PACKAGE* can be used
to specify them when a package is created.  If FOO inherits from BAR, we also say
that FOO "USEs" BAR.

1USE-PACKAGE* 2packages* &optional (2in-package* 1PACKAGE*)
  Makes 2in-package* inherit symbols from 2packages*, which should be
  either a single package or name for a package, or a list of packages and/or
  names for packages.

1UNUSE-PACKAGE* 2packages* &optional (2in-package* 1PACKAGE*)
  Makes 2in-package* cease to inherit symbols from 2packages*.

1PACKAGE-USE-LIST* 2package*
   Returns the list of packages USEd by 2package*.

1PACKAGE-USED-BY-LIST* 2package*
   Returns the list of packages which USE 2package*.

You can add or remove USEd packages at any time.

If one package USEs several others, the USEd packages are not supposed to
have any two distinct symbols with the same pname between them all.

4External and Internal Symbols.*

Each symbols in a package is marked as external or internal in that package.
Symbols created in the package by 1INTERN* are initially internal.  If you create a
package, it is up to you to mark symbols as external if you want them to be so.

The plan is that all the symbols in a package which are intended to be
used from other packages will be marked as external.

The internal vs external distinction makes a difference at two times:
  Only external symbols are inherited from other packages
  In Common Lisp, only external symbols can be referred to
    with ordinary colon prefixes.  1::* prefixes must be used for internals.

1INTERN* works by first checking the current or specified package for any symbol,
whether external or not, and then checking all the inherited packages for external
symbols only.  All the symbols in GLOBAL and SYSTEM are external to start with,
so that they can still be inherited, and all new symbols made in them are made
external.  All symbols in the 1KEYWORD* package are also automatically external.

Some other packages automatically extern all symbols put in them.  This
happens, for compatibility, in any package which has been specified as the
"superpackage" in the old-fashioned 1PACKAGE-DECLARE* and 1PKG-CREATE-PACKAGE*
functions.  You are not allowed to 1PKG-GOTO* one of these packages, and 1READ*
makes a special check to prevent you from creating symbols in them with
package prefixes.

Relevant functions:

1EXPORT* 2symbols* &optional (2package* 1PACKAGE*)
   Makes 2symbols* external in 2package*.  2symbols* should be a symbol or string
   or a list of symbols and/or strings.  The specified symbols or strings are
   interned in 2package*, and the symbols found are marked external in
   2package*.

   If one of the specified symbols is found by inheritance from a USEd package,
   it is interned locally in 2package* and then marked external.

1UNEXPORT* 2symbols* &optional (2package* 1PACKAGE*)
   Makes 2symbols* not be external in 2package*.  It is an error if any of the
   symbols to be marked not external is not directly present in 2package*.

1GLOBALIZE* 2name-or-symbol* &optional (2into-package* 1"GLOBAL"*)
   if 2name-or-symbol* is a name (a string), this interns the name
   in 2into-package* and then forwards together all symbols with the same name
   in all the packages that USE 2into-package* as well as in 2into-package* itself.

   If 2name-or-symbol* is a symbol, this interns that symbol in 2into-package*
   and then forwards together the symbols with the same name.

   The symbol which ultimately is present in 2into-package* is also exported.

4Looking Up Symbols.*

The four old functions for looking up symbols work with minor change.
There are also two new ones.

1INTERN* 2symbol-or-string* &optional 2package*
   Looks up the specified name in the specified package and inherited packages.
   If 2package* is omitted or 1NIL*, the current package is used.

   If a string is specified, a symbol of that name is looked for first in the
   specified package and then in each of the packages it inherits from.
   If a symbol is found, it is returned.  Otherwise, a new symbol with that
   name is created and inserted in the specified package, and returned.

   If a symbol is specified, lookup proceeds using the symbol's pname 
   as the string to look for.  But if no existing symbol is found, the
   specified symbol itself is inserted in the package.  No new symbol is made.
   Use of a symbol as argument is not defined in Common Lisp.

   1INTERN* actually returns three values.  The first is the symbol found or created.
   The second is a flag that says whether an existing symbol was found, and how.
   The third is the package in which the symbol was actually found or inserted.
   It will be the specified package or one of those it inherits from.

   The possible second values are
    1NIL*   -- nothing was found.  The symbol returned was just inserted.
    1:INTERNAL* -- the symbol was found as an internal symbol in the specified package.
    1:EXTERNAL* -- the symbol was found as an external symbol in the specified package.
    1:INHERITED* -- the symbol was inherited from some other package 
       (where it is necessarily an external symbol).

1INTERN-SOFT* 2symbol-or-string* &optional 2package
1FIND-SYMBOL** 2symbol-or-string* &optional 2package*                [Common Lisp name]
   Looks for an existing symbol like 1INTERN*, but never creates a symbol or
   inserts one into 2package*.  If no existing symbol is found, all three values are 1NIL*.

   2package* defaults to the current package if it is omitted or given as 1NIL*.

1INTERN-LOCAL* 2symbol-or-string* &optional 2package*               [Not a Common Lisp function]
   Like 1INTERN* but looks only in 2package*, ignoring the packages it normally inherits from.
   If no existing symbol is found in 2package* itself, the specified symbol or a newly
   created symbol is inserted in 2package*, where it permanently shadows any symbol
   that previously would have been inherited from another package.

   The third value is always 2package*, and the second one is never 1:INHERITED*.

   2package* defaults to the current package if it is omitted or given as 1NIL*.

1INTERN-LOCAL-SOFT* 2symbol-or-string* &optional 2package*        [Not a Common Lisp function]
   Like 1INTERN-SOFT* but looks only in 2package*, ignoring the packages
   it normally inherits from.  If no symbol with the specified name is found
   in 2package*, all three values are 1NIL*.

   2package* defaults to the current package if it is omitted or given as 1NIL*.

1REMOB* 2symbol* &optional 2package
1UNINTERN** 2symbol* &optional 2package*                               [Common Lisp name]
   Removes 2symbol* from being present in 2package*.  2package* defaults to
   2symbol*'s package.

   If a shadowing symbol is removed, a previously-hidden name conflict
   between distinct symbols with the same name in two USEd packages can
   suddenly be exposed, like a discovered check in chess.  This is an error.

1IMPORT* 2symbols* &optional (2package* 1PACKAGE*)
   is the standard Common Lisp way to insert a specific symbol or symbols
   into a package.  2symbols* is a symbol or a list of symbols.  Each of the specified
   symbols will be inserted into 2package*, just as 1INTERN* would do.

   If a symbol with the same name is already present (directly or by inheritance)
   in 2package*, an error is signaled.  On proceeding, you can say whether to
   leave the old symbol there or replace it with the one specified in 1IMPORT*.

4Looping Over Symbols.*

Several new macros are available for writing loops that run over all the symbols
in a package.

1DO-SYMBOLS* (2var* 2package* 2result-form*) 2body*...
   Executes 2body* once for each symbol findable in 2package* either directly or through
   inheritance.  On each iteration, the variable 2var* is bound to the next such symbol.
   Finally the 2result-form* is executed and its values are returned.

   Since a symbol can be directly present in more than one package,
   it is possible for the same symbol to be processed more than once
   if it is present directly in two or more of 2package* and the inherited packages.

1DO-LOCAL-SYMBOLS* (2var* 2package* 2result-form*) 2body1...**            [Not a Common Lisp function]
   Executes 2body* once for each symbol present directly in 2package*.  Inherited symbols
   are not considered.  On each iteration, the variable 2var* is bound to the next such symbol.
   Finally the 2result-form* is executed and its values are returned.

   This function is not in Common Lisp.

1DO-EXTERNAL-SYMBOLS* (2var* 2package* 2result-form*) 2body1...**
   Executes 2body* once for each external symbol findable in 2package* either directly or through
   inheritance.  On each iteration, the variable 2var* is bound to the next such symbol.
   Finally the 2result-form* is executed and its values are returned.

   Since a symbol can be directly present in more than one package,
   it is possible for the same symbol to be processed more than once
   if it is present directly in two or more of 2package* and the inherited packages.

1DO-LOCAL-EXTERNAL-SYMBOLS* (2var* 2package* 2result-form*) 2body1...**   [Not a Common Lisp function]
   Executes 2body* once for each external symbol present directly in 2package*.  Inherited symbols
   are not considered.  On each iteration, the variable 2var* is bound to the next such symbol.
   Finally the 2result-form* is executed and its values are returned.

   This function is not in Common Lisp.

1DO-ALL-SYMBOLS* (2var* 2result-form*) 2body*...
   Executes 2body* once for each symbol present in any package.
   On each iteration, the variable 2var* is bound to the next such symbol.
   Finally the 2result-form* is executed and its values are returned.

   Since a symbol can be directly present in more than one package,
   it is possible for the same symbol to be processed more than once.

These old functions still work:

1MAPATOMS* 2function* &optional (2package* 1"GLOBAL"*) (2inherited-p* 1T*)
   Calls function successively on each of the symbols in 2package*.
   Symbols inherited from other packages are included if 2inherited-p* is non-1NIL*.

1MAPATOMS-ALL* 2function* &optional (2package* 1"GLOBAL"*)
   Calls function successively on each of the symbols in 2package* and all the
   packages that inherit from 2package*.  When 2package* has its default value,
   this will include just about all packages.

4The USER Package.*

In System 98, the USER package is an ordinary package which inherits from GLOBAL.

The USER package used to be the same as the KEYWORD package, so
in files read into USER it was not necessary to put a colon on any keyword.
This is no longer the case.  You must use colons in the USER package
just as in any other package.

4Package Prefixes.*

A 2package prefix* is used in s-expressions to refer to a symbol that is not present
or inherited in the current package.  1TV:TEM* is an example; it refers to the symbol
with pname 1TEM* that is visible in the package named TV.  (TV can be the primary
name or a nickname.)

Internal symbols that print with package prefixes will print with 1::* prefixes, as
in 1TV::TEM*, rather than as 1TV:TEM*.  This is because in Common Lisp a simple
colon prefix can be used only for external symbols; a 1::* prefix must be used if
the symbol is internal.  This restriction has not been implemented for Zetalisp
programs!  The colon prefixes in your programs will still work!  But 1::* prefixes
are being printed for informational purposes, and will be accepted by the reader.

A prefix consisting of just 1#:* indicates an uninterned symbol.  Uninterned symbols
are printed with such prefixes, and 1#:* can also be used in input to create an uninterned
symbol.

Package prefixes are normally decoded when read by checking the local
nicknames, if any, of the current package and its superpackages before looking
at the actual names and nicknames of packages.  You can double the colon in
the prefix to prevent the use of the local nicknames.  Suppose that the current
package has TV as a local nickname for the XTV package.  Then 1TV:SHEET* will
get the 1SHEET* in the XTV package, but 1TV#:SHEET* will get the one in the TV
package.  That symbol will print out as 1TV#:SHEET* as well, if the printer sees
that 1TV:SHEET* would be misinterpreted by the reader.

The package name in a package prefix is read just like a symbol name.  This
means that slash and vertical bars can be used to include special characters in
the package name.  Thus, 1FOO/:BAR:TEST* refers to the symbol 1TEST* in the
FOO:BAR package, and so does 1|FOO:BAR|:TEST*.  Also, letters are converted to
upper case unless they are quoted with slash or vertical bar.  For this reason,
package names should normally be all upper case.

4Shadowing and Name Conflicts.*

If multiple symbols with the same name are available in a single package,
counting both symbols interned in that package and external symbols inherited
from other packages, we say that a 2name conflict* exists.

Name conflicts are not permitted to exist unless a resolution for the conflict has
been stated in advance by specifying explicitly which symbol is actually to be
seen in package.  This is done by 2shadowing*.  If no resolution has been
specified, any command which would create a name conflict signals an error
instead.

For example, a name conflict can be created by 1USE-PACKAGE* if it adds a new
inherited package with its own symbol 1FOO* to a package which already has or inherits
a different symbol with the same name 1FOO*.  1EXPORT* can cause a name conflict
if the symbol becoming external is now supposed to be inherited by another
package which already has a conflicting symbol.  On either occasion, if shadowing
has not already been used to control the outcome, an error is signaled
and the USEage or exportation does not occur.

Shadowing means marking the symbol actually interned in a package as a
2shadowing symbol*, which means that any conflicting symbols are to be ignored.

1PACKAGE-SHADOWING-SYMBOLS* 2package*
   returns the list of shadowing symbols of 2package*.  Each of these is a symbol
   interned in 2package*.  When a symbol is interned in more than one package,
   it can be a shadowing symbol in one and not in another.

Once a package has a shadowing symbol named 1FOO* in it, any other potentially
conflicting external symbols with name 1FOO* can come and go in the inherited
packages with no effect.

There are two ways to request shadowing:

1SHADOW* 2names* &optional (2package* 1PACKAGE*)
   makes sure that shadowing symbols with the specified names exist in 2package*.
   2names* is either a string or symbol or a list of such; any symbols present
   in 2names* are coerced into their pname strings.  Each name specified is handled
   independently as follows:

     If there is a symbol of that name interned in 2package*, it is marked as a shadowing
     symbol.

     Otherwise, a new symbol of that name is created and interned in 2package*, and
     marked as a shadowing symbol.

   In any case, 2package* will have a symbol with the specified name interned directly in it
   and marked as a shadowing symbol.

   The primary application of 1SHADOW* is for causing certain symbols not to be inherited
   from any of the USEd packages.  To avoid problems, the 1SHADOW* should be done
   right after the package is created.  The 1:SHADOW* keyword to 1MAKE-PACKAGE* lets
   you specify names to be shadowed in this way when you create a package.

1SHADOWING-IMPORT* 2symbols* &optional (2package* 1PACKAGE*)
   interns the specified symbols in 2package* and marks them as shadowing symbols.
   2symbols* must be a list of symbols or a single symbol; strings are not allowed.

   Each symbol specified is placed directly into 2package*, after first removing any
   symbol with the same name already interned in 2package*.  This is rather drastic,
   so it is best to use 1SHADOWING-IMPORT* right after creating a package.

   1SHADOWING-IMPORT* is primarily useful for choosing one of several conflicting
   external symbols present in packages to be USEd.
