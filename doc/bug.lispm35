22-Oct-85 23:48:17-EDT,3577;000000000000 
Received: from MIT-REAGAN by MIT-OZ via Chaosnet; 1 Jul 85 11:26-EDT
Received: from MIT-JOE-LOUIS by MIT-REAGAN via CHAOS with CHAOS-MAIL id 5773; Mon 1-Jul-85 11:26:11-EDT
Date: Mon, 1 Jul 85 11:24 EDT
From: Roland Ouellette <Roly@MIT-MC>
Subject: load-font-from-sym
To: BUG-LISPM@OZ
Message-ID: <850701112422.1.ROLY@MIT-JOE-LOUIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, ECG 1.0,
Experimental Boxer 7.0, microcode TMC5-MIC 319, FEP 17, on Lisp Machine Joe Louis:

I suppose that this bug has already been reported, .... but just in case
it hasn't......

It looks as though fed:pathname-defaluts should be called as a function
and not a variable in the function load-font-from-sym.  I tried it out
and it seems to work.

>>Error: The second argument (DEFAULTS) to FS:SET-DEFAULT-PATHNAME, NIL, was of the wrong type.
         The function expected pathname defaults alist.
While in the function FS:SET-DEFAULT-PATHNAME  FED:LOAD-FONT-FROM-SYM  (:PROPERTY SI:COM-SHOW-FONT SI:CP-FUNCTION)

FS:SET-DEFAULT-PATHNAME:  (P.C. = 134)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "B:>sys>r6>fonts>nlgp1>centuryschoolbook105.bfd">
   Arg 1 (DEFAULTS): NIL
   Local 2: ("Skip setting default to ~A,~@
			       and perhaps try to use it." #<LMFS-PATHNAME "B:>sys>r6>fonts>nlgp1>centuryschoolbook105.bfd">)
   Local 3 (ELEM): NIL

FED:LOAD-FONT-FROM-SYM:  (P.C. = 27)
   Arg 0 (SYM): FONTS:CENTURYSCHOOLBOOK105
   --Defaulted args:--
   Arg 1 (QUERY-P): NIL

(:PROPERTY SI:COM-SHOW-FONT SI:CP-FUNCTION):  (P.C. = 11)
   Arg 0 (FONT): "CENTURYSCHOOLBOOK105"

SI:COM-SHOW-FONT:  (P.C. = 7)
   Arg 0 (FONT): "CENTURYSCHOOLBOOK105"

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SI:COM-SHOW-FONT "CENTURYSCHOOLBOOK105")
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 43440261>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 43440266>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): "Breakpoint ZMACS"
   Arg 1 (ABORT-FUNCTION): SI:BREAK-HERALD
   Arg 2 (READ-FUNCTION): SI:BREAK-READ-FUNCTION
   --Defaulted args:--
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:BREAK-INTERNAL:  (P.C. = 176)
   Arg 0 (TAG): ZWEI:ZMACS
   Local 0 (TAG): "Breakpoint ZMACS"
   Arg 1 (CONDITIONAL): T

ZWEI:COM-BREAK:  (P.C. = 64)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-BREAK
   Arg 1 (CHAR): 129
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): (ZWEI:EXPAND-ABBREV-HOOK)

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 129

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:17-EDT,6358;000000000000
Received: from MIT-MC by MIT-OZ via Chaosnet; 1 Jul 85 13:06-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  1 Jul 85 13:05:35 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 266327; Mon 1-Jul-85 12:49:37-EDT
Date: Mon, 1 Jul 85 12:55 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: cl:with-open-file
To: INGRIA@BBNG.ARPA, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <INGRIA.12122873955.BABYL@BBNG.ARPA>
Message-ID: <850701125536.0.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Fri, 28 Jun 1985  22:15 EDT
    From: INGRIA@BBNG.ARPA


    In Symbolics 3670 Release 6.0, IP-TCP 29.0, BBN 20.1,
    microcode TMC5-IO4-MIC 319, FEP 22, on Conger:

    cl:with-open-file seems to die if you give it the name of a file that
    does not already exist.

    I got this error by evaluating the form (SAVEDICT "beluga:>ingria>newertestdict.lisp")

    Here is the relevant portion of SAVEDICT, my function that calls
    with-open-file:

    (defun savedict (&optional (newfilename "irus:irus;noscdict.lisp"))
    ...
	  (with-open-file (*dict-stream* newfilename
					 :direction :output
					 :if-exists :new-version
					 :if-does-not-exist :create)
    ...))

    From the description of the options to open given on pp. 418-422 of the
    Common LISP manual, these options should do the right thing.  Or am I
    just being dense?
No, you're just not telling the truth.  The stack trace below shows

    OPEN:  (P.C. = 167)
       Arg 0 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Rest arg (KEYWORD-ARGS): (:DIRECTION :PROBE)

    TRUENAME:  (P.C. = 17)
       Arg 0 (X): "beluga:>ingria>newertestdict.lisp"

    IRUS:SAVEDICT:  (P.C. = 37)  (from BELUGA:>ingria>noscfns)
       Arg 0 (NEWFILENAME): "beluga:>ingria>newertestdict.lisp"
The with-open-file above is not the agency that called TRUENAME, who the latter is
acting completely reasonably.  What is more, the options you have in the above
with-open-file are the completely default ones, and need not be specified.

    >>Error: The file was not found.
	     For BELUGA:>ingria>newertestdict.lisp
    While in the function (:METHOD FS:HOST-UNIT :COMMAND)  FS:OPEN-CHAOS  (:METHOD FS:QFILE-ACCESS-PATH :OPEN)

    (:METHOD FS:HOST-UNIT :COMMAND):  (P.C. = 236)
       Arg 0 (SELF): #<HOST-UNIT 30711674>
       Arg 1 (SELF-MAPPING-TABLE): FS:HOST-UNIT
       Arg 2 (OPERATION): :COMMAND
       Arg 3 (MARK-P): NIL
       Arg 4 (STREAM-OR-HANDLE): NIL
       Arg 5 (SIMPLE-P): NIL
       Arg 6 (WHOSTATE): #"Probe"
       Rest arg (COMMANDS): (#"OPEN " :PROBE #" " :CHARACTER #"" #"" #"" #"" #"" #"" ...)
       Local 8 (HANDLE): NIL
       Local 9 (STREAM): NIL
       Local 10 (PKT): #<Chaos Packet 7341415>
       Local 11 (SUCCESS): NIL
       Local 12 (STRING): #" ERROR FNF F The file was not found."
       Local 13 (TRANSACTION-ID): #"T2501"
       Local 14 (CREATE-P): NIL
       Local 15 (CONDITION): NIL
       Local 16: T
       Local 17: #<CASE-HANDLER 120711625>
       Local 18: NIL
       Local 19: (#<CASE-HANDLER 120711625>)

    FS:OPEN-CHAOS:  (P.C. = 674)
       Arg 0 (ACCESS-PATH): #<LMFS-QFILE-ACCESS-PATH BELUGA using QFILE 30711644>
       Arg 1 (REAL-PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Arg 2: #P"BELUGA:>ingria>newertestdict.lisp"
       Arg 3 (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

    (:METHOD FS:QFILE-ACCESS-PATH :OPEN):  (P.C. = 7)
       Arg 0 (SELF): #<LMFS-QFILE-ACCESS-PATH BELUGA using QFILE 30711644>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:QFILE-ACCESS-PATH -- 4. IV's, 0. FL's 104676437>
       Arg 2 (OPERATION): :OPEN
       Arg 3 (REAL-PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Arg 4 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Rest arg (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

    (:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
       Arg 0 (SELF): #P"BELUGA:>ingria>newertestdict.lisp"
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 104225115>
       Arg 2 (OPERATION): :OPEN
       Arg 3 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Rest arg (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

    FS:COMMON-LISP-OPEN:  (P.C. = 450)
       Arg 0 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Arg 1 (KEYWORD-ARGS): (:CHARACTERS T :BYTE-SIZE NIL :DIRECTION :PROBE)

    ZL:OPEN:  (P.C. = 257)
       Arg 0 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Local 0 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Rest arg (KEYWORD-ARGS): (:CHARACTERS T :BYTE-SIZE NIL :DIRECTION :PROBE)

    OPEN:  (P.C. = 167)
       Arg 0 (PATHNAME): #P"BELUGA:>ingria>newertestdict.lisp"
       Rest arg (KEYWORD-ARGS): (:DIRECTION :PROBE)

    TRUENAME:  (P.C. = 17)
       Arg 0 (X): "beluga:>ingria>newertestdict.lisp"

    IRUS:SAVEDICT:  (P.C. = 37)  (from BELUGA:>ingria>noscfns)
       Arg 0 (NEWFILENAME): "beluga:>ingria>newertestdict.lisp"

    SI:*EVAL:  (P.C. = 403)
       Arg 0 (FORM): (IRUS:SAVEDICT "beluga:>ingria>newertestdict.lisp")
       Local 0 (FORM): NIL
       --Defaulted args:--
       Arg 1 (ENV): NIL
       Arg 2 (HOOK): NIL

    (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
       Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 11300102>

    TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
       Arg 0 (NEW-MODE): :BLAST
       Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
       Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 11300107>

    SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
       Arg 0 (NAME): #"Common Lisp Top Level"
       Arg 1 (ABORT-FUNCTION): NIL
       Arg 2 (READ-FUNCTION): NIL
       Arg 3 (EVAL-FUNCTION): NIL
       Arg 4 (PRINT-FUNCTION): NIL

    SI:LISP-COMMAND-LOOP:  (P.C. = 67)
       Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 7400602 exposed>
       Rest arg: (:NAME #"Common Lisp Top Level")

    SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
       Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 7400602 exposed>

    SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
       Arg 0 (IGNORE): NIL



22-Oct-85 23:48:18-EDT,1964;000000000000    
Received: from MIT-REAGAN by MIT-OZ via Chaosnet; 1 Jul 85 14:05-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 5777; 1 Jul 85 14:05:08-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 266113; Mon 1-Jul-85 10:20:52-EDT
Date: Mon, 1 Jul 85 10:26 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: VMS File System Bug
To: GSB@MIT-MC.ARPA, BUG-LISPM@MIT-OZ.mit
cc: HLV@MIT-OZ.mit, cjl@MIT-OZ.mit
In-Reply-To: <[MIT-MC.ARPA].559896.850629.GSB>
Message-ID: <850701102632.9.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Sat, 29 Jun 85 16:45:46 EDT
    From: Glenn S. Burke <GSB@MIT-MC.ARPA>

	Date: Sat, 29 Jun 85 16:20 EDT
	From: Harry L. Voorhees <HLV@OZ>

	In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
	microcode TMC5-MIC 319, FEP 18, on Lisp Machine Robot-3:

	Zmacs on the Lisp machine just let me do:

	M-X Rename File (From) pig:[hlv]*.*.* (To) pig:[hlv.lispm]*.*.*

	which had the most undesirable effect of copying directories as well
	as files, and hence wiping out two years of research.
	(Once file [hlv]lispm.dir got renamed to [hlv.lispm], all 
	files previously renamed were lost.)

    Hey man, this is pretty neat.  Look closely, [hlv.lispm] IS the
    directory file which it got renamed into.  It's now circular, and
    there's no pointer to it from the outside world.

Yeah, the $rename function in VMS lets you do this.  I'm not quite sure
what to suggest.  As you point out, the disk-repair utility will let you
get back such "orphaned" directories.  Directory hierarchies on VMS are
not well though-out with respect to the rest of the world.  You should
try "links" sometime on VMS, they're a real joke.

    I'm gonna take down pig and run disk-repair later to reclaim all these
    files later, unless i hear from someone first.  It probably needs it
    anyway.  wonder how much other trash i will uncover?


22-Oct-85 23:48:18-EDT,3737;000000000000 
Received: from MIT-GOLDILOCKS by MIT-OZ via Chaosnet; 1 Jul 85 14:09-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2527; Mon 1-Jul-85 14:08:18-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 5776; 1 Jul 85 14:04:54-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 265932; Sun 30-Jun-85 13:39:46-EDT
Date: Sat, 29 Jun 85 15:40 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: si:*princase*
To: Robert H. Kassel <sr.rob@MIT-SPEECH.mit>, bug-lispm@MIT-SPEECH.mit,
    dcp@SCRC-QUABBIN.ARPA
In-Reply-To: <SR.ROB.12123021918.BABYL@MIT-SPEECH>
Supersedes: <850629154031.7.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850629154049.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: 29 Jun 1985  11:48 EDT (Sat)
    From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>


	    I loaded the SPIRE tape recently and found the :|bin| problem.  I was
	    able to get by it by resuming each time I got the error and telling it
	    to use :BIN instead.

	    We also tried to make a distribution tape yesterday and found lots of
	    problems with files whose logical pathnames pointed to unix files
	    and used fancy translation rules to get around the differences between
	    unix files and logical files.  I wasn't there at the time, so I can't
	    generate a very good report.

	BUG-LispM is not the place to be discussing this.  This is a bug in the
	Spire distribution, not with Lisp Machine software provided by Symbolics
	(module the acknowledgement below).  The logical pathname problem is
	again a Spire distribution problem.

    Did he say he was trying to make a SPIRE distribution tape?  No.  He
    simply flamed about unix file names and logical pathnames.  
It's not that simple.  He tried to LOAD a SPIRE distribution tape and
got the :|bin| problem.  
    No SPIRE problem here.
That depends on if the problem is before or after the tape is made.  As
I said before, we acknowledge various poor interactions with global
variables and subsystems.  This could account for a bad tape being made.
However, Church had a tape in his hand.  

Now I see that his unix flame doesn't have anything to do with the spire
tape.  Well, there isn't enough information for a real bug report, such
as the local xyz.translations file and the defsystem.
    (We recommend making the SPIRE: host a LispM anyway,
    just to make installation a little easier.)  Additionally, Bug-lispm IS
    the place to be discussing this.  
It depends on what "this" is.  We've discuussed the :|bin| thing to
death.  The unix translation is lacking in information.
    I made a distribution tape in
    accordance with the manual's guidelines.  We've made these in previous
    releases and they loaded fine.  Now they don't.  I'm not saying it's
    NOT something on our side, just that this happened and it MAY be your
    problem.  In any event it's something you should know about, for if it
    happens once it may happen again and the problem/assumptions we made
    should be documented to prevent it. 
It would be easier to fix the problem globally than to document the 300
variables you shouldn't twiddle in your init file.  Maybe we should
document that it is best to make distribution tapes from a vanilla,
freshly booted world using (si:login-to-sys-host) to login?  We do
appreciate your bringing those can of worms to our attention.

	We acknowledge a poor interaction with various global variables (e.g.,
	si:*princase*) and their effect on various subsystems (e.g., the
	distribution dumper).  

    So it may be a Symbolics problem after all...  Geeez.


22-Oct-85 23:48:20-EDT,5977;000000000000 
Received: from MIT-APIARY-8 by MIT-OZ via Chaosnet; 1 Jul 85 18:31-EDT
Date: Mon, 1 Jul 85 18:30 EDT
From: Carl Hewitt <Hewitt@OZ>
Subject: bug at file server
To: BUG-LISPM@OZ
Message-ID: <850701183056.3.HEWITT@APIARY-8>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-8:
I received the following message when I tried to copy a directory


>>Error: Bug at file server:
         Bad disk address 0 in #<PARTITION FEP0:>lmfs.file.1 17505042>
While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

(:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND):  (P.C. = 65)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 17660123>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :WAIT-FOR-COMMAND
   Arg 3 (TID-CONS-ARGS): ("T2442" :OPEN "Open" #<NFILE-DATA-CHANNEL O2440 5567625>)
   Local 4 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL O2440 5567625>
   Local 5 (COMMAND-TID): "T2442"
   Local 6 (COMMAND-NAME): :OPEN
   Local 7 (WHOSTATE): "Open"
   Local 8 (RESPONSE-ARGS): ("BUG" NIL "Bug at file server:
Bad disk address 0 in #<PARTITION FEP0:>lmfs.file.1 17505042>")
   Local 9 (RESPONSE-NAME): :ERROR

(:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND):  (P.C. = 40)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 17660123>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-AND-WAIT-FOR-COMMAND
   Arg 3 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL O2440 5567625> "O2440" ">actor-doc>actor-entry.mss.19" :OUTPUT NIL :ESTIMATED-LENGTH 7042 :IF-EXISTS ...)

(:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT):  (P.C. = 54)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 17660123>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-IN-COMMAND-CONDITION-ENVIRONMENT
   Arg 3 (MESSAGE): :SEND-AND-WAIT-FOR-COMMAND
   Arg 4 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL O2440 5567625> "O2440" ">actor-doc>actor-entry.mss.19" :OUTPUT NIL :ESTIMATED-LENGTH 7042 :IF-EXISTS ...)

(:METHOD FS:NFILE-SERVER-UNIT :COMMAND):  (P.C. = 7)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 17660123>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :COMMAND
   Rest arg (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL O2440 5567625> "O2440" ">actor-doc>actor-entry.mss.19" :OUTPUT NIL :ESTIMATED-LENGTH 7042 :IF-EXISTS ...)

FS:NFILE-KEYWORD-LIST-CALLER:  (P.C. = 165)
   Arg 0 (INSTANCE): #<NFILE-SERVER-UNIT 17660123>
   Arg 1 (CMDNAME): :OPEN
   Arg 2 (WHOSTATE): "Open"
   Arg 3 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL O2440 5567625>
   Arg 4 (CONSTANT-ARGS): ("O2440" ">actor-doc>actor-entry.mss.19" :OUTPUT NIL)
   Local 4 (CONSTANT-ARGS): NIL
   Arg 5 (KEYWORD-VALUE-PAIRS): (:BYTE-SIZE NIL :DELETED NIL :RAW NIL :SUPER-IMAGE NIL :PRESERVE-DATES NIL ...)
   Local 5 (KEYWORD-VALUE-PAIRS): NIL

(:METHOD FS:NFILE-ACCESS-PATH :OPEN):  (P.C. = 375)
   Arg 0 (SELF): #<LMFS-NFILE-ACCESS-PATH AP5 using NEW-FILE 17660112>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-ACCESS-PATH -- 4. IV's, 2. FL's 121346410>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (REAL-PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Arg 4 (COMMAND-PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Rest arg: (:DIRECTION :OUTPUT :BYTE-SIZE NIL :CHARACTERS T :IF-EXISTS :SUPERSEDE :ESTIMATED-LENGTH 7042)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 104225115>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Rest arg (OPTIONS): (:DIRECTION :OUTPUT :BYTE-SIZE NIL :CHARACTERS T :IF-EXISTS :SUPERSEDE :ESTIMATED-LENGTH 7042)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Arg 1 (KEYWORD-ARGS): (:DIRECTION :OUTPUT :CHARACTERS T :BYTE-SIZE NIL :IF-EXISTS :SUPERSEDE :ESTIMATED-LENGTH 7042)

OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Rest arg (KEYWORD-ARGS): (:DIRECTION :OUTPUT :CHARACTERS T :BYTE-SIZE NIL :IF-EXISTS :SUPERSEDE :ESTIMATED-LENGTH 7042)

COPYF:  (P.C. = 451)
   Arg 0 (FROM-PATHNAME): #<LMFS-PATHNAME "AP6:>actor-doc>actor-entry.mss.19">
   Arg 1 (TO-PATHNAME): #<LMFS-PATHNAME "AP5:>actor-doc>actor-entry.mss.19">
   Rest arg: (:CHARACTERS :DEFAULT :COPY-CREATION-DATE T :COPY-AUTHOR T :REPORT-STREAM #:TERMINAL-IO-SYN-STREAM)

ZWEI:COM-COPY-FILE:  (P.C. = 247)

ZWEI:COM-EXTENDED-COMMAND:  (P.C. = 27)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-EXTENDED-COMMAND
   Arg 1 (CHAR): 600
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 600

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:20-EDT,3093;000000000000
Received: from MIT-MC by MIT-OZ via Chaosnet; 1 Jul 85 19:08-EDT
Received: from SRI-BISHOP.ARPA by MIT-MC.ARPA.ARPA;  1 Jul 85 19:08:03 EDT
Received: from SRI-MENDEL by SRI-BISHOP via CHAOS with CHAOS-MAIL id 1544; Mon 1-Jul-85 16:07:10-PDT
Date: Mon, 1 Jul 85 16:08 PDT
From: David Chapman <ZVONA@SRI-AI.ARPA>
Subject: debugger c-m-R lost on (:internal (:internal ...)...)
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <850701160816.1.ZVONA@MENDEL.ARPA>

In Symbolics 3600 Release 6.0, Experimental SRI-SITE-OPTIONS 7.9,
Experimental LOCAL-PATCHES 2.11, IP-TCP 29.0, microcode TMC5-MIC 319, on Mendel:
(SI:FULL-GC :SYSTEM-RELEASE T)'s since release of system: 2
(SI:FULL-GC :GC-COMPILED-FUNCTIONS T)'s since release of system: 1

I got this c-m-R'ing (:internal (:internal declobber-loop 0) 0).  I'm
not doing anything funny with function specs; there in fact is a
function (:internal declobber-loop 0).  

>>Error: The function spec (:INTERNAL DECLOBBER-LOOP 0) is out of range
While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SI:UNENCAPSULATE-FUNCTION-SPEC

SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 167)
   Arg 0 (FUNCTION): FDEFINEDP
   Arg 1 (FUNCTION-SPEC): (:INTERNAL DECLOBBER-LOOP 0)
   --Defaulted args:--
   Arg 2 (ARG1): NIL
   Arg 3 (ARG2): NIL
   Local 4 (PARENT): DECLOBBER-LOOP
   Local 5 (INDEX): 0
   Local 6 (DIRECT-COMPILED): NIL
   Local 7 (COMPILED-FUNCTION): #<DTP-COMPILED-FUNCTION DECLOBBER-LOOP 1337335>
   Local 8 (TABLE): (NIL NIL NIL 11 14)
   Local 9 (OFFSET): NIL

FDEFINEDP:  (P.C. = 23)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL DECLOBBER-LOOP 0)

SI:UNENCAPSULATE-FUNCTION-SPEC:  (P.C. = 20)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL DECLOBBER-LOOP 0)
   --Defaulted args:--
   Arg 1 (ENCAPSULATION-TYPES): NIL

SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 116)
   Arg 0 (FUNCTION): FDEFINITION
   Arg 1 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL DECLOBBER-LOOP 0) 2)
   --Defaulted args:--
   Arg 2 (ARG1): NIL
   Arg 3 (ARG2): NIL

FDEFINITION:  (P.C. = 22)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL DECLOBBER-LOOP 0) 2)

DBG:RETURN-AND-REINVOKE:  (P.C. = 10)
   Arg 0 (FRAME): #<DTP-LOCATIVE 11044252>
   Arg 1 (FORM): ((:INTERNAL (:INTERNAL DECLOBBER-LOOP 0) 2)
                  (NIL #<INPUT-SITUATION #<PUTON A B Z-26>>
                   #<Proposition (NOT (ON A Z-26))>
                   #<Proposition (ON A Z-26)>))

DBG:COM-RETURN-REINVOCATION:  (P.C. = 30)

DBG:COMMAND-LOOP:  (P.C. = 363)

Rest of stack:
DBG:DEBUGGER-TOP-LEVEL:  (P.C. = 540)
DBG:ENTER-DEBUGGER:  (P.C. = 16)
DBG:DEBUGGER-HANDLER-HANDLE-CONDITION:  (P.C. = 7)
DBG:DEBUGGER-HANDLER:  (P.C. = 12)
(:METHOD CONDITION :SIGNAL):  (P.C. = 114)
(:METHOD CONDITION :COMBINED :SIGNAL):  (P.C. = 17)
SIGNAL:  (P.C. = 24)
DBG:SIGNAL-TRAP:  (P.C. = 4)
ZETALISP-SYSTEM:MICROCODE-ERROR-HANDLER:  (P.C. = 103)
(:INTERNAL (:INTERNAL DECLOBBER-LOOP 0) 2):  (P.C. = 16)
CONTINUE-PLANNING:  (P.C. = 11)  (from B:>Zvona>tweak)
CONSTRAIN-PROPOSITIONS-NOT-CODESIGNATING!:  (P.C. = 161)  (from B:>Zvona>tweak)

...

22-Oct-85 23:48:23-EDT,1403;000000000000
Received: from MIT-MC by MIT-OZ via Chaosnet; 1 Jul 85 19:38-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  1 Jul 85 19:37:56 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 266785; Mon 1-Jul-85 19:19:48-EDT
Date: Mon, 1 Jul 85 19:25 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: load-font-from-sym
To: Roly@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850701112422.1.ROLY@MIT-JOE-LOUIS>
Message-ID: <850701192530.6.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Mon, 1 Jul 85 11:24 EDT
    From: Roland Ouellette <Roly@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, ECG 1.0,
    Experimental Boxer 7.0, microcode TMC5-MIC 319, FEP 17, on Lisp Machine Joe Louis:

    I suppose that this bug has already been reported, .... but just in case
    it hasn't......

    It looks as though fed:pathname-defaluts should be called as a function
    and not a variable in the function load-font-from-sym.  I tried it out
    and it seems to work.

    >>Error: The second argument (DEFAULTS) to FS:SET-DEFAULT-PATHNAME, NIL, was of the wrong type.
	     The function expected pathname defaults alist.
    While in the function FS:SET-DEFAULT-PATHNAME  FED:LOAD-FONT-FROM-SYM  (:PROPERTY SI:COM-SHOW-FONT SI:CP-FUNCTION)
This has been reported before, and fixed in 6.1, thanks.

22-Oct-85 23:48:23-EDT,1416;000000000000  
Received: from MIT-MC by MIT-OZ via Chaosnet; 2 Jul 85 10:27-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  2 Jul 85 10:27:38 EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 267097; Tue 2-Jul-85 10:19:03-EDT
Date: Tue, 2 Jul 85 10:24 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: debugger c-m-R lost on (:internal (:internal ...)...)
To: ZVONA@SRI-AI.ARPA, Bug-Lispm@MIT-MC.ARPA
cc: Bug-Compiler@SCRC-QUABBIN.ARPA
In-Reply-To: <850701160816.1.ZVONA@MENDEL.ARPA>
Message-ID: <850702102415.3.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Mon, 1 Jul 85 16:08 PDT
    From: David Chapman <ZVONA@SRI-AI.ARPA>

    In Symbolics 3600 Release 6.0, Experimental SRI-SITE-OPTIONS 7.9,
    Experimental LOCAL-PATCHES 2.11, IP-TCP 29.0, microcode TMC5-MIC 319, on Mendel:
    (SI:FULL-GC :SYSTEM-RELEASE T)'s since release of system: 2
    (SI:FULL-GC :GC-COMPILED-FUNCTIONS T)'s since release of system: 1

    I got this c-m-R'ing (:internal (:internal declobber-loop 0) 0).  I'm
    not doing anything funny with function specs; there in fact is a
    function (:internal declobber-loop 0).  

    >>Error: The function spec (:INTERNAL DECLOBBER-LOOP 0) is out of range
    While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SI:UNENCAPSULATE-FUNCTION-SPEC

The "out of range" bugs have been fixed for 6.1

22-Oct-85 23:48:23-EDT,984;000000000000
Received: from MIT-MC by MIT-OZ via Chaosnet; 2 Jul 85 12:50-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  2 Jul 85 12:50:27 EDT
Received: from NAREW.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 267226; Tue 2-Jul-85 12:43:06-EDT
Date: Tue, 2 Jul 85 12:50 EDT
From: Kelly@SCRC-STONY-BROOK.ARPA
Sender: Sotko@SCRC-STONY-BROOK.ARPA
Subject: Pascal/TEX
To: GUMBY@MIT-MC.ARPA, bug-lispm%OZ@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].559649.850629.GUMBY>
Message-ID: <850702125011.4.SOTKO@NAREW.SCRC.Symbolics.COM>

    Date: Sat, 29 Jun 85 09:22:38 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
    Do we have Symbolics Pascal?  Has anyone used it to bring TeX up on
    the lisp machine?

    david

I have brought up TeX at Symbolics.  I understand someone
working with Richard Zippel is planning to bring it up at
MIT.  Perhaps you should contact him to keep informed of the
status of that project.

- Kelly

22-Oct-85 23:48:24-EDT,3615;000000000000   
Received: from MIT-REAGAN by MIT-OZ via Chaosnet; 2 Jul 85 13:30-EDT
Received: from APIARY-4 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 5854; Tue 2-Jul-85 13:30:35-EDT
Date: Tue, 2 Jul 85 13:28 EDT
From: Carl Hewitt <Hewitt@OZ>
Subject: bug in zmail
To: BUG-LISPM@OZ
Message-ID: <850702132835.1.HEWITT@APIARY-4>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-4:

I tried to read a mail file in Zmail.

>>Error: The symbol NIL has an invalid function definition
While in the function NIL  (:METHOD ZWEI:RMAIL-BUFFER :GET-INBOX)  ZWEI:GET-INBOX-FOR-BUFFER

NIL:
   Arg 0: :NEW-CANONICAL-TYPE
   Arg 1: :ZMAIL-TEMP

(:METHOD ZWEI:RMAIL-BUFFER :GET-INBOX):  (P.C. = 33)
   Arg 0 (SELF): #<RMAIL-BUFFER "AP5:>hewitt>common>common.msg" 5553761>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:RMAIL-BUFFER -- 3. IV's, 5. FL's 142672653>
   Arg 2 (OPERATION): :GET-INBOX
   Arg 3 (NEW-PATHNAME): NIL
   Arg 4 (DELETE-P): NIL

ZWEI:GET-INBOX-FOR-BUFFER:  (P.C. = 63)
   Arg 0 (BUFFER): #<RMAIL-BUFFER "AP5:>hewitt>common>common.msg" 5553761>
   Arg 1 (FROM-PATHNAME): NIL
   Arg 2 (DELETE-P): NIL
   Arg 3 (TELL-BACKGROUND-P): NIL

ZWEI:COM-GET-INBOX-INTERNAL:  (P.C. = 253)
   Arg 0 (FIRST-TIME-P): NIL
   --Defaulted args:--
   Arg 1 (FOR-BUFFER): #<RMAIL-BUFFER "AP5:>hewitt>common>common.msg" 5553761>

ZWEI:COM-GET-NEW-MAIL-FROM-INBOX:  (P.C. = 7)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-GET-NEW-MAIL-FROM-INBOX
   Arg 1 (CHAR): (:MENU ("Get inbox" . ZWEI:COM-GET-NEW-MAIL-FROM-INBOX) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)
   --Defaulted args:--
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
   Arg 0: ZWEI:COM-GET-NEW-MAIL-FROM-INBOX

(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 0 (:MENU)):  (P.C. = 10)
   Arg 0 (**DEFSELECT-OP**): :MENU
   Arg 1 (ITEM): ("Get inbox" . ZWEI:COM-GET-NEW-MAIL-FROM-INBOX)
   Arg 2 (CH): 4
   Arg 3 (WINDOW): #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>

ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 12)
   Arg 0 (OPERATION): :MENU
   Rest arg (SELECT-METHOD-ARGS): (("Get inbox" . ZWEI:COM-GET-NEW-MAIL-FROM-INBOX) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :PROCESS-SPECIAL-COMMAND
   Rest arg (ARGS): (:MENU ("Get inbox" . ZWEI:COM-GET-NEW-MAIL-FROM-INBOX) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :COMMAND-LOOP
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
   Arg 0 (WINDOW): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:24-EDT,305;000000000000    
Received: from MIT-MC by MIT-OZ via Chaosnet; 2 Jul 85 15:23-EDT
Date: Tue,  2 Jul 85 15:23:04 EDT
From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].562802.850702.CSTACY>

I can't supdup to JIMI and login because it is logged in as "File-Server".
22-Oct-85 23:48:24-EDT,891;000000000000   
Received: from MIT-MC by MIT-OZ via Chaosnet; 2 Jul 85 15:30-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  2 Jul 85 15:26:56 EDT
Received: from COCKATIEL.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 267379; Tue 2-Jul-85 15:10:00-EDT
Date: Tue, 2 Jul 85 15:15 EDT
From: Joanne Hukee <hukee@SCRC-STONY-BROOK.ARPA>
Subject: cl:with-open-file
To: BSG@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850701125536.0.BSG@CONCORD.SCRC.Symbolics.COM>
Message-ID: <850702151523.6.HUKEE@COCKATIEL.SCRC.Symbolics.COM>


HOSS is trying to discourage customers other than MIT from sending mail
to Bug-Lispm, so that developers will be able to spend their time
developing, rather than doing customer support. Please help us
accomplish this by forwarding non-MIT reports to the HOSS mailing list,
rather than replying directly. 

22-Oct-85 23:48:24-EDT,598;000000000000 
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 2 Jul 85 20:01-EDT
Date: Tue, 2 Jul 85 20:01 EDT
From: Chris Lindblad <CJL@OZ>
Subject: Bug in interaction of with-input-editing-options and yes-or-no-p
To: BUG-LISPM@OZ
Message-ID: <850702200123.1.CJL@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

(with-input-editing-options ((:prompt "Standard-command-prompt: "))
  (yes-or-no-p "Yes-or-no-prompt: "))

Prompts me with "Standard-command-prompt: ", when it should prompt me
with "Yes-or-no-prompt: ".
22-Oct-85 23:48:25-EDT,1000;000000000000   
Received: from MIT-MC by MIT-OZ via Chaosnet; 2 Jul 85 22:45-EDT
Received: from SCRC-YUKON.ARPA by MIT-MC.ARPA.ARPA;  2 Jul 85 22:40:32 EDT
Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-YUKON.ARPA via CHAOS with CHAOS-MAIL id 135820; Tue 2-Jul-85 22:38:09-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 106683; Tue 2-Jul-85 22:39:53-EDT
Date: Tue, 2 Jul 85 22:38 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
To: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].562802.850702.CSTACY>
Message-ID: <850702223820.0.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Tue,  2 Jul 85 15:23:04 EDT
    From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

    I can't supdup to JIMI and login because it is logged in as "File-Server".

That's under the control of the person who wrote MIT|File-Server's lispm-init
file.  SCRC|File-Server's lispm-init file enables remote logins.

22-Oct-85 23:48:25-EDT,1810;000000000000   
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 2 Jul 85 23:12-EDT
Date: Tue, 2 Jul 85 23:13 EDT
From: Chris Lindblad <CJL@OZ>
Subject: I can't supdup to JIMI and login because it is logged in as "File-Server".
To: Moon@SCRC-STONY-BROOK
cc: CSTACY@MIT-MC, BUG-LISPM@OZ
In-Reply-To: <850702223820.0.MOON@EUPHRATES.SCRC.Symbolics.COM>
Message-ID: <850702231305.2.CJL@ELVIS>

    Date: Tue, 2 Jul 85 22:38 EDT
    From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>

	Date: Tue,  2 Jul 85 15:23:04 EDT
	From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

	I can't supdup to JIMI and login because it is logged in as "File-Server".

    That's under the control of the person who wrote MIT|File-Server's lispm-init
    file.  SCRC|File-Server's lispm-init file enables remote logins.

Not really. fs:login-file-server-machine-if-necessary only loads an init
file if there's one on the local machine. There's no LMFS on JIMI.
(It's then an interesting question why somebody was using it as a file
server, but my guess is that they did a dired of the fep file
system.) What would be nice would be for any automatic server logins not
to disable services that are normally disabled when a user logs in, if
there's no lispm-init.

(defun login-file-server-machine-if-necessary (err-reporter)
  (when (and server-login
	     (or (null user-id)
		 (zerop (string-length user-id))))
    (condition-case (err)
	(let ((standard-output 'si:null-stream))	;Don't print no-init-file message
	  (condition-case ()
	      (login server-login-id ':host si:local-host :load-init-file t)
	    ((no-file-system file-lookup-error)
	     (login server-login-id ':host si:local-host :load-init-file nil))))
      (error (funcall err-reporter err "Server Login")))
    (print-server-login-exegesis)))

22-Oct-85 23:48:25-EDT,2361;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 12:48-EDT
Received: from SCRC-QUABBIN (SCRC-QUABBIN) by MIT-REAGAN via INTERNET with SMTP id 5977; 3 Jul 85 12:49:23-EDT
Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 178546; Wed 3-Jul-85 12:46:38-EDT
Received: from MOBILE.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 106919; Wed 3-Jul-85 12:47:58-EDT
Date: Wed, 3 Jul 85 12:46 EDT
From: David E. Goldfarb <DEG@SCRC-QUABBIN.ARPA>
Subject: Bug in interaction of with-input-editing-options and yes-or-no-p
To: CJL@OZ, BUG-LISPM@OZ.MIT
cc: DEG@SCRC-QUABBIN.ARPA
In-Reply-To: <850702200123.1.CJL@ELVIS>
Supersedes: <850703124628.3.DEG@MOBILE.SCRC.Symbolics.COM>
Message-ID: <850703124648.4.DEG@MOBILE.SCRC.Symbolics.COM>

    Date: Tue, 2 Jul 85 20:01 EDT
    From: Chris Lindblad <CJL@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    (with-input-editing-options ((:prompt "Standard-command-prompt: "))
      (yes-or-no-p "Yes-or-no-prompt: "))

    Prompts me with "Standard-command-prompt: ", when it should prompt me
    with "Yes-or-no-prompt: ".

This is because with-input-editing-options respects an outer value over an
inner value.  Its intent is that it is to be used primarily to modify the
behavior of an inner function.  If you can write your program in such a way
that you do not have to wrap the with-input-editing-options around the
yes-or-no-p, you should do so.  Also, look at the documentation of the
:override option to with-input-editing-options.  Though this will not help
in your example, since there is no way to pass the :override into
yes-or-no-p, it would be useful in cases like

(with-input-editing-options ((:prompt "Outer prompt: "))
  (with-input-editing-options (((:prompt :override) "Inner prompt: "))
    (read)))

Finally, you can say the following, but note well that this code uses an
undocumented internal variable and is liable to stop working in a future
release.

(with-input-editing-options ((:prompt "Standard-command-prompt: "))
  (let ((sys:*input-editor-options* (remq (assq :prompt sys:*input-editor-options*) 
					  sys:*input-editor-options*)))
    (yes-or-no-p "Yes-or-no-prompt: ")))

22-Oct-85 23:48:26-EDT,2426;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 12:48-EDT
Received: from SCRC-QUABBIN (SCRC-QUABBIN) by MIT-REAGAN via INTERNET with SMTP id 5978; 3 Jul 85 12:49:36-EDT
Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 178547; Wed 3-Jul-85 12:46:54-EDT
Received: from MOBILE.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 106921; Wed 3-Jul-85 12:48:14-EDT
Date: Wed, 3 Jul 85 12:47 EDT
From: David E. Goldfarb <DEG@SCRC-QUABBIN.ARPA>
Subject: Bug in interaction of with-input-editing-options and yes-or-no-p
To: CJL@OZ.MIT, BUG-LISPM@OZ.MIT
cc: DEG@SCRC-QUABBIN.ARPA
In-Reply-To: <850702200123.1.CJL@ELVIS>
Supersedes: <850703124628.3.DEG@MOBILE.SCRC.Symbolics.COM>,
            <850703124648.4.DEG@MOBILE.SCRC.Symbolics.COM>
Message-ID: <850703124705.5.DEG@MOBILE.SCRC.Symbolics.COM>

    Date: Tue, 2 Jul 85 20:01 EDT
    From: Chris Lindblad <CJL@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    (with-input-editing-options ((:prompt "Standard-command-prompt: "))
      (yes-or-no-p "Yes-or-no-prompt: "))

    Prompts me with "Standard-command-prompt: ", when it should prompt me
    with "Yes-or-no-prompt: ".

This is because with-input-editing-options respects an outer value over an
inner value.  Its intent is that it is to be used primarily to modify the
behavior of an inner function.  If you can write your program in such a way
that you do not have to wrap the with-input-editing-options around the
yes-or-no-p, you should do so.  Also, look at the documentation of the
:override option to with-input-editing-options.  Though this will not help
in your example, since there is no way to pass the :override into
yes-or-no-p, it would be useful in cases like

(with-input-editing-options ((:prompt "Outer prompt: "))
  (with-input-editing-options (((:prompt :override) "Inner prompt: "))
    (read)))

Finally, you can say the following, but note well that this code uses an
undocumented internal variable and is liable to stop working in a future
release.

(with-input-editing-options ((:prompt "Standard-command-prompt: "))
  (let ((sys:*input-editor-options* (remq (assq :prompt sys:*input-editor-options*) 
					  sys:*input-editor-options*)))
    (yes-or-no-p "Yes-or-no-prompt: ")))

22-Oct-85 23:48:26-EDT,3140;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 14:23-EDT
Received: from MIT-REAGAN.ARPA by MIT-MC.ARPA via Chaosnet; 3 JUL 85  14:22:49 EDT
Received: from APIARY-4 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 5983; Wed 3-Jul-85 13:17:30-EDT
Date: Wed, 3 Jul 85 13:15 EDT
From: Randy Parker undisguised <PARKER@MIT-REAGAN.ARPA>
Subject: Bogus host names--que pasa?
To: bug-lispm@MIT-REAGAN.ARPA
Message-ID: <850703131527.5.PARKER@APIARY-4>


<<This is a resend of last week's message>>

Am I mistaken in thinking that bogusly creating addresses is a problem?
Does anybody have an idea whose problem this is?

    Date: Thu, 27 Jun 85 16:29 EDT
    From: Randy Parker <PARKER@AI>

    In Symbolics 3600 in Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 18 on Lisp Machine Apiary-4:

    <<This was sent to bug-lispm@reagan to see if it would cause the from to
    read PARKER@MIT-AI, the bug that is being reported.>>

    In checking to see if mail to me at REAGAN would win (a Show Mailing
    List said it would (I didn't have a dir there, nor a mailbox), so I take
    it it gets it from the namespace entry), I sent a message from Zmail on
    ap4 to: parker@reagan (with my mail-network-host set to REAGAN).

    This first message below is what I received on OZ.
    Now I don't exist at AI (although I have a namespace entry there under a
    different name), so it shouldn't say From: PARKER@MIT-AI.  The second
    message was just a confirmation from COMSAT that things are indeed in a
    bad way.

    CJL has noticed this, too, and thinks it may only happen when sending
    mail to Internet hosts.

    RP

    ********************************************************************************
    Received: from MIT-REAGAN by MIT-OZ via Chaosnet; 27 Jun 85 13:05-EDT
    Received: from APIARY-4 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 5704; Thu 27-Jun-85 13:03:36-EDT
    Date: Thu, 27 Jun 85 13:03 EDT
    From: Randy Parker <PARKER@MIT-AI.ARPA>
    Subject: testing....
    To: parker@MIT-REAGAN.ARPA
    Message-ID: <850627130318.6.PARKER@APIARY-4>

    ********************************************************************************
    Received: from MIT-AI by MIT-OZ via Chaosnet; 27 Jun 85 13:06-EDT
    Date: Thu, 27 Jun 85 13:07:16 EDT
    From: Communications Satellite <COMSAT%MIT-AI.ARPA@MIT-MC.ARPA>
    Subject: Msg of Thursday, 27 June 1985 13:07-EDT
    To: PARKER@MIT-OZ
    Message-ID: <[MIT-AI.ARPA].2344.850627>

    ============ A copy of your message is being returned, because: ============
    "PARKER" at MIT-AI.ARPA is an unknown recipient.
	    Will try sending to the file "USERS3;PARKER MAIL".
    ============ Failed message follows: ============
    Received: from MIT-OZ by MIT-AI.ARPA via Chaosnet; 27 JUN 85  13:07:14 EDT
    Date: Thu 27 Jun 85 13:06:39-EDT
    From: Randy Parker <PARKER@MIT-OZ>
    Subject: testing...
    To: parker@MIT-AI


    Reagan just put PARKER@AI on one of my letters so I
    am checking to see whether this somehow wins or whether it
    is just broken.
22-Oct-85 23:48:26-EDT,701;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 15:13-EDT
Date: Wed, 3 Jul 85 15:14 EDT
From: CJL@MIT-REAGAN
Sender: File-Server@MIT-REAGAN
Subject: Fast Time-of-day clock
To: BUG-LISPM@OZ
Message-ID: <850703151402.8.FILE-SERVER@MIT-REAGAN>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0, AISite 9.4,
microcode TMC5-MIC 319, Network-Security patch,
Update-Internet-Namespace patch, Server-Finger patch, Inquir-update
patch, Rodent Free Namespace Editor, on Lisp Machine Ronald Reagan:

I've noticed REAGANs time of day clock runs a little fast, about 1
minute per week. Is this common? Or is there a hardware bug in the
machine? Or is it just my imagination?
22-Oct-85 23:48:26-EDT,1695;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 16:43-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6010; 3 Jul 85 16:44:20-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 268672; Wed 3-Jul-85 15:32:03-EDT
Date: Wed, 3 Jul 85 15:31 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: I can't supdup to JIMI and login because it is logged in as "File-Server".
To: Chris Lindblad <CJL@OZ.mit>
cc: CSTACY@MIT-MC.ARPA, BUG-LISPM@OZ.mit
In-Reply-To: <850702231305.2.CJL@ELVIS>
Message-ID: <850703153118.8.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Tue, 2 Jul 85 23:13 EDT
    From: Chris Lindblad <CJL@OZ>

	Date: Tue, 2 Jul 85 22:38 EDT
	From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>

	    Date: Tue,  2 Jul 85 15:23:04 EDT
	    From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

	    I can't supdup to JIMI and login because it is logged in as "File-Server".

	That's under the control of the person who wrote MIT|File-Server's lispm-init
	file.  SCRC|File-Server's lispm-init file enables remote logins.

    Not really. fs:login-file-server-machine-if-necessary only loads an init
    file if there's one on the local machine. There's no LMFS on JIMI.
    (It's then an interesting question why somebody was using it as a file
    server, but my guess is that they did a dired of the fep file
    system.) What would be nice would be for any automatic server logins not
    to disable services that are normally disabled when a user logs in, if
    there's no lispm-init.

I see.  That makes some sense and we should take it under consideration.

22-Oct-85 23:48:27-EDT,1587;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 17:59-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6022; 3 Jul 85 18:00:05-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 268829; Wed 3-Jul-85 16:21:39-EDT
Date: Wed, 3 Jul 85 16:19 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Fast Time-of-day clock
To: CJL@MIT-REAGAN.ARPA, BUG-LISPM@OZ.mit
In-Reply-To: <850703151402.8.FILE-SERVER@MIT-REAGAN>
Message-ID: <850703161907.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 3 Jul 85 15:14 EDT
    From: CJL@MIT-REAGAN

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0, AISite 9.4,
    microcode TMC5-MIC 319, Network-Security patch,
    Update-Internet-Namespace patch, Server-Finger patch, Inquir-update
    patch, Rodent Free Namespace Editor, on Lisp Machine Ronald Reagan:

    I've noticed REAGANs time of day clock runs a little fast, about 1
    minute per week. Is this common? Or is there a hardware bug in the
    machine? Or is it just my imagination?

1 minute per week is (// 1.0 (* 60. 24. 7)) or .01%.  I think, though
looking at the code always hurts, that it should be accurate to the
microsecond.  There is a comment about 16667 being pretty close to
1e6/60, and I thought that error was corrected for, but considering
16667 differs from 1e6/60 by .012%, I could be wrong.

The microsecond clock is controlled by a 1MHz crystal, which may differ
from 1MHz by .01% (I thought they were more accurate).

22-Oct-85 23:48:27-EDT,1018;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Jul 85 19:33-EDT
Date: Wed,  3 Jul 85 19:33:06 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  Special forms vs functions
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].564458.850703.GUMBY>

you should provide functional equivalents for most of the common
special forms (e.g. DEFVAR) so that I can do things like the forms
below without fear of my code breaking..

(setf *file-type-mode-alist* (append `((:emacs . :teco)
				       (:babyl . :text)
				       (:mail . :text)
				       (:xmail . :text)
				       (:r . :text)
				       (:scribe . :text)
				       (:tex . :text)
				       (:cmd . :text)
				       (:ctl . :text)
				       (:palx :midas)
				       (:scheme . :lisp))
				     *file-type-mode-alist*))
(dolist (type *file-type-mode-alist*)
  (let ((ctype (car type)))
    (unless (assq ctype *default-canonical-types*)
      (define-canonical-type-1 ctype (string-upcase (string ctype)) nil))))
22-Oct-85 23:48:27-EDT,294;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 6 Jul 85 14:58-EDT
Date: Sat,  6 Jul 85 14:58:32 EDT
From: George J. Carrette <GJC@MIT-MC.ARPA>
To: INFO-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].566163.850706.GJC>

Does anybody have a DVI driver for the Lispmachine window system?
22-Oct-85 23:48:27-EDT,4743;000000000000
Received: from MIT-DUANE by MIT-OZ via Chaosnet; 6 Jul 85 17:39-EDT
Date: Sat, 6 Jul 85 17:38 EDT
From: Ken Haase <KWH@OZ>
Subject: what do you mean, out of range?
To: BUG-LISPM@OZ
Message-ID: <850706173827.1.KWH@DUANE>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.4,
Experimental Meta Representation Langauge 4.17,
Experimental Cyrano Discovery System 1.2, microcode TMC5-IO4-MIC 319,
FEP 22, on Lisp Machine Duane Allman:

I meta-.ed an internal lambda and got this error:

>>Error: The function spec (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1) is out of range
While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SYS:FUNCTION-PARENT

SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 167)
   Arg 0 (FUNCTION): FDEFINEDP
   Arg 1 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
   --Defaulted args:--
   Arg 2 (ARG1): NIL
   Arg 3 (ARG2): NIL
   Local 4 (PARENT): ZWEI:TOP-LEVEL-EVAL
   Local 5 (INDEX): 1
   Local 6 (DIRECT-COMPILED): NIL
   Local 7 (COMPILED-FUNCTION): #<DTP-COMPILED-FUNCTION ZWEI:TOP-LEVEL-EVAL 76652353>
   Local 8 (TABLE): (NIL NIL 3 2)
   Local 9 (OFFSET): NIL

FDEFINEDP:  (P.C. = 23)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

SYS:FUNCTION-PARENT:  (P.C. = 10)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

(:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :ADD-NODES-FOR-FUNCTION-SPEC):  (P.C. = 16)
   Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
   Arg 2 (OPERATION): :ADD-NODES-FOR-FUNCTION-SPEC
   Arg 3 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
   Arg 4 (ALLOWED-TYPES): NIL

(:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :REVERT):  (P.C. = 14)
   Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
   Arg 2 (OPERATION): :REVERT

(:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :COMBINED :REVERT):  (P.C. = 17)
   Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
   Arg 2 (.OPERATION.): :REVERT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

(:METHOD ZWEI:ZMACS-EDITOR :FIND-SPECIAL-BUFFER):  (P.C. = 45)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMACS-EDITOR -- 3. IV's, 0. FL's 142345763>
   Arg 2 (OPERATION): :FIND-SPECIAL-BUFFER
   Arg 3 (TYPE): :DEFINITIONS
   Arg 4 (NEW-P): T
   Rest arg (SETS): (:SET-FUNCTION-SPECS ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))
                     :SET-ALLOWED-DEFINITION-TYPES NIL :SET-LOOKALIKES-ALLOWED NIL
                     :SET-EDIT-INSTALLED-DEFINITION-P NIL)

(:METHOD ZWEI:ZMACS-EDITOR :SETUP-FUNCTION-SPECS-TO-EDIT):  (P.C. = 24)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMACS-EDITOR -- 3. IV's, 0. FL's 142345763>
   Arg 2 (OPERATION): :SETUP-FUNCTION-SPECS-TO-EDIT
   Arg 3 (FUNCTION-SPECS): ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))
   Arg 4 (ALLOWED-DEFINITION-TYPES): NIL
   --Defaulted args:--
   Arg 5 (START-EDITING): T
   Arg 6 (LOOKALIKES-ALLOWED): NIL
   Arg 7 (EDIT-INSTALLED-DEFINITION-P): NIL

ZWEI:EDIT-DEFINITION:  (P.C. = 32)
   Arg 0 (FSPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
   Arg 1 (ALLOWED-DEFINITION-TYPES): NIL
   Arg 2 (OK-TO-ASK): T

ZWEI:EDIT-THING:  (P.C. = 103)
   Arg 0 (THING): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

(:INTERNAL ZWEI:PROCESS-SPECIAL-COMMAND 7 ((:TYPEOUT-EXECUTE :EXECUTE))):  (P.C. = 5)
   Arg 0 (**DEFSELECT-OP**): :EXECUTE
   Arg 1 (FUNCTION): ZWEI:EDIT-THING
   Rest arg (ARGS): ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))

ZWEI:PROCESS-SPECIAL-COMMAND:  (P.C. = 106)
   Arg 0 (OPERATION): :EXECUTE
   Rest arg (SELECT-METHOD-ARGS): (ZWEI:EDIT-THING (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 205)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:28-EDT,741;000000000000   
Received: from MIT-DUANE by MIT-OZ via Chaosnet; 6 Jul 85 20:17-EDT
Date: Sat, 6 Jul 85 20:16 EDT
From: Ken Haase <KWH@OZ>
Subject: M-X Add Patch should warn sooner.
To: BUG-LISPM@OZ
Message-ID: <850706201644.2.KWH@DUANE>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.4,
Experimental Meta Representation Langauge 4.17,
Experimental Cyrano Discovery System 1.2, microcode TMC5-IO4-MIC 319,
FEP 22, on Lisp Machine Duane Allman:

When you do a M-X Add Patch from a file which is in the wrong system,
you are warned AFTER the patch is made.  It seems like there is enough
information BEFORE the patch is made (before you are asked to describe
the patch) to tell you and allow you to abort out of the bogus patch.

Ken
22-Oct-85 23:48:28-EDT,1350;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 7 Jul 85 13:24-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6108; 7 Jul 85 13:27:33-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 269799; Sun 7-Jul-85 13:22:42-EDT
Date: Sun, 7 Jul 85 13:21 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: M-X Add Patch should warn sooner.
To: Ken Haase <KWH@OZ.mit>, BUG-LISPM@OZ.mit
In-Reply-To: <850706201644.2.KWH@DUANE>
Message-ID: <850707132115.5.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Sat, 6 Jul 85 20:16 EDT
    From: Ken Haase <KWH@OZ>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.4,
    Experimental Meta Representation Langauge 4.17,
    Experimental Cyrano Discovery System 1.2, microcode TMC5-IO4-MIC 319,
    FEP 22, on Lisp Machine Duane Allman:

    When you do a M-X Add Patch from a file which is in the wrong system,
    you are warned AFTER the patch is made.  It seems like there is enough
    information BEFORE the patch is made (before you are asked to describe
    the patch) to tell you and allow you to abort out of the bogus patch.

A couple months or so ago I suggested it do something stronger, like ask
a y-or-n-p (or possibly yes-or-no-p) question before allowing the patch.

22-Oct-85 23:48:28-EDT,5910;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 7 Jul 85 14:16-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6109; 7 Jul 85 14:18:56-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 269819; Sun 7-Jul-85 14:14:26-EDT
Date: Sun, 7 Jul 85 14:12 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: what do you mean, out of range?
To: Ken Haase <KWH@OZ.mit>, BUG-LISPM@OZ.mit
In-Reply-To: <850706173827.1.KWH@DUANE>
Message-ID: <850707141259.6.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Sat, 6 Jul 85 17:38 EDT
    From: Ken Haase <KWH@OZ>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.4,
    Experimental Meta Representation Langauge 4.17,
    Experimental Cyrano Discovery System 1.2, microcode TMC5-IO4-MIC 319,
    FEP 22, on Lisp Machine Duane Allman:

    I meta-.ed an internal lambda and got this error:

There was a compiler bug in 6.0 that made it confuse the offsets of
:INTERNAL functions.  This has been fixed for 6.1.  6.1 will not be a
recompile of the sources, and we have not tried to find system functions
that have suffered from this.  Therefore, even in 6.1 m-. will blow out
on some functions in the same way you see below.  User code that gets
recompiled with the fixed compiler should not have any problems in 6.1.

    >>Error: The function spec (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1) is out of range
    While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SYS:FUNCTION-PARENT

    SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 167)
       Arg 0 (FUNCTION): FDEFINEDP
       Arg 1 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
       --Defaulted args:--
       Arg 2 (ARG1): NIL
       Arg 3 (ARG2): NIL
       Local 4 (PARENT): ZWEI:TOP-LEVEL-EVAL
       Local 5 (INDEX): 1
       Local 6 (DIRECT-COMPILED): NIL
       Local 7 (COMPILED-FUNCTION): #<DTP-COMPILED-FUNCTION ZWEI:TOP-LEVEL-EVAL 76652353>
       Local 8 (TABLE): (NIL NIL 3 2)
       Local 9 (OFFSET): NIL

    FDEFINEDP:  (P.C. = 23)
       Arg 0 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

    SYS:FUNCTION-PARENT:  (P.C. = 10)
       Arg 0 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

    (:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :ADD-NODES-FOR-FUNCTION-SPEC):  (P.C. = 16)
       Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
       Arg 2 (OPERATION): :ADD-NODES-FOR-FUNCTION-SPEC
       Arg 3 (FUNCTION-SPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
       Arg 4 (ALLOWED-TYPES): NIL

    (:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :REVERT):  (P.C. = 14)
       Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
       Arg 2 (OPERATION): :REVERT

    (:METHOD ZWEI:DEFINITIONS-EDITING-BUFFER :COMBINED :REVERT):  (P.C. = 17)
       Arg 0 (SELF): #<DEFINITIONS-EDITING-BUFFER "*Definitions-1*" 11300215>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:DEFINITIONS-EDITING-BUFFER -- 4. IV's, 3. FL's 142432013>
       Arg 2 (.OPERATION.): :REVERT
       Rest arg (.DAEMON-CALLER-ARGS.): NIL

    (:METHOD ZWEI:ZMACS-EDITOR :FIND-SPECIAL-BUFFER):  (P.C. = 45)
       Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMACS-EDITOR -- 3. IV's, 0. FL's 142345763>
       Arg 2 (OPERATION): :FIND-SPECIAL-BUFFER
       Arg 3 (TYPE): :DEFINITIONS
       Arg 4 (NEW-P): T
       Rest arg (SETS): (:SET-FUNCTION-SPECS ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))
			 :SET-ALLOWED-DEFINITION-TYPES NIL :SET-LOOKALIKES-ALLOWED NIL
			 :SET-EDIT-INSTALLED-DEFINITION-P NIL)

    (:METHOD ZWEI:ZMACS-EDITOR :SETUP-FUNCTION-SPECS-TO-EDIT):  (P.C. = 24)
       Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMACS-EDITOR -- 3. IV's, 0. FL's 142345763>
       Arg 2 (OPERATION): :SETUP-FUNCTION-SPECS-TO-EDIT
       Arg 3 (FUNCTION-SPECS): ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))
       Arg 4 (ALLOWED-DEFINITION-TYPES): NIL
       --Defaulted args:--
       Arg 5 (START-EDITING): T
       Arg 6 (LOOKALIKES-ALLOWED): NIL
       Arg 7 (EDIT-INSTALLED-DEFINITION-P): NIL

    ZWEI:EDIT-DEFINITION:  (P.C. = 32)
       Arg 0 (FSPEC): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)
       Arg 1 (ALLOWED-DEFINITION-TYPES): NIL
       Arg 2 (OK-TO-ASK): T

    ZWEI:EDIT-THING:  (P.C. = 103)
       Arg 0 (THING): (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1)

    (:INTERNAL ZWEI:PROCESS-SPECIAL-COMMAND 7 ((:TYPEOUT-EXECUTE :EXECUTE))):  (P.C. = 5)
       Arg 0 (**DEFSELECT-OP**): :EXECUTE
       Arg 1 (FUNCTION): ZWEI:EDIT-THING
       Rest arg (ARGS): ((:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))

    ZWEI:PROCESS-SPECIAL-COMMAND:  (P.C. = 106)
       Arg 0 (OPERATION): :EXECUTE
       Rest arg (SELECT-METHOD-ARGS): (ZWEI:EDIT-THING (:INTERNAL ZWEI:TOP-LEVEL-EVAL 1))

    (:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 205)
       Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
       Arg 2 (OPERATION): :EDIT
       --Defaulted args:--
       Arg 3 (TOP-LEVEL-P): T
       Arg 4 (DESCRIPTION): NIL

    (:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
       Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
       Arg 2 (.OPERATION.): :EDIT
       Rest arg (.DAEMON-CALLER-ARGS.): NIL

    ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

    SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
       Arg 0 (IGNORE): NIL


22-Oct-85 23:48:28-EDT,2497;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Jul 85 15:20-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA;  7 Jul 85 15:20:54 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 269829; Sun 7-Jul-85 15:18:45-EDT
Date: Sun, 7 Jul 85 15:17 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: common lisp setf screws up on substs
To: David Chapman <ZVONA@SRI-AI.ARPA>, Bug-Lispm@MIT-MC.ARPA
In-Reply-To: <850625153857.1.ZVONA@SONORA.ARPA>
Message-ID: <850707151717.0.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue, 25 Jun 85 15:38 PDT
    From: David Chapman <ZVONA@SRI-AI.ARPA>

    In Symbolics 3600 Lispm@mit-mc.arpa in Release 6.0,
    Experimental SRI-SITE-OPTIONS 7.9, Experimental LOCAL-PATCHES 2.11,
    IP-TCP 29.0, microcode TMC5-MIC 319, FEP 22, on Sonora:
    (SI:FULL-GC :SYSTEM-RELEASE T)'s since release of system: 2
    (SI:FULL-GC :GC-COMPILED-FUNCTIONS T)'s since release of system: 1

    (defsubst gleep (x) (car x))
    (defun flub (x) (setf (gleep x) 17))

    If you put these two in a file and :Compile File it,
    get-setf-method-multiple-value tries to %args-info GLEEP and dies
    complaining that it isn't defined.  Whereas if you compile them
    sequentially out of an editor buffer, it works OK.  Since we don't have
    source for SETF here (diatribe deleted here; did MIT ever get them?) I
    can't fix this presumably trivial bug.

For references, here's the interesting part of the backtrace.

    >>Trap: The function GLEEP is undefined.
    While in the function ZL:%ARGS-INFO  GET-SETF-METHOD-MULTIPLE-VALUE  LT::EXPAND-SETF
    While compiling FLUB
    
    ZL:%ARGS-INFO:  (P.C. = 5)
       Arg 0 (FUNCTION): GLEEP
    
    GET-SETF-METHOD-MULTIPLE-VALUE:  (P.C. = 66)
       Arg 0 (LT::REFERENCE): (GLEEP X)
       --Defaulted args:--
       Arg 1 (LT::FOR-EFFECT): NIL
    
    LT::EXPAND-SETF:  (P.C. = 152)
       Arg 0 (LT::PAIRS): ((GLEEP X) 17)
    
    SETF:  (P.C. = 5)
       Arg 0 (SI:.FORM.): (SETF (GLEEP X) 17)
       Arg 1 (SI:.ENV.): NIL

I won't agree that the bug is trivial, since I'm not sure where the best
place to fix it is.  In CL 4.13 (part of 6.1), I made
GET-SETF-METHOD-MULTIPLE-VALUE look at the compiler's environment before
the executing environment when calling %ARGS-INFO.  I briefly looked at
the other callers of %ARGS-INFO and didn't see any other obvious
breakages.  

22-Oct-85 23:48:29-EDT,3542;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 8 Jul 85 13:59-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2701; Mon 8-Jul-85 13:59:11-EDT
Date: 8 Jul 1985  13:58 EDT (Mon)
Message-ID: <SR.ROB.12125404900.BABYL@MIT-SPEECH>
From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>
To:   "David C. Plummer in disguise" <DCP@SCRC-QUABBIN.ARPA>
Cc:   bug-lispm@MIT-SPEECH
Subject: si:*princase*
In-reply-to: Msg of 29 Jun 1985  15:40-EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

    Date: Saturday, 29 June 1985  15:40-EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
    To:   Robert H. Kassel <sr.rob at MIT-SPEECH.mit>,
          bug-lispm at MIT-SPEECH.mit, dcp at SCRC-QUABBIN.ARPA
    Re:   si:*princase*
    Supersedes: <850629154031.7.NFEP@NEPONSET.SCRC.Symbolics.COM>

    	BUG-LispM is not the place to be discussing this.  This is a bug in the
    	Spire distribution, not with Lisp Machine software provided by Symbolics
    	(module the acknowledgement below).  The logical pathname problem is
    	again a Spire distribution problem.

        Did he say he was trying to make a SPIRE distribution tape?  No.  He
        simply flamed about unix file names and logical pathnames.  
    It's not that simple.  He tried to LOAD a SPIRE distribution tape and
    got the :|bin| problem.

It is that simple.  Read on.

        No SPIRE problem here.
    That depends on if the problem is before or after the tape is made.  As
    I said before, we acknowledge various poor interactions with global
    variables and subsystems.  This could account for a bad tape being made.
    However, Church had a tape in his hand.  

Like I originally said, I needed to experiment a bit to confirm my
suspicions.  Two points for suspicions.  I'm convinced that the bad
tape was made while si:*princase* was bound to :downcase.  If you want
details, call me.

    Now I see that his unix flame doesn't have anything to do with the spire
    tape.  Well, there isn't enough information for a real bug report, such
    as the local xyz.translations file and the defsystem.
        (We recommend making the SPIRE: host a LispM anyway,
        just to make installation a little easier.)  Additionally, Bug-lispm IS
        the place to be discussing this.  
    It depends on what "this" is.  We've discuussed the :|bin| thing to
    death.  The unix translation is lacking in information.



        I made a distribution tape in
        accordance with the manual's guidelines.  We've made these in previous
        releases and they loaded fine.  Now they don't.  I'm not saying it's
        NOT something on our side, just that this happened and it MAY be your
        problem.  In any event it's something you should know about, for if it
        happens once it may happen again and the problem/assumptions we made
        should be documented to prevent it. 
    It would be easier to fix the problem globally than to document the 300
    variables you shouldn't twiddle in your init file.  Maybe we should
    document that it is best to make distribution tapes from a vanilla,
    freshly booted world using (si:login-to-sys-host) to login?  We do
    appreciate your bringing those can of worms to our attention.

That's almost good enough, but remember that the local-system might
set si:*princase* to :downcase.  You should either fix things to not
rely on princase or document the problem.

						ROB
22-Oct-85 23:48:29-EDT,1300;000000000000   
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 8 Jul 85 15:56-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA24244; Mon, 8 Jul 85 15:48:16 edt
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 270478; Mon 8-Jul-85 15:47:23-EDT
Date: Mon, 8 Jul 85 15:48 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: supdup server
To: David Vinayak Wallace <Gumby%MIT-MC@MIT-HTVAX.ARPA>
Cc: BUG-LISPM%OZ@MIT-HTVAX.ARPA, Bug-Tracking-Replies@SCRC-STONY-BROOK.ARPA
In-Reply-To: <850605112539.2.GUMBY@LENNON>
Disposition: SUGGESTION-NOTED
Category: supdup
Message-Id: <850708154801.3.HORNIG@BIG.SCRC.Symbolics.COM>

Synopsis:  Your suggestion has been noted.

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

    Date: Wed, 5 Jun 85 11:25 EDT
    From: David Vinayak Wallace <Gumby%MIT-MC@MIT-HTVAX.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.2,
    microcode TMC5-MIC 319, on Lisp Machine John Lennon:

    You can't send bug mail when supdup-ing to a lisp machine.  At the very
    least you ought to be able to send a bug report (a la :bug its under
    ITS) -- use the rh and have end or complete send the message.

22-Oct-85 23:48:29-EDT,1866;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 8 Jul 85 19:53-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2705; Mon 8-Jul-85 19:53:31-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6130; 8 Jul 85 19:51:48-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 270760; Mon 8-Jul-85 19:46:38-EDT
Date: Mon, 8 Jul 85 19:45 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: si:*princase*
To: Robert H. Kassel <sr.rob@MIT-SPEECH.mit>,
    David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
cc: bug-lispm@MIT-SPEECH.mit
In-Reply-To: <SR.ROB.12125404900.BABYL@MIT-SPEECH>
Supersedes: <850708194518.7.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850708194532.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: 8 Jul 1985  13:58 EDT (Mon)
    From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>

	It would be easier to fix the problem globally than to document the 300
	variables you shouldn't twiddle in your init file.  Maybe we should
	document that it is best to make distribution tapes from a vanilla,
	freshly booted world using (si:login-to-sys-host) to login?  We do
	appreciate your bringing those can of worms to our attention.

    That's almost good enough, but remember that the local-system might
    set si:*princase* to :downcase.  You should either fix things to not
    rely on princase or document the problem.

I'll contend (and I believe this contention) that a local system should
not affect customization variables "on behalf of users."  Local systems
should add functionality; not affect the visible working environment.  A
new user will not get the environment that is described in the
documentation, s/he will instead get a modified environment which s/he
might want to uncustomize.

22-Oct-85 23:48:30-EDT,862;000000000000  
Received: from MIT-SINATRA by MIT-OZ via Chaosnet; 8 Jul 85 21:06-EDT
Date: Mon, 8 Jul 85 21:04 EDT
From: Walter Hamscher <hamscher@HTVAX>
Subject: Evalhook
To: BUG-LISPM@OZ
Message-ID: <850708210449.1.HAMSCHER@SINATRA>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319,
on Lisp Machine Frank Sinatra:
Warm booted from: Lisp Listener 1,
Lisp Listener 1, Lisp Listener 1.

What's going on with evalhook?  I typed in the example
given in the manual (section DEBUG, p.33):

(defun hook (x)
  (terpri)
  (evalhook x 'hook-function))

(defun hook-function (f)
  (let ((v (evalhook f 'hook-function)))
    (format t "form: ~s~%value: ~s~%" v)
    v))

And running a simple example:

(hook '(cons 1 2))

crapped out and left me in the FEP.  Has the definition
of evalhook (variable and/or function) changed?
22-Oct-85 23:48:30-EDT,2083;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 08:44-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2706; Tue 9-Jul-85 08:45:08-EDT
Date: 9 Jul 1985  08:44 EDT (Tue)
Message-ID: <SR.ROB.12125609891.BABYL@MIT-SPEECH>
From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>
To:   "David C. Plummer in disguise" <DCP@SCRC-QUABBIN.ARPA>
Cc:   bug-lispm@MIT-SPEECH
Subject: si:*princase*
In-reply-to: Msg of 8 Jul 1985  19:45-EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

    Date: Monday, 8 July 1985  19:45-EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
    To:   Robert H. Kassel <sr.rob at MIT-SPEECH.mit>,
          David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
    cc:   bug-lispm at MIT-SPEECH.mit
    Re:   si:*princase*
    Supersedes: <850708194518.7.NFEP@NEPONSET.SCRC.Symbolics.COM>

        Date: 8 Jul 1985  13:58 EDT (Mon)
        From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>

    	It would be easier to fix the problem globally than to document the 300
    	variables you shouldn't twiddle in your init file.  Maybe we should
    	document that it is best to make distribution tapes from a vanilla,
    	freshly booted world using (si:login-to-sys-host) to login?  We do
    	appreciate your bringing those can of worms to our attention.

        That's almost good enough, but remember that the local-system might
        set si:*princase* to :downcase.  You should either fix things to not
        rely on princase or document the problem.

    I'll contend (and I believe this contention) that a local system should
    not affect customization variables "on behalf of users."  Local systems
    should add functionality; not affect the visible working environment.  A
    new user will not get the environment that is described in the
    documentation, s/he will instead get a modified environment which s/he
    might want to uncustomize.

First time I've heard this.  Why not document this suggestion? 

What's the status of the bug? 
22-Oct-85 23:48:30-EDT,2072;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 14:53-EDT
Date: Tue,  9 Jul 85 14:52:03 EDT
From: Glenn S. Burke <GSB@MIT-MC.ARPA>
Subject: Re: common lisp setf screws up on substs
To: DCP@SCRC-QUABBIN.ARPA, moon@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA, ZVONA@SRI-AI.ARPA
Message-ID: <[MIT-MC.ARPA].569156.850709.GSB>

    Date: Sun, 7 Jul 85 15:17 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    In-Reply-To: <850625153857.1.ZVONA@SONORA.ARPA>

    . . .

    I won't agree that the bug is trivial, since I'm not sure where the best
    place to fix it is.  In CL 4.13 (part of 6.1), I made
    GET-SETF-METHOD-MULTIPLE-VALUE look at the compiler's environment before
    the executing environment when calling %ARGS-INFO.  I briefly looked at
    the other callers of %ARGS-INFO and didn't see any other obvious
    breakages.  

This also sounds like the wrong thing to do.  What if it is being run
at the time?

Quick question about your implementation:  is it possible, given
whatever gets passed to a macro as an &environment argument, to
determine whether it came from the compiler or the interpreter?  If
so, then make get-setf-method[-multiple-value] take an optional
environment argument, use them liberally in the macros (SETF, PUSH,
etc.), and use that to drive where you look for things like this.
(Moon:  did we push that optional environment argument into CL or only
talk about it?  Also: have you upgraded the LT stuff similarly yet?)

Those optional environment arguments are needed anyway to handle
macrolet-defined macros, so you may as well get even more mileage out
of them.  In NIL, the environment object is used not only for
MACROLET-macro expansion, but for driving where setf-methods are found
and where macro definitions are found (i.e., MACROEXPAND will look in
the compiler's a-list of macro definitions if called with an
environment originating with the compiler).  I did a set of
extensions/tools for dealing with these sort of things in NIL's LT
package.
22-Oct-85 23:48:30-EDT,3047;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 22:14-EDT
Date: Tue,  9 Jul 85 22:14:10 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:    cl:read-from-string ignores eof-error-p
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569669.850709.GUMBY>

In Symbolics 3640 Release 6.0, MCC-Site 5.0,
microcode TMC5-IO4-ST506-MIC 319, on Aries:

>>Error: End of file for SI:READ-FROM-STRING-STREAM.
         End of file occurred while reading (@::F)
While in the function (:PROPERTY LIST SI:STANDARD-READ-FUNCTION)  SI:XR-READ-THING  (:INTERNAL SI:READ-INTERNAL 0)

(:PROPERTY LIST SI:STANDARD-READ-FUNCTION):  (P.C. = 271)
   Arg 0 (STREAM): SI:READ-FROM-STRING-STREAM
   Arg 1 (SHOULD-BE-NIL): NIL
   Arg 2 (FIFTY): 40
   Local 3 (LIST): (@::F)
   Local 4 (THING): SI:EOF
   Local 5 (TYPE): SI:SPECIAL-TOKEN
   Local 6 (SPLICEP): NIL
   Local 7 (END-OF-LIST): (@::F)
   Local 8 (BP): NIL
   Local 9 (CORRESPONDENCE-ENTRY): NIL

SI:XR-READ-THING:  (P.C. = 60)
   Arg 0 (STREAM): SI:READ-FROM-STRING-STREAM

(:INTERNAL SI:READ-INTERNAL 0):  (P.C. = 15)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 36300265>

SI:WITH-INPUT-EDITING-INTERNAL:  (P.C. = 25)
   Arg 0 (STREAM): SI:READ-FROM-STRING-STREAM
   Arg 1 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:READ-INTERNAL 0) 36300267>
   Arg 2 (ACTIVATORS): (148)
   Arg 3 (LINE-P): NIL
   Arg 4 (INPUT-EDITOR-OPTIONS): NIL

SI:READ-INTERNAL:  (P.C. = 34)
   Arg 0 (FUNCTION): ZL:READ
   Rest arg (READ-ARGS): (SI:READ-FROM-STRING-STREAM NIL)

ZL:READ:  (P.C. = 6)
   Rest arg (READ-ARGS): (SI:READ-FROM-STRING-STREAM NIL)

ZL:READ-FROM-STRING:  (P.C. = 23)
   Arg 0 (STRING): #"(f"
   Arg 1 (EOF-OPTION): NIL
   Arg 2 (START): 0
   Arg 3 (END): NIL

READ-FROM-STRING:  (P.C. = 36)
   Arg 0 (STRING): "(f"
   Arg 1 (EOF-ERRORP): NIL
   --Defaulted args:--
   Arg 2 (EOF-VALUE): NIL
   Rest arg: NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (READ-FROM-STRING "(f" NIL)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 36300101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 36300106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 1500371 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 1500371 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:31-EDT,1011;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 22:21-EDT
Date: Tue,  9 Jul 85 22:21:49 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  CL declare doesn't work in LET
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569675.850709.GUMBY>

In Symbolics 3640 Release 6.0, MCC-Site 5.0,
microcode TMC5-IO4-ST506-MIC 319, 

(in Common-lisp)

declarations inside LET are not handled correctly by the compiler, to
whit compiling:

(defun bar (key)
  (let ((a (member key *some-list*)))
    (declare (special *some-list*))
    (do-something-with a)))

generates the complaint that *SOME-LIST* is unknown.  

I have been getting around this problem by using LOCALLY (because the
code is actually part of a macroexpansion so I can't just the DECLARE
the first form of the DEFUN body).   LOCALLY doesn't grind particularly
well:

(defun bar (key)
  (locally (declare (special *some-list*))
	   (let ((a (member key *some-list*)))
	     (do-something-with a))))
22-Oct-85 23:48:31-EDT,728;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 22:22-EDT
Date: Tue,  9 Jul 85 22:22:20 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  adding translation rules to logical host
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569676.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

How do you add or modify the translation rules of a logical pathname
without resetting all the existing ones?  

I wanted to test some code I brought from another site, so I wanted to
define a new directory on sys:  which pointed (in this case) to a
temporary directory of mine.  But SET-LOGICAL-PATHNAME-HOST resets all
the other translations.
22-Oct-85 23:48:32-EDT,511;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 22:24-EDT
Date: Tue,  9 Jul 85 22:24:17 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  :load system
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569678.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

:Load System <HELP> probably should't offer to load systems like ZWEI,
FORMAT, etc.  Perhaps it shouldn't offer the system if it wouldn't appear
in the herald.
22-Oct-85 23:48:32-EDT,441;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 22:24-EDT
Date: Tue,  9 Jul 85 22:24:47 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:    vector-push-extend doesn't work on strings
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569679.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

(in common-lisp)

But (typep "foo" 'vector) returns true.
22-Oct-85 23:48:32-EDT,612;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 23:01-EDT
Date: Tue,  9 Jul 85 23:02:01 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  WITH-OPEN-FILE suggestion
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569695.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

IWBNI WITH-OPEN-FILE took a "generalized variable" (i.e. something
acceptable to SETF).  I want to put a stream into a structure with
something like:

(let ((foo (make-bar)))
  (with-open-file ((bar-stream foo) "filename")
    (frob-bar bar)))
22-Oct-85 23:48:34-EDT,2572;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 23:03-EDT
Date: Tue,  9 Jul 85 23:02:57 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  types of hosts in common-lisp
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569697.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

Try (typep (si:parse-host 'eddie) (type-of (si:parse-host 'eddie))) in
a common-lisp listener:

>>Error: FS:UNIX-HOST is not a known type.
While in the function SCL::TYPE-EXPAND  SCL::TYPEP-INTERNAL  TYPEP

SCL::TYPE-EXPAND:  (P.C. = 101)
   Arg 0 (TYPE): FS:UNIX-HOST
   Arg 1 (TERMINAL-TYPES): (SATISFIES MEMBER DATA-TYPE ARRAY INTEGER STRUCTURE SCL::INSTANCE NOT OR AND ...)
   Arg 2 (OPTIMIZE): NIL
   Arg 3 (SUB-TERMINAL-TYPES): (SATISFIES MEMBER DATA-TYPE ARRAY INTEGER STRUCTURE SCL::INSTANCE NOT OR AND ...)

SCL::TYPEP-INTERNAL:  (P.C. = 13)
   Arg 0 (OBJECT): #<UNIX-HOST EDDIE 56301140>
   Arg 1 (TYPE): FS:UNIX-HOST
   Arg 2 (PROPERTY-NAME): TYPEP
   --Defaulted args:--
   Arg 3 (TERMINAL-TYPES): (SATISFIES MEMBER DATA-TYPE ARRAY INTEGER STRUCTURE SCL::INSTANCE NOT OR AND ...)
   Arg 4 (OPTIMIZE): NIL
   Arg 5 (SUB-TERMINAL-TYPES): (SATISFIES MEMBER DATA-TYPE ARRAY INTEGER STRUCTURE SCL::INSTANCE NOT OR AND ...)

TYPEP:  (P.C. = 5)
   Arg 0 (OBJECT): #<UNIX-HOST EDDIE 56301140>
   Arg 1 (TYPE): FS:UNIX-HOST

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (TYPEP (SI:PARSE-HOST (QUOTE EDDIE)) (TYPE-OF (SI:PARSE-HOST (QUOTE EDDIE))))
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 14540101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 14540106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 1601304 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 1601304 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:34-EDT,443;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 23:04-EDT
Date: Tue,  9 Jul 85 23:04:04 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  :which-operations should optionally take a substring
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569701.850709.GUMBY>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
microcode TMC5-MIC 319, FEP 24

and only show messages which constain that substring.
22-Oct-85 23:48:35-EDT,477;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Jul 85 23:04-EDT
Date: Tue,  9 Jul 85 23:04:36 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  RH suggestion
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].569702.850709.GUMBY>

In Symbolics 3640 Release 6.0, MCC-Site 5.0,
microcode TMC5-IO4-ST506-MIC 319, on Aries:

c-m-y should work when you're changing a string in a multiple-choose
menu.

Also, m-C m-U and m-l would be really useful.
22-Oct-85 23:48:35-EDT,924;000000000000
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 03:52-EDT
Received: from SUMEX-AIM.ARPA by MIT-XX.ARPA with TCP; Wed 10 Jul 85 03:54:08-EDT
Date: Wed 10 Jul 85 00:50:39-PDT
From: Eric Schoen <Schoen@SUMEX-AIM.ARPA>
Subject: GC-IMMEDIATELY woes
To: bug-lispm%MIT-OZ@MIT-XX.ARPA

I've been running a rather long machine simulation experiment which requires
the use of the garbage collector to complete.  Unfortunately, I end up having
to call GC-IMMEDIATELY in the middle of a simulation run, and crash (out of
swap space) almost precisely 15 minutes later.

When I call GC-IMMEDIATELY, I've got about 4.1 MW of dynamic space, 4.6 MW of
free space, and 29 MW of static space.  I believe the swapping band is 67.5
MW.  When I call GC-IMMEDIATELY, I get no warning about possibly not being
able to complete the GC.  

I'm running in release 6.  Anybody seen this before?

Thanks,
Eric
-------
22-Oct-85 23:48:35-EDT,10427;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 10:03-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 10 JUL 85  10:02:41 EDT
Received: from MIT-APIARY-6 by MIT-OZ via Chaosnet; 10 Jul 85 10:01-EDT
Date: Wed, 10 Jul 85 10:01 EDT
From: Thomas Reinhardt <Tomr@OZ>
Subject: Apiary-6 Fep1 Partition Loss
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <850710100118.2.TOMR@APIARY-6>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

This is a very hard bug to reproduce.  I've been trying, but, until now,
without any luck.  Anyhow, the %dcw-read32 on Unit 1 is exactly what it was
doing last week, until Paul Neal replaced several [3 ?] boards, IO paddles, I
think.

Moreoever, I'm willing to bet that if I boot the machine and attempt to Mount
Disk Unit 1, I'll get a Sector n-1 not found error.
This is what I'll do, and should my guesswork prove correct, I will leave it
in that state anticipating the arrival of Paul or someone from Symbolics.

Thanks,

TomR

PS:> Sorry I included all of the stack, but one never knows... .

>>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ32 on unit 1.,
           Irrecoverable disk error,
           1. pending transfer associated with this disk event aborted.
While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>
   Arg 1 (TASK-ID): 0

SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

SI:DISK-IO:  (P.C. = 175)
   Arg 0 (MODE): :READ
   Arg 1 (DISK-ARRAYS): #<ART-Q-288 44560155>
   Arg 2 (DISK-EVENT): #<ART-2B-32 44562023>
   Arg 3 (DPN): 67108864
   Arg 4 (N-BLOCKS): NIL
   Local 4 (N-BLOCKS): 1
   Arg 5 (HANG-P): T

SYS:DISK-READ:  (P.C. = 15)
   Arg 0 (DISK-ARRAYS): #<ART-Q-288 44560155>
   Arg 1 (DISK-EVENT): #<ART-2B-32 44562023>
   Arg 2 (DPN): 67108864
   --Defaulted args:--
   Arg 3 (N-BLOCKS): NIL
   Arg 4 (HANG-P): T

SI:FEP-DIRECTORY-READ:  (P.C. = 25)
   Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
   Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Arg 2 (DIRECTORY): :ROOT
   Arg 3 (DISK-BLOCK): #<ART-Q-288 44560155>

SI:FEP-DIRECTORY-LOOKUP:  (P.C. = 35)
   Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
   Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

SI:FEP-FILE-LOOKUP:  (P.C. = 4)
   Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
   Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

SI:FEP-FILE-OPEN:  (P.C. = 24)
   Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
   Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

(:METHOD FS:FEP-FILE-ACCESS-PATH :OPEN):  (P.C. = 245)
   Arg 0 (SELF): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:FEP-FILE-ACCESS-PATH -- 10. IV's, 1. FL's 104411736>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (TRANSLATED-PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Arg 4 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Rest arg: (:DIRECTION :PROBE)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 105121160>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Rest arg (OPTIONS): (:DIRECTION :PROBE)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Arg 1 (KEYWORD-ARGS): (:DIRECTION :PROBE)

OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
   Rest arg (KEYWORD-ARGS): (:DIRECTION :PROBE)

LMFS:VALIDATE-FSPT-INFO:  (P.C. = 55)
   Arg 0 (INFO): ("fep1:>lmfs.file.1")

LMFS:BRING-UP-LMFS:  (P.C. = 51)

LMFS:TRY-TO-INITIALIZE-FS-AND-GET-ROOT:  (P.C. = 4)

LMFS:GET-DIR-FD:  (P.C. = 12)
   Arg 0 (DIRSPEC): ("Nmeter")

LMFS:GET-FD:  (P.C. = 102)
   Arg 0 (DPATH): ("Nmeter")
   Arg 1 (NAME): "frame-constraints"
   Arg 2 (TYPE): "bin"
   Arg 3 (VERSION): :NEWEST
   Rest arg (OPTS): (:CHECK-WRITE-OPENINGS NIL)

LMFS:GET-FD:  (P.C. = 32)
   Arg 0 (DPATH): ("Nmeter")
   Arg 1 (NAME): "frame-constraints"
   Arg 2 (TYPE): "bin"
   Arg 3 (VERSION): :NEWEST
   Rest arg (OPTS): (:CHECK-WRITE-OPENINGS NIL)

LMFS:LMFS-OPEN-FILE:  (P.C. = 464)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 1 (LOGPATH): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 2 (MODE): :INPUT
   Arg 3 (DELETED-P): NIL
   Arg 4 (FTYPE): :BINARY
   Arg 5 (BYTE-SIZE): NIL
   Arg 6 (IF-EXISTS): NIL
   Arg 7 (IF-NOT-EXISTS): :ERROR
   Arg 8 (ACCESS-PATH): #<LOCAL-LMFS-ACCESS-PATH AP6 using LOCAL-FILE 32121525>
   Arg 9 (OPTIONS): (:BINARY)

LMFS:OPEN-LOCAL-LMFS:  (P.C. = 571)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 1 (LOGPATH): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 2 (ACCESS-PATH): #<LOCAL-LMFS-ACCESS-PATH AP6 using LOCAL-FILE 32121525>
   Arg 3 (OPTIONS): (:DIRECTION :INPUT :CHARACTERS NIL)

(:METHOD LMFS:LOCAL-LMFS-ACCESS-MIXIN :OPEN):  (P.C. = 15)
   Arg 0 (SELF): #<LOCAL-LMFS-ACCESS-PATH AP6 using LOCAL-FILE 32121525>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor LMFS:LOCAL-LMFS-ACCESS-MIXIN -- 1. IV's, 0. FL's 26106067>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 4 (PATH): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Rest arg (ARGS): (:DIRECTION :INPUT :CHARACTERS NIL)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 104225115>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Rest arg (OPTIONS): (:DIRECTION :INPUT :CHARACTERS NIL)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 1 (KEYWORD-ARGS): (:CHARACTERS NIL :ERROR :REPROMPT)

OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Rest arg (KEYWORD-ARGS): (:CHARACTERS NIL :ERROR :REPROMPT)

SI:BIN-LOAD-FILE:  (P.C. = 15)
   Arg 0 (FILE): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">
   Arg 1 (INTO-PACKAGE): USER
   Arg 2 (NO-MSG-P): T

SI:FASLOAD-1:  (P.C. = 5)
   Arg 0 (INFILE): #<LMFS-PATHNAME "AP6:>Nmeter>frame-constraints.bin">

SI:DO-FILE-TRANSFORMATIONS:  (P.C. = 244)

SI:PERFORM-TRANSFORMATIONS:  (P.C. = 167)
   Arg 0 (TRANSFORMATION-LIST): ((#<TRANSFORMATION FASLOAD 32116604> NMETER NIL NIL) (#<TRANSFORMATION FASLOAD 32116622> NMETER NIL NIL) (#<TRANSFORMATION FASLOAD 32116640> NMETER NIL NIL) (#<TRANSFORMATION FASLOAD 32116656> NMETER NIL NIL) (#<TRANSFORMATION FASLOAD 32116674> NMETER NIL NIL) (#<TRANSFORMATION FASLOAD 32116712> NMETER NIL NIL))

MAKE-SYSTEM:  (P.C. = 241)
   Arg 0 (SYSTEM): AMETER
   Rest arg (KEYWORDS): (:BATCH)

AMETER-LOADER:  (P.C. = 33)  (from AP5:>metering>ameter-loader)

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (AMETER-LOADER)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

SI:LOAD-BIN-OP-FORM:  (P.C. = 4)
   Arg 0 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>

SI:BIN-LOAD-NEXT-COMMAND:  (P.C. = 24)
   Arg 0 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>

SI:BIN-LOAD-TOP-LEVEL:  (P.C. = 6)
   Arg 0 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>

(:METHOD ZWEI:MAJOR-MODE :DEFAULT :LOAD-BINARY-FILE):  (P.C. = 4)
   Arg 0 (SELF): #<LISP-MODE 120576060>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:MAJOR-MODE -- 1. IV's, 1. FL's 142357032>
   Arg 2 (OPERATION): :LOAD-BINARY-FILE
   Arg 3 (IGNORE): #<DTP-LOCATIVE 23524661>
   Arg 4 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>

SI:BIN-LOAD-FILE-INTERNAL:  (P.C. = 147)
   Arg 0 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>
   Arg 1 (INTO-PACKAGE): NIL
   Arg 2 (NO-MSG-P): NIL

FS:LOAD-STREAM:  (P.C. = 16)
   Arg 0 (STREAM): #<NFILE-INPUT-WIDE-BINARY-STREAM "AP5:>metering>ameter-loader.bin" 32115712>
   Arg 1 (PKG): NIL
   Arg 2 (NO-MSG-P): NIL

LOAD:  (P.C. = 124)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "AP5:>metering>ameter-loader">
   Arg 1 (PKG): NIL
   Arg 2 (NONEXISTENT-OK-FLAG): NIL
   Arg 3 (DONT-SET-DEFAULT-P): NIL
   Arg 4 (NO-MSG-P): NIL

(:PROPERTY SI:COM-LOAD-FILE SI:CP-FUNCTION):  (P.C. = 254)
   Arg 0 (FILE-SPEC): (#<LMFS-PATHNAME "AP5:>metering>ameter-loader">)
   Arg 1 (COMPILE): :NEVER
   Arg 2 (LOADER): :USE-CANONICAL-TYPE
   Arg 3 (PKG): NIL
   Arg 4 (QUERY): :NO
   Arg 5 (SILENTLY): NIL

SI:COM-LOAD-FILE:  (P.C. = 40)
   Arg 0 (FILE-SPEC): (#<LMFS-PATHNAME "AP5:>metering>ameter-loader">)
   Rest arg: NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SI:COM-LOAD-FILE (QUOTE (#<LMFS-PATHNAME "AP5:>metering>ameter-loader">)))
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 500106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): "Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<LISP-LISTENER Lisp Listener 1 43200216 exposed>
   Rest arg: (:NAME "Lisp Top Level")

SI:LISP-TOP-LEVEL1:  (P.C. = 5)
   Arg 0 (STREAM): #<LISP-LISTENER Lisp Listener 1 43200216 exposed>

SI:LISP-TOP-LEVEL2:  (P.C. = 5)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:36-EDT,4068;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 10:07-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 10 JUL 85  10:07:38 EDT
Received: from MIT-APIARY-6 by MIT-OZ via Chaosnet; 10 Jul 85 10:06-EDT
Date: Wed, 10 Jul 85 10:06 EDT
From: Thomas Reinhardt <Tomr@OZ>
Subject: Follow Up on Previous Message, Ap6 File Lossage.
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <850710100625.3.TOMR@APIARY-6>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

Instead of booting the machine, I tried (si:mount-disk-unit 1) from within the
same frame...i.e., the debugger.  I don't know if this would result in the 
Sector n-1 Not Found error that one gets in the Fep, but I suspect it does.

For your viewing pleasure... .

Cheers,

TOMR


>>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ-HEADER on unit 1.,
           Irrecoverable disk error,
           1. pending transfer associated with this disk event aborted.
While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>
   Arg 1 (TASK-ID): 0

SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
   Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

SI:MOUNT-DISK-UNIT:  (P.C. = 61)
   Arg 0 (UNIT): 1

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

DBG:EVAL-IN-ERROR-ENVIRONMENT:  (P.C. = 365)
   Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
   Arg 1 (BIND-STREAMS): T

DBG:COMMAND-LOOP:  (P.C. = 404)

DBG:DEBUGGER-TOP-LEVEL:  (P.C. = 540)
   Arg 0: #<DISK-ERROR-EVENT 32125141>
   Arg 1: #<DTP-LOCATIVE 502134>
   Arg 2: NIL
   Arg 3 (SPECIAL-COMMANDS): NIL

Rest of stack:
DBG:ENTER-DEBUGGER:  (P.C. = 16)
DBG:DEBUGGER-HANDLER-HANDLE-CONDITION:  (P.C. = 7)
DBG:DEBUGGER-HANDLER:  (P.C. = 12)
(:METHOD CONDITION :SIGNAL):  (P.C. = 114)
(:METHOD CONDITION :COMBINED :SIGNAL):  (P.C. = 17)
ERROR:  (P.C. = 55)
SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
SI:DISK-IO:  (P.C. = 175)
SYS:DISK-READ:  (P.C. = 15)
SI:FEP-DIRECTORY-READ:  (P.C. = 25)
SI:FEP-DIRECTORY-LOOKUP:  (P.C. = 35)
SI:FEP-FILE-LOOKUP:  (P.C. = 4)
SI:FEP-FILE-OPEN:  (P.C. = 24)
(:METHOD FS:FEP-FILE-ACCESS-PATH :OPEN):  (P.C. = 245)
(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
FS:COMMON-LISP-OPEN:  (P.C. = 450)
OPEN:  (P.C. = 257)
LMFS:VALIDATE-FSPT-INFO:  (P.C. = 55)
LMFS:BRING-UP-LMFS:  (P.C. = 51)
LMFS:TRY-TO-INITIALIZE-FS-AND-GET-ROOT:  (P.C. = 4)
LMFS:GET-DIR-FD:  (P.C. = 12)
LMFS:GET-FD:  (P.C. = 102)
LMFS:GET-FD:  (P.C. = 32)
LMFS:LMFS-OPEN-FILE:  (P.C. = 464)
LMFS:OPEN-LOCAL-LMFS:  (P.C. = 571)
(:METHOD LMFS:LOCAL-LMFS-ACCESS-MIXIN :OPEN):  (P.C. = 15)
(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
FS:COMMON-LISP-OPEN:  (P.C. = 450)
OPEN:  (P.C. = 257)
SI:BIN-LOAD-FILE:  (P.C. = 15)
SI:FASLOAD-1:  (P.C. = 5)
SI:DO-FILE-TRANSFORMATIONS:  (P.C. = 244)
SI:PERFORM-TRANSFORMATIONS:  (P.C. = 167)
MAKE-SYSTEM:  (P.C. = 241)
AMETER-LOADER:  (P.C. = 33)  (from AP5:>metering>ameter-loader)
SI:*EVAL:  (P.C. = 403)
SI:LOAD-BIN-OP-FORM:  (P.C. = 4)
SI:BIN-LOAD-NEXT-COMMAND:  (P.C. = 24)
SI:BIN-LOAD-TOP-LEVEL:  (P.C. = 6)
(:METHOD ZWEI:MAJOR-MODE :DEFAULT :LOAD-BINARY-FILE):  (P.C. = 4)
SI:BIN-LOAD-FILE-INTERNAL:  (P.C. = 147)
FS:LOAD-STREAM:  (P.C. = 16)
LOAD:  (P.C. = 124)
(:PROPERTY SI:COM-LOAD-FILE SI:CP-FUNCTION):  (P.C. = 254)
SI:COM-LOAD-FILE:  (P.C. = 40)
SI:*EVAL:  (P.C. = 403)
(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL2:  (P.C. = 5)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:48:36-EDT,1135;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 10:12-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 10 JUL 85  10:10:42 EDT
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 10 Jul 85 10:08-EDT
Date: Wed, 10 Jul 85 10:09 EDT
From: Mark H. Shirley <MHS@MIT-MC.ARPA>
Subject: Can't m-. this macro
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <850710100913.1.MHS@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, Funny Label Private Patch, on Lisp Machine Jimi Hendrix:

COM-EDIT-DEFINITION doesn't seem to work on the maker function defined by DEFSTRUCT.

    (defstruct (hack :list :conc-name)
      slot-1
      slot-2)

Now, (make-hack slot-1 1 slot-2 2) macroexpands into

    (LIST 1 2) which is fine of course.

But when I m-. make-hack, Zmacs asks me what file to read it from.  I defined it by
creating a new buffer, typing it in and compiling that buffer.  When I load in a file
containing this defstruct, zmacs knows what file the maker came from, but it still
doesn't know it's defined within the defstruct.  All this works fine for slot
accessors.
22-Oct-85 23:48:36-EDT,1062;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 11:00-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 10:42:30 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 271430; Tue 9-Jul-85 17:13:28-EDT
Date: Tue, 9 Jul 85 17:13 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Re: common lisp setf screws up on substs
To: Glenn S. Burke <GSB@MIT-MC.ARPA>
cc: DCP@SCRC-QUABBIN.ARPA, BUG-LISPM@MIT-MC.ARPA, ZVONA@SRI-AI.ARPA
In-Reply-To: <[MIT-MC.ARPA].569156.850709.GSB>
Message-ID: <850709171329.1.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 14:52:03 EDT
    From: Glenn S. Burke <GSB@MIT-MC.ARPA>
    (Moon:  did we push that optional environment argument into CL or only
    talk about it?  Also: have you upgraded the LT stuff similarly yet?)

I have not yet done any of what we discussed.  It's still on my queue and
I fully intend to do it when I schedule some time to work on the development
version of the language tools.

22-Oct-85 23:48:37-EDT,979;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 16:08-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2711; Wed 10-Jul-85 16:09:21-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6175; 10 Jul 85 16:08:56-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272260; Wed 10-Jul-85 15:47:42-EDT
Date: Wed, 10 Jul 85 15:48 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: si:*princase*
To: Robert H. Kassel <sr.rob@MIT-SPEECH.mit>,
    David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
cc: bug-lispm@MIT-SPEECH.mit
In-Reply-To: <SR.ROB.12125609891.BABYL@MIT-SPEECH>
Message-ID: <850710154855.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: 9 Jul 1985  08:44 EDT (Tue)
    From: "Robert H. Kassel" <sr.rob@MIT-SPEECH>

    What's the status of the bug? 

I heavily doubt it will be fixed in the Release 6 timeframe.

22-Oct-85 23:48:37-EDT,920;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:24-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 17:24:04 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272410; Wed 10-Jul-85 17:17:15-EDT
Date: Wed, 10 Jul 85 17:18 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: vector-push-extend doesn't work on strings
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569679.850709.GUMBY>
Message-ID: <850710171813.4.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 22:24:47 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 24

    (in common-lisp)

    But (typep "foo" 'vector) returns true.

It does for me.  Could you please give an example?

22-Oct-85 23:48:37-EDT,1720;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:26-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 17:26:16 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272413; Wed 10-Jul-85 17:18:44-EDT
Date: Wed, 10 Jul 85 17:19 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: CL declare doesn't work in LET
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569675.850709.GUMBY>
Message-ID: <850710171944.5.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 22:21:49 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3640 Release 6.0, MCC-Site 5.0,
    microcode TMC5-IO4-ST506-MIC 319, 

    (in Common-lisp)

    declarations inside LET are not handled correctly by the compiler, to
    whit compiling:

    (defun bar (key)
      (let ((a (member key *some-list*)))
	(declare (special *some-list*))
	(do-something-with a)))

    generates the complaint that *SOME-LIST* is unknown.  

No, this is the proper behavior.  The initialization clause for the
LETted variable is not considered to be part of the body of the LET, so
the declaration does not apply to it.  You should either use LOCALLY or
PROCLAIM it to be special.

    I have been getting around this problem by using LOCALLY (because the
    code is actually part of a macroexpansion so I can't just the DECLARE
    the first form of the DEFUN body).   LOCALLY doesn't grind particularly
    well:

    (defun bar (key)
      (locally (declare (special *some-list*))
	       (let ((a (member key *some-list*)))
		 (do-something-with a))))


22-Oct-85 23:48:38-EDT,1238;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:29-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 17:28:02 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272422; Wed 10-Jul-85 17:22:17-EDT
Date: Wed, 10 Jul 85 17:23 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: cl:read-from-string ignores eof-error-p
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569669.850709.GUMBY>
Message-ID: <850710172316.6.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 22:14:10 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3640 Release 6.0, MCC-Site 5.0,
    microcode TMC5-IO4-ST506-MIC 319, on Aries:

    >>Error: End of file for SI:READ-FROM-STRING-STREAM.
	     End of file occurred while reading (@::F)
    While in the function (:PROPERTY LIST SI:STANDARD-READ-FUNCTION)  SI:XR-READ-THING  (:INTERNAL SI:READ-INTERNAL 0)

Read the description of EOF-ERROR-P more carefully.  It controls only
what happens if the stream is already at EOF (the string is empty).  An
error is always signalled if the EOF happens inside of an object.

22-Oct-85 23:48:38-EDT,1036;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:39-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 17:38:17 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272463; Wed 10-Jul-85 17:35:26-EDT
Date: Wed, 10 Jul 85 17:36 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: types of hosts in common-lisp
To: GUMBY@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569697.850709.GUMBY>
Message-ID: <850710173635.2.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 23:02:57 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 24

    Try (typep (si:parse-host 'eddie) (type-of (si:parse-host 'eddie))) in
    a common-lisp listener:

    >>Error: FS:UNIX-HOST is not a known type.
    While in the function SCL::TYPE-EXPAND  SCL::TYPEP-INTERNAL  TYPEP
This bug in CL:TYPEP is fixed in 6.1.

22-Oct-85 23:48:38-EDT,1648;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:45-EDT
Date: Wed, 10 Jul 85 17:45:46 EDT
From: Glenn S. Burke <GSB@MIT-MC.ARPA>
Subject: CL declare doesn't work in LET
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: GUMBY@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].570836.850710.GSB>

    Date: Wed, 10 Jul 85 17:19 EDT
    From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
    In-Reply-To: <[MIT-MC.ARPA].569675.850709.GUMBY>

        Date: Tue,  9 Jul 85 22:21:49 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

        In Symbolics 3640 Release 6.0, MCC-Site 5.0,
        microcode TMC5-IO4-ST506-MIC 319, 

        (in Common-lisp)

        declarations inside LET are not handled correctly by the compiler, to
        whit compiling:

        (defun bar (key)
          (let ((a (member key *some-list*)))
	    (declare (special *some-list*))
    	    (do-something-with a)))

        generates the complaint that *SOME-LIST* is unknown.  

    No, this is the proper behavior.  The initialization clause for the
    LETted variable is not considered to be part of the body of the LET, so
    the declaration does not apply to it.  You should either use LOCALLY or
    PROCLAIM it to be special.

No, it is not the proper behavior.  This point may be specifically covered in
CLTM, but even if not, i remember getting explicit clarification on this
a long time ago.  It has to do with uniformity when you talk about the
scope of the declarations in CL special forms which do binding.  (Think
about LET*.)  The declaration affects all forms within the special form.
22-Oct-85 23:48:38-EDT,1648;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 17:45-EDT
Date: Wed, 10 Jul 85 17:45:46 EDT
From: Glenn S. Burke <GSB@MIT-MC.ARPA>
Subject: CL declare doesn't work in LET
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: GUMBY@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].570836.850710.GSB>

    Date: Wed, 10 Jul 85 17:19 EDT
    From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
    In-Reply-To: <[MIT-MC.ARPA].569675.850709.GUMBY>

        Date: Tue,  9 Jul 85 22:21:49 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

        In Symbolics 3640 Release 6.0, MCC-Site 5.0,
        microcode TMC5-IO4-ST506-MIC 319, 

        (in Common-lisp)

        declarations inside LET are not handled correctly by the compiler, to
        whit compiling:

        (defun bar (key)
          (let ((a (member key *some-list*)))
	    (declare (special *some-list*))
    	    (do-something-with a)))

        generates the complaint that *SOME-LIST* is unknown.  

    No, this is the proper behavior.  The initialization clause for the
    LETted variable is not considered to be part of the body of the LET, so
    the declaration does not apply to it.  You should either use LOCALLY or
    PROCLAIM it to be special.

No, it is not the proper behavior.  This point may be specifically covered in
CLTM, but even if not, i remember getting explicit clarification on this
a long time ago.  It has to do with uniformity when you talk about the
scope of the declarations in CL special forms which do binding.  (Think
about LET*.)  The declaration affects all forms within the special form.
22-Oct-85 23:48:38-EDT,3359;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 19:12-EDT
Received: from MIT-REAGAN.ARPA by MIT-MC.ARPA via Chaosnet; 10 JUL 85  17:55:26 EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6187; 10 Jul 85 17:58:14-EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272486; Wed 10-Jul-85 17:49:30-EDT
Date: Wed, 10 Jul 85 17:50 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Bogus user host name
To: Randy Parker <PARKER%oz@MIT-MC.ARPA>, bug-lispm@MIT-REAGAN.ARPA
In-Reply-To: <850627162948.8.PARKER@APIARY-4>
Message-ID: <850710175024.9.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Thu, 27 Jun 85 16:29 EDT
    From: Randy Parker <PARKER@MIT-AI.ARPA>

    In Symbolics 3600 in Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 18 on Lisp Machine Apiary-4:

    <<This was sent to bug-lispm@reagan to see if it would cause the from to
    read PARKER@MIT-AI, the bug that is being reported.>>

    In checking to see if mail to me at REAGAN would win (a Show Mailing
    List said it would (I didn't have a dir there, nor a mailbox), so I take
    it it gets it from the namespace entry), I sent a message from Zmail on
    ap4 to: parker@reagan (with my mail-network-host set to REAGAN).

    This first message below is what I received on OZ.
    Now I don't exist at AI (although I have a namespace entry there under a
    different name), so it shouldn't say From: PARKER@MIT-AI.  The second
    message was just a confirmation from COMSAT that things are indeed in a
    bad way.

    CJL has noticed this, too, and thinks it may only happen when sending
    mail to Internet hosts.

Does this still happen?  I looked at the namespace configuration and it
shouldn't.  It should have put "PARKER%OZ@MIT-AI.ARPA" in the header.

    RP

    ********************************************************************************
    Received: from MIT-REAGAN by MIT-OZ via Chaosnet; 27 Jun 85 13:05-EDT
    Received: from APIARY-4 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 5704; Thu 27-Jun-85 13:03:36-EDT
    Date: Thu, 27 Jun 85 13:03 EDT
    From: Randy Parker <PARKER@MIT-AI.ARPA>
    Subject: testing....
    To: parker@MIT-REAGAN.ARPA
    Message-ID: <850627130318.6.PARKER@APIARY-4>

    ********************************************************************************
    Received: from MIT-AI by MIT-OZ via Chaosnet; 27 Jun 85 13:06-EDT
    Date: Thu, 27 Jun 85 13:07:16 EDT
    From: Communications Satellite <COMSAT%MIT-AI.ARPA@MIT-MC.ARPA>
    Subject: Msg of Thursday, 27 June 1985 13:07-EDT
    To: PARKER@MIT-OZ
    Message-ID: <[MIT-AI.ARPA].2344.850627>

    ============ A copy of your message is being returned, because: ============
    "PARKER" at MIT-AI.ARPA is an unknown recipient.
	    Will try sending to the file "USERS3;PARKER MAIL".
    ============ Failed message follows: ============
    Received: from MIT-OZ by MIT-AI.ARPA via Chaosnet; 27 JUN 85  13:07:14 EDT
    Date: Thu 27 Jun 85 13:06:39-EDT
    From: Randy Parker <PARKER@MIT-OZ>
    Subject: testing...
    To: parker@MIT-AI


    Reagan just put PARKER@AI on one of my letters so I
    am checking to see whether this somehow wins or whether it
    is just broken.
    -------


22-Oct-85 23:48:39-EDT,1673;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 19:49-EDT
Date: Wed, 10 Jul 85 19:49:22 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  CL declare doesn't work in LET
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Wed 10 Jul 85 17:19 EDT from Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].570961.850710.GUMBY>

    Date: Wed, 10 Jul 85 17:19 EDT
    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

        Date: Tue,  9 Jul 85 22:21:49 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

        In Symbolics 3640 Release 6.0, MCC-Site 5.0,
        microcode TMC5-IO4-ST506-MIC 319, 

        (in Common-lisp)

        declarations inside LET are not handled correctly by the compiler, to
        whit compiling:

        (defun bar (key)
          (let ((a (member key *some-list*)))
    	(declare (special *some-list*))
    	(do-something-with a)))

        generates the complaint that *SOME-LIST* is unknown.  

    No, this is the proper behavior.  The initialization clause for the
    LETted variable is not considered to be part of the body of the LET, so
    the declaration does not apply to it.  You should either use LOCALLY or
    PROCLAIM it to be special.

I don't believe it is correct, or at least consistent.  The silver
bible says on page 155 that:
(defun foo (x &optional (y *print-circle*))
  (declare (special *print-circle*))
  ...)

causes *print-circle* to be declared special.  Since think of defun
and let both as macrological sugar for lambda, I expect them to behave
consistently wrt bindings.
22-Oct-85 23:48:39-EDT,5560;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 20:20-EDT
Received: from MCC.ARPA by MIT-MC.ARPA.ARPA; 10 Jul 85 20:20:26 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Wed 10 Jul 85 19:17:36-CDT
Date: Wed, 10 Jul 85 19:17 CDT
From: David Vinayak Wallace <AI.Gumby@MCC-AI>
Subject: DEFSYSTEM with common-lisp
To: bug-lispm%mc@MCC-AI
Message-ID: <850710191737.4.GUMBY@ARIES.MCC>

In Symbolics 3640 Release 6.0, MCC-Site 5.0,
microcode TMC5-IO4-ST506-MIC 319, on Aries:

In a buffer with syntax common-lisp, I tried to evaluate the following
form (it works fine in version Z):

(defsystem eclat
  (:name "Eclat")
  (:short-name "@")
  (:package eclat)
  (:pathname-default "h:e;")
  (:module library "Atlib")
  (:module symbols "Symtab")
  (:module output ("Output" "Device"))
  (:module language "Lingua")
  (:module core ("Switch" "Atsign"))
  (:compile-load library)
  (:compile-load symbols (:fasload library))
  (:compile-load output (:fasload library))
  (:compile-load language (:fasload library symbols))
  (:compile-load core (:fasload library symbols language output)))

>>Trap: The first argument given to the ZETALISP-SYSTEM:INTERNAL-= instruction, #\e, was not a number.
While in the function ZL:CHAR-EQUAL  ZL:MEM  (:METHOD FS:LOGICAL-PATHNAME :PARSE-NAMESTRING)

ZL:CHAR-EQUAL:  (P.C. = 3)
   Arg 0 (CH1): #\e
   Arg 1 (CH2): 32

ZL:MEM:  (P.C. = 10)
   Arg 0 (PRED): #<DTP-COMPILED-FUNCTION ZL:CHAR-EQUAL 2107664>
   Arg 1 (ITEM): #\e
   Arg 2 (LIST): (32 137)

(:METHOD FS:LOGICAL-PATHNAME :PARSE-NAMESTRING):  (P.C. = 33)
   Arg 0 (SELF): #P"H: FOO; FOO LISP >"
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:LOGICAL-PATHNAME -- 8. IV's, 3. FL's 104206646>
   Arg 2 (OPERATION): :PARSE-NAMESTRING
   Arg 3 (IGNORE): T
   Arg 4 (NAMESTRING): "h:e;"
   Arg 5 (START): 2
   Arg 6 (END): 4

FS:PARSE-PATHNAME:  (P.C. = 301)
   Arg 0 (THING): "h:e;"
   Arg 1 (WITH-RESPECT-TO): NIL
   Arg 2 (DEFAULTS): ((NIL))

FS:MERGE-PATHNAMES:  (P.C. = 31)
   Arg 0 (PATHNAME): "h:e;"
   Arg 1 (DEFAULTS): ((NIL))
   --Defaulted args:--
   Arg 2 (DEFAULT-VERSION): :NEWEST

(:PROPERTY :PATHNAME-DEFAULT SI:DEFSYSTEM-MACRO):  (P.C. = 26)
   Arg 0 (.FORM.): (:PATHNAME-DEFAULT "h:e;")
   Arg 1 (.ENV.): NIL

SI:CALL-DEFSYSTEM-MACRO:  (P.C. = 34)
   Arg 0 (FORM): (:PATHNAME-DEFAULT "h:e;")

SI:DEFSYSTEM-1:  (P.C. = 57)
   Arg 0 (NAME): ECLAT
   Arg 1 (OPTIONS): ((:NAME "Eclat") (:SHORT-NAME "@") (:PACKAGE ECLAT) (:PATHNAME-DEFAULT "h:e;") (:MODULE LIBRARY "Atlib") (:MODULE SYMBOLS "Symtab") (:MODULE OUTPUT ("Output" "Device")) (:MODULE LANGUAGE "Lingua") (:MODULE CORE ("Switch" "Atsign")) (:COMPILE-LOAD LIBRARY) ...)
   --Defaulted args:--
   Arg 2 (ADD-P): T

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (DEFSYSTEM ECLAT (:NAME "Eclat") (:SHORT-NAME "@") (:PACKAGE ECLAT) (:PATHNAME-DEFAULT "h:e;") (:MODULE LIBRARY "Atlib") (:MODULE SYMBOLS "Symtab") (:MODULE OUTPUT ("Output" "Device")) (:MODULE LANGUAGE "Lingua") ...)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

ZWEI:EVAL-PRINT:  (P.C. = 3)
   Arg 0 (OBJECT): (DEFSYSTEM ECLAT (:NAME "Eclat") (:SHORT-NAME "@") (:PACKAGE ECLAT) (:PATHNAME-DEFAULT "h:e;") (:MODULE LIBRARY "Atlib") (:MODULE SYMBOLS "Symtab") (:MODULE OUTPUT ("Output" "Device")) (:MODULE LANGUAGE "Lingua") ...)

COMPILER:PROCESS-FORMS-FROM-STREAM:  (P.C. = 117)
   Arg 0 (INPUT-STREAM): #<INTERVAL-STREAM 15602515>
   Arg 1 (PROCESS-FUNCTION): #<DTP-COMPILED-FUNCTION ZWEI:EVAL-PRINT 31575120>
   --Defaulted args:--
   Arg 2 (FOR-FILE): NIL
   Arg 3 (AREA-FOR-READING): NIL

ZWEI:COMPILE-INTERVAL:  (P.C. = 317)
   Arg 0 (COMPILE-P): NIL
   Arg 1: T
   Arg 2: T
   Arg 3 (BP1): (#"(defsystem eclat" 0)
   Arg 4 (BP2): (#"" 0)
   Arg 5 (IN-ORDER-P): T
   Arg 6 (SPECIAL-COMPILER-FUNCTION): NIL
   Arg 7: NIL

ZWEI:COMPILE-PRINT-INTERVAL:  (P.C. = 121)
   Arg 0 (BP1): (#"(defsystem eclat" 0)
   Arg 1 (BP2): (#"" 0)
   Arg 2 (IN-ORDER-P): T
   Arg 3 (COMPILE-P): NIL
   Arg 4 (DEFINITION-NAME): #"System ECLAT"
   Arg 5 (MODE-NAME): #"Evaluating"
   Arg 6 (ECHO-NAME): #"evaluated."
   Arg 7 (USE-TYPEOUT): T
   Arg 8 (DEFVAR-HACK): T
   Arg 9 (SPECIAL-COMPILER-FUNCTION): NIL

ZWEI:COMPILE-DEFINITION-INTERNAL:  (P.C. = 100)
   Arg 0 (COMPILE-P): NIL
   Arg 1 (MODE-NAME): #"Evaluating"
   Arg 2 (ECHO-NAME): #"evaluated."
   Arg 3 (USE-TYPEOUT): T
   --Defaulted args:--
   Arg 4 (DEFVAR-HACK): T
   Arg 5 (SPECIAL-COMPILER-FUNCTION): NIL

ZWEI:COM-EVALUATE-REGION-VERBOSE:  (P.C. = 7)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-EVALUATE-REGION-VERBOSE
   Arg 1 (CHAR): 357
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 357

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:40-EDT,2644;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 20:23-EDT
Date: Wed, 10 Jul 85 20:23:51 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  vector-push-extend doesn't work on strings
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Wed 10 Jul 85 17:18 EDT from Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].570990.850710.GUMBY>

    Date: Wed, 10 Jul 85 17:18 EDT
    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

        Date: Tue,  9 Jul 85 22:24:47 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

        In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
        microcode TMC5-MIC 319, FEP 24

        (in common-lisp)

        But (typep "foo" 'vector) returns true.

    It does for me.  Could you please give an example?

Here's a backtrace:

Now I realise strings aren't REQUIRED to have fill pointers, so I
suppose this fell through the cracks.  Still, it would be a useful
thing to have.

>>Trap: The array given to the ARRAY-LEADER instruction, "foo", does not have a leader.
While in the function ZL:ARRAY-PUSH  ZL:ARRAY-PUSH-EXTEND  VECTOR-PUSH-EXTEND

ZL:ARRAY-PUSH:  (P.C. = 4)
   Arg 0 (ARRAY): "foo"
   Arg 1 (X): #\a

ZL:ARRAY-PUSH-EXTEND:  (P.C. = 7)
   Arg 0 (ARRAY): "foo"
   Arg 1 (DATA): #\a
   Arg 2 (EXTENSION): NIL

VECTOR-PUSH-EXTEND:  (P.C. = 6)
   Arg 0 (NEW-ELEMENT): #\a
   Arg 1 (VECTOR): "foo"
   --Defaulted args:--
   Arg 2 (EXTENSION): NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (VECTOR-PUSH-EXTEND #\a "foo")
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 11340101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 11340106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 1600240 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 1600240 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:40-EDT,2013;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 21:27-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 10 JUL 85  21:27:15 EDT
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 10 Jul 85 21:26-EDT
Date: Wed, 10 Jul 85 21:27 EDT
From: Mark H. Shirley <MHS@MIT-MC.ARPA>
To: Bug-Lispm@MIT-MC.ARPA
Message-ID: <850710212713.4.MHS@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, Funny Label Private Patch, on Lisp Machine Jimi Hendrix:

I'm having a real problem creating a simple utility for deciding when the
source for an object (e.g. a function) has changed and reloading it.  That is,
before using it, check to see whether or not it needs to be reloaded.

These objects are stored in .lisp files, and they may either be compiled or
not, and I don't know or care.  And therein lies the problem.  It seems to me
that the existing facilities for keeping track of loaded versions only really
do so for the latest BINARY file.

I tried this experiment:

(1) Create a buffer with a single definition, save it (version 1), compile it
(2) Load the compiled file (version 1)
(3) Modify the buffer, save it (version 2), 
(4) Delete the buffer.  This is to get (:DEFUN-METHOD ZWEI:REVERT-FROM-STREAM)
    to print the "(loaded version is ~D)" message.
(5) m-. the function, (loaded version is 1, which is correct)
(6) Explicitly load the latest .lisp file (version 2)
(7) Modify the buffer, save it (version 3)
(8) Delete the buffer
(9) m-. the function, (loaded version is 1),
    *WHICH IS INCORRECT*

A function's :source-file-name property points at generic pathnames.  The only
place I could find where those pathnames were annotated with the true pathname
is in SI:BIN-OP-FILE-ATTRIBUTE-LIST, which maintains two properties
:BINARY-SOURCE-FILE-ORIGINAL-TRUENAME, and :QFASL-SOURCE-FILE-UNIQUE-ID.

Seems like the editor and si:readfile-internal should maintain some pointer to
the truename also.  Am I missing something?
22-Oct-85 23:48:40-EDT,805;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 10 Jul 85 22:17-EDT
Date: Wed, 10 Jul 85 22:17:17 EDT
From: Henry Minsky <HQM@MIT-MC.ARPA>
Subject: Terminal emulator program in release 6 is awful
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].571157.850710.HQM>


  I have been having lots of trouble dialing up from a lispm
using the Telnet (select-t) program. The problem is that the
terinal-emulator software doesn't seem to work very well. 

I try delcaring myself as either an ambassador or vt100, on the system I dial up
to, but I can never seem to get enough cursor control etc to run emacs or
simpler display-using facilities..

Is there something filtering out some of the display codes before they
can be seen, or is the terminal emulator just a little misinformed?

22-Oct-85 23:48:40-EDT,1577;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 09:05-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 09:06:03 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272771; Thu 11-Jul-85 09:03:18-EDT
Date: Thu, 11 Jul 85 09:04 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: vector-push-extend doesn't work on strings
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].570990.850710.GUMBY>
Message-ID: <850711090425.3.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 20:23:51 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	Date: Wed, 10 Jul 85 17:18 EDT
	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

	    Date: Tue,  9 Jul 85 22:24:47 EDT
	    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
	    microcode TMC5-MIC 319, FEP 24

	    (in common-lisp)

	    But (typep "foo" 'vector) returns true.

	It does for me.  Could you please give an example?

    Here's a backtrace:

    Now I realise strings aren't REQUIRED to have fill pointers, so I
    suppose this fell through the cracks.  Still, it would be a useful
    thing to have.

    >>Trap: The array given to the ARRAY-LEADER instruction, "foo", does not have a leader.
    While in the function ZL:ARRAY-PUSH  ZL:ARRAY-PUSH-EXTEND  VECTOR-PUSH-EXTEND

VECTOR-PUSH-EXTEND is defined in the CLM to accept only vectors with
fill pointers.

22-Oct-85 23:48:41-EDT,1491;000000000000  
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 09:32-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-XX.ARPA with TCP; Thu 11 Jul 85 09:33:47-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272791; Thu 11-Jul-85 09:29:46-EDT
Date: Thu, 11 Jul 85 09:32 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: GC-IMMEDIATELY woes
To: Schoen@SUMEX-AIM.ARPA, bug-lispm%MIT-OZ@MIT-XX.ARPA
In-Reply-To: The message of 10 Jul 85 03:50-EDT from Eric Schoen <Schoen@SUMEX-AIM.ARPA>
Message-ID: <850711093232.7.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Wed 10 Jul 85 00:50:39-PDT
    From: Eric Schoen <Schoen@SUMEX-AIM.ARPA>

    I've been running a rather long machine simulation experiment which requires
    the use of the garbage collector to complete.  Unfortunately, I end up having
    to call GC-IMMEDIATELY in the middle of a simulation run, and crash (out of
    swap space) almost precisely 15 minutes later.

    When I call GC-IMMEDIATELY, I've got about 4.1 MW of dynamic space, 4.6 MW of
    free space, and 29 MW of static space.  I believe the swapping band is 67.5
    MW.  When I call GC-IMMEDIATELY, I get no warning about possibly not being
    able to complete the GC.  

    I'm running in release 6.  Anybody seen this before?

Is the simulation still running when you do the GC-IMMEDIATELY?

I hope you have been using the ephemeral GC?
    (GC-ON :EPHEMERAL T :DYNAMIC t-or-nil)

22-Oct-85 23:48:41-EDT,5203;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 09:38-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 09:37:19 EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272798; Thu 11-Jul-85 09:34:12-EDT
Date: Thu, 11 Jul 85 09:36 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: Apiary-6 Fep1 Partition Loss
To: Tomr@OZ, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850710100118.2.TOMR@APIARY-6>,
             The message of 10 Jul 85 10:01-EDT from Tomr@OZ,
             <850710100118.2.TOMR@APIARY-6>,
             The message of 10 Jul 85 10:06-EDT from Tomr@OZ,
             <850710100625.3.TOMR@APIARY-6>
Message-ID: <850711093657.8.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 10:01 EDT
    From: Thomas Reinhardt <Tomr@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

Am I wrong, or is this a media error?

    This is a very hard bug to reproduce.  I've been trying, but, until now,
    without any luck.  Anyhow, the %dcw-read32 on Unit 1 is exactly what it was
    doing last week, until Paul Neal replaced several [3 ?] boards, IO paddles, I
    think.

    Moreoever, I'm willing to bet that if I boot the machine and attempt to Mount
    Disk Unit 1, I'll get a Sector n-1 not found error.
    This is what I'll do, and should my guesswork prove correct, I will leave it
    in that state anticipating the arrival of Paul or someone from Symbolics.

    Thanks,

    TomR

    PS:> Sorry I included all of the stack, but one never knows... .

    >>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ32 on unit 1.,
	       Irrecoverable disk error,
	       1. pending transfer associated with this disk event aborted.
    While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

    SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

    SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 1 (TASK-ID): 0

    SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

    SI:DISK-IO:  (P.C. = 175)
       Arg 0 (MODE): :READ
       Arg 1 (DISK-ARRAYS): #<ART-Q-288 44560155>
       Arg 2 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 3 (DPN): 67108864
       Arg 4 (N-BLOCKS): NIL
       Local 4 (N-BLOCKS): 1
       Arg 5 (HANG-P): T

    SYS:DISK-READ:  (P.C. = 15)
       Arg 0 (DISK-ARRAYS): #<ART-Q-288 44560155>
       Arg 1 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 2 (DPN): 67108864
       --Defaulted args:--
       Arg 3 (N-BLOCKS): NIL
       Arg 4 (HANG-P): T

    SI:FEP-DIRECTORY-READ:  (P.C. = 25)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
       Arg 2 (DIRECTORY): :ROOT
       Arg 3 (DISK-BLOCK): #<ART-Q-288 44560155>

    SI:FEP-DIRECTORY-LOOKUP:  (P.C. = 35)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    SI:FEP-FILE-LOOKUP:  (P.C. = 4)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    SI:FEP-FILE-OPEN:  (P.C. = 24)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    ----------------
    Date: Wed, 10 Jul 85 10:06 EDT
    From: Thomas Reinhardt <Tomr@OZ>
    Subject: Follow Up on Previous Message, Ap6 File Lossage.
    To: BUG-LISPM@MIT-MC.ARPA
    Message-ID: <850710100625.3.TOMR@APIARY-6>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

    Instead of booting the machine, I tried (si:mount-disk-unit 1) from within the
    same frame...i.e., the debugger.  I don't know if this would result in the 
    Sector n-1 Not Found error that one gets in the Fep, but I suspect it does.

    For your viewing pleasure... .

    Cheers,

    TOMR


    >>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ-HEADER on unit 1.,
	       Irrecoverable disk error,
	       1. pending transfer associated with this disk event aborted.
    While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

    SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

    SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>
       Arg 1 (TASK-ID): 0

    SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

    SI:MOUNT-DISK-UNIT:  (P.C. = 61)
       Arg 0 (UNIT): 1

    SI:*EVAL:  (P.C. = 403)
       Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
       Local 0 (FORM): NIL
       --Defaulted args:--
       Arg 1 (ENV): NIL
       Arg 2 (HOOK): NIL

    DBG:EVAL-IN-ERROR-ENVIRONMENT:  (P.C. = 365)
       Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
       Arg 1 (BIND-STREAMS): T

22-Oct-85 23:48:42-EDT,5302;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 09:39-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 09:37:37 EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 272800; Thu 11-Jul-85 09:34:46-EDT
Date: Thu, 11 Jul 85 09:37 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: Apiary-6 Fep1 Partition Loss
To: Tomr@OZ.mit, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850710100118.2.TOMR@APIARY-6>,
             The message of 10 Jul 85 10:01-EDT from Tomr@OZ,
             <850710100118.2.TOMR@APIARY-6>,
             The message of 10 Jul 85 10:06-EDT from Tomr@OZ,
             <850710100625.3.TOMR@APIARY-6>
Supersedes: <850711093657.8.SWM@THAMES.SCRC.Symbolics.COM>
Message-ID: <850711093729.9.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 10:01 EDT
    From: Thomas Reinhardt <Tomr@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

Am I wrong, or is this a media error?

    This is a very hard bug to reproduce.  I've been trying, but, until now,
    without any luck.  Anyhow, the %dcw-read32 on Unit 1 is exactly what it was
    doing last week, until Paul Neal replaced several [3 ?] boards, IO paddles, I
    think.

    Moreoever, I'm willing to bet that if I boot the machine and attempt to Mount
    Disk Unit 1, I'll get a Sector n-1 not found error.
    This is what I'll do, and should my guesswork prove correct, I will leave it
    in that state anticipating the arrival of Paul or someone from Symbolics.

    Thanks,

    TomR

    PS:> Sorry I included all of the stack, but one never knows... .

[I edited a bunch of stuff out]

    >>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ32 on unit 1.,
	       Irrecoverable disk error,
	       1. pending transfer associated with this disk event aborted.
    While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

    SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

    SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 1 (TASK-ID): 0

    SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562023>

    SI:DISK-IO:  (P.C. = 175)
       Arg 0 (MODE): :READ
       Arg 1 (DISK-ARRAYS): #<ART-Q-288 44560155>
       Arg 2 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 3 (DPN): 67108864
       Arg 4 (N-BLOCKS): NIL
       Local 4 (N-BLOCKS): 1
       Arg 5 (HANG-P): T

    SYS:DISK-READ:  (P.C. = 15)
       Arg 0 (DISK-ARRAYS): #<ART-Q-288 44560155>
       Arg 1 (DISK-EVENT): #<ART-2B-32 44562023>
       Arg 2 (DPN): 67108864
       --Defaulted args:--
       Arg 3 (N-BLOCKS): NIL
       Arg 4 (HANG-P): T

    SI:FEP-DIRECTORY-READ:  (P.C. = 25)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">
       Arg 2 (DIRECTORY): :ROOT
       Arg 3 (DISK-BLOCK): #<ART-Q-288 44560155>

    SI:FEP-DIRECTORY-LOOKUP:  (P.C. = 35)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    SI:FEP-FILE-LOOKUP:  (P.C. = 4)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    SI:FEP-FILE-OPEN:  (P.C. = 24)
       Arg 0 (ACCESS-PATH): #<FEP-FILE-ACCESS-PATH FEP1 32125070>
       Arg 1 (PATHNAME): #<FEP-PATHNAME "FEP1:>lmfs.file.1">

    ----------------
    Date: Wed, 10 Jul 85 10:06 EDT
    From: Thomas Reinhardt <Tomr@OZ>
    Subject: Follow Up on Previous Message, Ap6 File Lossage.
    To: BUG-LISPM@MIT-MC.ARPA
    Message-ID: <850710100625.3.TOMR@APIARY-6>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-6:

    Instead of booting the machine, I tried (si:mount-disk-unit 1) from within the
    same frame...i.e., the debugger.  I don't know if this would result in the 
    Sector n-1 Not Found error that one gets in the Fep, but I suspect it does.

    For your viewing pleasure... .

    Cheers,

    TOMR


    >>Error: %DISK-ERROR-DEVICE-CHECK during a %DCW-READ-HEADER on unit 1.,
	       Irrecoverable disk error,
	       1. pending transfer associated with this disk event aborted.
    While in the function SI:SIGNAL-DISK-ERROR  SI:WAIT-FOR-DISK-EVENT-TASK  SI:WAIT-FOR-DISK-EVENT

    SI:SIGNAL-DISK-ERROR:  (P.C. = 41)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

    SI:WAIT-FOR-DISK-EVENT-TASK:  (P.C. = 64)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>
       Arg 1 (TASK-ID): 0

    SI:WAIT-FOR-DISK-EVENT:  (P.C. = 21)
       Arg 0 (DISK-EVENT): #<ART-2B-32 44562004>

    SI:MOUNT-DISK-UNIT:  (P.C. = 61)
       Arg 0 (UNIT): 1

    SI:*EVAL:  (P.C. = 403)
       Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
       Local 0 (FORM): NIL
       --Defaulted args:--
       Arg 1 (ENV): NIL
       Arg 2 (HOOK): NIL

    DBG:EVAL-IN-ERROR-ENVIRONMENT:  (P.C. = 365)
       Arg 0 (FORM): (SI:MOUNT-DISK-UNIT 1)
       Arg 1 (BIND-STREAMS): T

22-Oct-85 23:48:42-EDT,677;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 10:19-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 11 JUL 85  10:19:53 EDT
Received: from MIT-APIARY-9 by MIT-OZ via Chaosnet; 11 Jul 85 10:18-EDT
Date: Thu, 11 Jul 85 10:18 EDT
From: Thomas Reinhardt <Tomr@OZ>
Subject: Apiary-6 Fep1 Partition Loss
To: SWM@SCRC-QUABBIN.ARPA, Tomr@OZ, BUG-LISPM@MIT-MC.ARPA
cc: TomR@MIT-XX.ARPA
In-Reply-To: <850711093729.9.SWM@THAMES.SCRC.Symbolics.COM>
Message-ID: <850711101856.1.TOMR@APIARY-9>

You are correct, it is a Media error.  I should have sent it directly to PDN,
Paul Neal, rather than through Bug-Lispm. 

Sorry for the inconvenience.

TOMR
22-Oct-85 23:48:42-EDT,765;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 12:45-EDT
Received: from THINK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 12:45:32 EDT
Received: by THINK.ARPA with CHAOS id AA15475; Thu, 11 Jul 85 12:42:29 edt
Date: Thu, 11 Jul 85 12:42 EDT
From: Paul Rosenblum <PSR@THINK.ARPA>
Subject: flashing braces in Zmacs
To: bug-lispm%oz.mit@THINK.ARPA
Message-Id: <850711124217.1.PSR@UBALDO.ARPA>


I want curly braces to flash in TeX mode.  I made a tex-mode flavor for
zwei built on major-mode and set the syntax of { and } to be like ( and
).  Still {} didn't flash. I included the lisp-syntax-mixin.  Still no
flashing.

After a bunch more poking, I still can't get them to flash.  Can you
tell me how?  Maybe this should be documented?

Paul
22-Oct-85 23:48:43-EDT,2123;000000000000
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 13:46-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-XX.ARPA with TCP; Thu 11 Jul 85 13:47:31-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273064; Thu 11-Jul-85 13:43:24-EDT
Date: Thu, 11 Jul 85 13:43 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: GC-IMMEDIATELY woes
To: Eric Schoen <Schoen@SUMEX-AIM.ARPA>
cc: bug-lispm%MIT-OZ@MIT-XX.ARPA
In-Reply-To: The message of 10 Jul 85 03:50-EDT from Eric Schoen <Schoen@SUMEX-AIM.ARPA>
Message-ID: <850711134335.8.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Wed 10 Jul 85 00:50:39-PDT
    From: Eric Schoen <Schoen@SUMEX-AIM.ARPA>

    I've been running a rather long machine simulation experiment which requires
    the use of the garbage collector to complete.  Unfortunately, I end up having
    to call GC-IMMEDIATELY in the middle of a simulation run, and crash (out of
    swap space) almost precisely 15 minutes later.

    When I call GC-IMMEDIATELY, I've got about 4.1 MW of dynamic space, 4.6 MW of
    free space, and 29 MW of static space.  I believe the swapping band is 67.5
    MW.  When I call GC-IMMEDIATELY, I get no warning about possibly not being
    able to complete the GC.  

    I'm running in release 6.  Anybody seen this before?

When you call GC-IMMEDIATELY, are there other processes in the machine running
and doing a significant amount of consing, or have you stopped everything while
you do the GC-IMMEDIATELY?  GC-IMMEDIATELY assumes it has the machine all to itself,
but if other processes are using up a significant amount of swap space you can
run out.  With the numbers you have above, it looks like you have just barely
enough swap space left to complete the GC.

There are also some bugs in the paging system that will make you run out of swap
space when it looks like there is still a tiny amount left (usually a few hundred
pages, but the exact amount depends on how your disk is configured, where the
bad blocks happen to fall, unpredictable things like that).

22-Oct-85 23:48:43-EDT,1319;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 14:02-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 13:55:11 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273073; Thu 11-Jul-85 13:52:22-EDT
Date: Thu, 11 Jul 85 13:52 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
To: Mark H. Shirley <MHS@MIT-MC.ARPA>
cc: Bug-Lispm@MIT-MC.ARPA
In-Reply-To: <850710212713.4.MHS@JIMI>
Message-ID: <850711135238.9.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 21:27 EDT
    From: Mark H. Shirley <MHS@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, Funny Label Private Patch, on Lisp Machine Jimi Hendrix:

    I'm having a real problem creating a simple utility for deciding when the
    source for an object (e.g. a function) has changed and reloading it.  That is,
    before using it, check to see whether or not it needs to be reloaded.

    These objects are stored in .lisp files, and they may either be compiled or
    not, and I don't know or care.  And therein lies the problem.  It seems to me
    that the existing facilities for keeping track of loaded versions only really
    do so for the latest BINARY file.

That's right.

22-Oct-85 23:48:43-EDT,2509;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 14:02-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 13:58:15 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273077; Thu 11-Jul-85 13:55:29-EDT
Date: Thu, 11 Jul 85 13:55 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
To: Mark H. Shirley <MHS@MIT-MC.ARPA>
cc: Bug-Lispm@MIT-MC.ARPA
In-Reply-To: <850710212713.4.MHS@JIMI>
Supersedes: <850711135238.9.MOON@EUPHRATES.SCRC.Symbolics.COM>
Message-ID: <850711135543.0.MOON@EUPHRATES.SCRC.Symbolics.COM>

[Please disregard the prematurely-sent version of this message I sent a couple
of minutes ago.]

    Date: Wed, 10 Jul 85 21:27 EDT
    From: Mark H. Shirley <MHS@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, Funny Label Private Patch, on Lisp Machine Jimi Hendrix:

    I'm having a real problem creating a simple utility for deciding when the
    source for an object (e.g. a function) has changed and reloading it.  That is,
    before using it, check to see whether or not it needs to be reloaded.

    These objects are stored in .lisp files, and they may either be compiled or
    not, and I don't know or care.  And therein lies the problem.  It seems to me
    that the existing facilities for keeping track of loaded versions only really
    do so for the latest BINARY file.

That's right, if you don't use MAKE-SYSTEM.

    A function's :source-file-name property points at generic pathnames.  The only
    place I could find where those pathnames were annotated with the true pathname
    is in SI:BIN-OP-FILE-ATTRIBUTE-LIST, which maintains two properties
    :BINARY-SOURCE-FILE-ORIGINAL-TRUENAME, and :QFASL-SOURCE-FILE-UNIQUE-ID.

    Seems like the editor and si:readfile-internal should maintain some pointer to
    the truename also.  Am I missing something?

Yes.  MAKE-SYSTEM is the tool that provides for keeping track of what versions of
things are loaded.  I realize it has some awkwardnesses and some bugs, but it is
the tool we currently provide.  Note that file versions are kept track of by creation
date.  File version numbers stored in places such as :BINARY-SOURCE-FILE-ORIGINAL-TRUENAME
are not useful for your purposes, since some inferior file systems (Unix for example)
do not offer version numbers, so a general-purpose tool cannot rely on the existence
of version numbers.

22-Oct-85 23:48:44-EDT,571;000000000000   
Received: from MIT-MERLIN by MIT-OZ via Chaosnet; 11 Jul 85 14:13-EDT
Date: Thursday, 11 July 1985, 14:12-EDT
From: Richard C. Waters <DICK at MIT-OZ>
Subject: bug in format code ~F
To: BUG-LISPM at MIT-OZ

In Release 4.5, Experimental Knowledge-Based-Editor 360.6, FEP 18,
site configuration 88, Sorcerer's Apprentice, on PA Lisp Machine Merlin:

I cannot figure out any way to get 0.00001 to print out
as 0.00001 instead of 1.0e-5.  note that as far as I can tell,
~10F should print it out as 0.00001, but it too prints it out as 1.0e-5.

				Dick Waters
22-Oct-85 23:48:44-EDT,2859;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 15:12-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 14:31:18 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273110; Thu 11-Jul-85 14:16:08-EDT
Date: Thu, 11 Jul 85 14:16 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: CL declare doesn't work in LET
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>,
    Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].570961.850710.GUMBY>
Message-ID: <850711141614.2.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 19:49:22 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	Date: Wed, 10 Jul 85 17:19 EDT
	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

	    Date: Tue,  9 Jul 85 22:21:49 EDT
	    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	    In Symbolics 3640 Release 6.0, MCC-Site 5.0,
	    microcode TMC5-IO4-ST506-MIC 319, 

	    (in Common-lisp)

	    declarations inside LET are not handled correctly by the compiler, to
	    whit compiling:

	    (defun bar (key)
	      (let ((a (member key *some-list*)))
	    (declare (special *some-list*))
	    (do-something-with a)))

	    generates the complaint that *SOME-LIST* is unknown.  

	No, this is the proper behavior.  The initialization clause for the
	LETted variable is not considered to be part of the body of the LET, so
	the declaration does not apply to it.  You should either use LOCALLY or
	PROCLAIM it to be special.

    I don't believe it is correct, or at least consistent.  The silver
    bible says on page 155 that:
    (defun foo (x &optional (y *print-circle*))
      (declare (special *print-circle*))
      ...)

    causes *print-circle* to be declared special.  Since think of defun
    and let both as macrological sugar for lambda, I expect them to behave
    consistently wrt bindings.

LET is not macrological sugar for lambda in Common Lisp, due to complicated
reasons involving declarations.  Indeed, if you think for a minute you will
realize that if LET was a macro that expanded into LAMBDA, then it would be
impossible for the example you originally gave to behave the way you want it to
behave.

Neverthless, you (Gumby) are correct about how special declarations are supposed
to behave in Common Lisp (the manual is atrociously hard to understand in this
area).  Also, the language was changed at the last minute before the manual is
published, which is probably why our implementation is incorrect.  We ought to
fix our implementation at some point (both compiler and interpreter).  The
problem is that since Common Lisp and Zetalisp have incompatible rules for
declaration scoping, we can't easily be compatible with both at the same time.

22-Oct-85 23:48:44-EDT,2965;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 15:18-EDT
Received: from THINK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 15:15:42 EDT
Received: by THINK.ARPA with CHAOS id AA16903; Thu, 11 Jul 85 15:00:45 edt
Date: Thu, 11 Jul 85 15:00 EDT
From: Alan@[192.5.104.192]
Sender: PSR@[192.5.104.192]
Subject: ZWEI:SAVE-ALL-FILES is supposed to be CAREFULL!
To: BUG-LISPM@MIT-MC.ARPA
Message-Id: <850711150036.3.PSR@UBALDO.ARPA>

In Symbolics 3640 Release 6.0, Experimental ITM system 18.2,
Experimental Thinking Machines Goodies 13.4, Experimental QMS 12.0,
CM-SOFTWARE 12.3, microcode TMC5-IO4-ST506-MIC 319,
with Patchable TMC System Loaded, on St. Ubaldo:

This happened while doing a ZWEI:SAVE-ALL-FILES.  Foo!  It shouldn't do
anything but write the bits out to the filesystem.

>>Trap: The variable ZWEI:*MODE-LIST-SYNTAX-TABLE* is unbound.
While in the function ZWEI:LISP-PARSE-LINE  ZWEI:LISP-PARSE-LINE-MEMOIZED  ZWEI:STREAM-COPY-UNTIL-EOF-CHECKING-PARENTHESES

ZWEI:LISP-PARSE-LINE:  (P.C. = 15)
   Arg 0 (LINE): "% -*- Mode: Tex; -*-"
   Arg 1 (START-IN-STRING): NIL
   Arg 2 (START-INDEX): 0
   Arg 3 (END-INDEX): 20
   Local 4 (DEPTH): 0
   Local 5 (MINDEPTH): 0
   Local 6 (IN-STRING): NIL
   Local 7 (INDEX): 0
   Local 8 (CH): 37
   Local 9 (SYNTAX): NIL

ZWEI:LISP-PARSE-LINE-MEMOIZED:  (P.C. = 43)
   Arg 0 (LINE): "% -*- Mode: Tex; -*-"
   Arg 1 (START-IN-STRING): NIL
   --Defaulted args:--
   Arg 2 (START-INDEX): 0
   Arg 3 (END-INDEX): 20

ZWEI:STREAM-COPY-UNTIL-EOF-CHECKING-PARENTHESES:  (P.C. = 16)
   Arg 0 (INSTREAM): #<INTERVAL-STREAM 41355471>
   Arg 1 (OUTSTREAM): #<FILE-OUTPUT-CHARACTER-STREAM "GODOT: //u//psr//new-cgl.txt" 41355435>

ZWEI:STREAM-OUT-INTERVAL:  (P.C. = 45)
   Arg 0 (STREAM): #<FILE-OUTPUT-CHARACTER-STREAM "GODOT: //u//psr//new-cgl.txt" 41355435>
   Arg 1 (FROM-BP): ("% -*- Mode: Tex; -*-" 0 :NORMAL)
   Arg 2 (TO-BP): ("\end{document}" 14 :MOVES)
   Arg 3 (IN-ORDER-P): T
   Arg 4 (HACK-FONTS): NIL
   Arg 5 (WARN-IF-PARENTHESES-UNBALANCED): T

(:METHOD ZWEI:FILE-BUFFER-MIXIN :SAVE):  (P.C. = 145)  (from AQUINAS:>cal>muser)
   Arg 0 (SELF): #<FILE-BUFFER "new-cgl.txt //u//psr// GODOT:" 22440264>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:FILE-BUFFER-MIXIN -- 9. IV's, 0. FL's 104512643>
   Arg 2 (OPERATION): :SAVE

ZWEI:SAVE-BUFFER:  (P.C. = 203)
   Arg 0 (BUFFER): #<FILE-BUFFER "new-cgl.txt //u//psr// GODOT:" 22440264>

ZWEI:SAVE-ALL-FILES:  (P.C. = 47)
   --Defaulted args:--
   Arg 0 (ASK): T

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (ZWEI:SAVE-ALL-FILES)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

Rest of stack:
(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:48:45-EDT,2001;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 16:05-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6203; 11 Jul 85 16:09:34-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273238; Thu 11-Jul-85 16:02:43-EDT
Date: Thu, 11 Jul 85 16:02 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Evalhook
To: Walter Hamscher <hamscher@MIT-HTVAX.ARPA>,
    bug-lmdoc@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@OZ.mit
In-Reply-To: <850708210449.1.HAMSCHER@SINATRA>
Message-ID: <850711160259.1.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Mon, 8 Jul 85 21:04 EDT
    From: Walter Hamscher <hamscher@HTVAX>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, on Lisp Machine Frank Sinatra:

    What's going on with evalhook?  I typed in the example
    given in the manual (section DEBUG, p.33):

I don't understand your page reference, what manual is this?

    (defun hook (x)
      (terpri)
      (evalhook x 'hook-function))

    (defun hook-function (f)
      (let ((v (evalhook f 'hook-function)))
	(format t "form: ~s~%value: ~s~%" v)
	v))

    And running a simple example:

    (hook '(cons 1 2))

    crapped out and left me in the FEP.  Has the definition
    of evalhook (variable and/or function) changed?

When I try it it tells me that hook-function was called with
two arguments and only accepts one.  It doesn't go into the FEP.
Indeed, the hook function is called with two arguments these days.
The second argument is a lexical environment that can be passed
back to the EVALHOOK and EVAL functions.

BUG-LMDOC: The documentation of EVALHOOK (pp.289-291 of volume 4)
contains several errors, including the erroneous example quoted
above.  It looks like the documentation was not completely updated
to reflect the conversion of EVALHOOK to be compatible with Common
Lisp.  See me for more information.

22-Oct-85 23:48:45-EDT,1299;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 19:10-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 11 Jul 85 19:10:41 EDT
Received: from CUYAHOGA.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273437; Thu 11-Jul-85 19:07:45-EDT
Date: Thu, 11 Jul 85 19:09 EDT
From: Robert A. Cassels <Cassels@TENEX.SCRC.Symbolics.COM>
Subject: bug in format code ~F
To: DICK%MIT-OZ@MIT-MC.ARPA, BUG-LISPM%MIT-OZ@MIT-MC.ARPA
In-Reply-To: The message of 11 Jul 85 14:12-EDT from Richard C. Waters <DICK%MIT-OZ@MIT-MC.ARPA>
Message-ID: <850711190928.5.CASSELS@CUYAHOGA.SCRC.Symbolics.COM>

    Date: Thursday, 11 July 1985, 14:12-EDT
    From: Richard C. Waters <DICK%MIT-OZ@MIT-MC.ARPA>

    In Release 4.5, Experimental Knowledge-Based-Editor 360.6, FEP 18,
    site configuration 88, Sorcerer's Apprentice, on PA Lisp Machine Merlin:

    I cannot figure out any way to get 0.00001 to print out
    as 0.00001 instead of 1.0e-5.  note that as far as I can tell,
    ~10F should print it out as 0.00001, but it too prints it out as 1.0e-5.

ZetaLisp was always pretty weak on ways to print floating-point numbers.
The Common Lisp version of format ~F gives you what you want and much
more.  [But you probably won't find it in Rel 4.5.]

22-Oct-85 23:48:46-EDT,2085;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Jul 85 23:00-EDT
Received: from MIT-REAGAN.ARPA by MIT-MC.ARPA via Chaosnet; 11 JUL 85  23:00:14 EDT
Received: from JANIS by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6214; Thu 11-Jul-85 23:04:06-EDT
Date: Thu, 11 Jul 85 23:00 EDT
From: Randy Parker <PARKER@MIT-REAGAN.ARPA>
Subject: Bogus user host name
To: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
cc: Randy Parker <PARKER%OZ@MIT-AI.ARPA>, bug-lispm@MIT-REAGAN.ARPA
In-Reply-To: <850710175024.9.HORNIG@BIG.SCRC.Symbolics.COM>
Message-ID: <850711230004.5.PARKER@JANIS>

    Date: Wed, 10 Jul 85 17:50 EDT
    From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>

	Date: Thu, 27 Jun 85 16:29 EDT
	From: Randy Parker <PARKER@MIT-AI.ARPA>

	In Symbolics 3600 in Release 6.0, IP-TCP 29.0, AISite 9.4,
	microcode TMC5-MIC 319, FEP 18 on Lisp Machine Apiary-4:

	<<This was sent to bug-lispm@reagan to see if it would cause the from to
	read PARKER@MIT-AI, the bug that is being reported.>>

	In checking to see if mail to me at REAGAN would win (a Show Mailing
	List said it would (I didn't have a dir there, nor a mailbox), so I take
	it it gets it from the namespace entry), I sent a message from Zmail on
	ap4 to: parker@reagan (with my mail-network-host set to REAGAN).

	This first message below is what I received on OZ.
	Now I don't exist at AI (although I have a namespace entry there under a
	different name), so it shouldn't say From: PARKER@MIT-AI.  The second
	message was just a confirmation from COMSAT that things are indeed in a
	bad way.

    Does this still happen?  I looked at the namespace configuration and it
    shouldn't.  It should have put "PARKER%OZ@MIT-AI.ARPA" in the header.

Yes, it is doing that now.  I looked around last week and found
USER-PROPERTY ALL-MAIL-ADDRESSES-FORWARD YES 
in the AI site object.  It turns out that this was copied from SCRC
without really knowing what it did.  CJL deleted it and since then the
behavior is as you describe (except now that my mail address attribute has changed).
22-Oct-85 23:48:46-EDT,1939;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 00:12-EDT
Date: Fri, 12 Jul 85 00:12:17 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  vector-push-extend doesn't work on strings
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Thu 11 Jul 85 09:04 EDT from Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].572818.850712.GUMBY>

    Date: Thu, 11 Jul 85 09:04 EDT
    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
    To:   David Vinayak Wallace <GUMBY at MIT-MC.ARPA>
    cc:   BUG-LISPM at MIT-MC.ARPA
    Re:   vector-push-extend doesn't work on strings

        Date: Wed, 10 Jul 85 20:23:51 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    	Date: Wed, 10 Jul 85 17:18 EDT
    	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

    	    Date: Tue,  9 Jul 85 22:24:47 EDT
    	    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    	    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    	    microcode TMC5-MIC 319, FEP 24

    	    (in common-lisp)

    	    But (typep "foo" 'vector) returns true.

    	It does for me.  Could you please give an example?

        Here's a backtrace:

        Now I realise strings aren't REQUIRED to have fill pointers, so I
        suppose this fell through the cracks.  Still, it would be a useful
        thing to have.

        >>Trap: The array given to the ARRAY-LEADER instruction, "foo", does not have a leader.
        While in the function ZL:ARRAY-PUSH  ZL:ARRAY-PUSH-EXTEND  VECTOR-PUSH-EXTEND

    VECTOR-PUSH-EXTEND is defined in the CLM to accept only vectors with
    fill pointers.

Are you trying to avoid answering my question?  First you say it works
for you, then you say it never should.  If strings don't normally have
fill-pointers, how can I ensure that they do?  I don't see why they
shouldn't.  
22-Oct-85 23:48:46-EDT,1543;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 10:18-EDT
Date: Fri, 12 Jul 85 10:19:01 EDT
From: Mark H. Shirley <MHS@MIT-MC.ARPA>
To: Moon@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Thu 11 Jul 85 13:55 EDT from David A. Moon <Moon at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].573363.850712.MHS>

    [Please disregard the prematurely-sent version of this message I sent a
    couple of minutes ago.]

Oops.  I didn't see it in time.

    That's right, if you don't use MAKE-SYSTEM.

    Yes.  MAKE-SYSTEM is the tool that provides for keeping track of what
    versions of things are loaded.  I realize it has some awkwardnesses and
    some bugs, but it is the tool we currently provide.  Note that file
    versions are kept track of by creation date.  File version numbers stored
    in places such as :BINARY-SOURCE-FILE-ORIGINAL-TRUENAME are not useful for
    your purposes, since some inferior file systems (Unix for example) do not
    offer version numbers, so a general-purpose tool cannot rely on the
    existence of version numbers.

I'm using the creation dates in that patch I mentioned ... I don't even trust
version numbers to be monotonically increasing.  The reason I didn't use
MAKE-SYSTEM in the first place was that "modules" are constantly being added
and removed by my system, and I didn't see an easy way of telling MAKE-SYSTEM
about the new ones.  But maybe that's easier than I thought.  I'll look into
it.  Thank you for the suggestion.
22-Oct-85 23:48:46-EDT,2760;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 13:46-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 12 Jul 85 13:38:16 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 273987; Fri 12-Jul-85 13:35:19-EDT
Date: Fri, 12 Jul 85 13:35 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Knowing what version of a file is loaded
To: Mark H. Shirley <MHS@MIT-MC.ARPA>
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].573363.850712.MHS>
Message-ID: <850712133534.5.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Fri, 12 Jul 85 10:19:01 EDT
    From: Mark H. Shirley <MHS@MIT-MC.ARPA>

	[Please disregard the prematurely-sent version of this message I sent a
	couple of minutes ago.]

    Oops.  I didn't see it in time.

	That's right, if you don't use MAKE-SYSTEM.

	Yes.  MAKE-SYSTEM is the tool that provides for keeping track of what
	versions of things are loaded.  I realize it has some awkwardnesses and
	some bugs, but it is the tool we currently provide.  Note that file
	versions are kept track of by creation date.  File version numbers stored
	in places such as :BINARY-SOURCE-FILE-ORIGINAL-TRUENAME are not useful for
	your purposes, since some inferior file systems (Unix for example) do not
	offer version numbers, so a general-purpose tool cannot rely on the
	existence of version numbers.

    I'm using the creation dates in that patch I mentioned ... I don't even trust
    version numbers to be monotonically increasing.  The reason I didn't use
    MAKE-SYSTEM in the first place was that "modules" are constantly being added
    and removed by my system, and I didn't see an easy way of telling MAKE-SYSTEM
    about the new ones.  But maybe that's easier than I thought.  I'll look into
    it.  Thank you for the suggestion.

Something I didn't notice yesterday is that you probably were not looking in the
right place, since the information you need (if you decide you can't use MAKE-SYSTEM)
is already being maintained by the system for both binary and source files.  This
is the database that MAKE-SYSTEM uses, in fact.

(send (fs:parse-pathname "q:>moon>lispm-init.lisp.newest") :plist)
 => (:FILE-ID-PACKAGE-ALIST ((#<Package USER 123000000> (#<LMFS-PATHNAME "Q:>Moon>lispm-init.lisp.139"> . 2697249625))))

So what you have to do, given a generic pathname that you got from the source-file-name
system, is to decide whether the source or binary corresponding to that was loaded.
You really also ought to look for sources compiled out of editor buffers,
something like what ZWEI:SOURCE-COMPARE-GET-INSTALLED-BUFFER does.  Maybe someday
we'll clean all these facilities up and document them.

22-Oct-85 23:48:47-EDT,2420;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 15:58-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 12 Jul 85 15:57:45 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274192; Fri 12-Jul-85 15:54:44-EDT
Date: Fri, 12 Jul 85 15:56 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: vector-push-extend doesn't work on strings
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>,
    Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].572818.850712.GUMBY>
Message-ID: <850712155617.1.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 12 Jul 85 00:12:17 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	Date: Thu, 11 Jul 85 09:04 EDT
	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
	To:   David Vinayak Wallace <GUMBY at MIT-MC.ARPA>
	cc:   BUG-LISPM at MIT-MC.ARPA
	Re:   vector-push-extend doesn't work on strings

	    Date: Wed, 10 Jul 85 20:23:51 EDT
	    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

	    Date: Wed, 10 Jul 85 17:18 EDT
	    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

		Date: Tue,  9 Jul 85 22:24:47 EDT
		From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

		In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
		microcode TMC5-MIC 319, FEP 24

		(in common-lisp)

		But (typep "foo" 'vector) returns true.

	    It does for me.  Could you please give an example?

	    Here's a backtrace:

	    Now I realise strings aren't REQUIRED to have fill pointers, so I
	    suppose this fell through the cracks.  Still, it would be a useful
	    thing to have.

	    >>Trap: The array given to the ARRAY-LEADER instruction, "foo", does not have a leader.
	    While in the function ZL:ARRAY-PUSH  ZL:ARRAY-PUSH-EXTEND  VECTOR-PUSH-EXTEND

	VECTOR-PUSH-EXTEND is defined in the CLM to accept only vectors with
	fill pointers.

    Are you trying to avoid answering my question?  First you say it works
    for you, then you say it never should.  If strings don't normally have
    fill-pointers, how can I ensure that they do?  I don't see why they
    shouldn't.  

The example Hornig created (which you originally didn't supply) followed
the documentation and his string had a fill pointer.  Yours didn't.  I
think it is unreasonable to require all strings to have a fill pointer.

22-Oct-85 23:48:47-EDT,1512;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 16:07-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 12 Jul 85 16:04:15 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274203; Fri 12-Jul-85 16:01:22-EDT
Date: Fri, 12 Jul 85 16:02 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: WITH-OPEN-FILE suggestion
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569695.850709.GUMBY>
Message-ID: <850712160258.2.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 23:02:01 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 24

    IWBNI WITH-OPEN-FILE took a "generalized variable" (i.e. something
    acceptable to SETF).  I want to put a stream into a structure with
    something like:

    (let ((foo (make-bar)))
      (with-open-file ((bar-stream foo) "filename")
	(frob-bar bar)))


with-open-file normally expands into a LET, which gives you the scoping
rules of LET (lexical for non-special variables, dynamic in this process
only for special variables).  What is the scope of a generalized
variable and the interaction with multiple processes?

I also think it is too easy to accidentally snarf the stream out from
under the unwind-protect; such accidental snarfing could keep the file
open until catastrophy struck.

22-Oct-85 23:48:47-EDT,981;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 16:07-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 12 Jul 85 16:05:39 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274206; Fri 12-Jul-85 16:02:45-EDT
Date: Fri, 12 Jul 85 16:04 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: :which-operations should optionally take a substring
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].569701.850709.GUMBY>
Message-ID: <850712160421.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue,  9 Jul 85 23:04:04 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-MIC 319, FEP 24

    and only show messages which constain that substring.

This is a valid thing to want (noted).  :WHICH-OPERATIONS is the wrong
place to put it, though.

22-Oct-85 23:48:47-EDT,1373;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 16:32-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 12 Jul 85 16:32:31 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274257; Fri 12-Jul-85 16:29:19-EDT
Date: Fri, 12 Jul 85 16:30 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Terminal emulator program in release 6 is awful
To: Henry Minsky <HQM@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].571157.850710.HQM>
Message-ID: <850712163055.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 10 Jul 85 22:17:17 EDT
    From: Henry Minsky <HQM@MIT-MC.ARPA>


      I have been having lots of trouble dialing up from a lispm
    using the Telnet (select-t) program. The problem is that the
    terinal-emulator software doesn't seem to work very well. 

    I try delcaring myself as either an ambassador or vt100, on the system I dial up
    to, but I can never seem to get enough cursor control etc to run emacs or
    simpler display-using facilities..

    Is there something filtering out some of the display codes before they
    can be seen, or is the terminal emulator just a little misinformed?


How about providing a bug report herald.  There were many bugs of this
class fixed between 6.0 and the upcoming 6.1.

22-Oct-85 23:48:48-EDT,494;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 16:42-EDT
Date: Fri, 12 Jul 85 16:42:56 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  WITH-OPEN-FILE suggestion
To: DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Fri 12 Jul 85 16:02 EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
Message-ID: <[MIT-MC.ARPA].574056.850712.GUMBY>

Why can't with-open-file expand into a LETF?  How does LETF handle the
scoping problem?
22-Oct-85 23:48:48-EDT,2777;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 16:59-EDT
Date: Fri, 12 Jul 85 16:59:05 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  vector-push-extend doesn't work on strings
To: DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA, Hornig@SCRC-STONY-BROOK.ARPA
In-reply-to: Msg of Fri 12 Jul 85 15:56 EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
Message-ID: <[MIT-MC.ARPA].574087.850712.GUMBY>

    Date: Fri, 12 Jul 85 15:56 EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

        Date: Fri, 12 Jul 85 00:12:17 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    	Date: Thu, 11 Jul 85 09:04 EDT
    	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

    	    Date: Wed, 10 Jul 85 20:23:51 EDT
    	    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    	    Date: Wed, 10 Jul 85 17:18 EDT
    	    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

    		Date: Tue,  9 Jul 85 22:24:47 EDT
    		From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    		In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
    		microcode TMC5-MIC 319, FEP 24

    		(in common-lisp)

    		But (typep "foo" 'vector) returns true.

    	    It does for me.  Could you please give an example?

    	    Here's a backtrace:

    	    Now I realise strings aren't REQUIRED to have fill pointers, so I
    	    suppose this fell through the cracks.  Still, it would be a useful
    	    thing to have.

    	    >>Trap: The array given to the ARRAY-LEADER instruction, "foo", does not have a leader.
    	    While in the function ZL:ARRAY-PUSH  ZL:ARRAY-PUSH-EXTEND  VECTOR-PUSH-EXTEND

    	VECTOR-PUSH-EXTEND is defined in the CLM to accept only vectors with
    	fill pointers.

        Are you trying to avoid answering my question?  First you say it works
        for you, then you say it never should.  If strings don't normally have
        fill-pointers, how can I ensure that they do?  I don't see why they
        shouldn't.  

    The example Hornig created (which you originally didn't supply) followed
    the documentation and his string had a fill pointer.  Yours didn't.  I
    think it is unreasonable to require all strings to have a fill pointer.

My example showed how you couldn't vector-push-extend an ordinary
string.  I don't know how make all the strings i create with
operations like concatenate have fill-pointers.  I know how to make
one with make-array, but that's sort of limited.  I want a way to have
FORMAT, etc create strings with fill-pointers.

It probably is too expensive in the general case, but were it
controlled by a special I could bind it around the sections where I
needed such strings.
22-Oct-85 23:48:48-EDT,1285;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Jul 85 19:06-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 12 JUL 85  18:59:35 EDT
Date: Fri, 12 Jul 1985  18:58 EDT
Message-ID: <KWH.12126508173.BABYL@MIT-OZ>
From: KWH%MIT-OZ@MIT-MC.ARPA
To:   "David C. Plummer in disguise" <DCP@SCRC-QUABBIN.ARPA>
Cc:   BUG-LISPM@MIT-MC.ARPA, David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject: :which-operations should optionally take a substring
In-reply-to: Msg of 12 Jul 1985  16:04-EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

    Date: Friday, 12 July 1985  16:04-EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
    To:   David Vinayak Wallace <GUMBY at MIT-MC.ARPA>,
          BUG-LISPM at MIT-MC.ARPA
    Re:   :which-operations should optionally take a substring

        Date: Tue,  9 Jul 85 23:04:04 EDT
        From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

        In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
        microcode TMC5-MIC 319, FEP 24

        and only show messages which constain that substring.

    This is a valid thing to want (noted).  :WHICH-OPERATIONS is the wrong
    place to put it, though.
The MIT site defines the :APROPOS message which does exactly this.

Ken
22-Oct-85 23:48:48-EDT,1107;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 13 Jul 85 00:15-EDT
Date: Sat, 13 Jul 85 00:13 EDT
From: Richard E. Zippel <RZ@ZERMATT>
Subject: setf of local functions
To: BUG-LISPM@OZ
Message-ID: <850713001356.4.RZ@ZERMATT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
Experimental Schema 92.10, Imagen Spooler 5.0,
microcode TMC5-IO4-MIC 322, on Zermatt:

I would have thought the following definition would have returned 2.  It
seems to return 1.  But notice that it prints the internal function and
then sets the function cell of f.  This seems inconsistent to me.

(defun foo ()
  (flet ((f () 1))
    (print #'f)
    (setf #'f #'(lambda () 2))
    (f)))

(disassemble 'foo)  =>
  0  ENTRY: 0 REQUIRED, 0 OPTIONAL
  1  PUSH-CONSTANT #'(:INTERNAL FOO 0 F)        ;creating .F-FUNCTION-CELL.(FP|0)
  2  PUSH-LOCAL FP|0            ;.F-FUNCTION-CELL.
  3  CALL-1-IGNORE #'PRINT
  4  PUSH-CONSTANT 'F
  5  PUSH-CONSTANT #'(:INTERNAL FOO 1)
  6  CALL-2-IGNORE #'FSET
  7  PUSH-LOCAL FP|0            ;.F-FUNCTION-CELL.
 10  FUNCALL-0-RETURN 

22-Oct-85 23:48:48-EDT,1466;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Jul 85 15:17-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 13 Jul 85 15:17:14 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274626; Sat 13-Jul-85 15:14:08-EDT
Date: Sat, 13 Jul 85 15:16 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: vector-push-extend doesn't work on strings
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA, Hornig@SCRC-STONY-BROOK.ARPA
In-Reply-To: <[MIT-MC.ARPA].574087.850712.GUMBY>
Message-ID: <850713151600.7.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 12 Jul 85 16:59:05 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    My example showed how you couldn't vector-push-extend an ordinary
    string.
Exactly, and that's documented not to work.
    I don't know how make all the strings i create with
    operations like concatenate have fill-pointers.  I know how to make
    one with make-array, but that's sort of limited.  I want a way to have
    FORMAT, etc create strings with fill-pointers.

    It probably is too expensive in the general case, but were it
    controlled by a special I could bind it around the sections where I
    needed such strings.

A global variable doesn't sound like the right thing.  Neither does a
bash-array-to-have-fill-pointer function.  Is there anything left?

22-Oct-85 23:48:49-EDT,1038;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Jul 85 15:22-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 13 Jul 85 15:22:01 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274629; Sat 13-Jul-85 15:18:58-EDT
Date: Sat, 13 Jul 85 15:20 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: WITH-OPEN-FILE suggestion
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].574056.850712.GUMBY>
Message-ID: <850713152050.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 12 Jul 85 16:42:56 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    Why can't with-open-file expand into a LETF?  How does LETF handle the
    scoping problem?

Poorly (aaa is not declared special):
	(progn (setq aaa 3)
	       (letf ((aaa 5))
		 (symeval 'aaa)))
	=> 5.
Therefore, you get per-process dynamic variables instead of lexical
variables that LET gives you.

22-Oct-85 23:48:49-EDT,627;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 13 Jul 85 23:39-EDT
Received: from APIARY-6 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6258; Sat 13-Jul-85 23:44:38-EDT
Date: Sat, 13 Jul 85 23:38 EDT
From: Stephen Robbins <STEVER@OZ>
Subject: Common lisp LIST-LENGTH behaves incorrectly on circular lists
To: BUG-LISPM@OZ
Message-ID: <850713233841.9.STEVER@APIARY-6>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, Rodent Free Namespace Editor, on Lisp Machine Apiary-6:

LIST-LENGTH is documented as returning NIL for infinite lists.  As it
is, it loops infinitely.
22-Oct-85 23:48:49-EDT,1446;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 14 Jul 85 08:57-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6260; 14 Jul 85 09:03:00-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 274828; Sun 14-Jul-85 08:54:59-EDT
Date: Sun, 14 Jul 85 08:57 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Common lisp LIST-LENGTH behaves incorrectly on circular lists
To: Stephen Robbins <STEVER@OZ.mit>, BUG-LISPM@OZ.mit
In-Reply-To: <850713233841.9.STEVER@APIARY-6>
Message-ID: <850714085703.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Sat, 13 Jul 85 23:38 EDT
    From: Stephen Robbins <STEVER@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, Rodent Free Namespace Editor, on Lisp Machine Apiary-6:

    LIST-LENGTH is documented as returning NIL for infinite lists.  As it
    is, it loops infinitely.

We found and fixed this for 6.1 a few weeks ago.  As I recall, it only
looped infinitely if the repetition length was 4, but I could be
mistaken.  In any case, in 6.1:
	(loop for len from 1 to 40.
	      collect
		(cl:list-length (lexpr-funcall #'circular-list (make-list len))))
	=> (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
		NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
		NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL
		NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)

22-Oct-85 23:48:49-EDT,1741;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 15 Jul 85 10:37-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA.ARPA; 15 Jul 85 10:37:53 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 275179; Mon 15-Jul-85 10:33:50-EDT
Date: Mon, 15 Jul 85 10:35 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: setf of local functions
To: Richard E. Zippel <RZ@ZERMATT.SCRC.Symbolics.COM>,
    BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850713001356.4.RZ@ZERMATT>
Message-ID: <850715103547.7.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Sat, 13 Jul 85 00:13 EDT
    From: Richard E. Zippel <RZ@ZERMATT>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
    Experimental Schema 92.10, Imagen Spooler 5.0,
    microcode TMC5-IO4-MIC 322, on Zermatt:

    I would have thought the following definition would have returned 2.  It
    seems to return 1.  But notice that it prints the internal function and
    then sets the function cell of f.  This seems inconsistent to me.

    (defun foo ()
      (flet ((f () 1))
	(print #'f)
	(setf #'f #'(lambda () 2))
	(f)))

    (disassemble 'foo)  =>
      0  ENTRY: 0 REQUIRED, 0 OPTIONAL
      1  PUSH-CONSTANT #'(:INTERNAL FOO 0 F)        ;creating .F-FUNCTION-CELL.(FP|0)
      2  PUSH-LOCAL FP|0            ;.F-FUNCTION-CELL.
      3  CALL-1-IGNORE #'PRINT
      4  PUSH-CONSTANT 'F
      5  PUSH-CONSTANT #'(:INTERNAL FOO 1)
      6  CALL-2-IGNORE #'FSET
      7  PUSH-LOCAL FP|0            ;.F-FUNCTION-CELL.
     10  FUNCALL-0-RETURN 

Thank you for this report.  The problem you describe has already been
fixed in the development system and will be in some future release.

22-Oct-85 23:48:50-EDT,2204;000000000000    
Mail-From: MLY created at 15-Jul-85 12:50:21
Date: Mon 15 Jul 85 12:50:21-EDT
From: Your Friendly(*) Marketing Representative <MLY@MIT-OZ>
Subject: Re: :which-operations should optionally take a substring
To: KWH%MIT-OZ@MIT-MC.ARPA
cc: bug-lispm@MIT-OZ
In-Reply-To: Message from "KWH%MIT-OZ@MIT-MC.ARPA" of Fri 12 Jul 85 19:06:34-EDT

    Date: Fri, 12 Jul 1985  18:58 EDT
    From: KWH%MIT-OZ@MIT-MC.ARPA

        Date: Friday, 12 July 1985  16:04-EDT
        From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

            Date: Tue,  9 Jul 85 23:04:04 EDT
            From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

            In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.4,
            microcode TMC5-MIC 319, FEP 24

            and only show messages which constain that substring.

        This is a valid thing to want (noted).  :WHICH-OPERATIONS is the wrong
        place to put it, though.
    The MIT site defines the :APROPOS message which does exactly this.

    Ken

Afraid not.
What we do have is a function SUB-APROPOS which is useful in the
following way:
(defun wop (instance &optional (string ""))
  (sub-apropos string (send instance :which-operations)))

SUB-APROPOS is more-or-less
(lambda (string list-of-symbols)
  (member-if (lambda (s) (position string (symbol-name s) l)) list))
except that it does a bunch more things.  Check the sources (yes! You
can still read them!) for more information.

(defun sub-apropos (substring starting-list
		    &key predicate
		         (boundp nil boundp-p)
			 (fboundp nil fboundp-p)
			 (property nil property-p)
			 dont-print)
  "Find all symbols in STARTING-LIST whose names contain SUBSTRING, or
containing each string in it, if SUBSTRING is a list of strings.
If PREDICATE is supplied, it should be a function of one arg;
only symbols for which the predicate returns non-NIL are included.
If BOUNDP is non-NIL, then only bound symbols are included. Similarly FBOUNDP.
If PROPERTY is supplied, then only symbols having that property are included.
The symbols are printed unless DONT-PRINT is non-NIL.
A list of the symbols found is returned."
  ...)
-------
22-Oct-85 23:48:50-EDT,756;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 15 Jul 85 13:12-EDT
Received: from THINK.ARPA by MIT-MC.ARPA.ARPA; 15 Jul 85 13:13:14 EDT
Received: by THINK.ARPA with CHAOS id AA24105; Mon, 15 Jul 85 13:11:36 edt
Date: Mon, 15 Jul 85 13:11 EDT
From: Alan Bawden <Alan@[192.5.104.1]>
Subject: This is keeping me from getting work done.
To: BUG-LISPM@MIT-MC.ARPA
Message-Id: <850715131122.4.ALAN@UBALDO.ARPA>

In Symbolics 3640 Release 6.0, Experimental ITM system 18.2,
Experimental Thinking Machines Goodies 13.4, Experimental QMS 12.0,
microcode TMC5-IO4-ST506-MIC 319, with Patchable TMC System Loaded, on St. Ubaldo:

(HACKS:CHECK-FREE-LISPMS) doesn't work any more.  It causes SI:NULL-STREAM
to be sent a :SIZE-IN-CHARACTERS message.
22-Oct-85 23:48:50-EDT,519;000000000000
Mail-From: KWH created at 16-Jul-85 10:25:38
Date: Tue, 16 Jul 1985  10:25 EDT
Message-ID: <KWH.12127463308.BABYL@MIT-OZ>
From: KWH@MIT-OZ
To:   Your Friendly(*) Marketing Representative <MLY@MIT-OZ>
Cc:   bug-lispm@MIT-OZ
Subject: :which-operations should optionally take a substring
In-reply-to: Msg of 15 Jul 1985  12:50-EDT from Your Friendly(*) Marketing Representative <MLY>


By the MIT-SITE, I meant AISITE, the MIT local extensions to Symbolics
software.  I didn't mean the MIT CADR system.

Ken
22-Oct-85 23:48:51-EDT,2070;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 16 Jul 85 11:27-EDT
Received: from THINK.ARPA by MIT-MC.ARPA.ARPA; 16 Jul 85 11:27:56 EDT
Received: by THINK.ARPA with CHAOS id AA04033; Tue, 16 Jul 85 11:26:12 edt
Date: Tue, 16 Jul 85 11:26 EDT
From: Alan Bawden <Alan@[192.5.104.1]>
Subject: System directory contents
To: BUG-LISPM@MIT-MC.ARPA
Message-Id: <850716112603.2.ALAN@WENCESLAS.ARPA>

In Symbolics 3600 Release 6.0, Experimental ITM system 18.2,
Experimental Thinking Machines Goodies 13.4, Experimental QMS 12.0,
Experimental CGL 1.0, microcode TMC5-MIC 319, FEP 18,
with Patchable TMC System Loaded, on Good King Wenceslas:

A defsystem:

(defsystem CGL
  (:pathname-default "CGL:CGL;")
  (:patchable "CGL:PATCH;")
  (:bug-reports "CGL" "Bugs in CGL")
  (:module binda "BINDA")
  (:module lmutils "LMUTILS")
  (:module utils "UTILS")
  (:module graphs "GRAPHS")
  (:module convert "CONVERT")
  (:fasload binda)
  (:compile-load lmutils)
  (:compile-load utils (:fasload lmutils))
  (:compile-load graphs (:fasload lmutils utils))
  (:compile-load convert (:fasload binda lmutils utils graphs))
  )

The system directory file that was created the first time I make-system'd
this system:

(("CGL" :LATEST 1)
 ;; System versions:
 (1
  ( ;; Files for LM-2 (CGL 1)
  )
  ( ;; Files for 3600 (CGL 1)
   ("CGL: CGL; DEFSYSTEM" 16 NIL)
   ("CGL: CGL; BINDA" 4 NIL)
   ("CGL: CGL; LMUTILS" 4 1)
   ("CGL: CGL; UTILS" 10 6)
   ("CGL: CGL; GRAPHS" 34 11)
   ("CGL: CGL; CONVERT" 30 9))))

Now it isn't documented what information ``("CGL: CGL; BINDA" 4 NIL)'' is
supposed to represent, but I can't imagine how this could be correct.
Presumably since I asked for BINDA.BIN to be loaded as part of my system,
its version number should be recorded here.  BINDA.BIN.1 is what was in
fact loaded.  Instead it looks to me like the version number of the totally
irrelevant (as far as defsystem is concerned) file BINDA.LISP.4 has been
recorded.  I hope this doesn't screw me later if I try to -use- this
information.
22-Oct-85 23:48:51-EDT,1697;000000000000 
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 16 Jul 85 15:17-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA01333; Tue, 16 Jul 85 15:12:11 edt
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 275397; Mon 15-Jul-85 15:07:28-EDT
Date: Mon, 15 Jul 85 15:11 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: I don't know aht mailing list to send this too.
To: Alan%MIT-MC@MIT-HTVAX.ARPA
Cc: BUG-LISPM%OZ@MIT-HTVAX.ARPA, Bug-Tracking-Replies@SCRC-STONY-BROOK.ARPA
In-Reply-To: <850627203554.6.FILE-SERVER@MIT-REAGAN>
Disposition: COMPLETED
Category: cart tape
Message-Id: <850715151129.7.BSG@CONCORD.SCRC.Symbolics.COM>

Synopsis:  Bus turn timeout thought to be fixed in 6.1.

  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

    Date: Thu, 27 Jun 85 20:35 EDT
    From: Alan%MIT-MC@MIT-HTVAX.ARPA

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0, AISite 9.4,
    microcode TMC5-MIC 319, Network-Security patch,
    Update-Internet-Namespace patch, Server-Finger patch, on Lisp Machine Ronald Reagan:

    Seems like the most natural thing in the world to want to do after doing
    TAPE:CARRY-DUMP is TAPE:CARRY-LIST.  But this always seems to happen if
    I do that.  I'm using the cart tape on Reagan, dumping files from the
    filesystem on Reagan.

    >>Error: Hard tape error: FEP/Command error: 1101_16. (Bus turn timeout)
    While in the function (:METHOD TAPE:CART-TAPE-STREAM-MIXIN :COMMAND)  (:DEFUN-METHOD TAPE:CART-READ-STATUS)  (:METHOD TAPE:CART-TAPE-STREAM-MIXIN :REWIND)


22-Oct-85 23:48:51-EDT,344;000000000000
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 17 Jul 85 09:04-EDT
Date: Wed, 17 Jul 85 09:05 EDT
From: CJL@MIT-REAGAN
Sender: File-Server@MIT-REAGAN
Subject: It would be nice if there were...
To: BUG-LISPM@OZ
Message-ID: <850717090528.1.FILE-SERVER@MIT-REAGAN>

... a UDP (or TCP) based protocol for the LISPM-FINGER service.
22-Oct-85 23:48:51-EDT,4157;000000000000 
Received: from MIT-HILBERT by MIT-OZ via Chaosnet; 17 Jul 85 09:53-EDT
Date: Wed, 17 Jul 85 09:54 EDT
From: Patrick A. O'Donnell <PAO@MIT-EECS>
Subject: Errors creating directories in MAKE-SYSTEM
To: BUG-LISPM@OZ, BUG-FILE@OZ
Message-ID: <850717095422.1.PAO@HILBERT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
Experimental NS 23.61, microcode TMC5-MIC 319, FEP 18,
Local NS patches  V1, on Lisp Machine David Hilbert:

1) It seems to me that the FILE job should create files-only directories
by default.  It is quite an inconvenience to be forced to remember to
create a directory for patches (by hand) *before* recompiling a system.

2) After getting this error once, I then created the directory
oz:<koch.ns.6.cable-2> myself, then selected the proceed option "Retry
Incrementing Cable patch version".  Since MAKE-SYSTEM had already
written the system directory it proceeded to *re-increment* the system
version on to version 3, only to run into the non-files-only
subdirectory error again.

>>Error: Illegal to create non-files-only subdirectory under files-only directory
         For OZ:OZ:<KOCH.NS.6.CABLE-3>
While in the function (:METHOD FS:HOST-UNIT :COMMAND)  FS:CREATE-DIRECTORY-CHAOS  (:METHOD FS:QFILE-ACCESS-PATH :CREATE-DIRECTORY)

(:METHOD FS:HOST-UNIT :COMMAND):  (P.C. = 236)
   Arg 0 (SELF): #<HOST-UNIT 30541021>
   Arg 1 (SELF-MAPPING-TABLE): FS:HOST-UNIT
   Arg 2 (OPERATION): :COMMAND
   Arg 3 (MARK-P): NIL
   Arg 4 (STREAM-OR-HANDLE): NIL
   Arg 5 (SIMPLE-P): NIL
   Arg 6 (WHOSTATE): "Create Directory"
   Rest arg (COMMANDS): ("CREATE-DIRECTORY" 141. "OZ:<KOCH.NS.6.CABLE-3>" 141.)
   Local 8 (HANDLE): NIL
   Local 9 (STREAM): NIL
   Local 10 (PKT): #<Chaos Packet 6006501>
   Local 11 (SUCCESS): NIL
   Local 12 (STRING): " ERROR CCD F Illegal to create non-files-only subdirectory under files-only directory"
   Local 13 (TRANSACTION-ID): "T2770"
   Local 14 (CREATE-P): NIL
   Local 15 (CONDITION): NIL
   Local 16: T
   Local 17: #<CASE-HANDLER 120711625>
   Local 18: (#<CASE-HANDLER 120572024>)
   Local 19: (#<CASE-HANDLER 120711625> #<CASE-HANDLER 120572024>)

FS:CREATE-DIRECTORY-CHAOS:  (P.C. = 44)
   Arg 0 (ACCESS-PATH): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 30541031>
   Arg 1 (PATHNAME): #<TOPS20-PATHNAME "OZ:OZ:<KOCH.NS.6.CABLE-3>CABLE-3.PATCH-DIR">
   Arg 2 (OPTIONS): NIL

(:METHOD FS:QFILE-ACCESS-PATH :CREATE-DIRECTORY):  (P.C. = 6)
   Arg 0 (SELF): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 30541031>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:QFILE-ACCESS-PATH -- 4. IV's, 0. FL's 121666243>
   Arg 2 (OPERATION): :CREATE-DIRECTORY
   Arg 3 (PATHNAME): #<TOPS20-PATHNAME "OZ:OZ:<KOCH.NS.6.CABLE-3>CABLE-3.PATCH-DIR">
   Rest arg (OPTIONS): NIL

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :CREATE-DIRECTORY):  (P.C. = 16)
   Arg 0 (SELF): #<TOPS20-PATHNAME "OZ:OZ:<KOCH.NS.6.CABLE-3>CABLE-3.PATCH-DIR">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 105211451>
   Arg 2 (OPERATION): :CREATE-DIRECTORY
   --Defaulted args:--
   Arg 3 (IGNORE): NIL
   Rest arg (OPTIONS): NIL

FS:CREATE-DIRECTORIES-RECURSIVELY:  (P.C. = 72)
   Arg 0 (PATH): #<LOGICAL-PATHNAME "CABLE: CABLE; CABLE-3.PATCH-DIR.NEWEST">
   Local 0 (PATH): #<TOPS20-PATHNAME "OZ:OZ:<KOCH.NS.6.CABLE-3>CABLE-3.PATCH-DIR">

SI:WRITE-PATCH-DIRECTORY:  (P.C. = 163)
   Arg 0 (PATCH): ("Cable" 3.)
   Arg 1 (PATCH-DIR): (:EXPERIMENTAL ((0. "Cable Loaded" "PAO")))
   Arg 2 (FIRST-TIME): T

SI:INCREMENT-PATCH-SYSTEM-MAJOR-VERSION:  (P.C. = 57)
   Arg 0 (NAME): "Cable"
   Arg 1 (STATUS): :EXPERIMENTAL

SI:INCREMENT-COMPILED-VERSION-1:  (P.C. = 21)

Rest of stack:
SI:DO-FILE-TRANSFORMATIONS:  (P.C. = 244)
SI:PERFORM-TRANSFORMATIONS:  (P.C. = 167)
SI:PERFORM-TRANSFORMATIONS:  (P.C. = 64)
MAKE-SYSTEM:  (P.C. = 241)
SI:*EVAL:  (P.C. = 403)
(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0.):  (P.C. = 152)
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:48:52-EDT,1203;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 18 Jul 85 12:22-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 18 Jul 85 11:41:33 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Wed 17 Jul 85 23:15:53-CDT
Date: Wed, 17 Jul 85 23:16 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: Notifications in the inspector
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850717231601.6.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, Experimental Eclat 5.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

The inspector interaction window is too small to receieve notifications.
I just got a notification from the scheduler that it was "ignoring an
action in a periodic action" -- %draw-line got a NIL instead of a
number.  I don't understand this, since the inspector works OK, but
that's not the problem.  My knowledge of the error was that the machine
slowed for a moment and then a huge thing scrolled at high speed through
the inspector interactor.  Fortunately I could system-N to see it!

btw, IWBNI the notifications viewer were actually in a ZWEI buffer
instead of a scroll window.  Then i could mail notifications to people,
and read them w/c-V m-V, etc.

david
22-Oct-85 23:48:52-EDT,7801;000000000000  
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 18 Jul 85 18:01-EDT
Date: Thu, 18 Jul 85 18:02 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: Bug in EVAL
To: BUG-LISPM@OZ
Message-ID: <850718180259.2.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

The following function works compiled but not interpreted.
The evaluator seems to have lost track of the variable NEW-EDGES.
If you would like a more concise example let me know.  I think you
can reproduce the bug by just using dummy definitions for any
undefined functions referenced.

  - Jonathan

(defun dual (solid)
  (check-arg solid new:solid-p "solid")
  (let* ((faces    (new:boundary solid))
	 (edges    (apply #'union (mapcar #'new:boundary faces)))
	 (vertices (apply #'union (mapcar #'new:boundary edges)))
	 (new-vertices (mapcar #'face-center faces))
	 (new-edges (mapcar (lambda (e)
			      (let ((fs (new:coboundary e)))
				(flet ((f-c (f)	;face-center
					 (nth (find-position-in-list f faces)
					      new-vertices)))
				  (new:make-edge (f-c (car fs)) (f-c (cadr fs))))))
			    edges))
	 (new-faces (mapcar (lambda (v)
			      (new:make-face (mapcar (lambda (e)
						       (nth (find-position-in-list e edges)
							    new-edges))
						     (new:coboundary v))))
			    vertices)))
    (new:make-solid new-faces)))


>>Trap: The variable NEW-EDGES is unbound.
While in the function SI:*EVAL  SI:*EVAL  SI:APPLY-LAMBDA

SI:*EVAL:  (P.C. = 23)
   Arg 0 (FORM): NEW-EDGES
   Arg 1 (ENV): (((E #<EDGE 5435622>) (V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)) NIL NIL NIL NIL NIL (((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))))
   --Defaulted args:--
   Arg 2 (HOOK): NIL

SI:*EVAL:  (P.C. = 370)
   Arg 0 (FORM): (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)
   Local 0 (FORM): NIL
   Arg 1 (ENV): (((E #<EDGE 5435622>) (V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)) NIL NIL NIL NIL NIL (((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))))
   --Defaulted args:--
   Arg 2 (HOOK): NIL

SI:APPLY-LAMBDA:  (P.C. = 507)
   Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)) NIL 2305 262401 NIL (E) NIL (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES))
   Arg 1 (ARGUMENTS): ((((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))) #<EDGE 5435622>)
   Local 1 (ARGUMENTS): NIL

SYS:CALL-FUNNY-FUNCTION:  (P.C. = 102)
   Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)) NIL 2305 262401 NIL (E) NIL (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES))
   Rest arg (ARGS): ((((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))) #<EDGE 5435622>)

(LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)):
   Arg 0 (E): (((V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)))
   --Extraneous args:--
   Arg 1: #<EDGE 5435622>

MAPCAR:  (P.C. = 40)
   Arg 0 (FCN): #<LEXICAL-CLOSURE (LAMBDA ** **) 27030250>
   Rest arg (LISTS): ((#<EDGE 5435542> #<EDGE 5435322> #<EDGE 5435212> #<EDGE 5435132>))

(LAMBDA (V) (NEW:MAKE-FACE (MAPCAR ** **))):
   Arg 0 (V): (((NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)))
   --Extraneous args:--
   Arg 1: #<VERTEX 5435001>

MAPCAR:  (P.C. = 40)
   Arg 0 (FCN): #<LEXICAL-CLOSURE (LAMBDA ** **) 27030225>
   Rest arg (LISTS): ((#<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> #<VERTEX 5435075> ...))

DUAL:  (from MC: JAR; HACK)
   Arg 0 (SOLID): #<SOLID 5436246>

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (DUAL IC)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500047>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 500054>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): "Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<LISP-LISTENER Lisp Listener 1 43200216 exposed>
   Rest arg: (:NAME "Lisp Top Level")

SI:LISP-TOP-LEVEL1:  (P.C. = 5)
   Arg 0 (STREAM): #<LISP-LISTENER Lisp Listener 1 43200216 exposed>

SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:48:52-EDT,9020;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 19 Jul 85 11:22-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6396; 19 Jul 85 09:43:20-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 278594; Fri 19-Jul-85 09:37:41-EDT
Date: Fri, 19 Jul 85 09:40 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Bug in EVAL
To: Jonathan A Rees <JAR@MIT-MC.ARPA>, BUG-LISPM@OZ.mit
In-Reply-To: <850718180259.2.JAR@ELVIS>
Message-ID: <850719094015.0.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 18 Jul 85 18:02 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    The following function works compiled but not interpreted.
    The evaluator seems to have lost track of the variable NEW-EDGES.
    If you would like a more concise example let me know.  I think you
    can reproduce the bug by just using dummy definitions for any
    undefined functions referenced.

Somebody reported this about 2 months ago.  The original example
involved a hairy defmacro running interpreted, I think.  The bug
involves using FLET and/or LAMBDAs inside the for-value parts of LET*
which reference previous variables, and then some subsequent FLET and/or
LAMBDA in the same LET* making reference to the first.  In your example,
NEW-EDGES contains the first FLET that causes environment evacuation,
and the lambda for NEW-FACES can't find it.  This has been fixed for
6.1.

    (defun dual (solid)
      (check-arg solid new:solid-p "solid")
      (let* ((faces    (new:boundary solid))
	     (edges    (apply #'union (mapcar #'new:boundary faces)))
	     (vertices (apply #'union (mapcar #'new:boundary edges)))
	     (new-vertices (mapcar #'face-center faces))
	     (new-edges (mapcar (lambda (e)
				  (let ((fs (new:coboundary e)))
				    (flet ((f-c (f)	;face-center
					     (nth (find-position-in-list f faces)
						  new-vertices)))
				      (new:make-edge (f-c (car fs)) (f-c (cadr fs))))))
				edges))
	     (new-faces (mapcar (lambda (v)
				  (new:make-face (mapcar (lambda (e)
							   (nth (find-position-in-list e edges)
								new-edges))
							 (new:coboundary v))))
				vertices)))
	(new:make-solid new-faces)))


    >>Trap: The variable NEW-EDGES is unbound.
    While in the function SI:*EVAL  SI:*EVAL  SI:APPLY-LAMBDA

    SI:*EVAL:  (P.C. = 23)
       Arg 0 (FORM): NEW-EDGES
       Arg 1 (ENV): (((E #<EDGE 5435622>) (V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)) NIL NIL NIL NIL NIL (((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))))
       --Defaulted args:--
       Arg 2 (HOOK): NIL

    SI:*EVAL:  (P.C. = 370)
       Arg 0 (FORM): (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)
       Local 0 (FORM): NIL
       Arg 1 (ENV): (((E #<EDGE 5435622>) (V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)) NIL NIL NIL NIL NIL (((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))))
       --Defaulted args:--
       Arg 2 (HOOK): NIL

    SI:APPLY-LAMBDA:  (P.C. = 507)
       Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)) NIL 2305 262401 NIL (E) NIL (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES))
       Arg 1 (ARGUMENTS): ((((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))) #<EDGE 5435622>)
       Local 1 (ARGUMENTS): NIL

    SYS:CALL-FUNNY-FUNCTION:  (P.C. = 102)
       Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)) NIL 2305 262401 NIL (E) NIL (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES))
       Rest arg (ARGS): ((((V #<VERTEX 5435001>) (NEW-VERTICES **) (VERTICES **) (EDGES **) (FACES **) (SOLID #<SOLID 5436246>))) #<EDGE 5435622>)

    (LAMBDA (E) (NTH (FIND-POSITION-IN-LIST E EDGES) NEW-EDGES)):
       Arg 0 (E): (((V #<VERTEX 5435001>) (NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)))
       --Extraneous args:--
       Arg 1: #<EDGE 5435622>

    MAPCAR:  (P.C. = 40)
       Arg 0 (FCN): #<LEXICAL-CLOSURE (LAMBDA ** **) 27030250>
       Rest arg (LISTS): ((#<EDGE 5435542> #<EDGE 5435322> #<EDGE 5435212> #<EDGE 5435132>))

    (LAMBDA (V) (NEW:MAKE-FACE (MAPCAR ** **))):
       Arg 0 (V): (((NEW-VERTICES (#<VERTEX 6627647> #<VERTEX 6627661> #<VERTEX 6627673> #<VERTEX 6627705> #<VERTEX 6627717> #<VERTEX 6627731> #<VERTEX 6627743> #<VERTEX 6627755> #<VERTEX 6627767> #<VERTEX 6630001> ...)) (VERTICES (#<VERTEX 5435001> #<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> ...)) (EDGES (#<EDGE 5435132> #<EDGE 5435226> #<EDGE 5435322> #<EDGE 5435366> #<EDGE 5435416> #<EDGE 5435556> #<EDGE 5435176> #<EDGE 5435512> #<EDGE 5435652> #<EDGE 5435272> ...)) (FACES (#<FACE 5435666> #<FACE 5435702> #<FACE 5435716> #<FACE 5435732> #<FACE 5435746> #<FACE 5435762> #<FACE 5435776> #<FACE 5436012> #<FACE 5436026> #<FACE 5436042> ...)) (SOLID #<SOLID 5436246>)))
       --Extraneous args:--
       Arg 1: #<VERTEX 5435001>

    MAPCAR:  (P.C. = 40)
       Arg 0 (FCN): #<LEXICAL-CLOSURE (LAMBDA ** **) 27030225>
       Rest arg (LISTS): ((#<VERTEX 5435051> #<VERTEX 5434731> #<VERTEX 5435037> #<VERTEX 5434755> #<VERTEX 5435063> #<VERTEX 5435107> #<VERTEX 5435025> #<VERTEX 5434743> #<VERTEX 5434767> #<VERTEX 5435075> ...))

    DUAL:  (from MC: JAR; HACK)
       Arg 0 (SOLID): #<SOLID 5436246>

    SI:*EVAL:  (P.C. = 403)
       Arg 0 (FORM): (DUAL IC)
       Local 0 (FORM): NIL
       --Defaulted args:--
       Arg 1 (ENV): NIL
       Arg 2 (HOOK): NIL

    (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
       Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500047>

    TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
       Arg 0 (NEW-MODE): :BLAST
       Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
       Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 500054>

    SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
       Arg 0 (NAME): "Lisp Top Level"
       Arg 1 (ABORT-FUNCTION): NIL
       Arg 2 (READ-FUNCTION): NIL
       Arg 3 (EVAL-FUNCTION): NIL
       Arg 4 (PRINT-FUNCTION): NIL

    SI:LISP-COMMAND-LOOP:  (P.C. = 67)
       Arg 0: #<LISP-LISTENER Lisp Listener 1 43200216 exposed>
       Rest arg: (:NAME "Lisp Top Level")

    SI:LISP-TOP-LEVEL1:  (P.C. = 5)
       Arg 0 (STREAM): #<LISP-LISTENER Lisp Listener 1 43200216 exposed>

    SI:LISP-TOP-LEVEL:  (P.C. = 7)


22-Oct-85 23:48:53-EDT,5652;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 19 Jul 85 17:55-EDT
Received: from SMOKEY by GOLDILOCKS via CHAOS with CHAOS-MAIL id 2907; Fri 19-Jul-85 17:54:11-EDT
Date: Fri, 19 Jul 85 17:52 EDT
From: David H. Kaufman <Sr.Kaufman%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Draft message blowout
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850719175230.1.QUX@SMOKEY.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.17, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.0, Spire 16.0,
ZOO 6.12, ZOO-SPIRE 2.1, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Smokey:

I did c-X M to write a draft message, typed in the message, and typed c-X c-m-S.
This happened.

>>Trap: The subscript given to the AS-1 instruction, 0, on "" was beyond the length, 0.
While in the function (:METHOD ZWEI:BABYL-BUFFER :SET-REFORMATTED-HEADERS)  ZWEI:REFORMAT-HEADERS  ZWEI:SET-PARSED-MSG-HEADERS

(:METHOD ZWEI:BABYL-BUFFER :SET-REFORMATTED-HEADERS):  (P.C. = 155)
   Arg 0 (SELF): #<BABYL-BUFFER "GOLDY:>Qux>mail>spire.xmail" 15321026>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:BABYL-BUFFER -- 3. IV's, 6. FL's 142630520>
   Arg 2 (OPERATION): :SET-REFORMATTED-HEADERS
   Arg 3 (MSG): #<MSG 6062425>
   Arg 4 (STAT): #<DTP-LOCATIVE 6062435>
   Arg 5 (NEW-HEADERS-INTERVAL): #<NODE 41411616>
   Local 6 (MSG-INTERVAL): #<NODE 6062412>
   Local 7 (MSG-REAL-INTERVAL): #<NODE 6062377>
   Local 8 (HEADERS-END-BP): ("Here's the current state of Spire 17.0:" 0)
   Local 9 (WHERE): :IN-FILE
   Local 10 (MSG-START-BP): ("Date: Friday, 19 July 1985, 17:50-EDT" 0 :NORMAL)
   Local 11 (OLD-FIRST-LINE): "Date: Friday, 19 July 1985, 17:50-EDT"
   Local 12 (START-PREVIOUS-LINE): "Draft-Composition-Date: Friday, 19 July 1985, 17:50-EDT"
   Local 13 (REAL-START-BP): ("" 0 :NORMAL)
   Local 14 (REAL-START-LINE): ""
   Local 15 (REAL-ORIGINAL-AREA-END-LINE): "*** EOOH ***"
   Local 16 (BODY-START-LINE): "Here's the current state of Spire 17.0:"
   Local 17 (OLD-LAST-LINE): ""
   Local 18 (FIRST-NEW-LINE): "Date: Friday, 19 July 1985, 17:50-EDT"
   Local 19 (LAST-NEW-LINE): ""
   Local 20 (NEW-INTERVAL-FOR-OLD): #<NODE 6062377>

ZWEI:REFORMAT-HEADERS:  (P.C. = 56)
   Arg 0 (MSG): #<MSG 6062425>
   --Defaulted args:--
   Arg 1 (FORCE-P): NIL

ZWEI:SET-PARSED-MSG-HEADERS:  (P.C. = 152)
   Arg 0 (MSG): #<MSG 6062425>
   Arg 1 (STATUS): #<DTP-LOCATIVE 6062435>

(:METHOD ZWEI:MSG-BUFFER :PARSE-MSG):  (P.C. = 7)
   Arg 0 (SELF): #<BABYL-BUFFER "GOLDY:>Qux>mail>spire.xmail" 15321026>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:MSG-BUFFER -- 15. IV's, 0. FL's 142630543>
   Arg 2 (OPERATION): :PARSE-MSG
   Arg 3 (MSG): #<MSG 6062425>
   Arg 4 (MSG-STATUS): #<DTP-LOCATIVE 6062435>
   --Defaulted args:--
   Arg 5 (BUFFER-TICK): NIL

(:METHOD ZWEI:BABYL-BUFFER :COMBINED :PARSE-MSG):  (P.C. = 17)
   Arg 0 (SELF): #<BABYL-BUFFER "GOLDY:>Qux>mail>spire.xmail" 15321026>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:BABYL-BUFFER -- 3. IV's, 6. FL's 142630520>
   Arg 2 (.OPERATION.): :PARSE-MSG
   Rest arg (.DAEMON-CALLER-ARGS.): (#<MSG 6062425> #<DTP-LOCATIVE 6062435>)

ZWEI:ASSURE-MSG-PARSED:  (P.C. = 60)
   Arg 0 (MSG): #<MSG 6062425>
   --Defaulted args:--
   Arg 1 (KILLED-OK): NIL

(:METHOD ZWEI:BABYL-BUFFER :UPDATE-MSG-OPTIONS-IN-FILE):  (P.C. = 4)
   Arg 0 (SELF): #<BABYL-BUFFER "GOLDY:>Qux>mail>spire.xmail" 15321026>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:BABYL-BUFFER -- 3. IV's, 6. FL's 142630520>
   Arg 2 (OPERATION): :UPDATE-MSG-OPTIONS-IN-FILE
   Arg 3 (MSG): #<MSG 6062425>

(:DEFUN-METHOD ZWEI:REPLACE-REAL-HEADER-AREA):  (P.C. = 24)
   Arg 0 (SELF): #<BABYL-BUFFER "GOLDY:>Qux>mail>spire.xmail" 15321026>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:SEQUENCE -- 6. IV's, 0. FL's 142630603>
   Arg 2 (MSG): #<MSG 6062425>
   Arg 3 (STRING): "
*** EOOH ***
"

Rest of stack:
(:METHOD ZWEI:FILE-MAIL-BUFFER :NEW-MSG):  (P.C. = 24)
(:METHOD ZWEI:BABYL-BUFFER :COMBINED :NEW-MSG):  (P.C. = 11)
(:METHOD ZWEI:FILE-MAIL-BUFFER :ADD-MSG-TEXT):  (P.C. = 57)
(:METHOD ZWEI:SEQUENCE :ADD-MSG):  (P.C. = 171)
(:METHOD ZWEI:BABYL-BUFFER :COMBINED :ADD-MSG):  (P.C. = 23)
ZWEI:COM-SAVE-DRAFT-AS-MSG:  (P.C. = 252)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:MAKE-EXTENDED-COMMAND-INTERNAL:  (P.C. = 107)
Closure of ZWEI:MAKE-EXTENDED-COMMAND-INTERNAL:
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :EDIT):  (P.C. = 70)
ZWEI:ZMAIL-MAIL:  (P.C. = 105)
ZWEI:CONTINUE-DRAFT-MSG:  (P.C. = 21)
ZWEI:COMPOSE-VIA-DRAFT-MSG:  (P.C. = 5)
ZWEI:FUNCALL-TEMPLATE-EXPANSION:  (P.C. = 47)
ZWEI:COMPOSE-FROM-TEMPLATE:  (P.C. = 20)
ZWEI:COM-ZMAIL-MAIL:  (P.C. = 11)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-COMMAND-CHAR):  (P.C. = 7)
(:INTERNAL (:INTERNAL (:METHOD ZWEI:ZMAIL-FRAME :COMBINED :PROCESS-COMMAND-CHAR) 0) 0):  (P.C. = 10)
(:METHOD ZWEI:ZMAIL-COMMAND-LOOP-MIXIN :WHOPPER :PROCESS-COMMAND-CHAR):  (P.C. = 21)
(:INTERNAL (:METHOD ZWEI:ZMAIL-FRAME :COMBINED :PROCESS-COMMAND-CHAR) 0):  (P.C. = 13)
(:METHOD ZWEI:ZMAIL-FRAME :WHOPPER :PROCESS-COMMAND-CHAR):  (P.C. = 21)
(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :PROCESS-COMMAND-CHAR):  (P.C. = 12)
(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 143)
(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:48:53-EDT,1075;000000000000   
Received: from MIT-REIMANN by MIT-OZ via Chaosnet; 20 Jul 85 15:55-EDT
Date: Sat, 20 Jul 85 15:55 EDT
From: Philippe Brou <PHILIP@OZ>
Subject: DEFSYSTEM merge-pathname problem with CL Syntax
To: BUG-LISPM@OZ
cc: philip@OZ
Message-ID: <850720155537.1.PHILIP@RIEMANN>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

With the Common Lisp syntax, the pathnames don't merge properly
in defsystem:

In the following definition: 

(defsystem test
  (:pathname-default #P"sys:site;")
  (:module test #P"abc")
  (:module ok #P"sys:site;def")
  (:compile-load test))

The system proposes to load

oz:ps:<SITE>abc...    which is wrong
sys:site;def...       which is OK.

Strangely the pathname merging functions (both in CL and FS
work fine when supplied with this input).

[Getting the defsystem to work at all in that type of buffer
wasn't easy either, the #P is only listed in one line of
the whole documentation.... I may even be using the wrong 
macro]

22-Oct-85 23:48:54-EDT,966;000000000000   
Received: from MIT-REIMANN by MIT-OZ via Chaosnet; 20 Jul 85 17:19-EDT
Date: Sat, 20 Jul 85 17:20 EDT
From: Philippe Brou <PHILIP@OZ>
Subject: SI:get-file-loaded-id with CL
To: BUG-LISPM@OZ
cc: philip@OZ
Message-ID: <850720172023.2.PHILIP@RIEMANN>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

Defsystem gets confused about what file SYSDCL was loaded 
when the SYSDCL file is in Common Lisp Syntax.

SI:GET-FILE-LOADED-ID gets called with NIL as the package
and obtains USER from the property list of the logical 
pathname instance. The function then determines that no
file was loaded since it actually went in CL-USER.
(calling SI:GET.. with CL-USER explicitly leads to 
the right result).

Trying to set the package of the file to CL-USER in
ZMACS using M-X Set Package doesn't work when the 
syntax is already CL. One has to edit it manually.
22-Oct-85 23:48:54-EDT,2798;000000000000
Received: from MIT-APIARY-4 by MIT-OZ via Chaosnet; 21 Jul 85 08:26-EDT
Date: Sun, 21 Jul 85 08:26 EDT
From: Carl Hewitt <Hewitt@OZ>
Subject: bug in Zmail attempting to move message into file
To: BUG-LISPM@OZ
Message-ID: <850721082635.1.HEWITT@APIARY-4>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-4:

I tried to move a message into a file.

>>Trap: The first argument given to the SYS:+-INTERNAL instruction, NIL, was not a number.
While in the function ZWEI:COM-ZMAIL-MOVE  ZWEI:COMMAND-EXECUTE  ZWEI:ZMAIL-COMMAND-EXECUTE

ZWEI:COM-ZMAIL-MOVE:  (P.C. = 15)
   Local 0 (DEFAULTED-MOVE-SEQUENCE): #<COLLECTION "xx:<hewitt>errors.xmail.12" 7744101>

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-ZMAIL-MOVE
   Arg 1 (CHAR): (:MENU ("Move" . ZWEI:COM-ZMAIL-MOVE) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)
   --Defaulted args:--
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
   Arg 0: ZWEI:COM-ZMAIL-MOVE

(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 0 (:MENU)):  (P.C. = 10)
   Arg 0 (**DEFSELECT-OP**): :MENU
   Arg 1 (ITEM): ("Move" . ZWEI:COM-ZMAIL-MOVE)
   Arg 2 (CH): 4
   Arg 3 (WINDOW): #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>

ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 12)
   Arg 0 (OPERATION): :MENU
   Rest arg (SELECT-METHOD-ARGS): (("Move" . ZWEI:COM-ZMAIL-MOVE) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :PROCESS-SPECIAL-COMMAND
   Rest arg (ARGS): (:MENU ("Move" . ZWEI:COM-ZMAIL-MOVE) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :COMMAND-LOOP
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
   Arg 0 (WINDOW): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:48:54-EDT,1391;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 22 Jul 85 08:27-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6422; 22 Jul 85 08:30:28-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 279806; Mon 22-Jul-85 08:26:57-EDT
Date: Mon, 22 Jul 85 08:27 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: DEFSYSTEM merge-pathname problem with CL Syntax
To: Philippe Brou <PHILIP@OZ.mit>, BUG-LISPM@OZ.mit
In-Reply-To: <850720155537.1.PHILIP@RIEMANN>,
             <850720172023.2.PHILIP@RIEMANN>
Message-ID: <850722082715.5.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Sat, 20 Jul 85 15:55 EDT
    From: Philippe Brou <PHILIP@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

    With the Common Lisp syntax, the pathnames don't merge properly
    in defsystem:
	...

    Date: Sat, 20 Jul 85 17:20 EDT
    From: Philippe Brou <PHILIP@OZ>

    Defsystem gets confused about what file SYSDCL was loaded 
    when the SYSDCL file is in Common Lisp Syntax.

We've learned that DEFSYSTEM and Common Lisp Syntax currently don't get
along very well.  This probably won't be fixed in the Release 6 time
frame.  For now, keep you SYSDCL files in ZetaLisp syntax.

22-Oct-85 23:48:55-EDT,722;000000000000  
Received: from MIT-APIARY-8 by MIT-OZ via Chaosnet; 22 Jul 85 14:12-EDT
Date: Mon, 22 Jul 85 14:12 EDT
From: Stephen Robbins <STEVER@OZ>
Subject: OPEN doesn't seem to handle the :IF-DOES-NOT-EXIST keyword properly
To: BUG-LISPM@OZ
Message-ID: <850722141250.7.STEVER@APIARY-8>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, Rodent Free Namespace Editor, on Lisp Machine Apiary-8:

I tried using the :IF-DOES-NOT-EXIST :CREATE option as follows:

(open "oz:<stever>test.xx" :direction :input :if-does-not-exist :create :error nil)

Here's what happens:

#<QFILE-NOT-FOUND 41130535>

The file doesn't seem to have been created...

                        Stever
22-Oct-85 23:48:55-EDT,733;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 22 Jul 85 18:58-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 22 Jul 85 18:58:42 EDT
Received: from AMMON by MCC.ARPA via Chaosnet; Mon 22 Jul 85 17:51:58-CDT
Date: Mon, 22 Jul 85 17:54 CDT
From: Gumby@MCC-AI
Sender: AI.KWH@MCC-AI
Subject: System 286?
To: Bug-Lispm%MC@MCC-AI
Message-ID: <850722175437.1.KWH@AMMON>

In Symbolics 3640 Lmdoc in Release 6.0, IP-TCP 29.0, MCC-Site 4.0,
Experimental Meta Representation Langauge 5.1,
Experimental Cyrano Discovery System 2.1,
microcode TMC5-IO4-ST506-MIC 319, Name-Kludge, Fixed :BATCH, on Ammon:

I did Find Any of "System 286"" and nothing appropriate turned up.

It's not in the index of the Opus Symbolicorum either.
22-Oct-85 23:48:55-EDT,979;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 23 Jul 85 12:41-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 23 Jul 85 12:40:20 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Tue 23 Jul 85 11:31:53-CDT
Date: Tue, 23 Jul 85 11:34 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: CP arg types aren't the same as PROMPT-AND-READ's
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850723113438.1.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MCC-Site 4.0,
Experimental Eclat 6.0, microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

I want to define a CP command which takes an argument which is a time
interval or NIL.  The documentation doesn't tell you how to define your
own CP argument types, and of course, without the sources, it's
essentially impossible.

Now were the CP to use the same type mechanism as PROMPT-AND-READ (which
is adequately documented) I could win.  But instead all I can do is get
pissed off and send nasty bug reports.
22-Oct-85 23:48:56-EDT,1496;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 23 Jul 85 15:52-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 23 Jul 85 15:49:59 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Tue 23 Jul 85 14:46:05-CDT
Received: from CARDINAL.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 281034; Tue 23-Jul-85 15:48:25-EDT
Date: Tue, 23 Jul 85 15:48 EDT
From: William M. York <York@SCRC-QUABBIN.ARPA>
Subject: CP arg types aren't the same as PROMPT-AND-READ's
To: Gumby@MCC.ARPA, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850723113438.1.GUMBY@MCC-GANESH>
Message-ID: <850723154832.6.YORK@CARDINAL.SCRC.Symbolics.COM>

    Date: Tue, 23 Jul 85 11:34 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    I want to define a CP command which takes an argument which is a time
    interval or NIL.  The documentation doesn't tell you how to define your
    own CP argument types, and of course, without the sources, it's
    essentially impossible.

    Now were the CP to use the same type mechanism as PROMPT-AND-READ (which
    is adequately documented) I could win.  But instead all I can do is get
    pissed off and send nasty bug reports.

The mechanism for defining new argument types was deliberately left
undocumented because the current scheme is not long for this world.  The
type definition mechanisms for CP args, PROMPT-AND-READ, and CVV menus
will be unified at some point in the future.  Until then, sorry for the
inconvenience.

22-Oct-85 23:48:56-EDT,705;000000000000    
Received: from MIT-HILBERT by MIT-OZ via Chaosnet; 24 Jul 85 15:41-EDT
Date: Wed, 24 Jul 85 15:40 EDT
From: Patrick A. O'Donnell <PAO@MIT-EECS>
Subject: (:method tv:essential-window-with-typeout-mixin :draw-bottom-line)
To: BUG-LISPM@OZ
Message-ID: <850724154039.5.PAO@HILBERT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, Manip 5.12,
Puma 5.11, microcode TMC5-MIC 319, FEP 18, on Lisp Machine David Hilbert:

(:method tv:essential-window-with-typeout-mixin :draw-bottom-line)
breaks when TV:MOUSE-SHEET is not a superior of SELF.  For example,
evaluating a form in the editor which gets an error when the the mouse
is on a different screen results in recursive errors.
		- Pat
22-Oct-85 23:48:56-EDT,822;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 24 Jul 85 16:20-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3110; Wed 24-Jul-85 16:19:34-EDT
Date: Wed 24 Jul 85 16:19:50-EDT
From: Steven Abney <HLP.SPA@MIT-SPEECH>
Subject: lisp bug
To: bug-lispm@MIT-SPEECH

Bug person:

I'm not sure if you're the one concerned with my problem; if
not, do you know who I should contact?

I'd like to report a bug in Maclisp on Speech.  The function
"cursorpos" doesn't work right.  If you do (progn (cursorpos
0 0) (cursorpos 2 17) (tyi)), the cursor moves to position
2 9 and waits for input.  I also tried it with a fresh lisp,
and an empty init file, (substituting 21 octal for the 17),
and it still failed, so it's nothing in any of my stuff.

Thanks,
Steve Abney
-------
22-Oct-85 23:48:56-EDT,773;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 24 Jul 85 20:39-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3111; Wed 24-Jul-85 20:39:03-EDT
Date: Wed, 24 Jul 85 20:38:03 EDT
From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>
Subject:  lisp bug
To: HLP.SPA@MIT-SPEECH
cc: bug-lispm@MIT-SPEECH
In-reply-to: Msg of Wed 24 Jul 85 16:19:50-EDT from Steven Abney <HLP.SPA at MIT-SPEECH>
Message-ID: <[MIT-MC.ARPA].586615.850724.CSTACY>

BUG-LISPM is a mailing list for reports of bugs in the Lisp Machine,
not MacLisp.  You should send your bug report to BUG-LISP instead.

Be sure to mention what kind of connection and terminal you are using,
because your example works correctly for me coming in over a SUPDUP
connection.
22-Oct-85 23:48:56-EDT,730;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 25 Jul 85 04:11-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 25 Jul 85 04:10:33 EDT
Received: from AMMON by MCC.ARPA via Chaosnet; Thu 25 Jul 85 03:05:43-CDT
Date: Thu, 25 Jul 85 03:08 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: saving worlds
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850725030837.2.GUMBY@AMMON>

In Symbolics 3640 Release 6.0, MCC-Site 5.0, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Ammon:

si:receive-band (and maybe even si:transmit-band) should be able to
write over insta-booted bands like disk-save can.  They should also have
disk-save's snazzy options for selectively deleting and overwriting
bands on the target filesystem.
22-Oct-85 23:48:56-EDT,1379;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 25 Jul 85 08:36-EDT
Received: from THINK.ARPA by MIT-MC.ARPA 25 Jul 85 08:36:20 EDT
Received: by THINK.ARPA with CHAOS; Thu, 25 Jul 85 08:34:07 edt
Date: Thu, 25 Jul 85 08:35 EDT
From: Paul Rosenblum <PSR@THINK.ARPA>
Subject: terminal emulator
To: BUG-LISPM%oz.mit@THINK.ARPA
Message-Id: <850725083534.1.PSR@UBALDO.ARPA>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, Experimental TMC 3.0,
Experimental TMC-ENHANCEMENTS 2.0, Experimental QMS 13.0,
microcode TMC5-IO4-ST506-MIC 319, on St. Ubaldo:

(This is my first time using the emulator.)  It seems to perform very
poorly.  I am on Ubaldo at thinking machines and I wanted to get to Oz
to read my mail.  I connected to Charon (an Athena machine) and from
there connected to Oz.  I told Charon that I had an aaa-48 and I told Oz
that I had an ambassador.  I told the terminal emulator be an
ambassador.

When initially logging into Charon I got some junk characters *after* it
knew what terminal type I had.  When I got to Oz, I started reading my
mail with babyl.  Each messaged displayed wrote over the one previously
there, incompletely covering the previous message.  Hitting the
<refresh> key redisplayed the current message correctly.

I know that I have seen scads of reports from gumby.  Are there fixes
for these problems?

Paul Rosenblum
22-Oct-85 23:48:57-EDT,468;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 25 Jul 85 10:37-EDT
Date: Thu, 25 Jul 85 10:36:42 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  terminal emulator
To: PSR@THINK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Thu 25 Jul 85 08:35 EDT from Paul Rosenblum <PSR at THINK.ARPA>
Message-ID: <[MIT-MC.ARPA].587425.850725.GUMBY>

Try "vt100," and tell oz that you're on a vt52 (NOT vt100 or
ansi-vt100!).  That loses the least.
22-Oct-85 23:48:57-EDT,689;000000000000
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 25 Jul 85 12:56-EDT
Received: by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA01196; Thu, 25 Jul 85 12:45:07 edt
To: Paul Rosenblum <PSR@think.arpa>
Cc: BUG-LISPM@oz
Subject: Re: terminal emulator
In-Reply-To: A message from Paul Rosenblum <PSR@THINK.ARPA>
	     on Thu, 25 Jul 85 08:35 EDT.
Date: 25 Jul 85 12:44:36 EDT (Thu)
From: Martin David Connor <mdc@mit-htvax>


Try putting the following line in your lispm init.  I was unable to
edit on some hosts while SUPDUPing from 36__s until I did.

(SETQ TELNET:*NVT-OVERSTRIKE-DEFAULT* NIL)

I suspect you don't really need overstriking for reading your mail.
Hope it helps.

22-Oct-85 23:48:57-EDT,1589;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 25 Jul 85 15:49-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 25 Jul 85 15:44:31 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Thu 25 Jul 85 13:44:22-CDT
Received: from CHARLES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 282326; Thu 25-Jul-85 14:46:32-EDT
Date: Thu, 25 Jul 85 14:46 EDT
From: Gerry Smith <gsmith@SCRC-YUKON.ARPA>
Subject: saving worlds
To: David Vinayak Wallace <Gumby@MCC.ARPA>, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850725030837.2.GUMBY@AMMON>
Message-ID: <850725144636.1.GSMITH@CHARLES.SCRC.Symbolics.COM>

    Date: Thu, 25 Jul 85 03:08 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 5.0, IP-TCP 29.0,
    microcode TMC5-IO4-ST506-MIC 319, on Ammon:

    si:receive-band (and maybe even si:transmit-band) should be able to
    write over insta-booted bands like disk-save can.  They should also have
    disk-save's snazzy options for selectively deleting and overwriting
    bands on the target filesystem.

Receive-band should be instaboot-band-writable as of Rel6.  If it's not,
please let me know.  You're going to have to do a lot to convince me
that it's ok to put this into transmit-band.  It's one thing for a user
to be willing to trash his currently running band; it's something else
for someone on the net to decide to trash the current world on your
machine.

As to snazzifying 'em, yeah, I'd like to clean up the user-visible
interface to these routines.  Thanks for reminding me.

22-Oct-85 23:48:57-EDT,2615;000000000000   
Received: from MIT-HILBERT by MIT-OZ via Chaosnet; 25 Jul 85 20:21-EDT
Date: Thu, 25 Jul 85 20:20 EDT
From: Patrick A. O'Donnell <PAO@MIT-EECS>
Subject: CL:*PRINT-PRETTY*
To: BUG-LISPM@OZ
Message-ID: <850725202023.4.PAO@HILBERT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, Manip 5.12,
Puma 5.11, microcode TMC5-MIC 319, FEP 18, on Lisp Machine David Hilbert:

With CL:*PRINT-ARRAY* and CL:*PRINT-PRETTY* both set to T, CL:PRINT does
not obey CL:*PRINT-LENGTH* and CL:*PRINT-LEVEL*.  With CL:*PRINT-PRETTY*
set to NIL, CL:*PRINT-LENGTH* and CL:*PRINT-LEVEL* are both obeyed.
ZL:PRINT obeys them in either case.

Test case (in a Common Lisp Listener):

(setq *print-pretty* t *print-array* t
      *print-length* 10 *print-level* 1)
1

(setq foo (make-array '(20 20)))
#2A((NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
    (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL))

(setq *print-pretty* nil)
nil

foo
#2A(# # # # # # # # # # ...))
22-Oct-85 23:48:59-EDT,2923;000000000000
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 13:18-EDT
Received: from MIT-CHERRY by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6569; Fri 26-Jul-85 13:18:39-EDT
Date: Friday, 26 July 1985, 13:17-EDT
From: Dinarte R. Morais <DRM at MIT-XX>
Subject: Zwei Blowout
To: BUG-LISPM at OZ
Message-ID: <850726131713.1.DRM@CHERRY.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, microcode TMC5-IO4-MIC 319,
FEP 22, Tanglewood Version X, on Project Tanglewood Cherry:

In a buffer whose attribute list looks like:

;;; -*- Mode: Lisp; Package: Gita; Base: 10.; Syntax: Common-Lisp; Fonts: CPTFONT,CPTFONTI -*-

typed c-x c-b and got this.

>>Trap: The first argument given to the ZETALISP-SYSTEM:FAST-ASET instruction, #\G, was not a fixnum.
While in the function ZETALISP:COPY-ARRAY-PORTION  SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION  ZWEI:CRAM-STRING-OUT

ZETALISP:COPY-ARRAY-PORTION:  (P.C. = 26)
   Arg 0 (FROM-ARRAY): #"Graph Interpreter for TTDA"
   Arg 1 (FROM-START): 0.
   Arg 2 (FROM-END): 26.
   Arg 3 (TO-ARRAY): "  *Tag-Table-1*                                                 "
   Arg 4 (TO-START): 29.
   Arg 5 (TO-END): 55.
   Local 6 (FROM): #"Graph Interpreter for TTDA"
   Local 7: -1342166586.
   Local 8: #<DTP-LOCATIVE 52043212>
   Local 9: 26.
   Local 10 (TO): "  *Tag-Table-1*                                                 "
   Local 11: 805317062.
   Local 12: #<DTP-LOCATIVE 52725537>
   Local 13: 64.
   Local 14 (FROM-LENGTH): 26.
   Local 15 (TO-LENGTH): 26.
   Local 16 (INDEX-FROM): 0.
   Local 17 (INDEX-TO): 29.
   Local 18: 25.

SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION:  (P.C. = 124)
   Arg 0 (OP): :STRING-OUT
   Arg 1 (ARG1): #"Graph Interpreter for TTDA"
   Rest arg (ARGS): NIL

ZWEI:CRAM-STRING-OUT:  (P.C. = 12)
   Arg 0 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>
   Arg 1 (STRING): #"Graph Interpreter for TTDA"
   Arg 2 (MAX-SIZE): 49.
   Arg 3 (TRUNCATED): NIL

ZWEI:LIST-BUFFERS-INTERNAL:  (P.C. = 564)
   Arg 0 (STREAM): #<EDITOR-TYPEOUT-WINDOW Editor Typeout Window 5 43241354 exposed>
   Arg 1 (PRINTER): #<DTP-COMPILED-FUNCTION (:INTERNAL ZWEI:COM-LIST-BUFFERS 0.) 31700353>
   Arg 2 (WIDTH): 95.
   Arg 3 (PERIOD-FLAG): NIL
   Arg 4 (APROPOS): NIL

ZWEI:COM-LIST-BUFFERS:  (P.C. = 15)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-LIST-BUFFERS
   Arg 1 (CHAR): 322.
   Arg 2 (PREFIX-CHAR): 344.
   --Defaulted args:--
   Arg 3 (HOOK-LIST): NIL

ZWEI:MAKE-EXTENDED-COMMAND-INTERNAL:  (P.C. = 107)

Closure of ZWEI:MAKE-EXTENDED-COMMAND-INTERNAL:

Rest of stack:
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:48:59-EDT,5172;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 14:11-EDT
Received: from WITHERING by ZERMATT via CHAOS with CHAOS-MAIL id 8636; Fri 26-Jul-85 14:09:57-EDT
Date: Fri, 26 Jul 85 14:10 EDT
From: Harold A. Goldberger <HAROLD@OZ>
Subject: ZMAIL Bug
To: BUG-LISPM@OZ
Message-ID: <850726141011.1.HAROLD@WITHERING>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental MEdit-Medic 2.0, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:



>>Error: The object (FUNCTION STRING-LESSP) is not a valid function
While in the function SI:DIGEST-LAMBDA  SI:APPLY-LAMBDA  SYS:CALL-FUNNY-FUNCTION

SI:DIGEST-LAMBDA:  (P.C. = 1517)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Arg 1 (ENV): NIL
   Arg 2 (NAME): NIL
   Arg 3 (INTERNAL): NIL
   Local 4 (MAP-RESULT): NIL
   Local 5 (THIS-FUNCTION): (FUNCTION STRING-LESSP)
   Local 6 (TYPE): NIL
   Local 7 (BODY): (STRING-LESSP)
   Local 8 (DEBUG-INFO): SYS:INVALID-FUNCTION
   Local 9 (LAMBDA-LIST): :FUNCTION
   Local 10 (ORIGINAL-LAMBDA-LIST): (FUNCTION STRING-LESSP)
   Local 11 (LAMBDA-INFO): #<DTP-LOCATIVE 43640417>
   Local 12 (ARGS-INFO): #<DTP-LOCATIVE 43640426>
   Local 13 (N-REQUIRED): #<DTP-ODD-PC 2170770>
   Local 14 (N-OPTIONAL): 3
   Local 15 (N-AUX): #<DTP-COMPILED-FUNCTION ERROR 6777403>
   Local 16 (BINDINGS): SYS:INVALID-FUNCTION
   Local 17 (SPECIAL): (:FUNCTION (FUNCTION STRING-LESSP))
   Local 18 (ITEM): #<INVALID-FUNCTION 13401437>
   Local 19 (DECLARATIONS): #<INVALID-FUNCTION 13401437>
   Local 20 (SPECIALS): :SIGNAL
   Local 21 (BODY): #<DTP-LOCATIVE 43640437>
   Local 22 (DOCUMENTATION): #<DTP-LOCATIVE 43640441>
   Local 23 (ADDITIONAL-INFO): #<DTP-ODD-PC 6777431>

SI:APPLY-LAMBDA:  (P.C. = 11)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Arg 1 (ARGUMENTS): ("MEDIT" "3640")

SYS:CALL-FUNNY-FUNCTION:  (P.C. = 102)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Rest arg (ARGS): ("MEDIT" "3640")

(FUNCTION STRING-LESSP):
   Arg 0: "MEDIT"
   Arg 1: "3640"

(:INTERNAL SORTCAR 0):  (P.C. = 7)
   Arg 0 (X): ("MEDIT" . :MEDIT)
   Arg 1 (Y): ("3640" . :|3640|)

SI:SORT-SHORT-LIST:  (P.C. = 20)
   Arg 0 (L): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1 (LPRED): #<DTP-COMPILED-FUNCTION (:INTERNAL SORTCAR 0) 2256443>

SORT:  (P.C. = 17)
   Arg 0 (X): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1: #<DTP-COMPILED-FUNCTION (:INTERNAL SORTCAR 0) 2256443>

SORTCAR:  (P.C. = 6)
   Arg 0 (X): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1: (FUNCTION STRING-LESSP)

ZWEI:CHOOSE-KEYWORDS:  (P.C. = 16)
   Arg 0 (LABEL): "Set keywords for message #23:"
   Arg 1 (OLD-KEYWORDS): NIL

ZWEI:ZMAIL-KEYWORDS-MSG:  (P.C. = 34)
   Arg 0 (MSG): #<MSG 5300026>

ZWEI:COM-ZMAIL-KEYWORDS:  (P.C. = 13)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-ZMAIL-KEYWORDS
   Arg 1 (CHAR): (:MENU ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)
   --Defaulted args:--
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
   Arg 0: ZWEI:COM-ZMAIL-KEYWORDS

(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 0 (:MENU)):  (P.C. = 10)
   Arg 0 (**DEFSELECT-OP**): :MENU
   Arg 1 (ITEM): ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS)
   Arg 2 (CH): 4
   Arg 3 (WINDOW): #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>

ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 12)
   Arg 0 (OPERATION): :MENU
   Rest arg (SELECT-METHOD-ARGS): (("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :PROCESS-SPECIAL-COMMAND
   Rest arg (ARGS): (:MENU ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :COMMAND-LOOP
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
   Arg 0 (WINDOW): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:00-EDT,5258;000000000000
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 14:14-EDT
Received: from WITHERING by ZERMATT via CHAOS with CHAOS-MAIL id 8637; Fri 26-Jul-85 14:12:54-EDT
Date: Fri, 26 Jul 85 14:13 EDT
From: Harold A. Goldberger <HAROLD@OZ>
Subject: ZMAIL Bug
To: BUG-LISPM@OZ
Message-ID: <850726141316.2.HAROLD@WITHERING>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental MEdit-Medic 2.0, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:
After mousing right on the keywords command I got the following strange
error in ZMAIL.

>>Error: The object (FUNCTION STRING-LESSP) is not a valid function
While in the function SI:DIGEST-LAMBDA  SI:APPLY-LAMBDA  SYS:CALL-FUNNY-FUNCTION

SI:DIGEST-LAMBDA:  (P.C. = 1517)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Arg 1 (ENV): NIL
   Arg 2 (NAME): NIL
   Arg 3 (INTERNAL): NIL
   Local 4 (MAP-RESULT): NIL
   Local 5 (THIS-FUNCTION): (FUNCTION STRING-LESSP)
   Local 6 (TYPE): NIL
   Local 7 (BODY): (STRING-LESSP)
   Local 8 (DEBUG-INFO): SYS:INVALID-FUNCTION
   Local 9 (LAMBDA-LIST): :FUNCTION
   Local 10 (ORIGINAL-LAMBDA-LIST): (FUNCTION STRING-LESSP)
   Local 11 (LAMBDA-INFO): #<DTP-LOCATIVE 43640417>
   Local 12 (ARGS-INFO): #<DTP-LOCATIVE 43640426>
   Local 13 (N-REQUIRED): #<DTP-ODD-PC 2170770>
   Local 14 (N-OPTIONAL): 3
   Local 15 (N-AUX): #<DTP-COMPILED-FUNCTION ERROR 6777403>
   Local 16 (BINDINGS): SYS:INVALID-FUNCTION
   Local 17 (SPECIAL): (:FUNCTION (FUNCTION STRING-LESSP))
   Local 18 (ITEM): #<INVALID-FUNCTION 13401437>
   Local 19 (DECLARATIONS): #<INVALID-FUNCTION 13401437>
   Local 20 (SPECIALS): :SIGNAL
   Local 21 (BODY): #<DTP-LOCATIVE 43640437>
   Local 22 (DOCUMENTATION): #<DTP-LOCATIVE 43640441>
   Local 23 (ADDITIONAL-INFO): #<DTP-ODD-PC 6777431>

SI:APPLY-LAMBDA:  (P.C. = 11)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Arg 1 (ARGUMENTS): ("MEDIT" "3640")

SYS:CALL-FUNNY-FUNCTION:  (P.C. = 102)
   Arg 0 (FUNCTION): (FUNCTION STRING-LESSP)
   Rest arg (ARGS): ("MEDIT" "3640")

(FUNCTION STRING-LESSP):
   Arg 0: "MEDIT"
   Arg 1: "3640"

(:INTERNAL SORTCAR 0):  (P.C. = 7)
   Arg 0 (X): ("MEDIT" . :MEDIT)
   Arg 1 (Y): ("3640" . :|3640|)

SI:SORT-SHORT-LIST:  (P.C. = 20)
   Arg 0 (L): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1 (LPRED): #<DTP-COMPILED-FUNCTION (:INTERNAL SORTCAR 0) 2256443>

SORT:  (P.C. = 17)
   Arg 0 (X): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1: #<DTP-COMPILED-FUNCTION (:INTERNAL SORTCAR 0) 2256443>

SORTCAR:  (P.C. = 6)
   Arg 0 (X): (("3640" . :|3640|) ("MEDIT" . :MEDIT) ("CONIT" . :CONIT) ("LAMBDA" . :LAMBDA) ("MEDG" . :MEDG) ("Area" . :AREA) ("IEEE" . :IEEE))
   Arg 1: (FUNCTION STRING-LESSP)

ZWEI:CHOOSE-KEYWORDS:  (P.C. = 16)
   Arg 0 (LABEL): "Set keywords for message #23:"
   Arg 1 (OLD-KEYWORDS): NIL

ZWEI:ZMAIL-KEYWORDS-MSG:  (P.C. = 34)
   Arg 0 (MSG): #<MSG 5300026>

ZWEI:COM-ZMAIL-KEYWORDS:  (P.C. = 13)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-ZMAIL-KEYWORDS
   Arg 1 (CHAR): (:MENU ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)
   --Defaulted args:--
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
   Arg 0: ZWEI:COM-ZMAIL-KEYWORDS

(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 0 (:MENU)):  (P.C. = 10)
   Arg 0 (**DEFSELECT-OP**): :MENU
   Arg 1 (ITEM): ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS)
   Arg 2 (CH): 4
   Arg 3 (WINDOW): #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>

ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 12)
   Arg 0 (OPERATION): :MENU
   Rest arg (SELECT-METHOD-ARGS): (("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :PROCESS-SPECIAL-COMMAND
   Rest arg (ARGS): (:MENU ("Keywords" . ZWEI:COM-ZMAIL-KEYWORDS) 4 #<ZMAIL-MAIN-COMMAND-MENU-PANE Zmail Main Command Menu Pane 1 43207724 exposed>)

(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :COMMAND-LOOP
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
   Arg 0 (WINDOW): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:00-EDT,4812;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 16:01-EDT
Received: from MIT-MICKEY-MOUSE by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6573; Fri 26-Jul-85 16:02:41-EDT
Date: Friday, 26 July 1985, 16:01-EDT
From: "CYSK@MC" <Chris Kim at MIT-OBERON>
Sender: CYSK at MIT-OBERON
Subject: Illustrate
To: BUG-LISPM at OZ
Message-ID: <"850726160107.1.cysk@OBERON"@MICKEY-MOUSE.MIT>

Dinarte,

  This is the problem I get when I try to read an Illustrate file.  I
don't know if this is enough information for you.  My LISPM init file
is on OBERON, which may be part of the problem.


In Symbolics 3600 Release 6.0, IP-TCP 29.0, microcode TMC5-MIC 319,
FEP 18, on Lisp Machine Mickey Mouse:



>>Error: "ILLUSTRATION-1" is an invalid name component for OBERON (a VMS host).
While in the function (:METHOD FS:PATHNAME :VALIDATE-COMPONENT)  (:METHOD FS:PATHNAME :VALIDATE)  (:METHOD FS:PATHNAME-HASH-TABLE-MIXIN :GET-PATHNAME)

(:METHOD FS:PATHNAME :VALIDATE-COMPONENT):  (P.C. = 40)
   Arg 0 (SELF): #<VMS-PATHNAME "OBERON:FOO">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME -- 8. IV's, 1. FL's 105216320>
   Arg 2 (OPERATION): :VALIDATE-COMPONENT
   Arg 3 (TEST-ARG): "ILLUSTRATION-1"
   Arg 4 (TEST-ARG-LOC): #<DTP-LOCATIVE 23446476>
   Arg 5 (VALID-MSG): :RAW-NAME
   Arg 6 (TEST-MSG): :VALID-NAME-P
   Arg 7 (CASE-MSG): :CASE-NAME
   Arg 8 (UNCASE-MSG): :UNCASE-NAME
   Arg 9 (COMPONENT): :NAME
   Arg 10 (PRETTY-NAME): "name component"

(:METHOD FS:PATHNAME :VALIDATE):  (P.C. = 45)
   Arg 0 (SELF): #<VMS-PATHNAME "OBERON:FOO">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME -- 8. IV's, 1. FL's 105216320>
   Arg 2 (OPERATION): :VALIDATE

(:METHOD FS:PATHNAME-HASH-TABLE-MIXIN :GET-PATHNAME):  (P.C. = 30)
   Arg 0 (SELF): #<CASE-INSENSITIVE-PATHNAME-HASH-TABLE OBERON>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME-HASH-TABLE-MIXIN -- 1. IV's, 0. FL's 104225614>
   Arg 2 (OPERATION): :GET-PATHNAME
   Arg 3 (DEV): NIL
   Arg 4 (DIR): NIL
   Arg 5 (NAM): "ILLUSTRATION-1"
   Arg 6 (TYP): NIL
   Arg 7 (VRS): NIL
   Arg 8 (OTHERS): NIL
   Arg 9 (KEY): (NIL NIL "ILLUSTRATION-1" NIL NIL)

(:METHOD NET:PATHNAME-HOST-MIXIN :GET-PATHNAME):  (P.C. = 31)
   Arg 0 (SELF): #<VMS-HOST OBERON 1350616>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NET:PATHNAME-HOST-MIXIN -- 3. IV's, 0. FL's 105232643>
   Arg 2 (OPERATION): :GET-PATHNAME
   Arg 3 (DEV): NIL
   Arg 4 (DIR): NIL
   Arg 5 (NAM): "ILLUSTRATION-1"
   Arg 6 (TYP): NIL
   Arg 7 (VRS): NIL
   Arg 8 (OTHERS): NIL

FS:PARSE-PATHNAME:  (P.C. = 313)
   Arg 0 (THING): "Illustration-1"
   Arg 1 (WITH-RESPECT-TO): NIL
   Arg 2 (DEFAULTS): NIL

FS:MERGE-PATHNAMES:  (P.C. = 31)
   Arg 0 (PATHNAME): "Illustration-1"
   Arg 1 (DEFAULTS): NIL
   --Defaulted args:--
   Arg 2 (DEFAULT-VERSION): :NEWEST

(:METHOD ILL:ILL-FRAME :GET-DEFAULTED-PATHNAME):  (P.C. = 26)  (from ILL: CODE; COMMANDS)
   Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
   Arg 2 (OPERATION): :GET-DEFAULTED-PATHNAME

(:METHOD ILL:ILL-FRAME :ASK-FOR-PATHNAME):  (P.C. = 13)  (from ILL: CODE; COMMANDS)
   Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
   Arg 2 (OPERATION): :ASK-FOR-PATHNAME
   Arg 3 (PROMPT): "Read ILL file from:"
   Arg 4 (DEFAULT): NIL
   Arg 5 (DEFAULT-TYPE): :ILL
   --Defaulted args:--
   Arg 6 (FLUSH-TYPEOUT-WINDOW?): T

(:METHOD ILL:ILL-FRAME :READ-ILL-FILE-INTO-CURRENT-BUFFER):  (P.C. = 14)  (from ILL: CODE; COMMANDS)
   Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
   Arg 2 (OPERATION): :READ-ILL-FILE-INTO-CURRENT-BUFFER
   --Defaulted args:--
   Arg 3 (PATHNAME): NIL

ILL:PROCESS-COMMAND:  (P.C. = 12)  (from ILL: CODE; TOPLEVEL)
   Arg 0 (COMMAND): ((32770 :READ-ILL-FILE) :READ-ILL-FILE-INTO-CURRENT-BUFFER (READ ILL:ILL ILL:FILE ILL:OVERLAY) "Overlays the contents of an ILL file onto the current illustration.")
   Arg 1 (FRAME): #<ILL-FRAME Ill Frame 1 600303 exposed>

(:METHOD ILL:ILL-FRAME :ILL-TOP-LEVEL-LOOP):  (P.C. = 311)  (from ILL: CODE; TOPLEVEL)
   Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
   Arg 2 (OPERATION): :ILL-TOP-LEVEL-LOOP

ILL:ILL-TOP-LEVEL:  (P.C. = 17)  (from ILL: CODE; TOPLEVEL)
   Arg 0 (FRAME): #<ILL-FRAME Ill Frame 1 600303 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL


Thanks,

Chris Kim
(CYSK@MC)
22-Oct-85 23:49:01-EDT,1380;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 16:09-EDT
Received: from APIARY-3 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6575; Fri 26-Jul-85 16:05:00-EDT
Date: Fri, 26 Jul 85 16:03 EDT
From: Randy Parker <PARKER@MIT-REAGAN>
Subject: ZMAIL Bug
To: Harold A. Goldberger <HAROLD@OZ>
cc: BUG-LISPM@OZ
In-Reply-To: <850726141316.2.HAROLD@WITHERING>
Message-ID: <850726160306.2.PARKER@APIARY-3>

    Date: Fri, 26 Jul 85 14:13 EDT
    From: Harold A. Goldberger <HAROLD@OZ>

    In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
    Experimental MEdit-Medic 2.0, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:
    After mousing right on the keywords command I got the following strange
    error in ZMAIL.

    >>Error: The object (FUNCTION STRING-LESSP) is not a valid function
    While in the function SI:DIGEST-LAMBDA  SI:APPLY-LAMBDA  SYS:CALL-FUNNY-FUNCTION

The relevant part of your current Zmail init file has this,
which I believe was incorrectly generated by the profile generator
(already known to have several bugs):

(LOGIN-SETQ *KEYWORD-ALIST-SORT-PREDICATE* '(QUOTE (FUNCTION STRING-LESSP)))

Putting the following in your Zmail init after the line that says
;;; *** End of automatically generated user-option settings.
should fix it:

(LOGIN-SETQ *KEYWORD-ALIST-SORT-PREDICATE* #'STRING-LESSP)
22-Oct-85 23:49:03-EDT,5639;000000000000    
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 26 Jul 85 17:14-EDT
Received: from APIARY-3 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6582; Fri 26-Jul-85 17:15:08-EDT
Date: Fri, 26 Jul 85 17:13 EDT
From: Randy Parker <PARKER@MIT-REAGAN>
Reply-To: parker@MIT-REAGAN
Subject: Illustrate NOT Lispm
To: CYSK@MIT-MC
cc: BUG-LISPM@OZ
In-Reply-To: <"850726160107.1.cysk@OBERON"@MICKEY-MOUSE.MIT>
Message-ID: <850726171308.5.PARKER@APIARY-3>


If you don't already know, problems like this should go to
BUG-ILLUSTRATE and not to BUG-LISPM, which has a quite general
distribution.

    Date: Friday, 26 July 1985, 16:01-EDT
    From: "CYSK@MC" <Chris Kim at MIT-OBERON>

    Dinarte,

      This is the problem I get when I try to read an Illustrate file.  I
    don't know if this is enough information for you.  My LISPM init file
    is on OBERON, which may be part of the problem.


    In Symbolics 3600 Release 6.0, IP-TCP 29.0, microcode TMC5-MIC 319,
    FEP 18, on Lisp Machine Mickey Mouse:

Regarding your problem, you are using a VMS host and VMS has
limitations on the various components of filenames.  The name you
supplied to the prompt was definitely too long for VMS.


    >>Error: "ILLUSTRATION-1" is an invalid name component for OBERON (a VMS host).
    While in the function (:METHOD FS:PATHNAME :VALIDATE-COMPONENT)  (:METHOD FS:PATHNAME :VALIDATE)  (:METHOD FS:PATHNAME-HASH-TABLE-MIXIN :GET-PATHNAME)

    (:METHOD FS:PATHNAME :VALIDATE-COMPONENT):  (P.C. = 40)
       Arg 0 (SELF): #<VMS-PATHNAME "OBERON:FOO">
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME -- 8. IV's, 1. FL's 105216320>
       Arg 2 (OPERATION): :VALIDATE-COMPONENT
       Arg 3 (TEST-ARG): "ILLUSTRATION-1"
       Arg 4 (TEST-ARG-LOC): #<DTP-LOCATIVE 23446476>
       Arg 5 (VALID-MSG): :RAW-NAME
       Arg 6 (TEST-MSG): :VALID-NAME-P
       Arg 7 (CASE-MSG): :CASE-NAME
       Arg 8 (UNCASE-MSG): :UNCASE-NAME
       Arg 9 (COMPONENT): :NAME
       Arg 10 (PRETTY-NAME): "name component"

    (:METHOD FS:PATHNAME :VALIDATE):  (P.C. = 45)
       Arg 0 (SELF): #<VMS-PATHNAME "OBERON:FOO">
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME -- 8. IV's, 1. FL's 105216320>
       Arg 2 (OPERATION): :VALIDATE

    (:METHOD FS:PATHNAME-HASH-TABLE-MIXIN :GET-PATHNAME):  (P.C. = 30)
       Arg 0 (SELF): #<CASE-INSENSITIVE-PATHNAME-HASH-TABLE OBERON>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:PATHNAME-HASH-TABLE-MIXIN -- 1. IV's, 0. FL's 104225614>
       Arg 2 (OPERATION): :GET-PATHNAME
       Arg 3 (DEV): NIL
       Arg 4 (DIR): NIL
       Arg 5 (NAM): "ILLUSTRATION-1"
       Arg 6 (TYP): NIL
       Arg 7 (VRS): NIL
       Arg 8 (OTHERS): NIL
       Arg 9 (KEY): (NIL NIL "ILLUSTRATION-1" NIL NIL)

    (:METHOD NET:PATHNAME-HOST-MIXIN :GET-PATHNAME):  (P.C. = 31)
       Arg 0 (SELF): #<VMS-HOST OBERON 1350616>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NET:PATHNAME-HOST-MIXIN -- 3. IV's, 0. FL's 105232643>
       Arg 2 (OPERATION): :GET-PATHNAME
       Arg 3 (DEV): NIL
       Arg 4 (DIR): NIL
       Arg 5 (NAM): "ILLUSTRATION-1"
       Arg 6 (TYP): NIL
       Arg 7 (VRS): NIL
       Arg 8 (OTHERS): NIL

    FS:PARSE-PATHNAME:  (P.C. = 313)
       Arg 0 (THING): "Illustration-1"
       Arg 1 (WITH-RESPECT-TO): NIL
       Arg 2 (DEFAULTS): NIL

    FS:MERGE-PATHNAMES:  (P.C. = 31)
       Arg 0 (PATHNAME): "Illustration-1"
       Arg 1 (DEFAULTS): NIL
       --Defaulted args:--
       Arg 2 (DEFAULT-VERSION): :NEWEST

    (:METHOD ILL:ILL-FRAME :GET-DEFAULTED-PATHNAME):  (P.C. = 26)  (from ILL: CODE; COMMANDS)
       Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
       Arg 2 (OPERATION): :GET-DEFAULTED-PATHNAME

    (:METHOD ILL:ILL-FRAME :ASK-FOR-PATHNAME):  (P.C. = 13)  (from ILL: CODE; COMMANDS)
       Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
       Arg 2 (OPERATION): :ASK-FOR-PATHNAME
       Arg 3 (PROMPT): "Read ILL file from:"
       Arg 4 (DEFAULT): NIL
       Arg 5 (DEFAULT-TYPE): :ILL
       --Defaulted args:--
       Arg 6 (FLUSH-TYPEOUT-WINDOW?): T

    (:METHOD ILL:ILL-FRAME :READ-ILL-FILE-INTO-CURRENT-BUFFER):  (P.C. = 14)  (from ILL: CODE; COMMANDS)
       Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
       Arg 2 (OPERATION): :READ-ILL-FILE-INTO-CURRENT-BUFFER
       --Defaulted args:--
       Arg 3 (PATHNAME): NIL

    ILL:PROCESS-COMMAND:  (P.C. = 12)  (from ILL: CODE; TOPLEVEL)
       Arg 0 (COMMAND): ((32770 :READ-ILL-FILE) :READ-ILL-FILE-INTO-CURRENT-BUFFER (READ ILL:ILL ILL:FILE ILL:OVERLAY) "Overlays the contents of an ILL file onto the current illustration.")
       Arg 1 (FRAME): #<ILL-FRAME Ill Frame 1 600303 exposed>

    (:METHOD ILL:ILL-FRAME :ILL-TOP-LEVEL-LOOP):  (P.C. = 311)  (from ILL: CODE; TOPLEVEL)
       Arg 0 (SELF): #<ILL-FRAME Ill Frame 1 600303 exposed>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ILL:ILL-FRAME -- 62. IV's, 12. FL's 27707256>
       Arg 2 (OPERATION): :ILL-TOP-LEVEL-LOOP

    ILL:ILL-TOP-LEVEL:  (P.C. = 17)  (from ILL: CODE; TOPLEVEL)
       Arg 0 (FRAME): #<ILL-FRAME Ill Frame 1 600303 exposed>

    SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
       --Defaulted args:--
       Arg 0 (IGNORE): NIL


    Thanks,

    Chris Kim
    (CYSK@MC)
22-Oct-85 23:49:03-EDT,539;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 29 Jul 85 15:04-EDT
Received: from SUMEX-AIM.ARPA by MIT-MC.ARPA 29 Jul 85 15:04:30 EDT
Date: Mon 29 Jul 85 10:38:55-PDT
From: Richard Acuff <Acuff@SUMEX-AIM.ARPA>
Subject: Metering Consing under 6.0
To: info-lispm@MIT-MC.ARPA
Message-ID: <12130906371.40.ACUFF@SUMEX-AIM.ARPA>

   Is there a method for finding out what functions are responsible for
what consing under 6.0?  The tool that used to do this under 5 doesn't
seem to work any longer.

	Thanks,
	-- Rich
-------
22-Oct-85 23:49:03-EDT,862;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 29 Jul 85 18:13-EDT
Received: from KOALA by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3144; Mon 29-Jul-85 18:13:57-EDT
Date: Mon, 29 Jul 85 18:12 EDT
From: Rob@MIT-REAGAN.ARPA
Sender: Lisp-Machine@MIT-REAGAN.ARPA
Subject: bug with draw-filled-in-sector
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850729181258.1.LISP-MACHINE@KOALA.MIT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.18, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.12, ZOO-SPIRE 2.2, microcode TMC5-MIC 319, on Lisp Machine Koala:


(send tv:selected-window :draw-filled-in-sector 500 500 100 -2 2 tv:alu-xor)

The above line gives interesting but incorrect results.  The XOR undraws
a portion of the sector.
22-Oct-85 23:49:03-EDT,1657;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 29 Jul 85 21:30-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6639; 29 Jul 85 21:32:48-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 284936; Mon 29-Jul-85 21:29:13-EDT
Date: Mon, 29 Jul 85 21:29 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: OPEN doesn't seem to handle the :IF-DOES-NOT-EXIST keyword properly
To: Stephen Robbins <STEVER@OZ.MIT>, bug-file@OZ.MIT, BUG-LISPM@OZ.MIT
In-Reply-To: <850722141250.7.STEVER@APIARY-8>
Message-ID: <850729212931.2.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Mon, 22 Jul 85 14:12 EDT
    From: Stephen Robbins <STEVER@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, Rodent Free Namespace Editor, on Lisp Machine Apiary-8:

    I tried using the :IF-DOES-NOT-EXIST :CREATE option as follows:

    (open "oz:<stever>test.xx" :direction :input :if-does-not-exist :create :error nil)

    Here's what happens:

    #<QFILE-NOT-FOUND 41130535>

    The file doesn't seem to have been created...

This doesn't sound like a very meaningful operation, on the other hand the documentation
doesn't rule it out as illegal.  I believe the Lisp machine just passes this OPEN option
to the host file system, so the Tops-20 QFILE server should be implementing it, rather
than ignoring it.  Incidentally, the Lisp machine NFILE server and the LMFS local file
system reject this as an inconsistent combination of options.  This is a bug, but you can
see how its priority is not very high.

22-Oct-85 23:49:03-EDT,462;000000000000  
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 30 Jul 85 11:27-EDT
Date: Tue, 30 Jul 85 11:28 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (SETF #'... ...)
To: BUG-LISPM@OZ
Message-ID: <850730112821.1.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

(funcall (flet ((f () 'lose)) (setf #'f (lambda () 'win)) #'f))   =>    LOSE

Shouldn't this evaluate to WIN ?
22-Oct-85 23:49:04-EDT,1096;000000000000  
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 13:35-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA05812; Tue, 30 Jul 85 13:26:36 edt
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 285406; Tue 30-Jul-85 12:09:18-EDT
Date: Tue, 30 Jul 85 12:09 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: (SETF #'... ...)
To: Jonathan A Rees <JAR%MIT-MC@MIT-HTVAX.ARPA>, BUG-LISPM%OZ@MIT-HTVAX.ARPA
In-Reply-To: <850730112821.1.JAR@ELVIS>
Message-Id: <850730120959.8.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Tue, 30 Jul 85 11:28 EDT
    From: Jonathan A Rees <JAR%MIT-MC@MIT-HTVAX.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    (funcall (flet ((f () 'lose)) (cl:setf #'f #'(lambda () 'win)) #'f)))

    Shouldn't this evaluate to WIN ?

Thank you for this report.  We have fixed this in our development
system.  It will be fixed in some future release.

22-Oct-85 23:49:04-EDT,2268;000000000000
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 13:44-EDT
Received: from WITHERING by ZERMATT via CHAOS with CHAOS-MAIL id 8744; Tue 30-Jul-85 13:44:10-EDT
Date: Tue, 30 Jul 85 13:44 EDT
From: Harold A. Goldberger <HAROLD@OZ>
Subject: Bug in finding MEDIC system on sys:site;
To: BUG-LISPM@OZ
Message-ID: <850730134443.1.HAROLD@WITHERING>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:

After booting and doing little else I tried (make-system 'medic), as I had many times before
with success (necessary files are in sys:site;), and the following appeared. The net connections
seem ok since I was able to confirm that the files still exist on zermatt. I'll try again 
giving make-system a string argument.

>>Error: System MEDIC not found
While in the function SI:FIND-SYSTEM-NAMED  SI:FIND-SYSTEM-NAMED  MAKE-SYSTEM

SI:FIND-SYSTEM-NAMED:  (P.C. = 66)
   Arg 0 (NAME): MEDIC
   Arg 1 (NO-ERROR-P): NIL
   Arg 2 (LOADED-ONLY): T

SI:FIND-SYSTEM-NAMED:  (P.C. = 54)
   Arg 0 (NAME): MEDIC
   --Defaulted args:--
   Arg 1 (NO-ERROR-P): NIL
   Arg 2 (LOADED-ONLY): NIL

MAKE-SYSTEM:  (P.C. = 6)
   Arg 0 (SYSTEM): MEDIC
   Rest arg (KEYWORDS): NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (MAKE-SYSTEM (QUOTE MEDIC))
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500047>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 500054>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): "Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<LISP-LISTENER Lisp Listener 1 43200216 exposed>
   Rest arg: (:NAME "Lisp Top Level")

SI:LISP-TOP-LEVEL1:  (P.C. = 5)
   Arg 0 (STREAM): #<LISP-LISTENER Lisp Listener 1 43200216 exposed>

SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:49:04-EDT,2055;000000000000   
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 13:50-EDT
Received: from WITHERING by ZERMATT via CHAOS with CHAOS-MAIL id 8745; Tue 30-Jul-85 13:49:40-EDT
Date: Tue, 30 Jul 85 13:50 EDT
From: Harold A. Goldberger <HAROLD@OZ>
Subject: Same bug
To: BUG-LISPM@OZ
Message-ID: <850730135028.2.HAROLD@WITHERING>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:

The same bug kept occurring despite trying "medic" as arg to make-system and even after loading
"sys:site;medic.system" (which gave me a warning that "the logical host medic is already defined").

>>Error: System MEDIC not found
While in the function SI:FIND-SYSTEM-NAMED  SI:FIND-SYSTEM-NAMED  MAKE-SYSTEM

SI:FIND-SYSTEM-NAMED:  (P.C. = 66)
   Arg 0 (NAME): MEDIC
   Arg 1 (NO-ERROR-P): NIL
   Arg 2 (LOADED-ONLY): T

SI:FIND-SYSTEM-NAMED:  (P.C. = 54)
   Arg 0 (NAME): MEDIC
   --Defaulted args:--
   Arg 1 (NO-ERROR-P): NIL
   Arg 2 (LOADED-ONLY): NIL

MAKE-SYSTEM:  (P.C. = 6)
   Arg 0 (SYSTEM): MEDIC
   Rest arg (KEYWORDS): NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (MAKE-SYSTEM (QUOTE MEDIC))
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500047>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 500054>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): "Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<LISP-LISTENER Lisp Listener 1 43200216 exposed>
   Rest arg: (:NAME "Lisp Top Level")

Rest of stack:
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:49:04-EDT,2071;000000000000  
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 14:36-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA06102; Tue, 30 Jul 85 14:31:41 edt
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 285514; Tue 30-Jul-85 13:50:14-EDT
Date: Tue, 30 Jul 85 13:51 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Minor mail problem
To: Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>, BUG-LISPM%OZ@MIT-HTVAX.ARPA
In-Reply-To: The message of 19 Jun 85 17:24-EDT from Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>
Message-Id: <850730135100.5.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Wed, 19 Jun 85 17:24 EDT
    From: Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.4,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

    Sending mail To: foo@oz, bar@oz, baz@prep ends up contacting oz's mail
    server twice. Once for service MAIL-TO-USER to foo@oz, and bar@oz; and
    then again for service STORE-AND-FORWARD-MAIL to baz@prep. This sounds
    fine if one's view is that store-and-forward-mail and mail-to-user mean
    different things, but has some problems:

      Oz's mail server has to process two messages, instead of one.
      There's more network traffic.
      It takes zwei twice as long to send the message.
      This aggravates the multiple messages problem. The message is destined
      to foo@mc, and bug-foobar@oz, and foo@mc is on bug-foobar, foo will
      get two messages instead of one.

    It would be nice if my lispm would notice that it was going to use
    store-and-forward mail on a host that it also was planning to use
    mail-to-user, and merge the mail-to-user mail into the store-and-forward
    mail.  Or at least behave this way optionally.

The difference is that it is formatting RFC822 headers for PREP (which
is an Internet host) and RFC733 headers for OZ (which isn't, and
couldn't hack domains for a long time).

22-Oct-85 23:49:05-EDT,1197;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 15:41-EDT
Date: Tue, 30 Jul 85 15:41:28 EDT
From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>
Subject:  Minor mail problem
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA, CJL@MIT-MC.ARPA
In-reply-to: Msg of Tue 30 Jul 85 13:51 EDT from Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].593869.850730.CSTACY>

    Date: Tue, 30 Jul 85 13:51 EDT
    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
    To:   Chris Lindblad <CJL%OZ at MIT-HTVAX.ARPA>,
          BUG-LISPM%OZ at MIT-HTVAX.ARPA
    Re:   Minor mail problem
    In-Reply-To: The message of 19 Jun 85 17:24-EDT from Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>

    The difference is that it is formatting RFC822 headers for PREP (which
    is an Internet host) and RFC733 headers for OZ (which isn't, and
    couldn't hack domains for a long time).

The ITS COMSAT solves this problem by creating a single message object
which has a list of recipients.  Each recipient has a list of attributes,
one of which is his own version of the header.  (This should be a little
easier to do in Lisp than in MIDAS!)

Chris
22-Oct-85 23:49:05-EDT,1948;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 15:52-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 30 Jul 85 15:40:20 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 285545; Tue 30-Jul-85 14:21:03-EDT
Date: Tue, 30 Jul 85 14:21 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Can't export from a patch.
To: Ken Haase <KWH%OZ@MIT-MC.ARPA>, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: The message of 24 May 85 15:18-EDT from Ken Haase <KWH@OZ>
Message-ID: <850730142152.9.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Fri, 24 May 85 15:18 EDT
    From: Ken Haase <KWH@OZ>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.1,
    Experimental Meta Representation Langauge 3.1,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Duane Allman:

    When an export form is patched, the resultant compiled code ignores the
    package-local information which is neccessary for the use of export to
    make sense.  In particular, if you M-X Add Patch the following form:

	(EXPORT '(RELATIVITY-FUDGE))

    from a buffer and file where the package is PHYSICS, the resulting patch
    is compiled into a load-time call of the form:

       (EXPORT (LIST (INTERN "RELATIVITY-FUDGE")))

    which (since the package of the patch file is USER) exports
    USER:RELATIVITY-FUDGE instead of PHYSICS:RELATIVITY-FUDGE, which is
    exactly the wrong thing.

    The conversion of the first form into the second package-ignoring form
    seems to be handled by EXPORT's COMPILER:TOP-LEVEL-FORM property.  I'd
    say more if I had the sources, but (bitch bitch) Symbolics doesn't seem
    to have the corporate sense to preserve one of their products most
    significant selling points.

Thank you for your report.  The problem you describe has been fixed in
our development system and will be distributed with a future release.

22-Oct-85 23:49:05-EDT,625;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 17:31-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 30 Jul 85 17:19:31 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Tue 30 Jul 85 16:14:57-CDT
Date: Tue, 30 Jul 85 16:18 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: Compiler incorrectly ignores IGNORE declarations
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850730161801.2.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

Compiling the following form generates a warning.

(defun foo (bar)
  (declare (ignore bar))
  'zozzx)
22-Oct-85 23:49:05-EDT,3056;000000000000  
Received: from MIT-HUREWICZ by MIT-OZ via Chaosnet; 30 Jul 85 19:08-EDT
Date: Tue, 30 Jul 85 19:08 EDT
From: Harry L. Voorhees <HLV@OZ>
Subject: manual storage management with compactionn
To: BUG-LISPM@OZ
cc: hlv@OZ, shatsky@SCRC-STONY-BROOK
Message-ID: <850730190810.2.HLV@HUREWICZ>

I have an application which requires using a large, fixed amount of
storage (about 1 megaword or so) for holding large bit-arrays (images)
of different sizes.  The user allocates arrays from this area; when it
becomes full he should be allowed to de-allocate existing arrays and use
the newly-created space for allocating new ones.

Since there are a relatively small number of arrays, having large
lifetimes, implementing manual storage management with a compaction
algorithm seems to be a reasonable solution.

Alternatively using the dynamic garbage collector decreases performance
too much and, even if run over just a special area for these arrays,
uses too much space.  (Of course, running the ephemeral garbage
collector over the area is even less appropriate because the objects
have large lifetimes.)  If there were some way to run the immediate

Alternatively using function return-array doesn't work, in general,
because the arrays killed aren't necessarily at the end their area.

I've tried two implementations, neither of which presently work:

(1) I declare a permanent 1 megaword array; the user-allocated arrays
are displaced onto it, and I just move around (copy) these displaced
arrays when compaction is necessary.  The problem is that the system
tries to page in the entire huge array upon declaration; since its
larger than physical memory, the machine trashes forever.  Is there a
way initialize the array without paging it all in?

(2) A potentially better solution:  I declare an area (with 1 region) of
size 1 megaword and allocate arrays from it.  When the area/region gets
full, I try to do compaction as follows:  I make a list of all arrays
(not copies of them!) in the region, in order.  Then I record the value
of sys:region-fill-pointer, reset it to 0, re-allocate the first array
(which is now at the beginning of the region), then reset the
region-fill-pointer to its old (large) value, and try copying the
old-array to the new-array.  I cycle back and forth between allocating
more storage from the beginning of the array by using the new, low value of
region-fill-pointer and copying the old arrays by resetting it to its high
value.  The problem is that only the first array gets copied.  After
that, all the remaining old arrays get set to #<ARRAY ARTQ 3423 NOT
POINTING TO LOCATION ANYMORE 324234> (or something like that) containing
values #<DTP NULL>.  Apparently once the region-fill-pointer gets set to
0, it clobbers the old arrays for good, even after I temporarily set the
pointer back to a high value.  How can I get around this?

I either need to know how to fix one of these two methods or an alternative
implementation idea.  Thank you very much.

Harry Voorhees
22-Oct-85 23:49:05-EDT,638;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 30 Jul 85 19:35-EDT
Received: from SARAJEVO by ZERMATT via CHAOS with CHAOS-MAIL id 8768; Tue 30-Jul-85 19:34:35-EDT
Date: Tue, 30 Jul 85 19:35 EDT
From: Edward H Lay <EHL@OZ>
Subject: set package command
To: BUG-LISPM@OZ
Message-ID: <850730193516.1.EHL@SARAJEVO>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental Schema 93.4, microcode TMC5-IO4-ST506-MIC 319, on Sarajevo:

inside of a  common lisp listener leaves the package as cl-user but
DOES change the package in the zetalisp listener.  Calling 
ZL:pkg-goto directly seems to work just fine
22-Oct-85 23:49:06-EDT,2240;000000000000   
Mail-From: KWH created at 31-Jul-85 00:15:59
Date: Wed, 31 Jul 1985  00:15 EDT
Message-ID: <KWH.12131284487.BABYL@MIT-OZ>
From: KWH@MIT-OZ
To:   bug-lispm@MIT-OZ
Subject: Interaction of the package system with bin dumping.


I've been having the following problem with an interaction between
EXPORTING, USING, and compiling of files.  My init file loads a bunch
of utility files and then USES the packages they are defined in, so as
to get their EXPORTED symbols; then, I load my research system which
also loads those files (or, since I use REQUIRE, just confirms that
they are there) and USES the associated symbols.  I then find some
bugs in my system and patch them; the resulting patch file is in the
USER package, and when I M-X Finish Patch, the file is compiled and
the symbols written out ``appropriately''.  Then, sometime later when
I load the system WITHOUT my init file (for instance, when saving a
world with my system in it), I am told that the functions defined in
my utility files are not defined, even though MAKE-SYSTEM/REQUIRE had
certainly loaded them.  The screw was that the patch file loaded the
references to those functions into the USER package which was not
using the appropriate functions at this time.

This is my diagnosis of the problem.  When a file is compiled, the
symbols in it are dumped with respect to the package of the file
dumped (if it's a patch file, it defaults to USER); the bug is that
this "with respect to" assumes that the EXPORT and USE relations in
force at dump time will also be in force at load time.  For instance,
suppose that a package TOOLS exports a symbol DEFINE-FROB; if we are
compiling a file F.LISP (in package USER) which references
DEFINE-FROB, and USER uses TOOLS, DEFINE-FROB will be dumped without
qualification.  Later, when we load F.BIN into a fresh world where
TOOLS:DEFINE-FROB is defined but USER does not use TOOLS, the file
will load a reference to USER:DEFINE-FROB which (unsuprisingly) is
undefined.

The fix for this is probably to dump each symbol with explicit home
package information, abandoning the dumping of symbols ``with
respect to'' the package of the file compiled (except where
they precisely coincide).

22-Oct-85 23:49:06-EDT,8006;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 31 Jul 85 11:15-EDT
Received: from KOALA by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3159; Wed 31-Jul-85 11:16:30-EDT
Date: Wed, 31 Jul 85 11:15 EDT
From: Jack Unverferth <sr.jack%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Qux@goldy
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850731111540.2.JACK@KOALA.MIT>

In Symbolics 3600 Release 6.0, Experimental Versatec 6.0,
Experimental Spire 17.0, microcode TMC5-MIC 319, on JACK'S>>:



Submitted for your approval
	

I hit middle (which should abort the display creation) and
instead put me into the debugger

>>Trap: The first argument given to the SYS:INTERNAL-> instruction, NIL, was not a number.
While in the function SYS:MAX-INTERNAL  CREATE-DISPLAY-ON-LAYOUT  CREATE-DISPLAY-FROM-MENU

SYS:MAX-INTERNAL:  (P.C. = 3)
   Arg 0 (X): NIL
   Arg 1 (Y): 0

CREATE-DISPLAY-ON-LAYOUT:  (P.C. = 42)  (from SPIRE: DISPLAY; LAYOUT)
   Arg 0 (LAYOUT): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
   Arg 1 (EDGES): NIL
   Local 1 (EDGES): (NIL)
   Arg 2 (PLIST): (NIL :MOUSE-OVERLAY (LINE-OVERLAY :DOTS-OR-LINES? :LINES :DECIMAL-PLACES 1 :VALUE-NAME "Third Formant") :MOUSE-MARKER (CURSOR-PLOT :DRAW-METHOD :DRAW-MARKER :CURSOR-NAME :MARKER-TIME) :MOUSE-CURSOR (CURSOR-PLOT :SHOW-VALUES? T :DECIMAL-PLACES 4 :CURSOR-NAME :CURSOR-TIME) :X-SCALE 383 :X-AXIS-LOCATION ...)

CREATE-DISPLAY-FROM-MENU:  (P.C. = 65)  (from SPIRE: DISPLAY; LAYOUT)
   Arg 0 (DISPLAY): NIL

(:PROPERTY CREATE-DISPLAY SPIRE-COMMAND-FUNCTION):  (P.C. = 30)  (from SPIRE: DISPLAY; LAYOUT)
   Arg 0 (DISPLAY): NIL
   Rest arg: (:.CHARACTER. NIL :.ORIGIN. :MENU :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. NIL :.MOUSE-Y. NIL)

COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
   Arg 0 (COMMAND-NAME): COM-CREATE-DISPLAY
   Arg 1 (CHARACTER): NIL
   Arg 2 (ORIGIN): :MENU
   Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
   Arg 4 (X): NIL
   Arg 5 (Y): NIL
   Rest arg (FN-ARGS): NIL

(:METHOD SPIRE-COMMAND-MENU :WHOPPER :EXECUTE):  (P.C. = 24)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE) 0) 76535136>
   Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 4 (.OPERATION.): :EXECUTE
   Arg 5 (ITEM): (:LEFT :COMMAND COM-CREATE-DISPLAY)

(:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE):  (P.C. = 12)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.OPERATION.): :EXECUTE
   Rest arg (.DAEMON-CALLER-ARGS.): ((:LEFT :COMMAND COM-CREATE-DISPLAY))

(:METHOD TV:BASIC-MENU :CHOOSE):  (P.C. = 26)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TV:BASIC-MENU -- 30. IV's, 0. FL's 1115420>
   Arg 2 (OPERATION): :CHOOSE

(:METHOD SPIRE-COMMAND-MENU :COMBINED :CHOOSE):  (P.C. = 42)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.OPERATION.): :CHOOSE
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

EDIT-LAYOUT:  (P.C. = 33)  (from SPIRE: DISPLAY; LAYOUT)
   Rest arg: (:.CHARACTER. NIL :.ORIGIN. :MENU :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. NIL :.MOUSE-Y. NIL)

COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
   Arg 0 (COMMAND-NAME): EDIT-LAYOUT
   Arg 1 (CHARACTER): NIL
   Arg 2 (ORIGIN): :MENU
   Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
   Arg 4 (X): NIL
   Arg 5 (Y): NIL
   Rest arg (FN-ARGS): NIL

(:METHOD SPIRE-COMMAND-MENU :WHOPPER :EXECUTE):  (P.C. = 24)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE) 0) 76535136>
   Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 4 (.OPERATION.): :EXECUTE
   Arg 5 (ITEM): ("Edit Layout" :COMMAND EDIT-LAYOUT :DOCUMENTATION "Edit a layout: movereshape its displays, etc.")

(:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE):  (P.C. = 12)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.OPERATION.): :EXECUTE
   Rest arg (.DAEMON-CALLER-ARGS.): (("Edit Layout" :COMMAND EDIT-LAYOUT :DOCUMENTATION "Edit a layout: movereshape its displays, etc."))

(:METHOD TV:BASIC-MENU :CHOOSE):  (P.C. = 26)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TV:BASIC-MENU -- 30. IV's, 0. FL's 1115420>
   Arg 2 (OPERATION): :CHOOSE

(:METHOD SPIRE-COMMAND-MENU :COMBINED :CHOOSE):  (P.C. = 42)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.OPERATION.): :CHOOSE
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

SPIRE-MENU:  (P.C. = 34)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Rest arg: (:.CHARACTER. 32770 :.ORIGIN. :MOUSE :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. 861 :.MOUSE-Y. 246)

COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
   Arg 0 (COMMAND-NAME): COM-SPIRE-MENU
   Arg 1 (CHARACTER): 32770
   Arg 2 (ORIGIN): :MOUSE
   Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
   Arg 4 (X): 861
   Arg 5 (Y): 246
   Rest arg (FN-ARGS): NIL

(:METHOD TOP-LEVEL-SPIRE :EXECUTE-COMMAND):  (P.C. = 45)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
   Arg 2 (OPERATION): :EXECUTE-COMMAND
   Rest arg (ARGS): (COM-SPIRE-MENU 32770 :MOUSE #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> 861 246)

(:METHOD TOP-LEVEL-SPIRE :MOUSE-COMMAND):  (P.C. = 6)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
   Arg 2 (OPERATION): :MOUSE-COMMAND
   Rest arg (ARGS): (COM-SPIRE-MENU 32770 :MOUSE #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> 861 246)

(:METHOD TOP-LEVEL-SPIRE :READ-AND-HANDLE-COMMAND):  (P.C. = 27)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
   Arg 2 (OPERATION): :READ-AND-HANDLE-COMMAND

(:METHOD TOP-LEVEL-SPIRE :COMMAND-LOOP):  (P.C. = 223)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD TOP-LEVEL-SPIRE :INSPIRE):  (P.C. = 136)  (from SPIRE: DISPLAY; TOP-LEVEL)
   Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
   Arg 2 (OPERATION): :INSPIRE

SPIRE-TOP-LEVEL:  (P.C. = 31)  (from SPIRE: DISPLAY; TOP-LEVEL)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:06-EDT,6207;000000000000 
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Jul 85 14:17-EDT
Date: Wed, 31 Jul 85 14:17 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: m-X Compiler Warnings  crapped out
To: BUG-LISPM@OZ
Message-ID: <850731141730.1.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

I issued a "Compiler Warnings" command to look at warnings generated
when I compiled a buffer.  The following error resulted.

If from this information you can't reporduce or diagnose the bug, let me
know and I'll send you the function that was being compiled.

- Jonathan


>>Error: The function spec (:INTERNAL TORUS 0) is out of range
While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SI:INTERNAL-FUNCTION-SPEC-HANDLER

SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 167)
   Arg 0 (FUNCTION): FDEFINEDP
   Arg 1 (FUNCTION-SPEC): (:INTERNAL TORUS 0)
   --Defaulted args:--
   Arg 2 (ARG1): NIL
   Arg 3 (ARG2): NIL
   Local 4 (PARENT): TORUS
   Local 5 (INDEX): 0
   Local 6 (DIRECT-COMPILED): NIL
   Local 7 (COMPILED-FUNCTION): #<DTP-COMPILED-FUNCTION TORUS 76703342>
   Local 8 (TABLE): (NIL 1 NIL 0)
   Local 9 (OFFSET): NIL

FDEFINEDP:  (P.C. = 23)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL TORUS 0)

SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 107)
   Arg 0 (FUNCTION): FDEFINEDP
   Arg 1 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL TORUS 0) 0)
   --Defaulted args:--
   Arg 2 (ARG1): NIL
   Arg 3 (ARG2): NIL

FDEFINEDP:  (P.C. = 23)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL TORUS 0) 0)

SYS:FUNCTION-PARENT:  (P.C. = 10)
   Arg 0 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL TORUS 0) 0)

(:INTERNAL ZWEI:SORT-ACCORDING-TO-SECTIONIZATION 0):  (P.C. = 31)
   Arg 0 (WARN1): ((:INTERNAL (:INTERNAL TORUS 0) 0) DEFUN ("~S was referenced but not defined." IDIOM))
   Arg 1 (WARN2): ((:INTERNAL TORUS 0) DEFUN ("~S was referenced but not defined." IDIOM))

SI:SORT-SHORT-LIST:  (P.C. = 20)
   Arg 0 (L): (((:INTERNAL TORUS 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 0) 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL TORUS 1) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 1) 0) DEFUN ("~S was referenced but not defined." IDIOM)) (ICOSA DEFUN ("~S was referenced but not defined." SOLID)))
   Arg 1 (LPRED): #<DTP-COMPILED-FUNCTION (:INTERNAL ZWEI:SORT-ACCORDING-TO-SECTIONIZATION 0) 31723137>

STABLE-SORT:  (P.C. = 14)
   Arg 0 (X): (((:INTERNAL TORUS 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 0) 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL TORUS 1) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 1) 0) DEFUN ("~S was referenced but not defined." IDIOM)) (ICOSA DEFUN ("~S was referenced but not defined." SOLID)))
   Arg 1 (LESSP-PREDICATE): #<DTP-COMPILED-FUNCTION (:INTERNAL ZWEI:SORT-ACCORDING-TO-SECTIONIZATION 0) 31723137>

ZWEI:SORT-ACCORDING-TO-SECTIONIZATION:  (P.C. = 11)
   Arg 0 (FILE-WARNING): (#<ITS-PATHNAME "MC: JAR; HACK"> ((:INTERNAL TORUS 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 0) 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL TORUS 1) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 1) 0) DEFUN ("~S was referenced but not defined." IDIOM)) (ICOSA DEFUN ("~S was referenced but not defined." SOLID)))
   Arg 1: ((N-GON DEFUN) (ICOSA DEFUN) (TORUS DEFUN) (IDIOM DEFUN) (TORUS DEFUN) (+MOD6 DEFUN) (+MOD9 DEFUN) (+MOD27 DEFUN) (APL DEFUN) (SOLID DEFUN) ...)

ZWEI:SORT-WARNINGS-FOR-FILE:  (P.C. = 50)
   Arg 0 (PATH): NIL
   Local 0 (PATH): #<ITS-PATHNAME "MC: JAR; HACK">
   Arg 1 (WARN): (#<ITS-PATHNAME "MC: JAR; HACK"> ((:INTERNAL TORUS 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 0) 0) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL TORUS 1) DEFUN ("~S was referenced but not defined." IDIOM)) ((:INTERNAL (:INTERNAL TORUS 1) 0) DEFUN ("~S was referenced but not defined." IDIOM)) (ICOSA DEFUN ("~S was referenced but not defined." SOLID)))
   Arg 2 (OK-TO-LOAD): NIL

(:METHOD ZWEI:COMPILER-WARNINGS-BUFFER :REVERT):  (P.C. = 21)
   Arg 0 (SELF): #<COMPILER-WARNINGS-BUFFER "*Compiler-Warnings-1*" 11300113>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:COMPILER-WARNINGS-BUFFER -- 2. IV's, 4. FL's 143220203>
   Arg 2 (OPERATION): :REVERT

(:METHOD ZWEI:ZMACS-EDITOR :FIND-SPECIAL-BUFFER):  (P.C. = 45)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMACS-EDITOR -- 3. IV's, 0. FL's 142345763>
   Arg 2 (OPERATION): :FIND-SPECIAL-BUFFER
   Arg 3 (TYPE): :COMPILER-WARNINGS
   Arg 4 (NEW-P): T
   Rest arg (SETS): (:SET-PATHNAME-LIST T :SET-PRELOAD-FILES-P NIL)

ZWEI:PUSH-POSSIBILITIES-BUFFER:  (P.C. = 10)
   Arg 0 (ACTION): :SELECT-POSSIBILITIES-BUFFER
   Arg 1 (TYPE): :COMPILER-WARNINGS
   Rest arg (SET-OPTIONS): (:SET-PATHNAME-LIST T :SET-PRELOAD-FILES-P NIL)

ZWEI:COM-COMPILER-WARNINGS:  (P.C. = 11)

ZWEI:COM-EXTENDED-COMMAND:  (P.C. = 27)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-EXTENDED-COMMAND
   Arg 1 (CHAR): 600
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 600

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL


22-Oct-85 23:49:06-EDT,811;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 31 Jul 85 14:57-EDT
Received: from LENNON by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6721; Wed 31-Jul-85 14:45:49-EDT
Date: Wed, 31 Jul 85 14:45 EDT
From: Randy Parker <PARKER@MIT-REAGAN>
Subject: rel4.5 on 3640 and 3670s
To: bug-lispm@OZ
Message-ID: <850731144547.2.PARKER@LENNON>


Is there anyway for us to boot a rel4.5 world on 3640s or 3670s?
Apparently, the microcode is different because of the different IO
board, but we were wondering whether there might be a solution, such as
one of the earlier microcodes updated for these machines.

I realize they came out after rel4 was history, but we are planning on
sending this world around to other sites and would like it, if at all
possible, to run on those machines.

Thanks,
RP
22-Oct-85 23:49:07-EDT,2383;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 31 Jul 85 18:09-EDT
Received: from THINK.ARPA by MIT-MC.ARPA 31 Jul 85 18:10:26 EDT
Received: from SCRC-QUABBIN.ARPA (scrc-quabbin.arpa.ARPA) by THINK.ARPA; Wed, 31 Jul 85 18:09:38 edt
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via INTERNET with SMTP id 188345; 31 Jul 85 18:08:01-EDT
Date: Wed, 31 Jul 85 18:08 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: terminal emulator
To: Paul Rosenblum <PSR@THINK.ARPA>, BUG-LISPM%oz.mit@THINK.ARPA
In-Reply-To: <850725083534.1.PSR@UBALDO.ARPA>
Message-Id: <850731180829.6.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 25 Jul 85 08:35 EDT
    From: Paul Rosenblum <PSR@THINK.ARPA>

    In Symbolics 3640 Release 6.0, IP-TCP 29.0, Experimental TMC 3.0,
    Experimental TMC-ENHANCEMENTS 2.0, Experimental QMS 13.0,
    microcode TMC5-IO4-ST506-MIC 319, on St. Ubaldo:

    (This is my first time using the emulator.)  It seems to perform very
    poorly.  I am on Ubaldo at thinking machines and I wanted to get to Oz
    to read my mail.  I connected to Charon (an Athena machine) and from
    there connected to Oz.  
If you are complaining about throughput performance, I suggest you think
of how many computers you are going throuh in order to get from Think to
OZ.
    I told Charon that I had an aaa-48 and I told Oz
    that I had an ambassador.  I told the terminal emulator be an
    ambassador.

    When initially logging into Charon I got some junk characters *after* it
    knew what terminal type I had.  When I got to Oz, I started reading my
    mail with babyl.  Each messaged displayed wrote over the one previously
    there, incompletely covering the previous message.  Hitting the
    <refresh> key redisplayed the current message correctly.

    I know that I have seen scads of reports from gumby.  Are there fixes
    for these problems?

Yes.  6.1 implements a lot of the AAA escape sequences that were
previous unimplemented (and happen to be the ones people use for OZ,
ITS, etc instead of the more generic ANSI sequences (sigh)).  You will
still get some garbage characters.  These are codes that are still
implemented, and I believe they are all unused by the majority of
operating systems or simply don't exist on the 3600 (e.g., tab stops,
keypad mode, etc.).


22-Oct-85 23:49:07-EDT,1278;000000000000
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 31 Jul 85 18:25-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA13005; Wed, 31 Jul 85 18:16:53 edt
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 286958; Wed 31-Jul-85 18:15:38-EDT
Date: Wed, 31 Jul 85 18:16 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Re: terminal emulator
To: Martin David Connor <mdc@MIT-HTVAX.ARPA>, Paul Rosenblum <PSR@THINK.ARPA>
Cc: BUG-LISPM%oz@MIT-HTVAX.ARPA
In-Reply-To: <8507251656.AA01543@MIT-HTVAX.ARPA>
Message-Id: <850731181653.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: 25 Jul 85 12:44:36 EDT (Thu)
    From: Martin David Connor <mdc@MIT-HTVAX.ARPA>


    Try putting the following line in your lispm init.  I was unable to
    edit on some hosts while SUPDUPing from 36__s until I did.

    (SETQ TELNET:*NVT-OVERSTRIKE-DEFAULT* NIL)

    I suspect you don't really need overstriking for reading your mail.
    Hope it helps.

The critical piece of information left out is what you are SUPDUPing
>to<.  Perhaps 
  TELNET:*SYSTEM-TYPES-THAT-REFUSE-OVERSTRIKING*
  =(in 6.1)=> (:UNIX :UNIX42)
is the more appropriate fix.

22-Oct-85 23:49:07-EDT,1244;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 31 Jul 85 22:38-EDT
Date: Wed, 31 Jul 85 22:39:25 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  terminal emulator
To: DCP@SCRC-QUABBIN.ARPA
cc: PSR@THINK.ARPA, BUG-LISPM@MIT-OZ
In-reply-to: Msg of Wed 31 Jul 85 18:08 EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
Message-ID: <[MIT-MC.ARPA].595961.850731.GUMBY>

What I think he's cvoomplaining about (and if he's not I am) is that,
for example, advancing the cursor a line causes the target line to be
blanked.  Tabbing seems to be broken (at least, u runs everything
together when my tty type is AAA).  Redisplay is pretty weird;
frequently the emulator gets confused about where the cursor is, but
when this happens it always fails to echo inserted characters too, so
it's easy to tell.  The characters do get sent, though; usually a 
redisplays correctly.  This all makes emacs pretty difficult to use.
Several other things are broken too.  Check it out yourself; it's no
fun.

Part of it must be the various machines' assumptions about how the AAA
truly acts -- I get slightly different problems with unix, ITS, and
twenex.  But the problems above are consistent across systems.
22-Oct-85 23:49:07-EDT,2199;000000000000    
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 09:35-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6735; 1 Aug 85 09:34:04-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287264; Thu 1-Aug-85 09:32:54-EDT
Date: Thu, 1 Aug 85 09:34 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: m-X Compiler Warnings  crapped out
To: JAR@MIT-MC.ARPA, BUG-LISPM@OZ.mit
In-Reply-To: <850731141730.1.JAR@ELVIS>
Message-ID: <850801093409.2.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Wed, 31 Jul 85 14:17 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    I issued a "Compiler Warnings" command to look at warnings generated
    when I compiled a buffer.  The following error resulted.

    If from this information you can't reporduce or diagnose the bug, let me
    know and I'll send you the function that was being compiled.

    - Jonathan


    >>Error: The function spec (:INTERNAL TORUS 0) is out of range
    While in the function SI:INTERNAL-FUNCTION-SPEC-HANDLER  FDEFINEDP  SI:INTERNAL-FUNCTION-SPEC-HANDLER

This is a compiler bug which has been fixed in Rel 6.1

    SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 167)
       Arg 0 (FUNCTION): FDEFINEDP
       Arg 1 (FUNCTION-SPEC): (:INTERNAL TORUS 0)
       --Defaulted args:--
       Arg 2 (ARG1): NIL
       Arg 3 (ARG2): NIL
       Local 4 (PARENT): TORUS
       Local 5 (INDEX): 0
       Local 6 (DIRECT-COMPILED): NIL
       Local 7 (COMPILED-FUNCTION): #<DTP-COMPILED-FUNCTION TORUS 76703342>
       Local 8 (TABLE): (NIL 1 NIL 0)
       Local 9 (OFFSET): NIL

    FDEFINEDP:  (P.C. = 23)
       Arg 0 (FUNCTION-SPEC): (:INTERNAL TORUS 0)

    SI:INTERNAL-FUNCTION-SPEC-HANDLER:  (P.C. = 107)
       Arg 0 (FUNCTION): FDEFINEDP
       Arg 1 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL TORUS 0) 0)
       --Defaulted args:--
       Arg 2 (ARG1): NIL
       Arg 3 (ARG2): NIL

    FDEFINEDP:  (P.C. = 23)
       Arg 0 (FUNCTION-SPEC): (:INTERNAL (:INTERNAL TORUS 0) 0)

22-Oct-85 23:49:08-EDT,3966;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 14:27-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6744; 1 Aug 85 14:26:24-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287534; Thu 1-Aug-85 14:23:51-EDT
Date: Thu, 1 Aug 85 14:25 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: manual storage management with compactionn
To: Harry L. Voorhees <HLV@OZ.mit>, BUG-LISPM@OZ.mit
cc: schatsky@SCRC-STONY-BROOK.ARPA
In-Reply-To: <850730190810.2.HLV@HUREWICZ>
Message-ID: <850801142520.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue, 30 Jul 85 19:08 EDT
    From: Harry L. Voorhees <HLV@OZ>

    I have an application which requires using a large, fixed amount of
    storage (about 1 megaword or so) for holding large bit-arrays (images)
    of different sizes.  The user allocates arrays from this area; when it
    becomes full he should be allowed to de-allocate existing arrays and use
    the newly-created space for allocating new ones.

    Since there are a relatively small number of arrays, having large
    lifetimes, implementing manual storage management with a compaction
    algorithm seems to be a reasonable solution.

    Alternatively using the dynamic garbage collector decreases performance
    too much and, even if run over just a special area for these arrays,
    uses too much space.  (Of course, running the ephemeral garbage
    collector over the area is even less appropriate because the objects
    have large lifetimes.)  If there were some way to run the immediate

    Alternatively using function return-array doesn't work, in general,
    because the arrays killed aren't necessarily at the end their area.

    I've tried two implementations, neither of which presently work:

    (1) I declare a permanent 1 megaword array; the user-allocated arrays
    are displaced onto it, and I just move around (copy) these displaced
    arrays when compaction is necessary.  The problem is that the system
    tries to page in the entire huge array upon declaration; since its
    larger than physical memory, the machine trashes forever.  Is there a
    way initialize the array without paging it all in?

    (2) A potentially better solution:  I declare an area (with 1 region) of
    size 1 megaword and allocate arrays from it.  When the area/region gets
    full, I try to do compaction as follows:  I make a list of all arrays
    (not copies of them!) in the region, in order.  Then I record the value
    of sys:region-fill-pointer, reset it to 0, re-allocate the first array
    (which is now at the beginning of the region), then reset the
    region-fill-pointer to its old (large) value, and try copying the
    old-array to the new-array.  I cycle back and forth between allocating
    more storage from the beginning of the array by using the new, low value of
    region-fill-pointer and copying the old arrays by resetting it to its high
    value.  The problem is that only the first array gets copied.  After
    that, all the remaining old arrays get set to #<ARRAY ARTQ 3423 NOT
    POINTING TO LOCATION ANYMORE 324234> (or something like that) containing
    values #<DTP NULL>.  Apparently once the region-fill-pointer gets set to
    0, it clobbers the old arrays for good, even after I temporarily set the
    pointer back to a high value.  How can I get around this?

    I either need to know how to fix one of these two methods or an alternative
    implementation idea.  Thank you very much.

"You get what you deserve" by even thinking about method (2).  You are
highly misusing the storage system and violating external and internal
storage conventions.  As for (1), it shouldn't thrash forever.  Since
you only do it once, does it really make that much difference?  What's
wrong with resources that use lazy sizes?

22-Oct-85 23:49:08-EDT,8883;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 14:28-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 3204; 1 Aug 85 14:26:32-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287535; Thu 1-Aug-85 14:25:07-EDT
Date: Thu, 1 Aug 85 14:26 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Qux@goldy
To: Jack Unverferth <sr.jack%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850731111540.2.JACK@KOALA.MIT>
Message-ID: <850801142634.4.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 31 Jul 85 11:15 EDT
    From: Jack Unverferth <sr.jack%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3600 Release 6.0, Experimental Versatec 6.0,
    Experimental Spire 17.0, microcode TMC5-MIC 319, on JACK'S>>:



    Submitted for your approval
	
This looks like a SPIRE bug, not a LispM bug.

    I hit middle (which should abort the display creation) and
    instead put me into the debugger

    >>Trap: The first argument given to the SYS:INTERNAL-> instruction, NIL, was not a number.
    While in the function SYS:MAX-INTERNAL  CREATE-DISPLAY-ON-LAYOUT  CREATE-DISPLAY-FROM-MENU

    SYS:MAX-INTERNAL:  (P.C. = 3)
       Arg 0 (X): NIL
       Arg 1 (Y): 0

    CREATE-DISPLAY-ON-LAYOUT:  (P.C. = 42)  (from SPIRE: DISPLAY; LAYOUT)
       Arg 0 (LAYOUT): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
       Arg 1 (EDGES): NIL
       Local 1 (EDGES): (NIL)
       Arg 2 (PLIST): (NIL :MOUSE-OVERLAY (LINE-OVERLAY :DOTS-OR-LINES? :LINES :DECIMAL-PLACES 1 :VALUE-NAME "Third Formant") :MOUSE-MARKER (CURSOR-PLOT :DRAW-METHOD :DRAW-MARKER :CURSOR-NAME :MARKER-TIME) :MOUSE-CURSOR (CURSOR-PLOT :SHOW-VALUES? T :DECIMAL-PLACES 4 :CURSOR-NAME :CURSOR-TIME) :X-SCALE 383 :X-AXIS-LOCATION ...)

    CREATE-DISPLAY-FROM-MENU:  (P.C. = 65)  (from SPIRE: DISPLAY; LAYOUT)
       Arg 0 (DISPLAY): NIL

    (:PROPERTY CREATE-DISPLAY SPIRE-COMMAND-FUNCTION):  (P.C. = 30)  (from SPIRE: DISPLAY; LAYOUT)
       Arg 0 (DISPLAY): NIL
       Rest arg: (:.CHARACTER. NIL :.ORIGIN. :MENU :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. NIL :.MOUSE-Y. NIL)

    COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
       Arg 0 (COMMAND-NAME): COM-CREATE-DISPLAY
       Arg 1 (CHARACTER): NIL
       Arg 2 (ORIGIN): :MENU
       Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
       Arg 4 (X): NIL
       Arg 5 (Y): NIL
       Rest arg (FN-ARGS): NIL

    (:METHOD SPIRE-COMMAND-MENU :WHOPPER :EXECUTE):  (P.C. = 24)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE) 0) 76535136>
       Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 4 (.OPERATION.): :EXECUTE
       Arg 5 (ITEM): (:LEFT :COMMAND COM-CREATE-DISPLAY)

    (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE):  (P.C. = 12)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.OPERATION.): :EXECUTE
       Rest arg (.DAEMON-CALLER-ARGS.): ((:LEFT :COMMAND COM-CREATE-DISPLAY))

    (:METHOD TV:BASIC-MENU :CHOOSE):  (P.C. = 26)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TV:BASIC-MENU -- 30. IV's, 0. FL's 1115420>
       Arg 2 (OPERATION): :CHOOSE

    (:METHOD SPIRE-COMMAND-MENU :COMBINED :CHOOSE):  (P.C. = 42)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 5 6203774 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.OPERATION.): :CHOOSE
       Rest arg (.DAEMON-CALLER-ARGS.): NIL

    EDIT-LAYOUT:  (P.C. = 33)  (from SPIRE: DISPLAY; LAYOUT)
       Rest arg: (:.CHARACTER. NIL :.ORIGIN. :MENU :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. NIL :.MOUSE-Y. NIL)

    COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
       Arg 0 (COMMAND-NAME): EDIT-LAYOUT
       Arg 1 (CHARACTER): NIL
       Arg 2 (ORIGIN): :MENU
       Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
       Arg 4 (X): NIL
       Arg 5 (Y): NIL
       Rest arg (FN-ARGS): NIL

    (:METHOD SPIRE-COMMAND-MENU :WHOPPER :EXECUTE):  (P.C. = 24)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE) 0) 76535136>
       Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 4 (.OPERATION.): :EXECUTE
       Arg 5 (ITEM): ("Edit Layout" :COMMAND EDIT-LAYOUT :DOCUMENTATION "Edit a layout: movereshape its displays, etc.")

    (:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE):  (P.C. = 12)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.OPERATION.): :EXECUTE
       Rest arg (.DAEMON-CALLER-ARGS.): (("Edit Layout" :COMMAND EDIT-LAYOUT :DOCUMENTATION "Edit a layout: movereshape its displays, etc."))

    (:METHOD TV:BASIC-MENU :CHOOSE):  (P.C. = 26)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TV:BASIC-MENU -- 30. IV's, 0. FL's 1115420>
       Arg 2 (OPERATION): :CHOOSE

    (:METHOD SPIRE-COMMAND-MENU :COMBINED :CHOOSE):  (P.C. = 42)  (from SPIRE: COMMAND; MENU)
       Arg 0 (SELF): #<SPIRE-COMMAND-MENU Spire Command Menu 1 6200436 deactivated>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
       Arg 2 (.OPERATION.): :CHOOSE
       Rest arg (.DAEMON-CALLER-ARGS.): NIL

    SPIRE-MENU:  (P.C. = 34)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Rest arg: (:.CHARACTER. 32770 :.ORIGIN. :MOUSE :.WINDOW. #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> :.MOUSE-X. 861 :.MOUSE-Y. 246)

    COMMAND-EXECUTE:  (P.C. = 130)  (from SPIRE: COMMAND; WINDOW)
       Arg 0 (COMMAND-NAME): COM-SPIRE-MENU
       Arg 1 (CHARACTER): 32770
       Arg 2 (ORIGIN): :MOUSE
       Arg 3 (WINDOW): #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed>
       Arg 4 (X): 861
       Arg 5 (Y): 246
       Rest arg (FN-ARGS): NIL

    (:METHOD TOP-LEVEL-SPIRE :EXECUTE-COMMAND):  (P.C. = 45)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
       Arg 2 (OPERATION): :EXECUTE-COMMAND
       Rest arg (ARGS): (COM-SPIRE-MENU 32770 :MOUSE #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> 861 246)

    (:METHOD TOP-LEVEL-SPIRE :MOUSE-COMMAND):  (P.C. = 6)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
       Arg 2 (OPERATION): :MOUSE-COMMAND
       Rest arg (ARGS): (COM-SPIRE-MENU 32770 :MOUSE #<SPIRE-LAYOUT Spire Layout 1 6200076 exposed> 861 246)

    (:METHOD TOP-LEVEL-SPIRE :READ-AND-HANDLE-COMMAND):  (P.C. = 27)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
       Arg 2 (OPERATION): :READ-AND-HANDLE-COMMAND

    (:METHOD TOP-LEVEL-SPIRE :COMMAND-LOOP):  (P.C. = 223)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
       Arg 2 (OPERATION): :COMMAND-LOOP

    (:METHOD TOP-LEVEL-SPIRE :INSPIRE):  (P.C. = 136)  (from SPIRE: DISPLAY; TOP-LEVEL)
       Arg 0 (SELF): #<TOP-LEVEL-SPIRE 7427606>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TOP-LEVEL-SPIRE -- 10. IV's, 0. FL's 1151747>
       Arg 2 (OPERATION): :INSPIRE

    SPIRE-TOP-LEVEL:  (P.C. = 31)  (from SPIRE: DISPLAY; TOP-LEVEL)

    SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
       Arg 0 (IGNORE): NIL


22-Oct-85 23:49:09-EDT,1636;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 16:21-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6750; 1 Aug 85 16:20:07-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287632; Thu 1-Aug-85 16:18:47-EDT
Date: Thu, 1 Aug 85 16:20 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: rel4.5 on 3640 and 3670s
To: Randy Parker <PARKER@MIT-REAGAN.ARPA>, bug-lispm@OZ.mit
In-Reply-To: <850731144547.2.PARKER@LENNON>
Message-ID: <850801162018.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 31 Jul 85 14:45 EDT
    From: Randy Parker <PARKER@MIT-REAGAN>


    Is there anyway for us to boot a rel4.5 world on 3640s or 3670s?

3640s: No.  5.2 is the first release that supports 3640s.  3670s may,
but I would count on it.  3670s were introduced at about the same time
as Release 5.  There are likely hardware reasons why 4.5 won't work (as
you say, the IO board).

    Apparently, the microcode is different because of the different IO
    board, but we were wondering whether there might be a solution, such as
    one of the earlier microcodes updated for these machines.

    I realize they came out after rel4 was history, but we are planning on
    sending this world around to other sites and would like it, if at all
    possible, to run on those machines.

What is "this world"?  Are you actually building a distributed system on
a 4.5 world and sending it to others?  If so, I would strongly like to
know why you haven't moved to Release 6, or at the very least, Release
5.

22-Oct-85 23:49:09-EDT,1874;000000000000    
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 16:31-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6751; 1 Aug 85 16:30:06-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287640; Thu 1-Aug-85 16:27:44-EDT
Date: Thu, 1 Aug 85 16:29 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: terminal emulator
To: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>, DCP@SCRC-QUABBIN.ARPA
cc: PSR@THINK.ARPA, BUG-LISPM@MIT-OZ.mit, HOSS@SCRC-QUABBIN.ARPA
In-Reply-To: <[MIT-MC.ARPA].595961.850731.GUMBY>
Message-ID: <850801162915.1.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 31 Jul 85 22:39:25 EDT
    From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>

    What I think he's cvoomplaining about (and if he's not I am) is that,
    for example, advancing the cursor a line causes the target line to be
    blanked.  Tabbing seems to be broken (at least, u runs everything
    together when my tty type is AAA).  Redisplay is pretty weird;
    frequently the emulator gets confused about where the cursor is, but
    when this happens it always fails to echo inserted characters too, so
    it's easy to tell.  The characters do get sent, though; usually a 
    redisplays correctly.  This all makes emacs pretty difficult to use.
    Several other things are broken too.  Check it out yourself; it's no
    fun.

    Part of it must be the various machines' assumptions about how the AAA
    truly acts -- I get slightly different problems with unix, ITS, and
    twenex.  But the problems above are consistent across systems.

I suggest you ask HOSS to give you the appropriate patches to the
terminal program that I made several months ago.  I can't tell from your
description, but I believe all of your complaints have been fixed.

22-Oct-85 23:49:09-EDT,1977;000000000000 
Received: from MIT-SID by MIT-OZ via Chaosnet; 1 Aug 85 16:48-EDT
Date: Thu, 1 Aug 85 16:46 EDT
From: JAR@MIT-MC
Sender: DANIEL@MIT-MC
Reply-To: JAR@MIT-MC
Subject: Bug in DEFUN
To: BUG-LISPM@OZ
Message-ID: <850801164654.1.DANIEL@SID>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

In a Common Lisp Listener, I typed (let ((x 1)) (defun f () x)) and then
(f) and got the below behavior.  According to page 67 of "Common Lisp:
the Language," the call (f) should evaluate to 1.

- Jonathan Rees


>>Trap: The variable X is unbound.
While in the function SI:*EVAL  BLOCK  SI:*EVAL

SI:*EVAL:  (P.C. = 23)
   Arg 0 (FORM): X
   Arg 1 (ENV): (NIL NIL ((F #<DTP-LOCATIVE 7400306>)) NIL NIL NIL (NIL NIL NIL NIL NIL NIL NIL))
   --Defaulted args:--
   Arg 2 (HOOK): NIL

BLOCK:  (P.C. = 107)
   Arg 0 (.FORM.): (BLOCK F X)
   Arg 1 (ENV): (NIL NIL NIL NIL NIL NIL NIL)

SI:*EVAL:  (P.C. = 165)
   Arg 0 (FORM): (BLOCK F X)
   Arg 1 (ENV): (NIL NIL NIL NIL NIL NIL NIL)
   --Defaulted args:--
   Arg 2 (HOOK): NIL

SI:APPLY-LAMBDA:  (P.C. = 507)
   Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA NIL (BLOCK F X)) (F) 2048 262144 NIL NIL NIL (BLOCK F X))
   Arg 1 (ARGUMENTS): NIL

ZETALISP-SYSTEM:CALL-FUNNY-FUNCTION:  (P.C. = 102)
   Arg 0 (FUNCTION): (SI:DIGESTED-LAMBDA (LAMBDA NIL (BLOCK F X)) (F) 2048 262144 NIL NIL NIL (BLOCK F X))
   Rest arg (ARGS): NIL

F:

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (F)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 7400101>

Rest of stack:
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:49:09-EDT,1022;000000000000 
Received: from MIT-SID by MIT-OZ via Chaosnet; 1 Aug 85 17:11-EDT
Date: Thu, 1 Aug 85 17:09 EDT
From: JAR@MIT-MC
Sender: DANIEL@MIT-MC
Reply-To: JAR@MIT-MC
Subject: More lexical scoping problems.
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850801170926.2.DANIEL@SID>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

In an attempt to fix DEFUN, I did the following:

    (defmacro defun (name &body rest)
      `(fdefine ',name (lambda ,@rest)))

Indeed, this caused

    (let ((x 1)) (defun f () x))

to work.   But then I did

    (defflavor foo (a b c) ()
      :settable-instance-variables)
    
    (let ((x 1))
      (defmethod (foo :baz) (p) `((p = ,p) (x = ,x) (a = ,a))))
    
    (setq f (make-instance 'foo :a 'big))
    
    (send f :baz 'pp)

and Lisp stopped itself!  I guess I'm not surprised, but it seems to me
this should work, and return the list  ((p = pp) (x = 1) (a = big)) .

- Jonathan
22-Oct-85 23:49:10-EDT,1255;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 1 Aug 85 19:31-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  1 Aug 85 19:31:08 EDT
Received: from BIG.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 287794; Thu 1-Aug-85 19:28:58-EDT
Date: Thu, 1 Aug 85 19:30 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Bug in DEFUN
To: JAR@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850801164654.1.DANIEL@SID>
Message-ID: <850801193002.3.HORNIG@BIG.SCRC.Symbolics.COM>

    Date: Thu, 1 Aug 85 16:46 EDT
    From: JAR@MIT-MC

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

    In a Common Lisp Listener, I typed (let ((x 1)) (defun f () x)) and then
    (f) and got the below behavior.  According to page 67 of "Common Lisp:
    the Language," the call (f) should evaluate to 1.

    - Jonathan Rees

    >>Trap: The variable X is unbound.
    While in the function SI:*EVAL  BLOCK  SI:*EVAL

Thank you for this report.  The problem you describe has been fixed in
the development system and will be distributed in some future release.

This will work in the interpreter only, of course.

22-Oct-85 23:49:10-EDT,1227;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 2 Aug 85 09:44-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6765; 2 Aug 85 09:32:07-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 288052; Fri 2-Aug-85 09:30:24-EDT
Date: Fri, 2 Aug 85 09:31 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: command parsing -- debugger
To: Zvona@OZ.mit, BUG-LISPM@OZ.mit
In-Reply-To: <850406215714.1.ZVONA@DUANE.MIT.EDU>
Message-ID: <850802093143.3.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Saturday, 6 April 1985, 21:57-EST
    From: David Chapman <Zvona at OZ>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 7.8,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Duane Allman:

    Trivial point: in the debugger, typing a non-debugger command makes
    Eval: appear, which suggests that a CP command can not be given, whereas
    in fact it can.  It would be more logical to just use the standard CP
    prompt (since so far as I can tell at that point you can do exactly the
    same set of things as you can in a lisp listener).

(Cleaning our old mail) This will behave better in the development
system.

22-Oct-85 23:49:11-EDT,1672;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 2 Aug 85 11:16-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6770; 2 Aug 85 11:17:18-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 288173; Fri 2-Aug-85 11:15:32-EDT
Date: Fri, 2 Aug 85 11:17 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: More lexical scoping problems.
To: JAR@MIT-MC.ARPA, BUG-LISPM@OZ.mit
In-Reply-To: <850801170926.2.DANIEL@SID>
Message-ID: <850802111714.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 1 Aug 85 17:09 EDT
    From: JAR@MIT-MC

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

    In an attempt to fix DEFUN, I did the following:

	(defmacro defun (name &body rest)
	  `(fdefine ',name (lambda ,@rest)))

    Indeed, this caused

	(let ((x 1)) (defun f () x))

    to work.   But then I did

	(defflavor foo (a b c) ()
	  :settable-instance-variables)
    
	(let ((x 1))
	  (defmethod (foo :baz) (p) `((p = ,p) (x = ,x) (a = ,a))))
    
	(setq f (make-instance 'foo :a 'big))
    
	(send f :baz 'pp)

    and Lisp stopped itself!  I guess I'm not surprised, but it seems to me
    this should work, and return the list  ((p = pp) (x = 1) (a = big)) .

You should do Show Status and use dbg:decode-micro-pc as it says in the
documentation.  I'll bet this is due to having a method which is of type
DTP-LEXICAL-CLOSURE, which isn't supported by the microcode (as I found
out a while back).  Fixing it is on my queue, but it won't happen soon.

22-Oct-85 23:49:11-EDT,1808;000000000000
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 2 Aug 85 11:16-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6771; 2 Aug 85 11:17:42-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 288175; Fri 2-Aug-85 11:16:02-EDT
Date: Fri, 2 Aug 85 11:17 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: More lexical scoping problems.
To: JAR@MIT-MC.ARPA, BUG-LISPM@OZ.mit
In-Reply-To: <850801170926.2.DANIEL@SID>
Supersedes: <850802111714.8.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850802111746.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 1 Aug 85 17:09 EDT
    From: JAR@MIT-MC

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

    In an attempt to fix DEFUN, I did the following:

	(defmacro defun (name &body rest)
	  `(fdefine ',name (lambda ,@rest)))

I wouldn't be suprised if none of your "defun"s get compiled anymore.

    Indeed, this caused

	(let ((x 1)) (defun f () x))

    to work.   But then I did

	(defflavor foo (a b c) ()
	  :settable-instance-variables)
    
	(let ((x 1))
	  (defmethod (foo :baz) (p) `((p = ,p) (x = ,x) (a = ,a))))
    
	(setq f (make-instance 'foo :a 'big))
    
	(send f :baz 'pp)

    and Lisp stopped itself!  I guess I'm not surprised, but it seems to me
    this should work, and return the list  ((p = pp) (x = 1) (a = big)) .

You should do Show Status and use dbg:decode-micro-pc as it says in the
documentation.  I'll bet this is due to having a method which is of type
DTP-LEXICAL-CLOSURE, which isn't supported by the microcode (as I found
out a while back).  Fixing it is on my queue, but it won't happen soon.

22-Oct-85 23:49:11-EDT,656;000000000000   
Received: from MIT-HUREWICZ by MIT-OZ via Chaosnet; 2 Aug 85 12:23-EDT
Date: Fri, 2 Aug 85 12:23 EDT
From: Harry L. Voorhees <HLV@OZ>
Subject: missing source files
To: BUG-LISPM@OZ
cc: philip@OZ
Message-ID: <850802122323.2.HLV@HUREWICZ>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Witold Hurewicz:

We're missing a bunch of the Lispm source files in directory
B:>sys>r6>sys.  We have the files for Release 5 on Pig; why don't we
have the Release 6 files?  They're necessary to do any sort system
programming, most of which isn't documented very well, if at all.

Harry Voorhees
22-Oct-85 23:49:12-EDT,794;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 2 Aug 85 15:28-EDT
Date: Fri,  2 Aug 85 15:29:40 EDT
From: Jonathan A Rees <JAR@MIT-MC.ARPA>
Subject:  Bug in DEFUN
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-OZ
Message-ID: <[MIT-MC.ARPA].598731.850802.JAR>

    Date: Thu, 1 Aug 85 19:30 EDT
    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>

        (let ((x 1)) (defun f () x)) ...

    Thank you for this report.  The problem you describe has been fixed in
    the development system and will be distributed in some future release.

    This will work in the interpreter only, of course.

I can't figure out what you mean by "this will work in the interpreter
only."  I thought that Common Lisp was supposed to work the same
interpreted and compiled!
22-Oct-85 23:49:12-EDT,1679;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 2 Aug 85 16:24-EDT
Date: Fri,  2 Aug 85 16:25:33 EDT
From: Jonathan A Rees <JAR@MIT-MC.ARPA>
Subject:  More lexical scoping problems.
To: DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-OZ
Message-ID: <[MIT-MC.ARPA].598812.850802.JAR>

    Date: Fri, 2 Aug 85 11:17 EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>

        Date: Thu, 1 Aug 85 17:09 EDT
        From: JAR@MIT-MC

        In an attempt to fix DEFUN, I did the following:

    	(defmacro defun (name &body rest)
    	  `(fdefine ',name (lambda ,@rest)))

    I wouldn't be suprised if none of your "defun"s get compiled anymore.
    ...

Well, it's certainly a bug if the LAMBDA-expression in a top-level

    (bar 'foo (lambda ...)),

where BAR is an arbitrary function (e.g. FDEFINE), doesn't get compiled.
What am I supposed to do if I want it compiled?  Why should I have to
use DEFUN?  I thought the whole point of LAMBDA-expressions was that
they let you create anonymous functions; why should I pay a performance
penalty for using them?

In general, all LAMBDA-expressions occuring in a file should get
compiled.  The easiest way to do this would be to compile all the
top-level expressions in the file; then you'd get LAMBDA's, DEFUN's,
DEFPROP's, macros, etc. for free, and I bet your file transducer would
become a lot more elegant.  I suppose the argument against this is that
after the file is loaded you'd have some dead compiled code (the
top-level forms, that were only executed once) lying around that
wouldn't be GC'ed.  But if unreferenced compiled code doesn't get GC'ed,
that's a bug too!
22-Oct-85 23:49:14-EDT,566;000000000001   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Aug 85 18:39-EDT
Date: Sat,  3 Aug 85 18:40:30 EDT
From: George J. Carrette <GJC@MIT-MC.ARPA>
Subject: KERMIT for LISPMACHINE
To: INFO-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].599622.850803.GJC>

A KERMIT that will run in both MIT System 99 and Symbolics
Release 6.0 is on MIT-MC. See GJC;LM0HLP DOC.
A simple (MAKE-SYSTEM 'KERMIT) should be sufficient
for those with system sources pointing to ZERMATT
or the MIT system 99. Try it out now before it
gets into the Columbia U kermit distribution.
22-Oct-85 23:49:14-EDT,461;000000000000   
Received: from MIT-LISPM-12 by MIT-OZ via Chaosnet; 3 Aug 85 19:07-EDT
Date: Saturday, 3 August 1985, 19:09-EDT
From: Scott W. Layson <X.GYRO@MIT-OZ>
Subject: SETF doesn't return second arg...
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
microcode 320, GC@2, on Lisp Machine Twelve:

(SETF #'FOO BAR) macroexpands to (PROGN (FDEFINE 'FOO BAR)), which
returns T instead of the value of BAR.

-- Scott
22-Oct-85 23:49:14-EDT,4104;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Aug 85 22:47-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  3 Aug 85 22:48:16 EDT
Received: from AMMON by MCC.ARPA via Chaosnet; Sat 3 Aug 85 21:48:38-CDT
Date: Sat, 3 Aug 85 21:43 CDT
From: Ken Haase <AI.KWH@MCC-AI>
Subject: Simple form of DEFSETF not supported.
To: BUG-LISPM@CAD-MAC, BUG-LISPM%MC@MCC-AI
cc: KWH@MCC-AI, Gumby@MCC-AI
Message-ID: <850803214355.1.KWH@AMMON>

In Symbolics 3640 Release 6.0, IP-TCP 29.0,
Experimental Meta Representation Langauge 5.4,
Experimental Cyrano Discovery System 2.3,
microcode TMC5-IO4-ST506-MIC 319, Name-Kludge, Fixed :BATCH, on Ammon:

According to the silver bible, DEFSETF takes a simple form of:
   (DEFSETF <access-fn> <update-fn> [doc-string])
It didn't like my use of this form:

>>Error: Unrecognizable DEFSETF form
While in the function DEFSETF  FUNCALL  SI:EVAL-MACRO

DEFSETF:  (P.C. = 144)
   Arg 0 (.FORM.): (DEFSETF CL::EVENT-PROPERTY CL::PUT-EVENT-PROPERTY
                            #"Adds an alist-property to an event.")
   Arg 1 (.ENV.): NIL
   Local 2: NIL
   Local 3: NIL
   Local 4: NIL
   Local 5 (BODY): NIL
   Local 6 (ACCESS-FUNCTION): CL::EVENT-PROPERTY
   Local 7 (STORING-FUNCTION-OR-ARGS): CL::PUT-EVENT-PROPERTY
   Local 8 (STORE-VARIABLES): #"Adds an alist-property to an event."
   Local 9 (DOCUMENTATION): NIL
   Local 10 (NAME): CL::EVENT-PROPERTY
   Local 11 (SEND-CASE): NIL
   Local 12 (TRIVIAL-METHOD-PROPERTY): LT::TRIVIAL-SETF-METHOD
   Local 13 (METHOD-PROPERTY): LT::SETF-METHOD
   Local 14: CL::EVENT-PROPERTY
   Local 15: DEFSETF

FUNCALL:  (P.C. = 5)
   Arg 0 (FN): #<DTP-COMPILED-FUNCTION DEFSETF 76456102>
   Rest arg (ARGS): ((DEFSETF CL::EVENT-PROPERTY CL::PUT-EVENT-PROPERTY
                              #"Adds an alist-property to an event.")
                     NIL)

SI:EVAL-MACRO:  (P.C. = 46)
   Arg 0 (EXPANDER): #<DTP-COMPILED-FUNCTION DEFSETF 76456102>
   Arg 1 (FORM): (DEFSETF CL::EVENT-PROPERTY CL::PUT-EVENT-PROPERTY
                          #"Adds an alist-property to an event.")
   Arg 2 (ENV): NIL

SI:*EVAL:  (P.C. = 136)
   Arg 0 (FORM): (DEFSETF CL::EVENT-PROPERTY CL::PUT-EVENT-PROPERTY
                          #"Adds an alist-property to an event.")
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

SI:READFILE-INTERNAL:  (P.C. = 142)
   Arg 0: #<FILE-INPUT-CHARACTER-STREAM #"MCC:PS:<AI.KWH.CLISP>PA.LISP" 32216047>
   Arg 1 (PKG): NIL
   Arg 2 (NO-MSG-P): NIL
   Rest arg: NIL

FS:LOAD-STREAM:  (P.C. = 16)
   Arg 0 (STREAM): #<FILE-INPUT-CHARACTER-STREAM #"MCC:PS:<AI.KWH.CLISP>PA.LISP" 32216047>
   Arg 1 (PKG): NIL
   Arg 2 (NO-MSG-P): NIL

ZL:LOAD:  (P.C. = 124)
   Arg 0 (PATHNAME): #P"MCC:PS:<AI.KWH.CLISP>PA.LISP"
   Arg 1 (PKG): NIL
   Arg 2 (NONEXISTENT-OK-FLAG): NIL
   Arg 3 (DONT-SET-DEFAULT-P): NIL
   Arg 4 (NO-MSG-P): NIL

LOAD:  (P.C. = 116)
   Arg 0 (FILE): "MCC:<AI.KWH.CLISP>PA.LISP"
   Rest arg: NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (LOAD "MCC:<AI.KWH.CLISP>PA.LISP")
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 36240101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 36240106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 2 1100107 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 2 1100107 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:14-EDT,566;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 4 Aug 85 15:13-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 4 AUG 85  15:14:24 EDT
Date: Sunday, 4 August 1985, 15:14-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

The documentation string for FILLARRAY claims that (FILLARRAY NIL SOURCE) makes
"a new list as big as SOURCE" when SOURCE is a list.  Of course it makes an ARRAY.
22-Oct-85 23:49:14-EDT,3389;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 4 Aug 85 19:07-EDT
Received: from SCRC-QUABBIN.ARPA by MIT-MC.ARPA  4 Aug 85 19:09:07 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 189425; Sun 4-Aug-85 19:07:09-EDT
Date: Sun, 4 Aug 85 19:07 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Interaction of the package system with bin dumping.
To: KWH%MIT-OZ@MIT-MC.ARPA
cc: bug-lispm%MIT-OZ@MIT-MC.ARPA
In-Reply-To: <KWH.12131284487.BABYL@MIT-OZ>
Message-ID: <850804190757.4.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Wed, 31 Jul 1985  00:15 EDT
    From: KWH%MIT-OZ@MIT-MC.ARPA


    I've been having the following problem with an interaction between
    EXPORTING, USING, and compiling of files.  My init file loads a bunch
    of utility files and then USES the packages they are defined in, so as
    to get their EXPORTED symbols; then, I load my research system which
    also loads those files (or, since I use REQUIRE, just confirms that
    they are there) and USES the associated symbols.  I then find some
    bugs in my system and patch them; the resulting patch file is in the
    USER package, and when I M-X Finish Patch, the file is compiled and
    the symbols written out ``appropriately''.  Then, sometime later when
    I load the system WITHOUT my init file (for instance, when saving a
    world with my system in it), I am told that the functions defined in
    my utility files are not defined, even though MAKE-SYSTEM/REQUIRE had
    certainly loaded them.  The screw was that the patch file loaded the
    references to those functions into the USER package which was not
    using the appropriate functions at this time.

    This is my diagnosis of the problem.  When a file is compiled, the
    symbols in it are dumped with respect to the package of the file
    dumped (if it's a patch file, it defaults to USER); the bug is that
    this "with respect to" assumes that the EXPORT and USE relations in
    force at dump time will also be in force at load time.  For instance,
    suppose that a package TOOLS exports a symbol DEFINE-FROB; if we are
    compiling a file F.LISP (in package USER) which references
    DEFINE-FROB, and USER uses TOOLS, DEFINE-FROB will be dumped without
    qualification.  Later, when we load F.BIN into a fresh world where
    TOOLS:DEFINE-FROB is defined but USER does not use TOOLS, the file
    will load a reference to USER:DEFINE-FROB which (unsuprisingly) is
    undefined.

    The fix for this is probably to dump each symbol with explicit home
    package information, abandoning the dumping of symbols ``with
    respect to'' the package of the file compiled (except where
    they precisely coincide).

Doing that would introduce other bugs.  We've considered this before.

I think the problem here is yours: you change the USER package around
inconsistently between compile-time and load-time environments.  Your
best workaround would probably be to manually edit the patch files to
be in some other package than USER (just select the buffer containing
the patch file and edit the -*- line some time before m-X Finish Patch).
Alternatively you could change your init file to do its USESs to a
different package than USER and to select that package as the default
for Lisp listeners.

22-Oct-85 23:49:15-EDT,1706;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 4 Aug 85 19:33-EDT
Received: from SCRC-QUABBIN.ARPA by MIT-MC.ARPA  4 Aug 85 19:33:57 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 189432; Sun 4-Aug-85 19:32:00-EDT
Date: Sun, 4 Aug 85 19:32 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Minor mail problem
To: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>
cc: Hornig@SCRC-STONY-BROOK.ARPA, BUG-LISPM@MIT-MC.ARPA, CJL@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].593869.850730.CSTACY>
Message-ID: <850804193248.7.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Tue, 30 Jul 85 15:41:28 EDT
    From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

	Date: Tue, 30 Jul 85 13:51 EDT
	From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
	To:   Chris Lindblad <CJL%OZ at MIT-HTVAX.ARPA>,
	      BUG-LISPM%OZ at MIT-HTVAX.ARPA
	Re:   Minor mail problem
	In-Reply-To: The message of 19 Jun 85 17:24-EDT from Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>

	The difference is that it is formatting RFC822 headers for PREP (which
	is an Internet host) and RFC733 headers for OZ (which isn't, and
	couldn't hack domains for a long time).

    The ITS COMSAT solves this problem by creating a single message object
    which has a list of recipients.  Each recipient has a list of attributes,
    one of which is his own version of the header.

That's what the Lisp machine does, too.

Since the CHAOS mail protocol only lets you send one version of the text of the
message (which includes the header), both Comsat and the Lisp machine has to
invoke the mail server twice to send a message with headers formatted two
different ways.

22-Oct-85 23:49:15-EDT,1553;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 4 Aug 85 20:07-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  4 Aug 85 20:08:57 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 288972; Sun 4-Aug-85 20:05:47-EDT
Date: Sun, 4 Aug 85 20:06 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Simple form of DEFSETF not supported.
To: Ken Haase <AI.KWH@MCC.ARPA>
cc: BUG-LISPM@MIT-MC.ARPA, KWH@MCC.ARPA, Gumby@MCC.ARPA,
    HOSS@SCRC-STONY-BROOK.ARPA
In-Reply-To: <850803214355.1.KWH@AMMON>
Message-ID: <850804200656.9.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Sat, 3 Aug 85 21:43 CDT
    From: Ken Haase <AI.KWH@MCC-AI>

    In Symbolics 3640 Release 6.0

    According to the silver bible, DEFSETF takes a simple form of:
       (DEFSETF <access-fn> <update-fn> [doc-string])
    It didn't like my use of this form:

    >>Error: Unrecognizable DEFSETF form
    While in the function DEFSETF  FUNCALL  SI:EVAL-MACRO

    DEFSETF:  (P.C. = 144)
       Arg 0 (.FORM.): (DEFSETF CL::EVENT-PROPERTY CL::PUT-EVENT-PROPERTY
				#"Adds an alist-property to an event.")

Leave off the documentation string and it will work.  In the development
system it has been fixed to throw away the documentation string.  In a
future release it will either do that or actually save the documentation
string someplace from whence you can get it back.

It looks like we missed this restriction in the documentation section
"SCL and Common Lisp Differences."

22-Oct-85 23:49:15-EDT,547;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 5 Aug 85 12:56-EDT
Received: from JANIS by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6798; Mon 5-Aug-85 12:58:24-EDT
Date: Mon, 5 Aug 85 12:56 EDT
From: lmz@OZ
Sender: PARKER@MIT-REAGAN
Subject: TI Explorers
To: info-lispm-mit@OZ
Message-ID: <850805125633.3.PARKER@JANIS>


Does anybody know the location and/or status of TI Explorers in Tech
Square?  We are interested in this for the MacDoc AI/LCS Documentation
project, and were wondering if they should be included.

Thanks.
22-Oct-85 23:49:15-EDT,1712;000000000000 
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 5 Aug 85 21:40-EDT
Date: Mon, 5 Aug 85 21:41 EDT
From: Chris Lindblad <CJL@OZ>
Subject: Minor mail problem
To: Moon@SCRC-STONY-BROOK
cc: CSTACY@OZ, BUG-LISPM@OZ
In-Reply-To: <850804193248.7.MOON@EUPHRATES.SCRC.Symbolics.COM>
Message-ID: <850805214105.2.CJL@ELVIS>

    Date: Sun, 4 Aug 85 19:32 EDT
    From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>

	Date: Tue, 30 Jul 85 15:41:28 EDT
	From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

	    Date: Tue, 30 Jul 85 13:51 EDT
	    From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
	    To:   Chris Lindblad <CJL%OZ at MIT-HTVAX.ARPA>,
		  BUG-LISPM%OZ at MIT-HTVAX.ARPA
	    Re:   Minor mail problem
	    In-Reply-To: The message of 19 Jun 85 17:24-EDT from Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>

	    The difference is that it is formatting RFC822 headers for PREP (which
	    is an Internet host) and RFC733 headers for OZ (which isn't, and
	    couldn't hack domains for a long time).

	The ITS COMSAT solves this problem by creating a single message object
	which has a list of recipients.  Each recipient has a list of attributes,
	one of which is his own version of the header.

    That's what the Lisp machine does, too.

    Since the CHAOS mail protocol only lets you send one version of the text of the
    message (which includes the header), both Comsat and the Lisp machine has to
    invoke the mail server twice to send a message with headers formatted two
    different ways.

Then shouldn't the SMTP protocol be preferred to the CHAOS-MAIL protocol? 
Yet SMTP protocol has a desirability of .65, and the CHAOS-MAIL protocol
has a desirability of .70.
22-Oct-85 23:49:15-EDT,2563;000000000000
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 5 Aug 85 22:39-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 6815; 5 Aug 85 22:41:59-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 289639; Mon 5-Aug-85 22:40:17-EDT
Date: Mon, 5 Aug 85 22:39 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Minor mail problem
To: Chris Lindblad <CJL@OZ.MIT>
cc: CSTACY@OZ.MIT, BUG-LISPM@OZ.MIT
In-Reply-To: <850805214105.2.CJL@ELVIS>
Message-ID: <850805223959.6.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Mon, 5 Aug 85 21:41 EDT
    From: Chris Lindblad <CJL@OZ>

	Date: Sun, 4 Aug 85 19:32 EDT
	From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>

	    Date: Tue, 30 Jul 85 15:41:28 EDT
	    From: Christopher C. Stacy <CSTACY@MIT-MC.ARPA>

		Date: Tue, 30 Jul 85 13:51 EDT
		From: Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
		To:   Chris Lindblad <CJL%OZ at MIT-HTVAX.ARPA>,
		      BUG-LISPM%OZ at MIT-HTVAX.ARPA
		Re:   Minor mail problem
		In-Reply-To: The message of 19 Jun 85 17:24-EDT from Chris Lindblad <CJL%OZ@MIT-HTVAX.ARPA>

		The difference is that it is formatting RFC822 headers for PREP (which
		is an Internet host) and RFC733 headers for OZ (which isn't, and
		couldn't hack domains for a long time).

	    The ITS COMSAT solves this problem by creating a single message object
	    which has a list of recipients.  Each recipient has a list of attributes,
	    one of which is his own version of the header.

	That's what the Lisp machine does, too.

	Since the CHAOS mail protocol only lets you send one version of the text of the
	message (which includes the header), both Comsat and the Lisp machine has to
	invoke the mail server twice to send a message with headers formatted two
	different ways.

    Then shouldn't the SMTP protocol be preferred to the CHAOS-MAIL protocol? 
    Yet SMTP protocol has a desirability of .65, and the CHAOS-MAIL protocol
    has a desirability of .70.

I guess that depends on the relative expense of acquiring multiple connections for
the CHAOS-MAIL protocol versus the extra initial (and final?) handshakes for the
SMTP protocol.  Those might be different for each operating system.  You could set the 
protocol desirabilities individually for each host according to your measurements
of the expense, if you care to take the trouble.  Put a HOST-PROTOCOL-DESIRABILITY
property on your SITE.  (This is assuming that OZ has a CHAOS SMTP server, as MC does).

22-Oct-85 23:49:16-EDT,880;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 6 Aug 85 02:00-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  6 Aug 85 02:01:37 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Tue 6 Aug 85 00:58:19-CDT
Date: Tue, 6 Aug 85 00:58 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: compiler should recognise keywords used as variables
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850806005813.3.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

I mis-typed an expression and hence a keyword was used as a variable (in
the middle of a setf place specifier) The compiler correctly generated
the warning "The variable :TYPE is unknown and has been declared SPECIAL,"
However it would have been more useful had the compiler warned me
"Keyword being used as a variable" or some similar thing.
22-Oct-85 23:49:16-EDT,524;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 6 Aug 85 14:29-EDT
Date: Tue,  6 Aug 85 14:30:43 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].602701.850806.WJL>

I'm having a problem with text-scroll-window.
If I just do (make-instance 'tv:text-scroll-window)
there is an error from an illegal method override
from basic-scroll-bar's documentation -- so maybe
it's really a problem with basic-scroll-bar.
Anyway, what's up? (this is on a 3640, rel 6)
-Bill Long
22-Oct-85 23:49:16-EDT,1045;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 11:43-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  7 Aug 85 11:24:22 EDT
Received: from COCKATIEL.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 290479; Wed 7-Aug-85 10:13:19-EDT
Date: Wed, 7 Aug 85 10:11 EDT
From: Joanne Hukee <hukee@SCRC-STONY-BROOK.ARPA>
Subject: tv:text-scroll-window
To: WJL@MIT-MC.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].602701.850806.WJL>
Message-ID: <850807101112.1.HUKEE@COCKATIEL.SCRC.Symbolics.COM>

    Date: Tue,  6 Aug 85 14:30:43 EDT
    From: Bill Long <WJL@MIT-MC.ARPA>

    I'm having a problem with text-scroll-window.
    If I just do (make-instance 'tv:text-scroll-window)
    there is an error from an illegal method override
    from basic-scroll-bar's documentation -- so maybe
    it's really a problem with basic-scroll-bar.
    Anyway, what's up? (this is on a 3640, rel 6)
    -Bill Long

tv:text-scroll-window is really a mixin, not an instantiable flavor.

22-Oct-85 23:49:16-EDT,909;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 13:38-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3462; Wed 7-Aug-85 13:39:40-EDT
Date: Wed, 7 Aug 85 13:39 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: C-Sh-A in Zmacs
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850807133927.1.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.12, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

(funcall a 1 2 3)
        

Typing c-sh-a with the cursor, for example, where the arrow points to,
gives the message 
1: NOT FOUND
instead of the arguments for FUNCALL (maybe this is related to 
(funcall #'+ 1 2 3) giving the arguments of #'+?)
22-Oct-85 23:49:16-EDT,856;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 16:12-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  7 Aug 85 16:13:55 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Wed 7 Aug 85 15:12:28-CDT
Date: Wed, 7 Aug 85 15:13 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: cl compiler doesn't like DECLARE in a multiple-value-bind
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850807151317.7.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
Experimental Eclat 2.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

If I try to compile a function with the floowing form in it I get the
warning "The declaration (IGNORE STATUS) is in a place where
declarations are not allowed"

(multiple-value-bind (major minor status)
    (declare (ignore status))
    (si:get-system-version system-name)
22-Oct-85 23:49:17-EDT,1330;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 18:23-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  7 Aug 85 18:24:45 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 290931; Wed 7-Aug-85 17:32:12-EDT
Date: Wed, 7 Aug 85 17:32 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: cl compiler doesn't like DECLARE in a multiple-value-bind
To: David Vinayak Wallace <Gumby@MCC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850807151317.7.GUMBY@MCC-GANESH>
Message-ID: <850807173220.1.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Wed, 7 Aug 85 15:13 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
    Experimental Eclat 2.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

    If I try to compile a function with the floowing form in it I get the
    warning "The declaration (IGNORE STATUS) is in a place where
    declarations are not allowed"

    (multiple-value-bind (major minor status)
	(declare (ignore status))
	(si:get-system-version system-name))

If you think about it, you will realize that you mean:

(multiple-value-bind (major minor status)
      (si:get-system-version system-name)
   (declare (ignore status))
   )


22-Oct-85 23:49:17-EDT,1601;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 18:56-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  7 Aug 85 18:57:18 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Wed 7 Aug 85 17:55:35-CDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 290952; Wed 7-Aug-85 17:55:03-EDT
Date: Wed, 7 Aug 85 17:54 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: cl compiler doesn't like DECLARE in a multiple-value-bind
To: David Vinayak Wallace <Gumby@MCC.ARPA>, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850807151317.7.GUMBY@MCC-GANESH>
Message-ID: <850807175422.6.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 7 Aug 85 15:13 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
    Experimental Eclat 2.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

    If I try to compile a function with the floowing form in it I get the
    warning "The declaration (IGNORE STATUS) is in a place where
    declarations are not allowed"

    (multiple-value-bind (major minor status)
	(declare (ignore status))
	(si:get-system-version system-name)

Think!  CLtL page 136:
	multiple-value-bind ( {var}* ) values-form {declaration}* {form}*

(dcd foo ()
  (multiple-value-bind (major minor status)
      (si:get-system-version)
    (declare (ignore status))
    (list major minor)))

Compiles into correct code (but complain that STATUS is never used
because Release 6 doesn't implement (DECLARE (IGNORE ...))).

22-Oct-85 23:49:17-EDT,476;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 19:18-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 7 AUG 85  19:19:38 EDT
Date: Wednesday, 7 August 1985, 19:19-EDT
From: Devon S. McCullough <Devon@MIT-MC>
Subject: fillarray on CADR
To: bug-lispm@MIT-MC

In addition to clarifying the documentation string for the case of a
null ARRAY, FILLARRAY also should create the new array with the same
type as SOURCE instead of defaulting to ART-Q.
22-Oct-85 23:49:17-EDT,359;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 19:32-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 7 AUG 85  19:34:05 EDT
Date: Wednesday, 7 August 1985, 19:34-EDT
From: Devon S. McCullough <Devon@MIT-MC>
Subject: CADR zmacs bug
To: bug-lispm@MIT-MC

foo-bar<m-rubout><m-1><rubout><c-Y> produces foobar- instead of foo-bar.
22-Oct-85 23:49:17-EDT,1915;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 7 Aug 85 20:18-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  7 Aug 85 20:20:13 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Wed 7 Aug 85 19:18:51-CDT
Received: from ANNISQUAM.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291059; Wed 7-Aug-85 20:17:41-EDT
Date: Wed, 7 Aug 85 20:17 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: cl compiler doesn't like DECLARE in a multiple-value-bind
To: Gumby@MCC.ARPA, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850807151317.7.GUMBY@MCC-GANESH>
Message-ID: <850807201758.3.GREENWALD@ANNISQUAM.SCRC.Symbolics.COM>

    Date: Wed, 7 Aug 85 15:13 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
    Experimental Eclat 2.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

    If I try to compile a function with the floowing form in it I get the
    warning "The declaration (IGNORE STATUS) is in a place where
    declarations are not allowed"

    (multiple-value-bind (major minor status)
	(declare (ignore status))
	(si:get-system-version system-name)

I think that the declare form should occur "at the beginning of the
body" of multiple-value-bind (CLtL pg. 153), so that the way to write
this is:

(multiple-value-bind (major minor status)
    (si:get-system-version system-name)
  (declare (ignore status))
  (frob-with major minor))

I'm not certain about this, though, as the quoted reference is the only
place I noticed in the CL specification that mentions precisely where
declarations belong inside of special forms.

Unfortunately, in release 6, "all Common Lisp declarations other than
'special' are ignored" (Reference guide to Symbolics Lisp, page 640), so
I think that "status" won't actually be ignored until a later release.

22-Oct-85 23:49:18-EDT,1411;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 08:56-EDT
Date: Thu,  8 Aug 85 08:57:28 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
Subject: tv:text-scroll-window
To: hukee@SCRC-STONY-BROOK.ARPA
cc: WJL@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].604910.850808.WJL>

    From: Joanne Hukee <hukee@SCRC-STONY-BROOK.ARPA>
        Date: Tue,  6 Aug 85 14:30:43 EDT
        From: Bill Long <WJL@MIT-MC.ARPA>
        I'm having a problem with text-scroll-window.
        If I just do (make-instance 'tv:text-scroll-window)
        there is an error from an illegal method override
        from basic-scroll-bar's documentation -- so maybe
        it's really a problem with basic-scroll-bar.
        Anyway, what's up? (this is on a 3640, rel 6)
        -Bill Long
    tv:text-scroll-window is really a mixin, not an instantiable flavor.

Thanks.  That clears up my problem.

It would also be helpful if its name ended in -mixin, it were documented
as a mixin (see v7 p174), and the error message indicated that its not
an instantiable flavor.

PS. Anyone know of a flavor that works like text-scroll-window but allows
the items to specify how much vertical space they need (in pixels), rather
than being single line items? (scroll-window "knows" too much about the
size of the objects and placement to do what I want -- font switching and
intermixed graphics)
22-Oct-85 23:49:18-EDT,903;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 10:42-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  8 Aug 85 10:42:59 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Thu 8 Aug 85 09:41:17-CDT
Date: Thu, 8 Aug 85 09:42 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: TELNET timing screw
To: BUG-LISPM%MC@MCC-AI
Message-ID: <850808094206.9.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
Experimental Eclat 4.0, microcode TMC5-IO4-ST506-MIC 319, 
on Lord Ganesh:

this is repeatable:

I am connected to a remote host via TELNET over INTERNET.  I typed a
command which took a while to start printing (I did finger, but anything
will do), and before the command had time to start printing I did
<NETWORK>.  The remote typeout was displayed on the typeout window.

If you can't reproduce this I'll try to reduce the number of variables.
22-Oct-85 23:49:18-EDT,1192;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 10:47-EDT
Date: Thu, 8 Aug 85 10:48 EDT
From: Richard E. Zippel <RZ@ZERMATT>
Subject: Same bug
To: HAROLD@OZ, BUG-LISPM@OZ
In-Reply-To: <850730135028.2.HAROLD@WITHERING>
Message-ID: <850808104808.3.RZ@ZERMATT>

    Date: Tue, 30 Jul 85 13:50 EDT
    From: Harold A. Goldberger <HAROLD@OZ>

    In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
    microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Withering:

    The same bug kept occurring despite trying "medic" as arg to make-system and even after loading
    "sys:site;medic.system" (which gave me a warning that "the logical host medic is already defined").

    >>Error: System MEDIC not found
    While in the function SI:FIND-SYSTEM-NAMED  SI:FIND-SYSTEM-NAMED  MAKE-SYSTEM

SYS:SITE;MEDIC.SYSTEM
;;; -*- Mode:LISP; Package: USER -*-

(fs:make-logical-pathname-host "medic")

(si:set-system-source-file "medic"
			   "medic: medic; medic-sys")

I've had better luck giving the complete pathname, viz.,

(si:set-system-source-file "medic"
			   "medic: medic; medic-sys.lisp")

but haven't traced the problem down any further.
22-Oct-85 23:49:18-EDT,5015;000000000000   
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 13:22-EDT
Received: from MIT-ROCKY-GRAZIANO by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6883; Thu 8-Aug-85 13:23:03-EDT
Date: Thu, 8 Aug 85 13:23 EDT
From: Roland Ouellette <Roly@MIT-MC>
Subject: I've never seen this before.....
To: BUG-LISPM@OZ
Message-ID: <850808132303.1.ROLY@MIT-ROCKY-GRAZIANO>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.0,
microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

...and suspect that it would go away if I booted Rocky and/or Joe.
Best of luck.

>>Error: Incorrect access to directory containing file.
         For JOE:>Roly>lispm-init.bin
While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

(:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND):  (P.C. = 65)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7622074>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :WAIT-FOR-COMMAND
   Arg 3 (TID-CONS-ARGS): ("T2377" :OPEN "Open" #<NFILE-DATA-CHANNEL I2371 7623515>)
   Local 4 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL I2371 7623515>
   Local 5 (COMMAND-TID): "T2377"
   Local 6 (COMMAND-NAME): :OPEN
   Local 7 (WHOSTATE): "Open"
   Local 8 (RESPONSE-ARGS): ("ACC" (:PATHNAME ">Roly>lispm-init.bin.NEWEST") "Incorrect access to directory containing file.")
   Local 9 (RESPONSE-NAME): :ERROR

(:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND):  (P.C. = 40)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7622074>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-AND-WAIT-FOR-COMMAND
   Arg 3 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I2371 7623515> "I2371" ">Roly>lispm-init.bin.NEWEST" :INPUT :DEFAULT)

(:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT):  (P.C. = 54)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7622074>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-IN-COMMAND-CONDITION-ENVIRONMENT
   Arg 3 (MESSAGE): :SEND-AND-WAIT-FOR-COMMAND
   Arg 4 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I2371 7623515> "I2371" ">Roly>lispm-init.bin.NEWEST" :INPUT :DEFAULT)

(:METHOD FS:NFILE-SERVER-UNIT :COMMAND):  (P.C. = 7)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7622074>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :COMMAND
   Rest arg (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I2371 7623515> "I2371" ">Roly>lispm-init.bin.NEWEST" :INPUT :DEFAULT)

FS:NFILE-KEYWORD-LIST-CALLER:  (P.C. = 165)
   Arg 0 (INSTANCE): #<NFILE-SERVER-UNIT 7622074>
   Arg 1 (CMDNAME): :OPEN
   Arg 2 (WHOSTATE): "Open"
   Arg 3 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL I2371 7623515>
   Arg 4 (CONSTANT-ARGS): ("I2371" ">Roly>lispm-init.bin.NEWEST" :INPUT :DEFAULT)
   Local 4 (CONSTANT-ARGS): NIL
   Arg 5 (KEYWORD-VALUE-PAIRS): (:BYTE-SIZE NIL :DELETED NIL :RAW NIL :SUPER-IMAGE NIL :PRESERVE-DATES NIL ...)
   Local 5 (KEYWORD-VALUE-PAIRS): NIL

(:METHOD FS:NFILE-ACCESS-PATH :OPEN):  (P.C. = 375)
   Arg 0 (SELF): #<LMFS-NFILE-ACCESS-PATH JOE using NEW-FILE 7622015>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-ACCESS-PATH -- 4. IV's, 2. FL's 121346410>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (REAL-PATHNAME): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Arg 4 (COMMAND-PATHNAME): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Rest arg: (:DIRECTION :INPUT :CHARACTERS :DEFAULT)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 104225115>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Rest arg (OPTIONS): (:DIRECTION :INPUT :CHARACTERS :DEFAULT)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Arg 1 (KEYWORD-ARGS): (:CHARACTERS :DEFAULT)

OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "JOE:>Roly>lispm-init.bin">
   Rest arg (KEYWORD-ARGS): (:CHARACTERS :DEFAULT)

FS:LOAD-OPEN:  (P.C. = 122)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "JOE:>roly>lispm-init.bin">
   Arg 1 (NONEXISTENT-OK-FLAG): NIL
   Arg 2 (DONT-SET-DEFAULT-P): NIL

LOAD:  (P.C. = 116)
   Arg 0 (PATHNAME): "joe:>roly>lispm-init.bin"
   Local 0 (PATHNAME): #<LMFS-PATHNAME "JOE:>roly>lispm-init.bin">
   --Defaulted args:--
   Arg 1 (PKG): NIL
   Arg 2 (NONEXISTENT-OK-FLAG): NIL
   Arg 3 (DONT-SET-DEFAULT-P): NIL
   Arg 4 (NO-MSG-P): NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (LOAD "joe:>roly>lispm-init.bin")
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL
22-Oct-85 23:49:18-EDT,6178;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 15:15-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3512; Thu 8-Aug-85 15:10:50-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3510; Thu 8-Aug-85 15:07:41-EDT
Date: Thursday, 8 August 1985, 15:07-EDT
From: Scott Cyphers <sr.ehpyc at MIT-SPEECH>
Subject: [Rob at MIT-REAGAN: problem with mailer?]
To: bug-lispm at MIT-SPEECH
Message-ID: <850808150740.1.CYPHER@YOGI.MIT>

Date: Thu, 8 Aug 85 14:50 EDT
From: Rob@MIT-REAGAN.ARPA
Sender: Lisp-Machine@MIT-REAGAN.ARPA
Subject: problem with mailer?
To: BUG-zoo@MIT-GOLDILOCKS.ARPA
Message-ID: <850808145036.1.LISP-MACHINE@GOLDILOCKS.MIT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0,
Spire-Macros 5.1, Versatec 5.1, Print 38.0,
Experimental Versatec-Spool 6.1, ZOO 6.12, ZOO-KEEPER 5.3,
microcode TMC5-MIC 319, on Lisp Machine Goldilocks:


This happened in the mailer.  Rutgers keeps trying to contact goldy and
loses.

>>Error: The negative array length -24 is illegal.
While in the function MAKE-ARRAY  (:METHOD TCP::IP-PROTOCOL :DISPLAY-HEADER)  (:DEFUN-METHOD TCP::ICMP-DISPLAY-CONTAINED-PACKET)

MAKE-ARRAY:  (P.C. = 166)
   Arg 0 (DIMENSIONS): -24
   Rest arg (OPTIONS): (:TYPE ART-8B :DISPLACED-TO #<ART-8B-36 25247440> :DISPLACED-INDEX-OFFSET 60)
   Local 2 (TYPE): ART-8B
   Local 3 (AREA): NIL
   Local 4 (LEADER-LIST): NIL
   Local 5 (LEADER-LENGTH): NIL
   Local 6 (FILL-POINTER): NIL
   Local 7 (DISPLACED-TO): #<ART-8B-36 25247440>
   Local 8 (DISPLACED-INDEX-OFFSET): 60
   Local 9 (NAMED-STRUCTURE-SYMBOL): NIL
   Local 10 (INITIAL-VALUE): NIL
   Local 11 (DISPLACED-CONFORMALLY): NIL
   Local 12 (N-ELEMS): NIL
   Local 13 (ARRAY): NIL
   Local 14 (INDEX-P): NIL
   Local 15 (Q-P): NIL
   Local 16 (N-WORDS): NIL
   Local 17 (N-DIMS): NIL
   Local 18 (TOTAL-SIZE): NIL

(:METHOD TCP::IP-PROTOCOL :DISPLAY-HEADER):  (P.C. = 165)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (OPERATION): :DISPLAY-HEADER
   Arg 3 (IP): #<ART-8B-36 25247440>
   Arg 4 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>

(:DEFUN-METHOD TCP::ICMP-DISPLAY-CONTAINED-PACKET):  (P.C. = 23)
   Arg 0 (SELF): #<ICMP-PROTOCOL 42450375>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::ICMP-PROTOCOL -- 7. IV's, 1. FL's 43352270>
   Arg 2 (ICMP): #<ART-8B-44 25247436>
   Arg 3 (LENGTH): 44
   Arg 4 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>

(:METHOD TCP::ICMP-PROTOCOL :DISPLAY-IP-PACKET):  (P.C. = 215)
   Arg 0 (SELF): #<ICMP-PROTOCOL 42450375>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::ICMP-PROTOCOL -- 7. IV's, 1. FL's 43352270>
   Arg 2 (OPERATION): :DISPLAY-IP-PACKET
   Arg 3 (ICMP): #<ART-8B-44 25247436>
   Arg 4 (LENGTH): 44
   Arg 5 (IGNORE): 303759416
   Arg 6 (IGNORE): -2147090430
   Arg 7 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>
   Arg 8 (IGNORE): 1

(:METHOD TCP::IP-PROTOCOL :DISPLAY-HEADER):  (P.C. = 175)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (OPERATION): :DISPLAY-HEADER
   Arg 3 (IP): #<ART-8B-64 25247217>
   Arg 4 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>

(:DEFUN-METHOD TCP::ICMP-DISPLAY-CONTAINED-PACKET):  (P.C. = 23)
   Arg 0 (SELF): #<ICMP-PROTOCOL 42450375>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::ICMP-PROTOCOL -- 7. IV's, 1. FL's 43352270>
   Arg 2 (ICMP): #<ART-8B-76 25247131>
   Arg 3 (LENGTH): 76
   Arg 4 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>

(:METHOD TCP::ICMP-PROTOCOL :DISPLAY-IP-PACKET):  (P.C. = 215)
   Arg 0 (SELF): #<ICMP-PROTOCOL 42450375>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::ICMP-PROTOCOL -- 7. IV's, 1. FL's 43352270>
   Arg 2 (OPERATION): :DISPLAY-IP-PACKET
   Arg 3 (ICMP): #<ART-8B-76 25247131>
   Arg 4 (LENGTH): 76
   Arg 5 (IGNORE): 303759416
   Arg 6 (IGNORE): -2147090430
   Arg 7 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>
   Arg 8 (IGNORE): 1

(:METHOD TCP::IP-PROTOCOL :DISPLAY-HEADER):  (P.C. = 175)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (OPERATION): :DISPLAY-HEADER
   Arg 3 (IP): #<ART-8B-1942 1470344>
   Arg 4 (STREAM): #<DTP-COMPILED-FUNCTION SI:WITH-OUTPUT-TO-STRING-INTERNAL-FUNCTION 2221506>

(:DEFUN-METHOD TCP::IP-ERROR-VIA-ICMP):  (P.C. = 70)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (IP): #<ART-8B-1942 1470344>
   Arg 3 (FREE-FLAG): T
   Arg 4 (TYPE): 11
   Arg 5 (CODE): 1

(:DEFUN-METHOD TCP::IP-FLUSH-REASSEMBLY-NODE):  (P.C. = 32)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (RA): #<ART-Q-9 25243317>

(:METHOD TCP::IP-PROTOCOL :FLUSH-REASSEMBLY):  (P.C. = 31)
   Arg 0 (SELF): #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (OPERATION): :FLUSH-REASSEMBLY
   Arg 3 (JUST-EXPIRED): T

(:METHOD TCP::IP-PROTOCOL :BACKGROUND-TOP-LEVEL):  (P.C. = 17)
   Arg 0: #<IP-PROTOCOL 36703226>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor TCP::IP-PROTOCOL -- 19. IV's, 0. FL's 43340000>
   Arg 2 (OPERATION): :BACKGROUND-TOP-LEVEL

(:INTERNAL (:METHOD TCP::IP-PROTOCOL :BACKGROUND-TOP-LEVEL) 0):  (P.C. = 4)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): (#<IP-PROTOCOL 36703226>)

SI:PROCESS-RUN-FUNCTION-INTERNAL:  (P.C. = 52)
   Arg 0 (RESTART-ON-RESET): NIL
   Arg 1 (FUNCTION): #<LEXICAL-CLOSURE (:INTERNAL ** 0) 24420177>
   Rest arg (ARGS): NIL

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:19-EDT,1390;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 15:23-EDT
Date: Thu,  8 Aug 85 15:24:52 EDT
From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>
Subject:  I've never seen this before.....
To: ROLY@MIT-MC.ARPA
cc: BUG-LISPM@MIT-OZ
In-reply-to: Msg of Thu 8 Aug 85 13:23 EDT from Roland Ouellette <Roly>
Message-ID: <[MIT-MC.ARPA].605416.850808.ROLY>

    Date: Thu, 8 Aug 85 13:23 EDT
    From: Roland Ouellette <Roly>
    To:   BUG-LISPM at OZ
    Re:   I've never seen this before.....

    In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.0,
    microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

    ...and suspect that it would go away if I booted Rocky and/or Joe.
    Best of luck.

    >>Error: Incorrect access to directory containing file.
             For JOE:>Roly>lispm-init.bin
    While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

It looks like the problem was with Joe.  It looks like someone hammered
the internals of Joe pretty hard.  He couldn't even figure out who he
was on warm booting.....

After a cold boot things were ok.

Perhaps this error could be better worded.  Something like "An error
occured at Joe accessing the directory containing the file......"
22-Oct-85 23:49:19-EDT,530;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 15:25-EDT
Received: from MIT-LISPM-12 by MIT-MC.ARPA via Chaosnet; 8 AUG 85  15:17:47 EDT
Date: Thursday, 8 August 1985, 15:17-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: bug-lispm@MIT-MC
CC: devon@MIT-MC

ZMacs should have a command to send the current buffer to the bottom of the list.
ZMacs should have Meta-Shift-A the way it has Meta-Shift-D.
Meta-Shift-D should not type out FOO: if FOO is not documented.
SETCAR's documentation string has a typo.
22-Oct-85 23:49:19-EDT,697;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 16:10-EDT
Received: from MIT-XX.ARPA by MIT-MC.ARPA  8 Aug 85 16:12:07 EDT
Received: from MIT-LISPM-12 by MIT-XX via Chaosnet; 8 Aug 85 15:33-EDT
Date: Thursday, 8 August 1985, 15:34-EDT
From: Devon S. McCullough <Devon@MIT-MC.ARPA>
To: bug-lispm@MIT-MC.ARPA
CC: devon@MIT-MC.ARPA

m-X Compile Changed Sections screws up when it sees sections like

; From file OZ:KANSAS:<L.SYS>QCPEEP.LISP.36 at 7-Aug-85 21:41:00
#8R COMPILER#:
(COMPILER-LET ((*PACKAGE* (PKG-FIND-PACKAGE "COMPILER")))
  (PATCH-SOURCE-FILE "SYS: SYS; QCPEEP  "

(DEFUN ...)

))

giving gratuitous error messages about unexpected )'s and all that.
22-Oct-85 23:49:19-EDT,957;000000000000  
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 17:05-EDT
Date: Thu 8 Aug 85 17:01:25-EDT
From: Ken Traub <KT@MIT-XX.ARPA>
Subject: Hardcopy Bug
To: bug-lispm@MIT-XX.ARPA
ReSent-Date: Thu 8 Aug 85 17:05:06-EDT
ReSent-From: Ken Traub <KT@MIT-XX>
ReSent-To: bug-lispm@MIT-OZ

	When I use hardcopy (hardcopy device is Tremont Via MC, a Dover),
and the font is set to LPT10, tab stops are every 8 spaces, as they should
be.  If, however, I use LPT8 (necessary for printing wide-lined programs),
tab stops are every 10 spaces, which screws up all the indentation in my
program listings.  What can I do about this?

	By the way, I'm using the following patch to get Hardcopy to work
at all:

press:
(defmethod (press-stream :character-width) (char)
  (unless (send self :device-current-font)
    (send self :set-device-font))
  (max 0 (aref (seventh si:device-current-font) (char-code char))))

Thanks for your help.
-------
22-Oct-85 23:49:19-EDT,1099;000000000000    
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 17:15-EDT
Date: Thu 8 Aug 85 17:15:27-EDT
From: Ken Traub <KT@MIT-XX>
Subject: Clarification of earlier report concerning tabs
To: bug-lispm@MIT-OZ

Forgive my sending so many messages, but here is a clarification of the
bug in Hardcopy (while using LPT8 for the Dover):

When a tab is encountered, the next character appears at the next multiple of
ten columns, instead of eight columns as it should be.  When deciding which
tab stop to tab to, however, eight columns is used as the guide.

As an example, two tabs followed by an "A" (at the beginning of a line) will
print the same as 20 spaces followed by an "A".  Tab A, Space Tab A, Space
Space Tab A, ..., 7 Spaces Tab A, will all print the same as 8 Spaces A.
8 Spaces Tab A, however, will print as 20 Spaces A, not as 10 Spaces A or the
correct 16 Spaces A.  It correctly divides the current column by 8 to determine
which is the nearest tab stop, but multiplies by 10 to find the column
corresponding to that tab stop.

Clear as mud?

				--- Ken
-------
22-Oct-85 23:49:19-EDT,1081;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 17:18-EDT
Received: from MIT-XX.ARPA by MIT-MC.ARPA  8 Aug 85 17:06:53 EDT
Mail-From: KT created at  8-Aug-85 17:01:25
Date: Thu 8 Aug 85 17:01:25-EDT
From: Ken Traub <KT@MIT-XX.ARPA>
Subject: Hardcopy Bug
To: bug-lispm@MIT-XX.ARPA
ReSent-Date: Thu 8 Aug 85 17:05:00-EDT
ReSent-From: Rob Austein <SRA@MIT-XX.ARPA>
ReSent-To: bug-lispm@MIT-MC.ARPA

	When I use hardcopy (hardcopy device is Tremont Via MC, a Dover),
and the font is set to LPT10, tab stops are every 8 spaces, as they should
be.  If, however, I use LPT8 (necessary for printing wide-lined programs),
tab stops are every 10 spaces, which screws up all the indentation in my
program listings.  What can I do about this?

	By the way, I'm using the following patch to get Hardcopy to work
at all:

press:
(defmethod (press-stream :character-width) (char)
  (unless (send self :device-current-font)
    (send self :set-device-font))
  (max 0 (aref (seventh si:device-current-font) (char-code char))))

Thanks for your help.
-------
22-Oct-85 23:49:20-EDT,2065;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 18:14-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  8 Aug 85 18:15:15 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291838; Thu 8-Aug-85 17:24:29-EDT
Date: Thu, 8 Aug 85 17:26 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: I've never seen this before.....
To: ROLY@MIT-MC.ARPA
cc: BUG-LISPM%MIT-OZ@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].605416.850808.ROLY>
Message-ID: <850808172602.0.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Thu,  8 Aug 85 15:24:52 EDT
    From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>

	Date: Thu, 8 Aug 85 13:23 EDT
	From: Roland Ouellette <Roly>
	To:   BUG-LISPM at OZ
	Re:   I've never seen this before.....

	In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.0,
	microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

	...and suspect that it would go away if I booted Rocky and/or Joe.
	Best of luck.

	>>Error: Incorrect access to directory containing file.
		 For JOE:>Roly>lispm-init.bin
	While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

    It looks like the problem was with Joe.  It looks like someone hammered
    the internals of Joe pretty hard.  He couldn't even figure out who he
    was on warm booting.....

    After a cold boot things were ok.

    Perhaps this error could be better worded.  Something like "An error
    occured at Joe accessing the directory containing the file......"

No, I'm sorry.  This message says the right thing.  It means that you
tried to access a file in a directory that was not ok for access by
unprivileged subnets.   It does not mean "generic error" in any way,
shape, form, or interpretations.  You yourself admit that you do not
know what the problem was or what caused it, so how can you assert that
the error message was wrong?

22-Oct-85 23:49:20-EDT,1880;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 18:18-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 3601; Thu 8-Aug-85 18:19:34-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  8 Aug 85 18:18:30 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291849; Thu 8-Aug-85 17:31:38-EDT
Date: Thu, 8 Aug 85 17:31 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: [Rob at MIT-REAGAN: problem with mailer?]
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-MC.ARPA>,
    bug-lispm%MIT-SPEECH@MIT-MC.ARPA
In-Reply-To: <850808150740.1.CYPHER@YOGI.MIT>
Message-ID: <850808173153.5.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Thursday, 8 August 1985, 15:07-EDT
    From: Scott Cyphers <sr.ehpyc at MIT-SPEECH>

    Date: Thu, 8 Aug 85 14:50 EDT
    From: Rob@MIT-REAGAN.ARPA
    Sender: Lisp-Machine@MIT-REAGAN.ARPA
    Subject: problem with mailer?
    To: BUG-zoo@MIT-GOLDILOCKS.ARPA
    Message-ID: <850808145036.1.LISP-MACHINE@GOLDILOCKS.MIT>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0,
    Spire-Macros 5.1, Versatec 5.1, Print 38.0,
    Experimental Versatec-Spool 6.1, ZOO 6.12, ZOO-KEEPER 5.3,
    microcode TMC5-MIC 319, on Lisp Machine Goldilocks:


    This happened in the mailer.  Rutgers keeps trying to contact goldy and
    loses.

    >>Error: The negative array length -24 is illegal.
    While in the function MAKE-ARRAY  (:METHOD TCP::IP-PROTOCOL :DISPLAY-HEADER)  (:DEFUN-METHOD TCP::ICMP-DISPLAY-CONTAINED-PACKET)

The particular problem here is due to a bug in some debugging code.  The
quick fix (if you don't need the debugging trace) is to change the
function TCP::IP-ERROR-VIA-ICMP (in IP-TCP:IP-TCP;IP.LISP) by changing:

   (IP-NOTIFY ...)

to

   (WHEN *IP-DEBUG-FLAG* (IP-NOTIFY ...))

22-Oct-85 23:49:20-EDT,1175;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 18:53-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  8 Aug 85 18:53:56 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291879; Thu 8-Aug-85 17:55:59-EDT
Date: Thu, 8 Aug 85 17:56 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Your recent bug reports.
To: Devon S. McCullough <Devon@MIT-MC.ARPA>, bug-lispm@MIT-MC.ARPA
In-Reply-To: The message of 8 Aug 85 15:17-EDT from Devon S. McCullough <Devon@MIT-MC.ARPA>
Message-ID: <850808175611.5.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thursday, 8 August 1985, 15:17-EDT
    From: Devon S. McCullough <Devon@MIT-MC>

Please use m-X bug so people know what system you are making comments
about.  If it is generical Lisp Machine comments, you should explicitly
say it pertains to all systems.

    ZMacs should have a command to send the current buffer to the bottom of the list.
    ZMacs should have Meta-Shift-A the way it has Meta-Shift-D.
    Meta-Shift-D should not type out FOO: if FOO is not documented.
    SETCAR's documentation string has a typo..

22-Oct-85 23:49:20-EDT,2281;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 19:09-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  8 Aug 85 19:11:11 EDT
Received: from CERRIDWYN.SSF.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291902; Thu 8-Aug-85 18:17:09-EDT
Received: from CIRCE.SSF.Symbolics.COM by CERRIDWYN.SSF.Symbolics.COM via CHAOS with CHAOS-MAIL id 42578; Thu 8-Aug-85 15:20:22-PDT
Date: Thu, 8 Aug 85 15:16 PDT
From: Richard Lamson <rsl@RUSSIAN.SPA.Symbolics.COM>
Subject: tv:text-scroll-window
To: Bill Long <WJL@MIT-MC.ARPA>, hukee@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].604910.850808.WJL>
Message-ID: <850808151654.9.RSL@CIRCE.SSF.Symbolics.COM>
Reply-To: RSL@SCRC-STONY-BROOK.ARPA

    Date: Thu,  8 Aug 85 08:57:28 EDT
    From: Bill Long <WJL@MIT-MC.ARPA>

	From: Joanne Hukee <hukee@SCRC-STONY-BROOK.ARPA>
	    Date: Tue,  6 Aug 85 14:30:43 EDT
	    From: Bill Long <WJL@MIT-MC.ARPA>
	    I'm having a problem with text-scroll-window.
	    If I just do (make-instance 'tv:text-scroll-window)
	    there is an error from an illegal method override
	    from basic-scroll-bar's documentation -- so maybe
	    it's really a problem with basic-scroll-bar.
	    Anyway, what's up? (this is on a 3640, rel 6)
	    -Bill Long
	tv:text-scroll-window is really a mixin, not an instantiable flavor.

    Thanks.  That clears up my problem.

The other mistake you made (in the mail, anyway) is that you used
MAKE-INSTANCE on a flavor of window.  You must use TV:MAKE-WINDOW, or
you will wind up with unbound instance variables.

    It would also be helpful if its name ended in -mixin, it were documented
    as a mixin (see v7 p174), and the error message indicated that its not
    an instantiable flavor.

    PS. Anyone know of a flavor that works like text-scroll-window but allows
    the items to specify how much vertical space they need (in pixels), rather
    than being single line items? (scroll-window "knows" too much about the
    size of the objects and placement to do what I want -- font switching and
    intermixed graphics)

The color software comes with a new flavor of menu which provides this
kind of behaviour.  See the MENU system documentation.

22-Oct-85 23:49:21-EDT,1757;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 19:31-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 3604; 8 Aug 85 19:30:38-EDT
Received: from CERRIDWYN.SSF.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 291925; Thu 8-Aug-85 18:49:39-EDT
Received: from CIRCE.SSF.Symbolics.COM by CERRIDWYN.SSF.Symbolics.COM via CHAOS with CHAOS-MAIL id 42594; Thu 8-Aug-85 15:52:27-PDT
Date: Thu, 8 Aug 85 15:49 PDT
From: Richard Lamson <rsl@RUSSIAN.SPA.Symbolics.COM>
Subject: C-Sh-A in Zmacs
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850807133927.1.CYPHER@YOGI.MIT>
Message-ID: <850808154901.1.RSL@CIRCE.SSF.Symbolics.COM>
Reply-To: RSL@SCRC-STONY-BROOK.ARPA

    Date: Wed, 7 Aug 85 13:39 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.12, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    (funcall a 1 2 3)
	    

    Typing c-sh-a with the cursor, for example, where the arrow points to,
    gives the message 
    1: NOT FOUND
    instead of the arguments for FUNCALL (maybe this is related to 
    (funcall #'+ 1 2 3) giving the arguments of #'+?)

No, it's worse than that.  It's assuming you really meant 

  (send a 1 2 3)

and looking for some handler for the message '1 to some flavor whose
name it will find.  Try doing the same thing with 

  (send a :draw-line ...)

and you will see what it does (eventually).

22-Oct-85 23:49:21-EDT,2725;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 8 Aug 85 23:35-EDT
Date: Thu,  8 Aug 85 23:36:19 EDT
From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>
Subject:  I've never seen this before.....
To: BSG@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-OZ
In-reply-to: Msg of Thu 8 Aug 85 17:26 EDT from Bernard S. Greenberg <BSG at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].605997.850808.ROLY>

    Date: Thu, 8 Aug 85 17:26 EDT
    From: Bernard S. Greenberg <BSG at SCRC-STONY-BROOK.ARPA>
    To:   ROLY at MIT-MC.ARPA
    cc:   BUG-LISPM%MIT-OZ at MIT-MC.ARPA
    Re:   I've never seen this before.....

        Date: Thu,  8 Aug 85 15:24:52 EDT
        From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>

    	Date: Thu, 8 Aug 85 13:23 EDT
    	From: Roland Ouellette <Roly>
    	To:   BUG-LISPM at OZ
    	Re:   I've never seen this before.....

    	In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.0,
    	microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

    	...and suspect that it would go away if I booted Rocky and/or Joe.
    	Best of luck.

    	>>Error: Incorrect access to directory containing file.
    		 For JOE:>Roly>lispm-init.bin
    	While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

        It looks like the problem was with Joe.  It looks like someone hammered
        the internals of Joe pretty hard.  He couldn't even figure out who he
        was on warm booting.....

        After a cold boot things were ok.

        Perhaps this error could be better worded.  Something like "An error
        occured at Joe accessing the directory containing the file......"

    No, I'm sorry.  This message says the right thing.  It means that you
    tried to access a file in a directory that was not ok for access by
    unprivileged subnets.   

Joe and Rocky are both on the same subnet.  In fact their transeiver
boxes plug into eachother.

			    It does not mean "generic error" in any way,
    shape, form, or interpretations.  You yourself admit that you do not
    know what the problem was or what caused it, so how can you assert that
    the error message was wrong?

I was able to access other servers from Rocky when I got this error,
and after I cold booted Joe I was able to complete the same file
transaction, without incident.  My point was that Joe was in a losing
state (somehow), and the error message was not informative.  If it was
due to the fact that Joe thought that subnet 60 was not a secure piece
of either the error message should say so.  Right??...
22-Oct-85 23:49:21-EDT,3950;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 9 Aug 85 12:58-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  9 Aug 85 12:59:50 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 292465; Fri 9-Aug-85 12:57:40-EDT
Date: Fri, 9 Aug 85 12:59 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: I've never seen this before.....
To: ROLY@MIT-MC.ARPA
cc: BUG-LISPM%MIT-OZ@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].605997.850808.ROLY>
Message-ID: <850809125947.5.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Thu,  8 Aug 85 23:36:19 EDT
    From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>

	Date: Thu, 8 Aug 85 17:26 EDT
	From: Bernard S. Greenberg <BSG at SCRC-STONY-BROOK.ARPA>
	To:   ROLY at MIT-MC.ARPA
	cc:   BUG-LISPM%MIT-OZ at MIT-MC.ARPA
	Re:   I've never seen this before.....

	    Date: Thu,  8 Aug 85 15:24:52 EDT
	    From: Roland G. Ouellette <ROLY@MIT-MC.ARPA>

	    Date: Thu, 8 Aug 85 13:23 EDT
	    From: Roland Ouellette <Roly>
	    To:   BUG-LISPM at OZ
	    Re:   I've never seen this before.....

	    In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.0,
	    microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

	    ...and suspect that it would go away if I booted Rocky and/or Joe.
	    Best of luck.

	    >>Error: Incorrect access to directory containing file.
		     For JOE:>Roly>lispm-init.bin
	    While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

	    It looks like the problem was with Joe.  It looks like someone hammered
	    the internals of Joe pretty hard.  He couldn't even figure out who he
	    was on warm booting.....

	    After a cold boot things were ok.

	    Perhaps this error could be better worded.  Something like "An error
	    occured at Joe accessing the directory containing the file......"

	No, I'm sorry.  This message says the right thing.  It means that you
	tried to access a file in a directory that was not ok for access by
	unprivileged subnets.   

    Joe and Rocky are both on the same subnet.  In fact their transeiver
    boxes plug into eachother.
Well, as I said, neither of us knows what was ailing it at the
transitory time.
    It does not mean "generic error" in any way,
	shape, form, or interpretations.  You yourself admit that you do not
	know what the problem was or what caused it, so how can you assert that
	the error message was wrong?

    I was able to access other servers from Rocky when I got this error,
    and after I cold booted Joe I was able to complete the same file
    transaction, without incident.  My point was that Joe was in a losing
    state (somehow), and the error message was not informative.  
Were Joe not confused, there would be no message, there would be no error,
and it would be informative.
								 If it was
    due to the fact that Joe thought that subnet 60 was not a secure piece
    of either the error message should say so.  Right??...
No.  Security works by subnet, not the initials you type to the
login command.   Do you know any operating system that says 
"Access to directory FOO not allowed for user ROLY"?  No, of course,
the access entity need not be mentioned.  It is only the entity which
is trying to be accessed that need be mentioned.   

Perhaps the problem is that the subnet security feature, which is
a kludge, is not widely known-about, therefore you didn't know
that "from the subnet you are coming from" should be appended to
any mention of access from LMFS.

Probably, there was a namespace problem on Joe, and Joe didn't understand
the concept of Rocky, and just thought that Rocky was CHAOS|12345 or
whatever.  I have seen this happen, and the effect is exactly the
one you observed.

22-Oct-85 23:49:22-EDT,4513;000000000000
Received: from MIT-APIARY-10 by MIT-OZ via Chaosnet; 10 Aug 85 00:23-EDT
Date: Sat, 10 Aug 85 00:24 EDT
From: Carl Hewitt <Hewitt@MIT-XX>
Subject: bug in Zmail saving
To: BUG-LISPM@OZ
Message-ID: <850810002419.1.HEWITT@APIARY-10>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, on APIARY-10:

I tried to do a save in Zmail.  It produced the followin error:

>>Error: No such file type
         For OZ:PS:<HEWITT>MAIL._ZMAIL_TXT.1
While in the function (:METHOD FS:HOST-UNIT :COMMAND)  FS:DELETE-CHAOS  (:METHOD FS:QFILE-ACCESS-PATH :DELETE)

(:METHOD FS:HOST-UNIT :COMMAND):  (P.C. = 236)
   Arg 0 (SELF): #<HOST-UNIT 32563251>
   Arg 1 (SELF-MAPPING-TABLE): FS:HOST-UNIT
   Arg 2 (OPERATION): :COMMAND
   Arg 3 (MARK-P): NIL
   Arg 4 (STREAM-OR-HANDLE): NIL
   Arg 5 (SIMPLE-P): NIL
   Arg 6 (WHOSTATE): "Delete"
   Rest arg (COMMANDS): ("DELETE" 141 "PS:<HEWITT>MAIL._ZMAIL_TXT.1" 141)
   Local 8 (HANDLE): NIL
   Local 9 (STREAM): NIL
   Local 10 (PKT): #<Chaos Packet 6005464>
   Local 11 (SUCCESS): NIL
   Local 12 (STRING): " ERROR FNF F No such file type"
   Local 13 (TRANSACTION-ID): "T3113"
   Local 14 (CREATE-P): NIL
   Local 15 (CONDITION): NIL
   Local 16: T
   Local 17: #<CASE-HANDLER 120711625>
   Local 18: (#<LEXICAL-CLOSURE (:INTERNAL ** 0) 43640055>)
   Local 19: (#<CASE-HANDLER 120711625> #<LEXICAL-CLOSURE (:INTERNAL ** 0) 43640055>)

FS:DELETE-CHAOS:  (P.C. = 24)
   Arg 0 (ACCESS-PATH): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 32563055>
   Arg 1: #<TOPS20-PATHNAME "OZ:PS:<HEWITT>MAIL._ZMAIL_TXT.1">

(:METHOD FS:QFILE-ACCESS-PATH :DELETE):  (P.C. = 4)
   Arg 0 (SELF): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 32563055>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:QFILE-ACCESS-PATH -- 4. IV's, 0. FL's 121666243>
   Arg 2 (OPERATION): :DELETE
   Arg 3 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<HEWITT>MAIL._ZMAIL_TXT.1">

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :DELETE):  (P.C. = 11)
   Arg 0 (SELF): #<TOPS20-PATHNAME "OZ:PS:<HEWITT>MAIL._ZMAIL_TXT.1">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 105211451>
   Arg 2 (OPERATION): :DELETE

DELETEF:  (P.C. = 117)
   Arg 0 (STRING-OR-STREAM): #<TOPS20-PATHNAME "OZ:PS:<HEWITT>MAIL._ZMAIL_TXT.1">
   --Defaulted args:--
   Arg 1 (ERROR-P): T

(:METHOD ZWEI:INBOX-BUFFER :SAVING-DONE):  (P.C. = 22)
   Arg 0 (SELF): #<TENEX-INBOX-BUFFER "OZ:PS:<HEWITT>MAIL.TXT.1" 34757751>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:INBOX-BUFFER -- 12. IV's, 0. FL's 142672535>
   Arg 2 (OPERATION): :SAVING-DONE
   Arg 3 (FORCING-OUT): NIL

(:INTERNAL (:METHOD ZWEI:TENEX-INBOX-BUFFER :COMBINED :SAVING-DONE) 0):  (P.C. = 11)
   Arg 0 (SELF): #<TENEX-INBOX-BUFFER "OZ:PS:<HEWITT>MAIL.TXT.1" 34757751>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TENEX-INBOX-BUFFER -- 1. IV's, 5. FL's 142672563>
   Arg 2 (.OPERATION.): :SAVING-DONE
   Rest arg (.DAEMON-CALLER-ARGS.): (NIL)

(:METHOD ZWEI:MSG-BUFFER :WHOPPER :SAVING-DONE):  (P.C. = 34)
   Arg 0 (SELF): #<TENEX-INBOX-BUFFER "OZ:PS:<HEWITT>MAIL.TXT.1" 34757751>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:MSG-BUFFER -- 15. IV's, 0. FL's 142672514>
   Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD ZWEI:TENEX-INBOX-BUFFER :COMBINED :SAVING-DONE) 0) 47715273>
   Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor ZWEI:TENEX-INBOX-BUFFER -- 1. IV's, 5. FL's 142672563>
   Arg 4 (.OPERATION.): :SAVING-DONE
   Arg 5 (FORCING-OUT): NIL

Rest of stack:
(:METHOD ZWEI:TENEX-INBOX-BUFFER :COMBINED :SAVING-DONE):  (P.C. = 13)
(:METHOD ZWEI:FILE-MAIL-BUFFER :SAVING-DONE):  (P.C. = 72)
(:INTERNAL (:METHOD ZWEI:BABYL-BUFFER :COMBINED :SAVING-DONE) 0):  (P.C. = 11)
(:METHOD ZWEI:MSG-BUFFER :WHOPPER :SAVING-DONE):  (P.C. = 34)
(:METHOD ZWEI:BABYL-BUFFER :COMBINED :SAVING-DONE):  (P.C. = 13)
ZWEI:SAVE-BUFFER-INTERNAL:  (P.C. = 102)
ZWEI:SAVE-MAIL-BUFFER:  (P.C. = 111)
ZWEI:ZMAIL-SAVE-ALL:  (P.C. = 46)
ZWEI:COM-ZMAIL-SAVE:  (P.C. = 16)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 0 (:MENU)):  (P.C. = 10)
ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 12)
(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:49:22-EDT,1154;000000000000    
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 10 Aug 85 16:06-EDT
Date: Sat 10 Aug 85 16:09:16-EDT
From: Ken Traub <KT@MIT-XX>
Subject: Hardcopy bug reported earlier
To: bug-lispm@MIT-OZ

Having received no response regarding the hardcopy bug I reported, I took
matters into my own hands and found a fix.  Here it is for all who are
interested:

The problem was that tabs were being screwed up for fonts other than LPT10.
The cause was that when the current font was changed going between headers
and text, the "current font" was updated, but the "device current font" was
not.  The following patch, actually a modification of a patch that many
people are using to get hardcopy to work at all, fixes the problem:

press:
(defmethod (press-stream :character-width) (char)
  (unless (eq si:current-font si:device-current-font)	;Update device-current-font
    (send self :set-device-font))		;if current-font has changed.
  (max 0 (aref (seventh si:device-current-font) (char-code char))))

If somebody knows of a reason why this patch might cause problems, I'd
appreciate if he or she could let me know.

				--- Ken
-------
22-Oct-85 23:49:22-EDT,2614;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Aug 85 17:09-EDT
Received: from MIT-LISPM-12 by MIT-MC.ARPA via Chaosnet; 11 AUG 85  17:08:58 EDT
Date: Sunday, 11 August 1985, 17:09-EDT
From: x.Gyro@OZ
Sender: Devon@MIT-MC
Subject: m-. recently broken
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
microcode 320, GC@2, on Lisp Machine Twelve:


Insert your description of the circumstances here:
I typed m-. p-i-t<End> ("peep-insert-tag" was the result of the completion).
I notice in ZWEI:READ-FUNCTION-NAME that a COND clause starting with 

  ((CONSP NAME) ...

has been diked out.  I'm not going to put it back myself because I assume
someone meant this for some reason, but it should be looked at.


>>ERROR: Cannot convert ("peep-insert-tag " . PEEP-INSERT-TAG) into a string.
Backtrace from the debugger:

STRING (P.C. = 69)

 Arg 0 (X): ("peep-insert-tag " . PEEP-INSERT-TAG)


STRING-SEARCH-NOT-SET (P.C. = 57)

 Arg 0 (CHAR-SET): " ABCDEFGHIJKLMNOPQRSTUVWXYZ-"
 Arg 1 (STRING): ("peep-insert-tag " . PEEP-INSERT-TAG)
   --Defaulted args:--
 Arg 2 (FROM): 0
 Arg 3 (TO): NIL
 Arg 4 (CONSIDER-CASE): NIL
Local 0 (I): NIL
Local 1 (FUN): NIL


Additional information supplied with call:
 Expecting 3 values

ZWEI::READ-FUNCTION-NAME (P.C. = 198)

 Arg 0 (PROMPT): "Edit definition (Default: PROG)"
 Arg 1 (DEFAULT): PROG
 Arg 2 (MUST-BE-DEFINED): ZWEI::AARRAY-OK
   --Defaulted args:--
 Arg 3 (STRINGP): NIL
Local 0 (EXPLICIT-PACKAGE-P): NIL
Local 1 (NAME): ("peep-insert-tag " . PEEP-INSERT-TAG)
Local 2 (SYM): NIL
Local 3 (ERRORP): NIL
Local 4 (NON-LETTER-INDEX): NIL
Local 5: NIL
Local 6 (SPEC): NIL


ZWEI::COM-EDIT-DEFINITION (P.C. = 61)

Local 0 (SPEC): NIL
Local 1 (EXPLICIT-PACKAGE-P): NIL
Local 2 (THIS-PKG-SYMBOL): NIL
Local 3 (FOUNDP): NIL


Additional information supplied with call:
 Expecting 3 values

ZWEI::COMMAND-EXECUTE (P.C. = 92)

 Arg 0 (COMMAND): ZWEI::COM-EDIT-DEFINITION
 Arg 1 (CHAR): #/m-/.
 Arg 2 (PREFIX-CHAR): NIL
 Arg 3 (HOOK-LIST): NIL
Local 0 (HOOK-SUCCESS): T
Local 1: NIL
Local 2 (HOOK): NIL


Remainder of stack:

ZWEI::PROCESS-COMMAND-CHAR (P.C. = 61)
(:METHOD ZWEI:WINDOW :PROCESS-COMMAND-CHAR) (P.C. = 20)
(:METHOD ZWEI:WINDOW :EDIT) (P.C. = 307)
(:INTERNAL (:METHOD ZWEI:ZMACS-WINDOW :COMBINED :EDIT) 0) (P.C. = 60)
FUNCALL (P.C. = 21)
(:METHOD ZWEI::DISPLAYER :AROUND :EDIT) (P.C. = 25)
(:METHOD ZWEI:ZMACS-WINDOW :COMBINED :EDIT) (P.C. = 39)
ZWEI::ZMACS-WINDOW-TOP-LEVEL (P.C. = 38)
SI::PROCESS-TOP-LEVEL (P.C. = 115)
22-Oct-85 23:49:23-EDT,390;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 14:47-EDT
Date: Mon, 12 Aug 85 14:47:18 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].609470.850812.WJL>

How do you setup, use, invoke, etc the extended search stuff?
The only thing I've been able to determine is that it isn't
available in my "current" context.
-Bill Long
22-Oct-85 23:49:23-EDT,773;000000000000 
Received: from MIT-APIARY-8 by MIT-OZ via Chaosnet; 12 Aug 85 15:36-EDT
Date: Mon, 12 Aug 85 15:35 EDT
From: Daniel Brotsky <DCB@PYGMALION>
Subject: common lisp bug?
To: BUG-LISPM@OZ
Message-ID: <"850812153547.1.DCB@PYGMALION"@APIARY-8>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-8:

When in an editor buffer in the package SYMBOLICS-COMMON-LISP, with
syntax SYMBOLICS-COMMON-LISP, the form

(map nil #'print (make-array 4 :initial-contents '(a b c d)))

when evaluated with C-Shift-E prints

A
B
B
B

The same thing happens in a break loop.  The array constructed is
correct, but the calls to print are on the first element once and then
the second element three times.

	dan
22-Oct-85 23:49:23-EDT,959;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 16:04-EDT
Received: from SCRC-QUABBIN.ARPA by MIT-MC.ARPA 12 Aug 85 16:03:33 EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 191938; Mon 12-Aug-85 16:01:15-EDT
Date: Mon, 12 Aug 85 16:02 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
To: WJL@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].609470.850812.WJL>
Message-ID: <850812160204.1.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Mon, 12 Aug 85 14:47:18 EDT
    From: Bill Long <WJL@MIT-MC.ARPA>

    How do you setup, use, invoke, etc the extended search stuff?
    The only thing I've been able to determine is that it isn't
    available in my "current" context.
    -Bill Long

Try adding this to your init file.  It binds extended search to c-m-S.

(login-eval
  (set-comtab-return-undo *standard-comtab*
			  '(#\control-meta-S com-extended-string-search)))

22-Oct-85 23:49:23-EDT,1292;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 16:16-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 12 Aug 85 16:16:32 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 294601; Mon 12-Aug-85 16:15:19-EDT
Date: Mon, 12 Aug 85 16:18 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: common lisp bug?
To: DCB@PYGMALION, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <"850812153547.1.DCB@PYGMALION"@APIARY-8>
Message-ID: <850812161825.1.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Mon, 12 Aug 85 15:35 EDT
    From: Daniel Brotsky <DCB@PYGMALION>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-8:

    When in an editor buffer in the package SYMBOLICS-COMMON-LISP, with
    syntax SYMBOLICS-COMMON-LISP, the form

    (map nil #'print (make-array 4 :initial-contents '(a b c d)))

    when evaluated with C-Shift-E prints

    A
    B
    B
    B

    The same thing happens in a break loop.  The array constructed is
    correct, but the calls to print are on the first element once and then
    the second element three times.

	    dan

This has been fixed in Release 6.1.  Thank you for your report.

22-Oct-85 23:49:23-EDT,1365;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 16:17-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 12 Aug 85 16:17:00 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 294603; Mon 12-Aug-85 16:15:48-EDT
Date: Mon, 12 Aug 85 16:19 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: common lisp bug?
To: DCB%PYGMALION@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <"850812153547.1.DCB@PYGMALION"@APIARY-8>
Supersedes: <850812161825.1.BSG@CONCORD.SCRC.Symbolics.COM>
Message-ID: <850812161902.2.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Mon, 12 Aug 85 15:35 EDT
    From: Daniel Brotsky <DCB@PYGMALION>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-8:

    When in an editor buffer in the package SYMBOLICS-COMMON-LISP, with
    syntax SYMBOLICS-COMMON-LISP, the form

    (map nil #'print (make-array 4 :initial-contents '(a b c d)))

    when evaluated with C-Shift-E prints

    A
    B
    B
    B

    The same thing happens in a break loop.  The array constructed is
    correct, but the calls to print are on the first element once and then
    the second element three times.

	    dan

This has been fixed in Release 6.1.  Thank you for your report.

22-Oct-85 23:49:24-EDT,5030;000000000000   
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 17:34-EDT
Date: Mon, 12 Aug 85 17:32 EDT
From: Richard E. Zippel <RZ@ZERMATT>
Subject: Zmail problems
To: BUG-LISPM@OZ
Message-ID: <850812173242.8.RZ@ZERMATT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
Imagen Spooler 5.0, Experimental Schema 94.24,
microcode TMC5-IO4-MIC 322, on Zermatt:

I had three activities going on, a SUPDUP to MIT-VAX, ZMAIL and was
sending a Converse message.  My Babyl file was already loaded in ZMail,
I had in fact just forwarded the current message to someone.  I typed G
to load my new mail, Select-C to converse, typed a message, End,
Select-T to SUPDUP (before the message had been sent) and got the
following error.

>>Error: POINT is not in the interval being displayed
While in the function ZWEI:PUT-POINT-AT-PLINE  ZWEI:RECENTER-WINDOW  ZWEI:REDISPLAY

ZWEI:PUT-POINT-AT-PLINE:  (P.C. = 35)
   Arg 0 (SHEET): #<ZMAIL-WINDOW Zmail Window 1 43203115 exposed>
   Arg 1 (POINT-LINE): "To: dlw@SCRC-STONY-BROOK.ARPA, Moon@SCRC-STONY-BROOK.ARPA,"
   Arg 2 (POINT-INDEX): 58
   Arg 3 (POINT-PLINE): 12
   Arg 4 (FIRST-BP): ("Received: from HARRIS-TRANTOR by ZERMATT via CHAOS with CHAOS-MAIL id 9333; Mon 12-Aug-85 14:49:49-EDT" 0 :NORMAL)
   Arg 5 (LAST-BP): ("" 0 :MOVES)
   Local 6 (LH): 14
   Local 7 (P): 6
   Local 8 (STOP-LINE): "Received: from HARRIS-TRANTOR by ZERMATT via CHAOS with CHAOS-MAIL id 9333; Mon 12-Aug-85 14:49:49-EDT"
   Local 9 (DIAGRAM-NPLINES): NIL
   Local 10 (LINE): NIL
   Local 11 (POINT-LINE-P): NIL
   Local 12 (DIAGRAM): NIL

ZWEI:RECENTER-WINDOW:  (P.C. = 101)
   Arg 0 (WINDOW): #<WINDOW 120615174>
   Arg 1 (RECENTER-TYPE): :ABSOLUTE
   Arg 2 (RC1): NIL
   Arg 3 (RC2): NIL

ZWEI:REDISPLAY:  (P.C. = 252)
   Arg 0 (WINDOW): #<WINDOW 120615174>
   Arg 1 (RECENTER-TYPE): :POINT
   Local 1 (RECENTER-TYPE): :ABSOLUTE
   --Defaulted args:--
   Arg 2 (RC1): NIL
   Arg 3 (RC2): NIL
   Arg 4 (FORCE-TO-COMPLETION-P): NIL

ZWEI:COM-MOUSE-MARK-THING:  (P.C. = 67)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-MOUSE-MARK-THING
   Arg 1 (CHAR): 32769
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 32769

(:INTERNAL ZWEI:PROCESS-SPECIAL-COMMAND 6 (:MOUSE)):  (P.C. = 75)
   Arg 0 (**DEFSELECT-OP**): :MOUSE
   Arg 1 (WINDOW): #<WINDOW 120615174>
   Arg 2 (CH): 32769
   Arg 3: 792
   Arg 4: 60

ZWEI:PROCESS-SPECIAL-COMMAND:  (P.C. = 72)
   Arg 0 (OPERATION): :MOUSE
   Rest arg (SELECT-METHOD-ARGS): (#<WINDOW 120615174> 32769 792 60)

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 205)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142611573>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :EDIT):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:COM-EDIT-CURRENT-MSG:  (P.C. = 103)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-EDIT-CURRENT-MSG
   Arg 1 (CHAR): (:MOUSE #<WINDOW 120615174> 32769 792 60)
   --Defaulted args:--
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:ZMAIL-COMMAND-EXECUTE:  (P.C. = 6)
   Arg 0: ZWEI:COM-EDIT-CURRENT-MSG

(:INTERNAL ZWEI:ZMAIL-COMMAND-LIST 3 (:MOUSE)):  (P.C. = 12)
   Arg 0 (**DEFSELECT-OP**): :MOUSE
   Rest arg (IGNORE): (#<WINDOW 120615174> 32769 792 60)

ZWEI:ZMAIL-COMMAND-LIST:  (P.C. = 42)
   Arg 0 (OPERATION): :MOUSE
   Rest arg (SELECT-METHOD-ARGS): (#<WINDOW 120615174> 32769 792 60)

(:METHOD ZWEI:ZMAIL-FRAME :PROCESS-SPECIAL-COMMAND):  (P.C. = 16)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :PROCESS-SPECIAL-COMMAND
   Rest arg (ARGS): (:MOUSE #<WINDOW 120615174> 32769 792 60)

(:METHOD ZWEI:ZMAIL-FRAME :COMMAND-LOOP):  (P.C. = 136)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (OPERATION): :COMMAND-LOOP

(:METHOD ZWEI:ZMAIL-FRAME :COMBINED :COMMAND-LOOP):  (P.C. = 70)
   Arg 0 (SELF): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:ZMAIL-FRAME -- 65. IV's, 20. FL's 142611405>
   Arg 2 (.OPERATION.): :COMMAND-LOOP
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMAIL-PROCESS-TOP-LEVEL:  (P.C. = 105)
   Arg 0 (WINDOW): #<ZMAIL-FRAME Main Zmail Window 43200617 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:24-EDT,1252;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 18:05-EDT
Date: Mon, 12 Aug 85 18:04 EDT
From: Richard E. Zippel <RZ@ZERMATT>
Subject: Zmail problems
To: BUG-LISPM@OZ
In-Reply-To: <850812173242.8.RZ@ZERMATT>
Message-ID: <850812180405.9.RZ@ZERMATT>

Apparently in this error, somewhere along the line I also typed
Mouse-Left on the message window, selecting the message for
editing.  That's probably what caused the problem.

    Date: Mon, 12 Aug 85 17:32 EDT
    From: Richard E. Zippel <RZ@ZERMATT>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
    Imagen Spooler 5.0, Experimental Schema 94.24,
    microcode TMC5-IO4-MIC 322, on Zermatt:

    I had three activities going on, a SUPDUP to MIT-VAX, ZMAIL and was
    sending a Converse message.  My Babyl file was already loaded in ZMail,
    I had in fact just forwarded the current message to someone.  I typed G
    to load my new mail, Select-C to converse, typed a message, End,
    Select-T to SUPDUP (before the message had been sent) and got the
    following error.

    >>Error: POINT is not in the interval being displayed
    While in the function ZWEI:PUT-POINT-AT-PLINE  ZWEI:RECENTER-WINDOW  ZWEI:REDISPLAY

22-Oct-85 23:49:24-EDT,680;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Aug 85 18:55-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 12 AUG 85  18:52:41 EDT
Date: Monday, 12 August 1985, 18:52-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

DIRED lies about it's defaults.  I was looking for SYS:SYS2;EHW (which
isn't where meta-dot thinks it is) and did m-X DIRED and the mode
line said (Default is OZ:KANSAS:<L.SYS2>*.*.*) so I just hit return,
what I got was <L.SYS2>EHW.*.*, ie, a screen with no files on it.
22-Oct-85 23:49:24-EDT,700;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 02:42-EDT
Date: Tue, 13 Aug 85 02:43:18 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  extended search
To: WJL@MIT-MC.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-reply-to: Msg of Mon 12 Aug 85 14:47:18 EDT from Bill Long <WJL at MIT-MC.ARPA>
Message-ID: <[MIT-MC.ARPA].610231.850813.GUMBY>

you could type c-m-X, or bind the search function to a key.

Actually, upon reflection, I think what's confusing you is the
"extended search or" and friends, which are only valid when typing at
the extended search minibuffer (the thing that prompts for a search
string).  You should call String Search or Reverse String Search.
22-Oct-85 23:49:25-EDT,3932;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 16:10-EDT
Received: from SCRC-RIVERSIDE.ARPA by MIT-MC.ARPA 13 Aug 85 16:10:53 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-RIVERSIDE.ARPA via CHAOS with CHAOS-MAIL id 45754; Tue 13-Aug-85 16:08:48-EDT
Date: Tue, 13 Aug 85 16:10 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: >>Error: SRI-KL is believed to be down or unavailable.
To: jcma@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: The message of 15 Apr 85 05:22-EST from jcma@MIT-MC.ARPA
Message-ID: <850813161029.6.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Mon, 15 Apr 85 05:22 EST
    From: jcma@MIT-MC.ARPA

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 8.1,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Jim Morrison:

    Sending mail shouldn't blow out.  It should just send via a host that can store and forward.
    Also, the proceed option to send via any mail host should work.  It didn't.  This
    backtrace resulted from an attempt to use that proceed option.

This situation should be improved in 6.1.

    >>Error: SRI-KL is believed to be down or unavailable.
    While in the function NETI:INVOKE-SERVICE-ACCESS-PATH-WITH-CACHED-UNAVAILABILITY  ZWEI:INVOKE-MAIL-SERVICE  ZWEI:NETWORK-SEND-IT-2

    NETI:INVOKE-SERVICE-ACCESS-PATH-WITH-CACHED-UNAVAILABILITY:  (P.C. = 42)
       Arg 0 (SERVICE-ACCESS-PATH): #<SERVICE-ACCESS-PATH MAIL-TO-USER (SMTP) -- SRI-KL on INTERNET 24223565>
       Arg 1 (TIMEOUT): 18000
       Arg 2 (SERVICE-ARGS): NIL

    ZWEI:INVOKE-MAIL-SERVICE:  (P.C. = 10)
       Arg 0 (SERVICE-ACCESS-PATH): #<SERVICE-ACCESS-PATH MAIL-TO-USER (SMTP) -- SRI-KL on INTERNET 24223565>
       Arg 1 (RECIPIENTS): ((:NAME "GAK" :HOST (:OBJECT #<TOPS20-HOST SRI-KL 1616322>) :INTERVAL (("To: GAK@SRI-KL" 4) ("To: GAK@SRI-KL" 14))))
       Arg 2 (TEMPLATE-EXPANSION): (:TEXT #<NODE 24222411> :HEADERS (:DATE 2691397193 :FROM ((:USER #<USER JCMA 1612702>)) :SUBJECT "You there?" :TO ((:NAME "GAK" :HOST ** :INTERVAL **)) :IN-REPLY-TO ("The message of 11 Apr 85 14:16-EST from Glenn Andrew Kramer <GAK at SRI-KL>") ...) :HEADER-FORMAT :SHORT :TRANSMIT-TIME 2691397193 :DRAFT-MSG #<DRAFT-MSG 24221030>)

    ZWEI:NETWORK-SEND-IT-2:  (P.C. = 503)
       Arg 0 (RECIPIENTS): ((:NAME "GAK" :HOST (:OBJECT #<TOPS20-HOST SRI-KL 1616322>) :INTERVAL (("To: GAK@SRI-KL" 4) ("To: GAK@SRI-KL" 14))))
       Arg 1 (TEMPLATE-EXPANSION): (:TEXT #<NODE 24222411> :HEADERS (:DATE 2691397193 :FROM ((:USER #<USER JCMA 1612702>)) :SUBJECT "You there?" :TO ((:NAME "GAK" :HOST ** :INTERVAL **)) :IN-REPLY-TO ("The message of 11 Apr 85 14:16-EST from Glenn Andrew Kramer <GAK at SRI-KL>") ...) :HEADER-FORMAT :SHORT :TRANSMIT-TIME 2691397193 :DRAFT-MSG #<DRAFT-MSG 24221030>)

    ZWEI:NETWORK-SEND-IT-1:  (P.C. = 234)
       Arg 0 (SERVICES): NIL
       Arg 1 (RECIPIENTS): ((:NAME "GAK" :HOST (:OBJECT #<TOPS20-HOST SRI-KL 1616322>) :INTERVAL (("To: GAK@SRI-KL" 4) ("To: GAK@SRI-KL" 14))))
       Arg 2 (TEMPLATE-EXPANSION): (:TEXT #<NODE 24222411> :HEADERS (:DATE 2691397193 :FROM ((:USER #<USER JCMA 1612702>)) :SUBJECT "You there?" :TO ((:NAME "GAK" :HOST ** :INTERVAL **)) :IN-REPLY-TO ("The message of 11 Apr 85 14:16-EST from Glenn Andrew Kramer <GAK at SRI-KL>") ...) :HEADER-FORMAT :SHORT :TRANSMIT-TIME 2691397193 :DRAFT-MSG #<DRAFT-MSG 24221030>)

    ZWEI:NETWORK-SEND-IT:  (P.C. = 132)
       Arg 0 (RECIPIENTS): ((:NAME "GAK" :HOST (:OBJECT #<TOPS20-HOST SRI-KL 1616322>) :INTERVAL (("To: GAK@SRI-KL" 4) ("To: GAK@SRI-KL" 14))))
       Arg 1 (TEMPLATE-EXPANSION): (:TEXT #<NODE 24222411> :HEADERS (:DATE 2691397193 :FROM ((:USER #<USER JCMA 1612702>)) :SUBJECT "You there?" :TO ((:NAME "GAK" :HOST ** :INTERVAL **)) :IN-REPLY-TO ("The message of 11 Apr 85 14:16-EST from Glenn Andrew Kramer <GAK at SRI-KL>") ...) :HEADER-FORMAT :SHORT :TRANSMIT-TIME 2691397193 :DRAFT-MSG #<DRAFT-MSG 24221030>)

22-Oct-85 23:49:25-EDT,1396;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 16:11-EDT
Received: from SCRC-RIVERSIDE.ARPA by MIT-MC.ARPA 13 Aug 85 16:12:05 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-RIVERSIDE.ARPA via CHAOS with CHAOS-MAIL id 45755; Tue 13-Aug-85 16:10:03-EDT
Date: Tue, 13 Aug 85 16:11 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Someone should clear the cache
To: David Chapman <Zvona%OZ@MIT-MC.ARPA>, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: The message of 5 Apr 85 12:36-EST from David Chapman <Zvona@OZ>
Message-ID: <850813161145.7.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Fri, 5 Apr 85 12:36 EST
    From: David Chapman <Zvona@OZ>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 7.8,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Duane Allman:

    Trying to send mail.  It claims not to be able to contact any
    store-and-forward mail server, do I want to send direct?  Yes.  ``OZ is
    believed to be down or unavailable.''  Uh-uh.  It's up and I can c-X c-F
    from it.  Someone's belief revision algorithm needs a little work. 
    (Reset Network didn't help, in case that's relevant.) 

    >>Error: OZ is believed to be down or unavailable.
    While in the function NETI:INVOKE-SERVICE-ACCESS-PATH-WITH-CACHED-UNAVAILABILITY  ZWEI:INVOKE-MAIL-SERVICE  ZWEI:NETWORK-SEND-IT-2

This is fixed in 6.1.

22-Oct-85 23:49:25-EDT,1051;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 18:01-EDT
Received: from SCRC-VALLECITO.ARPA by MIT-MC.ARPA 13 Aug 85 17:51:40 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-VALLECITO.ARPA via CHAOS with CHAOS-MAIL id 29580; Tue 13-Aug-85 17:51:21-EDT
Date: Tue, 13 Aug 85 17:51 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: <NETWORK> when in TERMINAL
To: David Vinayak Wallace <Gumby@MIT-MC.ARPA>, BUG-LISPM%oz@MIT-MC.ARPA
In-Reply-To: The message of 14 Apr 85 23:51-EST from David Vinayak Wallace <Gumby@MIT-MC.ARPA>
Message-ID: <850813175120.9.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Sun, 14 Apr 85 23:51 EST
    From: David Vinayak Wallace <Gumby@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 8.1,
    microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

    The <help> documentation in TERMINAL ought to mention <ABORT>.  I found
    it only by force of habit.

Actually you meant to use <RUBOUT>.  The documentation will be fixed in
some future release.

22-Oct-85 23:49:25-EDT,1280;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 18:03-EDT
Received: from SCRC-VALLECITO.ARPA by MIT-MC.ARPA 13 Aug 85 17:59:00 EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-VALLECITO.ARPA via CHAOS with CHAOS-MAIL id 29581; Tue 13-Aug-85 17:58:41-EDT
Date: Tue, 13 Aug 85 17:58 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: tv:*typeout-window-border-enable* and TERMINAL
To: David Vinayak Wallace <Gumby@MIT-MC.ARPA>, Bug-Lispm%OZ@MIT-MC.ARPA
In-Reply-To: The message of 14 Apr 85 23:26-EST from David Vinayak Wallace <Gumby@MIT-MC.ARPA>
Message-ID: <850813175840.0.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Sun, 14 Apr 85 23:26 EST
    From: David Vinayak Wallace <Gumby@MIT-MC.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 8.1,
    microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

    I have tv:*typeout-window-border-enable* set to NIL.  Whe I start up a
    terminal window the little line is visible.  After I type a host and a
    return the line is undrawn, except for the rightmost and leftmost
    pixels.

This is what happens when you change the value of that parameter after a
window has alrady been created.  If you kill that Terminal window, new
ones should behave correctly.

22-Oct-85 23:49:25-EDT,488;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 13 Aug 85 23:31-EDT
Date: Tue, 13 Aug 85 23:32:05 EDT
From: David Vinayak Wallace <GUMBY@MIT-MC.ARPA>
Subject:  tv:*typeout-window-border-enable* and TERMINAL
To: Hornig@SCRC-STONY-BROOK.ARPA
cc: Bug-Lispm@MIT-OZ
In-reply-to: Msg of Tue 13 Aug 85 17:58 EDT from Charles Hornig <Hornig at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].611547.850813.GUMBY>

Why has the window already been created when I boot a fresh world?
22-Oct-85 23:49:25-EDT,2750;000000000000   
Received: from MIT-XX.ARPA by MIT-OZ via Chaosnet; 14 Aug 85 16:49-EDT
Received: from MIT-LISPM-9 by MIT-XX via Chaosnet; 14 Aug 85 16:48-EDT
Date: Wednesday, 14 August 1985, 16:50-EDT
From: Devon S. McCullough <Devon@MIT-MC.ARPA>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

  I clicked on what I suppose is a menu pane of the Window Debugger in
the Peek display, wondering if it would put the mouse cursor there or
whether it's meaninles to select a pane without it's comrades.  Boom!

  Here's a real pain: When I type <System>L at the Lisp listener where my
c-m-W initially obtained a degubbler window, I get a completely unresponsive
lisp listener, off in window-land I suppose!  <System>L should have selected
the debugger window instead.  Peek is the only way back in the way it is now.


>>ERROR: Attempt to select #<TV:COMMAND-MENU Command Menu 2 2726720 exposed>.  Is this an error?
Backtrace from the debugger:

(:METHOD TV::ESSENTIAL-WINDOW :DEFAULT :SELECT) (P.C. = 26)
  (SELF is #<TV:COMMAND-MENU Command Menu 2 2726720 exposed>)

 Arg 0 (.OPERATION.): :SELECT
   --Defaulted args:--
 Arg 1 (IGNORE): NIL


(:METHOD TV:MENU :COMBINED :SELECT) (P.C. = 106)
  (SELF is #<TV:COMMAND-MENU Command Menu 2 2726720 exposed>)

 Rest arg (.DAEMON-CALLER-ARGS.): (:SELECT)
Local 1 (.DAEMON-MAPPING-TABLE.): #<ART-16B-5 11050722>
Local 2 (ARGS): NIL
Local 3 (.QUEUE-LEFT.): T
Local 4: NIL
Local 5 (E): NIL


TV::PEEK-WINDOW-MENU-INTERNAL (P.C. = 65)

 Arg 0 (PEEK-WINDOW): #<TV::PEEK-WINDOW Peek Window 1 2701522 exposed>
 Arg 1 (SHEET): #<TV:COMMAND-MENU Command Menu 2 2726720 exposed>
 Rest arg (IGNORE): NIL
Local 1 (CHOICE): :SELECT


SI::PROCESS-RUN-FUNCTION-INTERNAL (P.C. = 66)

 Arg 0 (RESTART-ON-RESET): NIL
 Arg 1 (FUNCTION): #<DTP-FEF-POINTER TV::PEEK-WINDOW-MENU-INTERNAL 16173742>
 Rest arg (ARGS): (#<TV::PEEK-WINDOW Peek Window 1 2701522 exposed> #<TV:COMMAND-MENU Command Menu 2 2726720 exposed>)
Local 1: ("Terminate and free process ~A." "Peek Window Menu")
Local 2: ((ABORT ERROR) ("Terminate and free process ~A." "Peek Window Menu") T ("Terminate and free process ~A." "Peek Window Menu") ...)


SI::PROCESS-TOP-LEVEL (P.C. = 115)

 Arg 0 (IGNORE): NIL
Local 0: ("Reset and arrest process ~A." "Peek Window Menu")
Local 1: (CONDITION ("Reset and arrest process ~A." "Peek Window Menu") T ("Reset and arrest process ~A." "Peek Window Menu") ...)
Local 2: ("Restart process ~A." "Peek Window Menu")
Local 3: ((ABORT CONDITION) ("Restart process ~A." "Peek Window Menu") T ("Restart process ~A." "Peek Window Menu") ...)
Local 4 (IGNORE): NIL
22-Oct-85 23:49:26-EDT,766;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 14 Aug 85 23:33-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 14 Aug 85 23:28:02 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Wed 14 Aug 85 22:26:11-CDT
Date: Wed, 14 Aug 85 22:25 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: Sectionalising DEFSTRUCT
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850814222557.7.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
Experimental Eclat 6.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

If I load a file with the following in it and then m-. OOKS, ZWEI must
resort to a textual search of the buffer.  FOKK, on the other hand it
can find easily.

(defstruct ooks
  zibb)

(defstruct (fokk)
  zeeper)
22-Oct-85 23:49:26-EDT,949;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 15 Aug 85 12:38-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 15 Aug 85 12:33:53 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Thu 15 Aug 85 04:25:53-CDT
Date: Thu, 15 Aug 85 04:25 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: compiler doesn't like duplicate IGNORES in macro definition...
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850815042543.8.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0, Eclat 6.0,
Experimental CYC 1.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

While compiling the following macro:

(defmacro CreateSlotPutFn (ignore ignore unit ignore)
  `(CreateSlotPutFn-1 ',unit))

I get the following warning:

  For Function CREATESLOTPUTFN
    While compiling IGNORE:
    The variable IGNORE is unknown and has been declared SPECIAL

The same construct in a function definition does the right thing.
22-Oct-85 23:49:26-EDT,5492;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 15 Aug 85 16:13-EDT
Received: from APIARY-8 by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6969; Thu 15-Aug-85 15:03:39-EDT
Date: Thu, 15 Aug 85 16:12 EDT
From: Randy Parker <PARKER@MIT-REAGAN>
Subject: Show Directory creates (and loses on) bad defaults
To: BUG-LISPM@OZ
Message-ID: <850815161204.2.PARKER@APIARY-8>
Fonts: CPTFONT, CPTFONTB

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, VisiStep, Rodent Free Namespace Editor,
Logical Pathname Completion patch, on Lisp Machine Apiary-8:

<<This bug was reproduced in a clean world on our file server.>>

My default-pathname was set to something reasonable (or you can force it
with fs:set-default-pathname).
	
1(fs:set-default-pathname "oz:ps:<parker>foo.lisp")
0#<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.LISP">

1:Show Directory 0(..default stuff..)1 oz:ps:<parker>*.dir
                                                     
0At this point, I hit 1SPACE 0to go on and it gives me:
1:Show Directory 0(..default stuff..)1 oz:ps:<parker>*.dir0 (keywords)
                                                                      1 
0Now I hit 1RUBOUT0 and type 1*0 and get
1:Show Directory 0(..default stuff..)1 oz:ps:<parker>*.dir*
0and this error, as it tries to go to OZ re: the default.

[Note: the following sequence will also work:
(fs:set-default-pathname "oz:ps:<parker>foo.dir")
:Show dir<SPACE>

However,
(fs:set-default-pathname "oz:ps:<parker>foo.lisp")
:Show dir<SPACE>
does the right thing.]

>>Error: File not found
         For OZ:PS:<PARKER>FOO.DIR
While in the function (:METHOD FS:HOST-UNIT :COMMAND)  FS:OPEN-CHAOS  (:METHOD
                                                                         FS:QFILE-ACCESS-PATH
                                                                         :OPEN)

(:METHOD FS:HOST-UNIT :COMMAND):  (P.C. = 236)
   Arg 0 (SELF): #<HOST-UNIT 17532162>
   Arg 1 (SELF-MAPPING-TABLE): FS:HOST-UNIT
   Arg 2 (OPERATION): :COMMAND
   Arg 3 (MARK-P): NIL
   Arg 4 (STREAM-OR-HANDLE): (:CREATE "I2628")
   Local 4 (STREAM-OR-HANDLE): "I2628"
   Arg 5 (SIMPLE-P): NIL
   Arg 6 (WHOSTATE): "Open"
   Rest arg (COMMANDS): ("OPEN " :READ " " :CHARACTER "" "" "" "" "" "" ...)
   Local 8 (HANDLE): "I2628"
   Local 9 (STREAM): NIL
   Local 10 (PKT): #<Chaos Packet 6004733>
   Local 11 (SUCCESS): NIL
   Local 12 (STRING): "I2628 ERROR FNF F File not found"
   Local 13 (TRANSACTION-ID): "T2631"
   Local 14 (CREATE-P): T
   Local 15 (CONDITION): NIL
   Local 16: T
   Local 17: #<CASE-HANDLER 120711625>
   Local 18: (#<CASE-HANDLER 121405250> #<CASE-HANDLER 120662702>
              #<LEXICAL-CLOSURE ** 43440053>)
   Local 19: (#<CASE-HANDLER 120711625> #<CASE-HANDLER 121405250> #<CASE-HANDLER 120662702>
              #<LEXICAL-CLOSURE ** 43440053>)

FS:OPEN-CHAOS:  (P.C. = 674)
   Arg 0 (ACCESS-PATH): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 17532151>
   Arg 1 (REAL-PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Arg 2: #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Arg 3 (OPTIONS): (:DIRECTION :INPUT)

(:METHOD FS:QFILE-ACCESS-PATH :OPEN):  (P.C. = 7)
   Arg 0 (SELF): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 17532151>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:QFILE-ACCESS-PATH -- 4. IV's, 0. FL's 121666243>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (REAL-PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Arg 4 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Rest arg (OPTIONS): (:DIRECTION :INPUT)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 105211451>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Rest arg (OPTIONS): (:DIRECTION :INPUT)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Arg 1 (KEYWORD-ARGS): NIL

OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<PARKER>FOO.DIR">
   Rest arg (KEYWORD-ARGS): NIL

#:COM-SHOW-DIRECTORY-PATHNAME-MENTIONED-DEFAULT:  (P.C. = 33)

SI:READ-POS-ARG:  (P.C. = 61)
   Arg 0 (STREAM): #:*TYPEIN-WINDOW*-SYN-STREAM
   Arg 1 (ARG): #<POS-CP-ARG Pathname #o121735001>
   --Defaulted args:--
   Arg 2 (FOR-KEYWORD-ARG): NIL

Rest of stack:
SI:READ-COMMAND-INTERNAL:  (P.C. = 200)
(:INTERNAL READ-COMMAND 0):  (P.C. = 4)
(:INTERNAL SI:CP-INPUT-EDITING 0):  (P.C. = 75)
(:DEFUN-METHOD SI:INPUT-EDITOR-READ):  (P.C. = 53)
(:METHOD SI:INTERACTIVE-STREAM :INPUT-EDITOR):  (P.C. = 131)
(:INTERNAL (:METHOD ZWEI:TYPEIN-WINDOW :COMBINED :INPUT-EDITOR) 0):  (P.C. = 11)
(:METHOD ZWEI:ECHO-AREA-QUERY-WINDOW :WHOPPER :INPUT-EDITOR):  (P.C. = 43)
(:METHOD ZWEI:TYPEIN-WINDOW :COMBINED :INPUT-EDITOR):  (P.C. = 13)
SI:WITH-INPUT-EDITING-INTERNAL:  (P.C. = 113)
SI:CP-INPUT-EDITING:  (P.C. = 76)
READ-COMMAND:  (P.C. = 126)
COMMAND:  (P.C. = 6)  (from OZ:PS:<PARKER>LISPM-INIT)
SI:*EVAL:  (P.C. = 403)
ZWEI:COM-EVALUATE-INTO-BUFFER:  (P.C. = 275)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:49:27-EDT,1329;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 16 Aug 85 00:19-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 16 AUG 85  00:19:12 EDT
Date: Friday, 16 August 1985, 00:17-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ
CC: devon@MIT-MC

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

In the error handler

c-m-W should designate the new window as a selection substutute for the old.
c-M confuses window selection if you do any selecting while editing the bug mail.
c-M sometimes calls up a window with some old typeout on it, which goes away when
    you hit a character, but really shouldn't be there at all.

From an error in the editor I typed c-M, so it made a new editor window
for me to type at.  While typing I did System-L System-E and when I
eventually aborted out of the c-M, it sent me back to the Lisp Listener
instead of returning to the erring editor window.  When I did System-E
this gave me a strange blank editor window I suppose must be the window
I had been typing my bug report at, so I moused up the correct editor,
but later a c-M at another error gave me the other editor window with
some old typeout I had left on it hiding the bug report form letter.
22-Oct-85 23:49:27-EDT,1419;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 16 Aug 85 13:14-EDT
Received: from SCRC-QUABBIN.ARPA by MIT-MC.ARPA 16 Aug 85 13:14:07 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 193404; Fri 16-Aug-85 13:11:43-EDT
Date: Fri, 16 Aug 85 13:14 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: compiler doesn't like duplicate IGNORES in macro definition...
To: David Vinayak Wallace <Gumby@MCC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850815042543.8.GUMBY@MCC-GANESH>
Message-ID: <850816131429.0.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 15 Aug 85 04:25 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0, Eclat 6.0,
    Experimental CYC 1.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

    While compiling the following macro:

    (defmacro CreateSlotPutFn (ignore ignore unit ignore)
      `(CreateSlotPutFn-1 ',unit))

    I get the following warning:

      For Function CREATESLOTPUTFN
	While compiling IGNORE:
	The variable IGNORE is unknown and has been declared SPECIAL

    The same construct in a function definition does the right thing.

In my almost-6.1 world, this compiles correctly.  I remember there used
to be a few fixed-after-6.0 bugs in DEFMACRO with IGNORES tailing off
the end of the arglist.

22-Oct-85 23:49:28-EDT,2463;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 16 Aug 85 15:40-EDT
Received: from HARLEM.SCRC.Symbolics.COM by MIT-MC.ARPA 16 Aug 85 15:41:04 EDT
Date: Fri, 16 Aug 85 15:40 EDT
From: Joseph R Goldstone <joseph@SCRC-QUABBIN.ARPA>
Subject: Hardcopy bug reported earlier
To: Ken Traub <KT@MIT-XX.ARPA>, MMcM@SCRC-QUABBIN.ARPA,
    bug-lispm%MIT-OZ@MIT-MC.ARPA
In-Reply-To: The message of 10 Aug 85 16:09-EDT from Ken Traub <KT@MIT-XX.ARPA>
Message-ID: <850816154008.2.JOSEPH@HARLEM.SCRC.Symbolics.COM>

    Date: Sat 10 Aug 85 16:09:16-EDT
    From: Ken Traub <KT@MIT-XX>

    Having received no response regarding the hardcopy bug I reported, I took
    matters into my own hands and found a fix.  Here it is for all who are
    interested:

    The problem was that tabs were being screwed up for fonts other than LPT10.
    The cause was that when the current font was changed going between headers
    and text, the "current font" was updated, but the "device current font" was
    not.  The following patch, actually a modification of a patch that many
    people are using to get hardcopy to work at all, fixes the problem:

    press:
    (defmethod (press-stream :character-width) (char)
      (unless (eq si:current-font si:device-current-font)	;Update device-current-font
	(send self :set-device-font))		;if current-font has changed.
      (max 0 (aref (seventh si:device-current-font) (char-code char))))

    If somebody knows of a reason why this patch might cause problems, I'd
    appreciate if he or she could let me know.

				    --- Ken
    -------

Thanks for the report.  The problem here was that the width was being
calculated from si:device-current-font, rather than si:current-font.
Your code forces device-current-font to be EQ to si:current-font, in
turn making the calculation work out.  The :set-device-font method

    (DEFMETHOD (PRESS-STREAM :SET-DEVICE-FONT) ()
      (SEND SELF ':PUT-PENDING-CHARS)
      (ENTITY-BYTE (+ 160 SI:CURRENT-FONT-NUMBER))
      (SETQ SI:DEVICE-CURRENT-FONT SI:CURRENT-FONT))

does the job, but it makes more sense (and runs faster) to calculate the
width from the right place:

    (DEFMETHOD (PRESS-STREAM :CHARACTER-WIDTH) (CHAR)
      (MAX 0 (AREF (SEVENTH SI:CURRENT-FONT) (CHAR-CODE CHAR))))

Thanks to MMcM for pointing this out.  I'd test it on our Dover to be sure,
but that's kind of hard, since we don't have one.  Could you please...

22-Oct-85 23:49:28-EDT,667;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 16 Aug 85 23:05-EDT
Date: Fri, 16 Aug 85 23:05:20 EDT
From: Tim McNerney <TIM@MIT-MC.ARPA>
Subject:  FORMAT and ART-CHAR-Q-STRING's don't jive.
To: BUG-LISPM@MIT-MC.ARPA
cc: TIM@MIT-MC.ARPA
In-reply-to: Msg of Fri 16 Aug 85 14:59:35 EDT from robbins at DEC-HUDSON
Message-ID: <[MIT-MC.ARPA].615669.850816.TIM>

In Release 6.0, blah, blah, blah...

FORMAT puts -FIXNUMS- into common-lisp strings!!!  To lose, try this:

(pkg-goto 'cl-user)
(setq *readtable* si:*common-lisp-readtable*)
(setq lose (make-array 24 :element-type 'character :fill-pointer 0))
(format lose "This is a test")
(print lose)
22-Oct-85 23:49:28-EDT,1119;000000000000    
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 16 Aug 85 23:16-EDT
Received: from MIT-CHERRY by MIT-REAGAN via CHAOS with CHAOS-MAIL id 6983; Fri 16-Aug-85 22:07:08-EDT
Date: Friday, 16 August 1985, 23:15-EDT
From: Dinarte R. Morais <DRM at MIT-XX>
Subject: Notifications and Window selection
To: bug-lispm at OZ
Message-ID: <850816231510.1.DRM@CHERRY.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, microcode TMC5-IO4-MIC 319,
FEP 22, Tanglewood Version X, on Project Tanglewood Cherry:

I had a Terminal window connected to XX and was editing in the editor.
Just when I noticed '1 notification pending' in the wholine, I typed
Select-T.  Instead of selecting the current terminal window a new one
was created.

Also, after typing c-M in the debugger but before the mail window was
exposed I received a GC notification.  After typing space to make it go
away I correctly entered the mail buffer.  When I typed <Abort>,
however, instead of going back to the origin window, a background
notification window was selected and I was left in a "(dead process)"
state.

-- Dinarte R. Morais
22-Oct-85 23:49:28-EDT,2427;000000000000 
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 18 Aug 85 20:01-EDT
Received: from BRECKENRIDGE by ZERMATT via CHAOS with CHAOS-MAIL id 9780; Sun 18-Aug-85 20:00:20-EDT
Date: Sun, 18 Aug 85 20:00 EDT
From: Steve Seda <Seda@ZERMATT>
Subject: (:METHOD BLINKER :SET-CURSORPOS) does not adjust/restrict its input parameters correctly.
To: BUG-LISPM@OZ
Message-ID: <850818200023.2.SEDA@BRECKENRIDGE>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental Schema 95.14, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Breckenridge:

This method in the window system code doesn't seem to be quite right.
(In >...>R6>WINDOW>SHEET.LISP.  In the TV package.)

----------------------------------------------------------------------------------------------

(DEFMETHOD (BLINKER :SET-CURSORPOS) (X Y &AUX (OLD-PHASE PHASE))
  "Set the position of a blinker relative to the sheet it is on.  Args in terms of
raster units.  If blinker was following cursor, it will no longer be doing so."
  (WITH-BLINKER-READY T
    (SETQ X (MIN (+ (MAX (FIX X) 0) (SHEET-INSIDE-LEFT SHEET)) (SHEET-INSIDE-RIGHT SHEET))
	  Y (MIN (+ (MAX (FIX Y) 0) (SHEET-INSIDE-TOP SHEET)) (SHEET-INSIDE-BOTTOM SHEET)))
    (COND ((NULL VISIBILITY)   ;Don't open if visibility NIL (especially the mouse cursor!)
	   (SETQ X-POS X Y-POS Y FOLLOW-P NIL))
	  ((OR (NEQ X X-POS)			;Only blink if actually moving blinker
	       (NEQ Y Y-POS))
	   (OPEN-BLINKER SELF)
	   (SETQ X-POS X Y-POS Y FOLLOW-P NIL)
	   ;; If this is the mouse blinker, and it is not being tracked by microcode,
	   ;; then it is important to turn it back on immediately.
	   (AND (NEQ VISIBILITY ':BLINK)
		OLD-PHASE
		(BLINK SELF))))))

----------------------------------------------------------------------------------------------

It expects its parameters to be in inside window coordinates (according to the manual, etc.).
It adjusts the coordinates to be regular (outside) window coordinates and restricts the
coordinates to be (supposedly) in the inside window area of the window.

However, it should use (1- (SHEET-INSIDE-RIGHT SHEET)) instead of (SHEET-INSIDE-RIGHT SHEET)
and (1- (SHEET-INSIDE-BOTTOM SHEET)) instead of (SHEET-INSIDE-BOTTOM SHEET) so that the
coordinates are guaranteed to be in the inside portion of the window (and even in the window
at all if either the right or bottom margin size is 0).

Steve Seda
22-Oct-85 23:49:28-EDT,1104;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Aug 85 05:02-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 19 Aug 85 05:02:34 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Mon 19 Aug 85 03:57:21-CDT
Date: Mon, 19 Aug 85 03:57 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: printing into cwarns buffers
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850819035738.0.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
Experimental CYC 2.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

Compiler warnings should print out with the proper syntax (Common- or
Zippy-).

I am compiling a system under common-lisp, which I have converted from
interlisp.  One of the functions was called "UnknownU/S.Fn."  By habit
as I converted it, I changed the name to "UnknownU//S.Fn."  As I
compiled the system I would get the warning 
"UNKNOWNU//S.FN was referenced but not defined."  This confused the hell
out of my, becuse right in front of my eyes was that function.  I could
do fboundp of it.  Everything!

This one was hard to find!

david
22-Oct-85 23:49:29-EDT,724;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Aug 85 06:08-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 19 Aug 85 06:09:06 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Mon 19 Aug 85 05:06:38-CDT
Date: Mon, 19 Aug 85 05:06 CDT
From:  <GUMBY@MCC-GANESH>
Subject: file access when namespace server unavailable
To: BUG-LISPM%mc@MCC-AI
Message-ID: <"850819050612.1.GUMBY@MCC-GANESH"@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
Experimental CYC 1.0, microcode TMC5-IO4-ST506-MIC 319, Fixed :BATCH, on Lord Ganesh:

Why must my machine try to talk to the namespace editor when I try to
read a file from local:?  Or when I click left on "Tree Edit Root" in
the system-F window?
22-Oct-85 23:49:29-EDT,2944;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Aug 85 12:12-EDT
Received: from 40700015427 by MIT-MC.ARPA via Chaosnet; 19 AUG 85  12:12:58 EDT
Date: Monday, 19 August 1985, 12:12-EDT
From: Evangelos E. Milios <eem at MIT-BUGS-BUNNY>
Subject: Hardcopy region command gives an error
To: BUG-LISPM at OZ
Message-ID: <850819121241.1.EEM-REM@DAFFY-DUCK.MIT>


In Symbolics 3670 Release 6.0, IP-TCP 29.0,
microcode TMC5-IO4-FPA-MIC 319, FEP 22, with UTIL, on Lisp Machine Daffy Duck:

I have a buffer corresponding to a file on a UNIX machine
and I get the following error when I try to hardcopy a
region of this buffer in Zemacs. It seems that date-string in
si:hardcopy-from-stream is nil, and in spite of that, it
is given as an argument  to the :string-length message.
I modified the code of hardcopy-from-stream to check for
this condition, and hardcopy region works.
...eem


>>Trap: The first argument given to the AR-1 instruction, NIL, was not an array.
While in the function (:METHOD SI:BASIC-HARDCOPY-STREAM :STRING-LENGTH)  SI:HARDCOPY-HEADING-INFO  SI:HARDCOPY-FROM-STREAM

(:METHOD SI:BASIC-HARDCOPY-STREAM :STRING-LENGTH):  (P.C. = 22)
   Arg 0 (SELF): #<PAGE-BUFFERING-LGP-TEXT-STREAM 33475617>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SI:BASIC-HARDCOPY-STREAM -- 27. IV's, 0. FL's 142456770>
   Arg 2 (OPERATION): :STRING-LENGTH
   Arg 3 (STRING): NIL
   Arg 4 (START): 0
   Arg 5 (END): NIL
   Local 6 (I): 0
   Local 7: 3
   Local 8: 0

SI:HARDCOPY-HEADING-INFO:  (P.C. = 127)  (from B:>sys>r6>hardcopy>stream)
   Arg 0 (STREAM): #<PAGE-BUFFERING-LGP-TEXT-STREAM 33475617>

SI:HARDCOPY-FROM-STREAM:  (P.C. = 152)
   Arg 0 (STREAM): #<INTERVAL-STREAM 33475432>
   Arg 1 (DEVICE): #<LGP-PRINTER DSPG-LGP 1341364>
   Rest arg (OPTIONS): (:BANNER-FILE-NAME "Part of harm-sort-rules.lisp //mnt//dspg//eem//eem//thesis//sig-meas// YOSEMITE-SAM:")

ZWEI:COM-HARDCOPY-REGION:  (P.C. = 41)

ZWEI:COM-EXTENDED-COMMAND:  (P.C. = 27)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-EXTENDED-COMMAND
   Arg 1 (CHAR): 600
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): (ZWEI:SHIFT-LOCK-HOOK)

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 600

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:29-EDT,3190;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Aug 85 12:24-EDT
Received: from 40700015427 by MIT-MC.ARPA via Chaosnet; 19 AUG 85  12:21:55 EDT
Date: Monday, 19 August 1985, 12:21-EDT
From: Evangelos E. Milios <eem at MIT-BUGS-BUNNY>
Subject: wrong window pops up.
To: BUG-LISPM at OZ
Message-ID: <850819122141.2.EEM-REM@DAFFY-DUCK.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0,
microcode TMC5-IO4-FPA-MIC 319, FEP 22, with UTIL, on Lisp Machine Daffy Duck:

I typed <resume> to the debugger and it gave me back
a window which is not mouse sensitive, while waiting
for me to mouse my choise (the mouse arrow turned into
an x).
...eem


>>Error: NIL is not one of the conflicting inherited symbols
While in the function (:METHOD SYS:NAME-CONFLICT-IN-UNINTERN :CASE :PROCEED :SHADOWING-IMPORT)  (:METHOD SYS:NAME-CONFLICT-IN-UNINTERN :COMBINED :PROCEED)  APPLY

(:METHOD SYS:NAME-CONFLICT-IN-UNINTERN :CASE :PROCEED :SHADOWING-IMPORT):  (P.C. = 12)
   Arg 0 (SELF): #<NAME-CONFLICT-IN-UNINTERN 33666441>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SYS:NAME-CONFLICT-IN-UNINTERN -- 3. IV's, 2. FL's 104656021>
   Arg 2 (OPERATION): :SHADOWING-IMPORT
   --Defaulted args:--
   Arg 3: NIL

(:METHOD SYS:NAME-CONFLICT-IN-UNINTERN :COMBINED :PROCEED):  (P.C. = 15)
   Arg 0 (SELF): #<NAME-CONFLICT-IN-UNINTERN 33666441>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SYS:NAME-CONFLICT-IN-UNINTERN -- 3. IV's, 2. FL's 104656021>
   Arg 2 (.OPERATION.): :PROCEED
   Rest arg (.DAEMON-CALLER-ARGS.): (:SHADOWING-IMPORT)

APPLY:  (P.C. = 4)
   Arg 0 (FUNCTION): #<NAME-CONFLICT-IN-UNINTERN 33666441>
   Arg 1 (ARGS): (:PROCEED :SHADOWING-IMPORT)

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (APPLY (QUOTE #<NAME-CONFLICT-IN-UNINTERN 33666441>) (QUOTE (:PROCEED :SHADOWING-IMPORT)))
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

DBG:EVAL-IN-ERROR-ENVIRONMENT:  (P.C. = 365)
   Arg 0 (FORM): (APPLY (QUOTE #<NAME-CONFLICT-IN-UNINTERN 33666441>) (QUOTE (:PROCEED :SHADOWING-IMPORT)))
   Arg 1 (BIND-STREAMS): T

DBG:EXECUTE-PROCEED-COMMAND:  (P.C. = 57)
   Arg 0 (ENTRY): (:PROCEED :SHADOWING-IMPORT)

DBG:COMMAND-LOOP:  (P.C. = 353)

DBG:DEBUGGER-TOP-LEVEL:  (P.C. = 540)
   Arg 0: #<NAME-CONFLICT-IN-UNINTERN 33666441>
   Arg 1: #<DTP-LOCATIVE 43440514>
   Arg 2: NIL
   Arg 3 (SPECIAL-COMMANDS): NIL

Rest of stack:
DBG:ENTER-DEBUGGER:  (P.C. = 16)
DBG:DEBUGGER-HANDLER-HANDLE-CONDITION:  (P.C. = 7)
DBG:DEBUGGER-HANDLER:  (P.C. = 12)
(:METHOD CONDITION :SIGNAL):  (P.C. = 114)
(:METHOD CONDITION :COMBINED :SIGNAL):  (P.C. = 17)
SIGNAL:  (P.C. = 24)
REMOB:  (P.C. = 117)
SI:*EVAL:  (P.C. = 403)
(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:BREAK-INTERNAL:  (P.C. = 176)
ZWEI:COM-BREAK:  (P.C. = 64)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:49:30-EDT,1309;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Aug 85 13:44-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 19 Aug 85 13:44:28 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 298417; Mon 19-Aug-85 10:59:11-EDT
Date: Mon, 19 Aug 85 11:01 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: FORMAT and ART-CHAR-Q-STRING's don't jive.
To: Tim McNerney <TIM@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].615669.850816.TIM>
Message-ID: <850819110158.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 16 Aug 85 23:05:20 EDT
    From: Tim McNerney <TIM@MIT-MC.ARPA>

    In Release 6.0, blah, blah, blah...

    FORMAT puts -FIXNUMS- into common-lisp strings!!!  To lose, try this:

    (pkg-goto 'cl-user)
    (setq *readtable* si:*common-lisp-readtable*)
    (setq lose (make-array 24 :element-type 'character :fill-pointer 0))
    (format lose "This is a test")
    (print lose)

Fixed in Release 7.0, blah, blah, blah... when all strings will be
character strings, and there won't be this massive confusion.  We also
plan to put a microcode check into storing into art-char-q-strings to
make sure only characters are put in, even though format will already
have been fixed.

22-Oct-85 23:49:30-EDT,1687;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 00:51-EDT
Date: Tue, 20 Aug 85 00:51:11 EDT
From: Tim McNerney <TIM@MIT-MC.ARPA>
Subject:  FORMAT and ART-CHAR-Q-STRING's don't jive.
To: DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA, TIM@MIT-MC.ARPA
In-reply-to: Msg of Mon 19 Aug 85 11:01 EDT from David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
Message-ID: <[MIT-MC.ARPA].618529.850820.TIM>

    Date: Mon, 19 Aug 85 11:01 EDT
    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
    To:   Tim McNerney <TIM at MIT-MC.ARPA>, BUG-LISPM at MIT-MC.ARPA
    Re:   FORMAT and ART-CHAR-Q-STRING's don't jive.

        Date: Fri, 16 Aug 85 23:05:20 EDT
        From: Tim McNerney <TIM@MIT-MC.ARPA>

        In Release 6.0, blah, blah, blah...

        FORMAT puts -FIXNUMS- into common-lisp strings!!!

    Fixed in Release 7.0, blah, blah, blah... when all strings will be
    character strings, and there won't be this massive confusion.  We also
    plan to put a microcode check into storing into art-char-q-strings to
    make sure only characters are put in, even though format will already
    have been fixed.

How will you be providing support for all the programs (like ZWEI and
random customers code) which have the "old" strings hardwired into
them?  Various numeric comparisons and byte specifiers like %%ch-font
come to mind as potential losers.  Although Common Lisp strings are
the "right thing" for a number of reasons, there are all sorts of
great hacks that people have pulled over the years that will have to
be completely rewritten...  (For instance, someone is going to have to
rewrite SYS:ZWEI;FOR)
22-Oct-85 23:49:30-EDT,2628;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 09:54-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 20 Aug 85 09:54:20 EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 298878; Tue 20-Aug-85 09:51:52-EDT
Date: Tue, 20 Aug 85 09:53 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: FORMAT and ART-CHAR-Q-STRING's don't jive.
To: TIM@MIT-MC.ARPA, DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].618529.850820.TIM>
Message-ID: <850820095357.5.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Tue, 20 Aug 85 00:51:11 EDT
    From: Tim McNerney <TIM@MIT-MC.ARPA>

	Date: Mon, 19 Aug 85 11:01 EDT
	From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
	To:   Tim McNerney <TIM at MIT-MC.ARPA>, BUG-LISPM at MIT-MC.ARPA
	Re:   FORMAT and ART-CHAR-Q-STRING's don't jive.

	    Date: Fri, 16 Aug 85 23:05:20 EDT
	    From: Tim McNerney <TIM@MIT-MC.ARPA>

	    In Release 6.0, blah, blah, blah...

	    FORMAT puts -FIXNUMS- into common-lisp strings!!!

	Fixed in Release 7.0, blah, blah, blah... when all strings will be
	character strings, and there won't be this massive confusion.  We also
	plan to put a microcode check into storing into art-char-q-strings to
	make sure only characters are put in, even though format will already
	have been fixed.

    How will you be providing support for all the programs (like ZWEI and
    random customers code) which have the "old" strings hardwired into
    them?  Various numeric comparisons and byte specifiers like %%ch-font
    come to mind as potential losers.  Although Common Lisp strings are
    the "right thing" for a number of reasons, there are all sorts of
    great hacks that people have pulled over the years that will have to
    be completely rewritten...  (For instance, someone is going to have to
    rewrite SYS:ZWEI;FOR)

That's right.  We are recasting the entire system in terms of character
objects.  We will be encouraging customers to do the same to their code
/before/ they get Release 7, and plan to provide documentation and a bunch
of functions which are compatible from "old characters" to "new
characters"

Sample advice: numeric comparisons are a no-no with characters, use
CHAR= or CHAR-EQUAL.  Never use #o40 when you mean #\space.  %%CH-FONT
will be obsolete, as will a bundle of other byte specifiers; you should
use the CommonLisp functions which do the same thing.  TYI and TYO,
etc., will read/write character objects, not integers.  And so on.

We know very well that this is a big job.

22-Oct-85 23:49:31-EDT,1501;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 11:30-EDT
Received: from HARLEM.SCRC.Symbolics.COM by MIT-MC.ARPA 20 Aug 85 11:31:04 EDT
Date: Mon, 19 Aug 85 15:58 EDT
From: Joseph R Goldstone <joseph@SCRC-QUABBIN.ARPA>
Subject: Hardcopy region command gives an error
To: Evangelos E. Milios <eem@MIT-BUGS-BUNNY.ARPA>,
    BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850819121241.1.EEM-REM@DAFFY-DUCK.MIT>
Message-ID: <850819155852.5.JOSEPH@HARLEM.SCRC.Symbolics.COM>

    Date: Monday, 19 August 1985, 12:12-EDT
    From: Evangelos E. Milios <eem at MIT-BUGS-BUNNY>


    In Symbolics 3670 Release 6.0, IP-TCP 29.0,
    microcode TMC5-IO4-FPA-MIC 319, FEP 22, with UTIL, on Lisp Machine Daffy Duck:

    I have a buffer corresponding to a file on a UNIX machine
    and I get the following error when I try to hardcopy a
    region of this buffer in Zemacs. It seems that date-string in
    si:hardcopy-from-stream is nil, and in spite of that, it
    is given as an argument  to the :string-length message.
    I modified the code of hardcopy-from-stream to check for
    this condition, and hardcopy region works.
    ...eem


    >>Trap: The first argument given to the AR-1 instruction, NIL, was not an array.
    While in the function (:METHOD SI:BASIC-HARDCOPY-STREAM :STRING-LENGTH)  SI:HARDCOPY-HEADING-INFO  SI:HARDCOPY-FROM-STREAM

By a strange coincidence, I found and fixed this bug last night!  The fix will
be in 6.1.  Thanks for the report.

22-Oct-85 23:49:31-EDT,688;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 13:25-EDT
Received: from SCRC-QUABBIN.ARPA by MIT-MC.ARPA 20 Aug 85 13:25:52 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 194173; Tue 20-Aug-85 13:22:37-EDT
Date: Tue, 20 Aug 85 13:24 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: Format and ART-CHAR-STRINGs
To: TIM@MIT-MC.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
Message-ID: <850820132447.9.MOON@EUPHRATES.SCRC.Symbolics.COM>

Information on the conversion to character objects impending in Release 7
is in the Release 6.0 Release Notes.  More information will be published
as Release 7 gets closer.


22-Oct-85 23:49:32-EDT,3243;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 14:27-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 20 Aug 85 14:28:04 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 299049; Tue 20-Aug-85 14:25:49-EDT
Date: Tue, 20 Aug 85 14:27 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: FORMAT and ART-CHAR-Q-STRING's don't jive.
To: Scott McKay <SWM@SCRC-QUABBIN.ARPA>, TIM@MIT-MC.ARPA,
    DCP@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850820095357.5.SWM@THAMES.SCRC.Symbolics.COM>
Message-ID: <850820142717.6.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue, 20 Aug 85 09:53 EDT
    From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>

	Date: Tue, 20 Aug 85 00:51:11 EDT
	From: Tim McNerney <TIM@MIT-MC.ARPA>

	    Date: Mon, 19 Aug 85 11:01 EDT
	    From: David C. Plummer in disguise <DCP at SCRC-QUABBIN.ARPA>
	    To:   Tim McNerney <TIM at MIT-MC.ARPA>, BUG-LISPM at MIT-MC.ARPA
	    Re:   FORMAT and ART-CHAR-Q-STRING's don't jive.

		Date: Fri, 16 Aug 85 23:05:20 EDT
		From: Tim McNerney <TIM@MIT-MC.ARPA>

		In Release 6.0, blah, blah, blah...

		FORMAT puts -FIXNUMS- into common-lisp strings!!!

	    Fixed in Release 7.0, blah, blah, blah... when all strings will be
	    character strings, and there won't be this massive confusion.  We also
	    plan to put a microcode check into storing into art-char-q-strings to
	    make sure only characters are put in, even though format will already
	    have been fixed.

	How will you be providing support for all the programs (like ZWEI and
	random customers code) which have the "old" strings hardwired into
	them?  Various numeric comparisons and byte specifiers like %%ch-font
	come to mind as potential losers.  Although Common Lisp strings are
	the "right thing" for a number of reasons, there are all sorts of
	great hacks that people have pulled over the years that will have to
	be completely rewritten...  (For instance, someone is going to have to
	rewrite SYS:ZWEI;FOR)

    That's right.  We are recasting the entire system in terms of character
    objects.  We will be encouraging customers to do the same to their code
    /before/ they get Release 7, and plan to provide documentation and a bunch
    of functions which are compatible from "old characters" to "new
    characters"

This needs clarification and emphasis.  We are chucking small fixnums as
valid characters.  We are adhering to Common Lisp's concept of character
objects throughout the system.  Release 6.1 will contain documentation
that will describe much of this AS WELL AS documenting compatibility
functions that should make necessary changes to source code for this
area of the system minimal between 6.1 and 7.0.

    Sample advice: numeric comparisons are a no-no with characters, use
    CHAR= or CHAR-EQUAL.  Never use #o40 when you mean #\space.  %%CH-FONT
    will be obsolete, as will a bundle of other byte specifiers; you should
    use the CommonLisp functions which do the same thing.  TYI and TYO,
    etc., will read/write character objects, not integers.  And so on.

    We know very well that this is a big job.



22-Oct-85 23:49:34-EDT,569;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Aug 85 23:28-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 20 AUG 85  23:28:41 EDT
Date: Tuesday, 20 August 1985, 23:29-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

More detail on how pathname defaults lose:

m-X dired
default is OZ:KANSAS:<L.SYS>*.*.*
I type in <L>
but I get an empty worthless dired of <L>.*.* instead!
22-Oct-85 23:49:34-EDT,1795;000000000000   
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 21 Aug 85 22:40-EDT
Received: from BRECKENRIDGE by ZERMATT via CHAOS with CHAOS-MAIL id 10080; Wed 21-Aug-85 22:38:53-EDT
Date: Wed, 21 Aug 85 22:39 EDT
From: Steve Seda <Seda@ZERMATT>
Subject: (:METHOD TV:SHEET :BITBLT-FROM-SHEET-TO-SHEET) bugs
To: BUG-LISPM@OZ
Message-ID: <850821223911.2.SEDA@BRECKENRIDGE>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental Schema 95.21, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Breckenridge:

This method does not translate the TO-X and TO-Y values, which are in inside window
coordinates, to regular (outside) window coordinates!  Furthermore, it gets the
left-margin-size and top-margin-size from the wrong window when it tries to adjust FROM-X and
FROM-Y!

----------------------------------------------------------------------------------------------
(DEFMETHOD (SHEET :BITBLT-FROM-SHEET-TO-SHEET)
	   (ALU WID HEI FROM-SHEET FROM-X FROM-Y TO-X TO-Y)
  (BITBLT-CLIP WID HEI FROM-X FROM-Y TO-X TO-Y
	       (SHEET-INSIDE-WIDTH FROM-SHEET) (SHEET-INSIDE-HEIGHT FROM-SHEET))
  (BITBLT-CLIP WID HEI TO-X TO-Y FROM-X FROM-Y
	       (SHEET-INSIDE-WIDTH) (SHEET-INSIDE-HEIGHT))
  (UNLESS (OR (ZEROP WID) (ZEROP HEI))
    (SHEET-FORCE-ACCESS (FROM-SHEET NIL)
      (PREPARE-SHEET (SELF)
	(SHEET-BITBLT ALU WID HEI
		      (SHEET-SCREEN-ARRAY FROM-SHEET)
		      (+ FROM-X (SHEET-INSIDE-LEFT)) (+ FROM-Y (SHEET-INSIDE-TOP))
		      (SHEET-SCREEN-ARRAY SELF) TO-X TO-Y)))))
----------------------------------------------------------------------------------------------
(Also, on the last line, it would suffice to use NIL instead of (SHEET-SCREEN-ARRAY SELF). 
This would make it stylistically more similar to the other forms of bitblt methods.)
22-Oct-85 23:49:35-EDT,725;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 22 Aug 85 14:41-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 5243; Thu 22-Aug-85 14:42:44-EDT
Date: Thu, 22 Aug 85 14:41 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: TAGBODY's arglist is wrong
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850822144101.3.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.12, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

(arglist 'tagbody) =>
(SI:BODY SI:ENV)
NIL
SPECIAL 
22-Oct-85 23:49:35-EDT,1591;000000000000  
Received: from MIT-APIARY-8 by MIT-OZ via Chaosnet; 22 Aug 85 17:34-EDT
Date: Thu, 22 Aug 85 17:36 EDT
From: Mark H. Shirley <MHS@MIT-MC>
To: BUG-LISPM@OZ
cc: mhs@HTVAX
Message-ID: <850822173609.2.MHS@APIARY-8>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 18, Funny Label Private Patch, on Lisp Machine Apiary-8:

Is this a known problem with COPYF or the unix file server?  (I did the
following in an editing lisp listener.  Output is preceded by ";;;").  The
problem is that the creation date wasn't copied.  The second creation date
(i.e. for file "ht://ht//mhs//lispm-init.lisp") is when I did this, not the
date that I wrote "b:>mhs>lispm-init.lisp".
Also, notice that the file on HT doesn't have an author among its properties.

(copyf "b:>mhs>lispm-init.lisp" "ht://ht//mhs//lispm-init.lisp" :copy-creation-date t)
;;;  #<UNIX42-PATHNAME "HT: //ht//mhs//lispm-init.lisp">

(fs:multiple-file-plists (list "b:>Mhs>lispm-init.lisp"))
;;;  ((#<LMFS-PATHNAME "B:>MHS>lispm-init.lisp">
;;;	:TRUENAME #<LMFS-PATHNAME "B:>Mhs>lispm-init.lisp.6">
;;;	:LENGTH 2822
;;;	:AUTHOR "MHS"
;;;	:BYTE-SIZE NIL
;;;	:CREATION-DATE 2700515812))

(time:print-universal-time 2700515812)
;;; 7/29/85 19:16:52

(fs:multiple-file-plists (list "ht://ht//mhs//lispm-init.lisp"))
;;;  ((#<UNIX42-PATHNAME "HT: //ht//mhs//lispm-init.lisp">
;;;	:TRUENAME #<UNIX42-PATHNAME "HT: //ht//mhs//lispm-init.lisp">
;;;	:QFASLP NIL
;;;	:LENGTH 2822
;;;	:CREATION-DATE 2702582718))

(time:print-universal-time 2702582718)
;;; 8/22/85 17:25:18

22-Oct-85 23:49:43-EDT,518;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 23 Aug 85 15:44-EDT
Date: Fri, 23 Aug 85 15:42:21 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].622770.850823.WJL>

How do I set the character width in my copy of CPTFONTCB to 8?
I tried (setf (font-char-width font) 8) as well as looking for
something appropriate in the font editor, but it still thinks
the width is 7.

How do I get a standalone editor frame to initially come up in
Lisp mode?

-Bill Long
22-Oct-85 23:49:43-EDT,288;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 23 Aug 85 16:56-EDT
Date: Fri, 23 Aug 85 16:54:10 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
To: BUG-LISPM@MIT-MC.ARPA
Message-ID: <[MIT-MC.ARPA].622839.850823.WJL>

in common-lisp
(write-to-string 'foo)
fails.  Any way to fix this?
22-Oct-85 23:49:44-EDT,480;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 23 Aug 85 17:47-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 23 AUG 85  17:44:32 EDT
Date: Friday, 23 August 1985, 17:44-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

:DRAW-REGULAR-POLYGON is incorrectly clipped to the OUTSIDE of the window.
22-Oct-85 23:49:44-EDT,1834;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 24 Aug 85 14:26-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 5559; Sat 24-Aug-85 14:24:07-EDT
Date: Sat, 24 Aug 85 14:24 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Uninterned non-gensym'd symbols disappearing
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850824142410.9.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

I'd like to be be able to do something like this in macros:
(defmacro sum-until (predicate &body body)
  (let ((count (make-symbol "COUNT")))
    `(do ((,count 0))
	 (,predicate ,count)
       (incf ,count (progn ,@body))))) 
so that in macro expansions and disassembled code the names of the
macro-generated variables would be more meaningful than #:G0034, but not
have the problems that could be caused by two macros picking the same
kind of variable name, like .count., and interfering with each other.
(In disassembled code, these could be differentiated by their different
locations)

Unfortunately, COMPILER:MAKE-VARIABLE assumes all uninterned variables
are GENSYMs and have meaningless names.  If the GENSYM-P part were
changed to something like:
        ...
	(gensym-p (and (null (symbol-package var-name))
		       (let ((string (string var-name)))
			 (and (= (string-length string) 5)
			      (digit-char-p (aref string 1) 10.)
			      (digit-char-p (aref string 2) 10.)
			      (digit-char-p (aref string 3) 10.)
			      (digit-char-p (aref string 4) 10.)))))
        ...
then there would be no problem.
22-Oct-85 23:49:52-EDT,5176;000000000000  
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 25 Aug 85 20:16-EDT
Received: from SARAJEVO by ZERMATT via CHAOS with CHAOS-MAIL id 10496; Sun 25-Aug-85 20:13:41-EDT
Date: Sun, 25 Aug 85 20:14 EDT
From: Richard E. Zippel <RZ@ZERMATT>
Subject: LMFS problems
To: BUG-LISPM@OZ
Message-ID: <850825201413.7.RZ@SARAJEVO>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental Schema 96.0, microcode TMC5-IO4-ST506-MIC 319, on Sarajevo:

I started to print a file on Zermatt using :show file, discovered I
had left out the extension so the machine was listing the directory to
find all the files I might want.  I typed C-Abort to get stop it, C-C
and the correct extension.  The following resulted.  

Perhaps unrelated:  It seems that occasionally a packet gets dropped
between Zermatt and other local machines, leaving Zermatt in TCP Out
(waiting for an acknoledgement?), and the other in TCP In, until something
times out (usually the user).  Could this be due to a bad IO board?

>>Error: File handle I3482 is still (or already?) in use.
While in the function (:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND)  (:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT)

(:METHOD FS:NFILE-SERVER-UNIT :WAIT-FOR-COMMAND):  (P.C. = 65)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7554702>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :WAIT-FOR-COMMAND
   Arg 3 (TID-CONS-ARGS): ("T3514" :OPEN "Open" #<NFILE-DATA-CHANNEL I3482 33445322>)
   Local 4 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL I3482 33445322>
   Local 5 (COMMAND-TID): "T3514"
   Local 6 (COMMAND-NAME): :OPEN
   Local 7 (WHOSTATE): "Open"
   Local 8 (RESPONSE-ARGS): ("BUG" NIL "File handle I3482 is still (or already?) in use.")
   Local 9 (RESPONSE-NAME): :ERROR

(:METHOD FS:NFILE-SERVER-UNIT :SEND-AND-WAIT-FOR-COMMAND):  (P.C. = 40)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7554702>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-AND-WAIT-FOR-COMMAND
   Arg 3 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I3482 33445322> "I3482" ">schema>schema-environments.lisp.NEWEST" :INPUT NIL :PRESERVE-DATES T)

(:METHOD FS:NFILE-SERVER-UNIT :SEND-IN-COMMAND-CONDITION-ENVIRONMENT):  (P.C. = 54)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7554702>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :SEND-IN-COMMAND-CONDITION-ENVIRONMENT
   Arg 3 (MESSAGE): :SEND-AND-WAIT-FOR-COMMAND
   Arg 4 (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I3482 33445322> "I3482" ">schema>schema-environments.lisp.NEWEST" :INPUT NIL :PRESERVE-DATES T)

(:METHOD FS:NFILE-SERVER-UNIT :COMMAND):  (P.C. = 7)
   Arg 0 (SELF): #<NFILE-SERVER-UNIT 7554702>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-SERVER-UNIT -- 15. IV's, 0. FL's 104167041>
   Arg 2 (OPERATION): :COMMAND
   Rest arg (DATA): (:OPEN "Open" #<NFILE-DATA-CHANNEL I3482 33445322> "I3482" ">schema>schema-environments.lisp.NEWEST" :INPUT NIL :PRESERVE-DATES T)

FS:NFILE-KEYWORD-LIST-CALLER:  (P.C. = 165)
   Arg 0 (INSTANCE): #<NFILE-SERVER-UNIT 7554702>
   Arg 1 (CMDNAME): :OPEN
   Arg 2 (WHOSTATE): "Open"
   Arg 3 (DATA-CHANNEL): #<NFILE-DATA-CHANNEL I3482 33445322>
   Arg 4 (CONSTANT-ARGS): ("I3482" ">schema>schema-environments.lisp.NEWEST" :INPUT NIL)
   Local 4 (CONSTANT-ARGS): NIL
   Arg 5 (KEYWORD-VALUE-PAIRS): (:BYTE-SIZE NIL :DELETED NIL :RAW NIL :SUPER-IMAGE NIL :PRESERVE-DATES T ...)
   Local 5 (KEYWORD-VALUE-PAIRS): NIL

(:METHOD FS:NFILE-ACCESS-PATH :OPEN):  (P.C. = 375)
   Arg 0 (SELF): #<LMFS-NFILE-ACCESS-PATH Z using NEW-FILE 7554671>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:NFILE-ACCESS-PATH -- 4. IV's, 2. FL's 121346410>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (REAL-PATHNAME): #<LMFS-PATHNAME "Z:>schema>schema-environments.lisp">
   Arg 4 (COMMAND-PATHNAME): #<LMFS-PATHNAME "Z:>schema>schema-environments.lisp">
   Rest arg: (:DIRECTION :INPUT :PRESERVE-DATES T)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #<LMFS-PATHNAME "Z:>schema>schema-environments.lisp">
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 104225115>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #<LMFS-PATHNAME "Z:>schema>schema-environments.lisp">
   Rest arg (OPTIONS): (:DIRECTION :INPUT :PRESERVE-DATES T)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #<LMFS-PATHNAME "Z:>schema>schema-environments.lisp">
   Arg 1 (KEYWORD-ARGS): (:PRESERVE-DATES T)

Rest of stack:
OPEN:  (P.C. = 257)
VIEWF:  (P.C. = 25)
(:PROPERTY SI:COM-SHOW-FILE SI:CP-FUNCTION):  (P.C. = 202)
SI:COM-SHOW-FILE:  (P.C. = 7)
SI:*EVAL:  (P.C. = 403)
(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:49:53-EDT,932;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 26 Aug 85 10:01-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 26 Aug 85 09:58:44 EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 301175; Mon 26-Aug-85 09:58:41-EDT
Date: Mon, 26 Aug 85 09:59 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: cl:write-to-string
To: Bill Long <WJL@MIT-MC.ARPA>, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].622839.850823.WJL>
Message-ID: <850826095919.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 23 Aug 85 16:54:10 EDT
    From: Bill Long <WJL@MIT-MC.ARPA>

Please use m-X Bug.

    In common-lisp
    (write-to-string 'foo)
    fails.  Any way to fix this?

I'm going to assume this refers to Symbolics Release 6.0.  I don't have
a 6.0 handy, but in my almost-6.1 world, (cl:write-to-string 'foo)
returns a Common Lisp string.

22-Oct-85 23:49:53-EDT,1203;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 26 Aug 85 10:39-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 26 Aug 85 10:30:21 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 301208; Mon 26-Aug-85 10:30:04-EDT
Date: Mon, 26 Aug 85 10:32 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: cl:write-to-string
To: DCP@SCRC-QUABBIN.ARPA, WJL@MIT-MC.ARPA, BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <850826095919.3.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850826103214.5.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Mon, 26 Aug 85 09:59 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>

	Date: Fri, 23 Aug 85 16:54:10 EDT
	From: Bill Long <WJL@MIT-MC.ARPA>

    Please use m-X Bug.

	In common-lisp
	(write-to-string 'foo)
	fails.  Any way to fix this?

    I'm going to assume this refers to Symbolics Release 6.0.  I don't have
    a 6.0 handy, but in my almost-6.1 world, (cl:write-to-string 'foo)
    returns a Common Lisp string.

What DCP is saying in the above is that "the problem appears to
be fixed already in release 6.1, which you should have in your
hands shortly."

22-Oct-85 23:49:53-EDT,2701;000000000000  
Received: from MIT-MOON by MIT-OZ via Chaosnet; 26 Aug 85 23:25-EDT
Date: Mon, 26 Aug 85 23:23 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: Error: Backwards FSM search does not work, please complain nicely to BUG-LISPM
To: BUG-LISPM@OZ
Message-ID: <850826232356.1.JAR@MOON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319,
on Lisp Machine Keith Moon:
Warm booted from: 3600 Ethernet Receiver, Common Lisp Listener 1.

I did a Reverse Delimited Search (using the Char Search command) and got the following:

>>Error: Backwards FSM search does not work, please complain nicely to BUG-LISPM
While in the function ZWEI:FSM-SEARCH  ZWEI:DELIMITED-SEARCH  ZWEI:COM-STRING-SEARCH-INTERNAL

ZWEI:FSM-SEARCH:  (P.C. = 30)
   Arg 0 (BP): ("  (apply #'apply (procedure->function proc) (apply #'list* rest)))" 59 :NORMAL)
   Arg 1 (STRINGS): (#<ART-16B-3 7134342>)
   Arg 2 (REVERSE-P): T
   Arg 3 (FIXUP-P): NIL
   Arg 4 (IGNORE): NIL
   Arg 5 (LIMIT-BP): NIL
   Local 5 (LIMIT-BP): (";-*- Mode: Lisp; Package: COMMON-LISP-USER; Syntax: Common-lisp-*-" 0 :NORMAL)
   --Defaulted args:--
   Arg 6 (STATE): 0
   Local 7 (WORD): NIL

ZWEI:DELIMITED-SEARCH:  (P.C. = 65)
   Arg 0 (BP): ("  (apply #'apply (procedure->function proc) (apply #'list* rest)))" 59 :NORMAL)
   Arg 1 (STRING): "x"
   Local 1 (STRING): (#<ART-16B-3 7134342>)
   Arg 2 (REVERSE-P): T
   --Defaulted args:--
   Arg 3 (FIXUP-P): NIL
   Arg 4 (LIMIT-BP): NIL
   Arg 5: NIL

ZWEI:COM-STRING-SEARCH-INTERNAL:  (P.C. = 423)
   Arg 0 (REVERSEP): NIL
   Local 0 (REVERSEP): T
   Arg 1 (BJP): NIL
   Arg 2 (ZJP): NIL
   Arg 3 (TOP-P): NIL

ZWEI:CHAR-SEARCH-INTERNAL:  (P.C. = 146)
   Arg 0 (REVERSEP): NIL

ZWEI:COM-CHAR-SEARCH:  (P.C. = 5)

ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
   Arg 0 (COMMAND): ZWEI:COM-CHAR-SEARCH
   Arg 1 (CHAR): 339
   Arg 2 (PREFIX-CHAR): NIL
   Arg 3 (HOOK-LIST): NIL

ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
   Arg 0 (CH): 339

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   Arg 0 (IGNORE): NIL
22-Oct-85 23:49:54-EDT,842;000000000000  
Received: from MIT-MOON by MIT-OZ via Chaosnet; 27 Aug 85 00:12-EDT
Date: Tue, 27 Aug 85 00:10 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (GRINDEF closure)
To: BUG-LISPM@OZ
Message-ID: <850827001041.3.JAR@MOON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319,
on Lisp Machine Keith Moon:
Warm booted from: 3600 Ethernet Receiver, Common Lisp Listener 1.

GRINDEF doesn't work with closures.  (It ought to print at least the
closure's lambda-expression, if not the closed-over variables too, when
the closure is created by an interpreted LAMBDA-expression.)  E.g.

(setf #'foo (let ((x 1)) (lambda () x)))
(grindef foo)

prints

(DEFF FOO '#<LEXICAL-CLOSURE ...>)

which is useless.

I already complained about INSPECT not working on closures; is that
getting fixed?

Jonathan
22-Oct-85 23:49:54-EDT,1671;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 27 Aug 85 10:39-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6018; Tue 27-Aug-85 10:27:22-EDT
Date: Tue, 27 Aug 85 10:27 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: I wish I could bind instance variables
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850827102703.4.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

(defflavor foo
	((array (make-array 100)))
	())

(defmethod (foo :bar)
	   ()
  (let ((array array))
    (declare (sys:array-register array))
    (dotimes (i (length array))
      (setf (aref array i)
	    i))))

  For Function (:METHOD CL-USER::FOO :BAR)
    While compiling (LET ((CL:ARRAY CL:ARRAY)) (DECLARE (SYS:ARRAY-REGISTER CL:ARRAY)) (CL:DOTIMES (CL-USER::I (CL:LENGTH CL:ARRAY)) (CL:SETF (AREF CL:ARRAY CL-USER::I) CL-USER::I))):
    CL:ARRAY is declared special, array register declaration ignored.
    While compiling (LET ((CL:ARRAY CL:ARRAY)) (DECLARE (SYS:ARRAY-REGISTER CL:ARRAY)) (CL:DOTIMES (CL-USER::I (CL:LENGTH CL:ARRAY)) (CL:SETF (AREF CL:ARRAY CL-USER::I) CL-USER::I))):
    Trying to bind the instance variable CL:ARRAY,
    a LEXICAL variable will be used instead.

There are many times when binding an instance variable is what I want to
do, this being the most common of them.  Instead, I need to do something
like call the array ARRAY-REG.
22-Oct-85 23:49:54-EDT,2612;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 27 Aug 85 16:42-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6034; 27 Aug 85 16:40:08-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 302137; Tue 27-Aug-85 16:39:20-EDT
Date: Tue, 27 Aug 85 16:40 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: I wish I could bind instance variables
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850827102703.4.CYPHER@YOGI.MIT>
Message-ID: <850827164030.7.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue, 27 Aug 85 10:27 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    (defflavor foo
	    ((array (make-array 100)))
	    ())

    (defmethod (foo :bar)
	       ()
      (let ((array array))
	(declare (sys:array-register array))
	(dotimes (i (length array))
	  (setf (aref array i)
		i))))

      For Function (:METHOD CL-USER::FOO :BAR)
	While compiling (LET ((CL:ARRAY CL:ARRAY)) (DECLARE (SYS:ARRAY-REGISTER CL:ARRAY)) (CL:DOTIMES (CL-USER::I (CL:LENGTH CL:ARRAY)) (CL:SETF (AREF CL:ARRAY CL-USER::I) CL-USER::I))):
	CL:ARRAY is declared special, array register declaration ignored.
	While compiling (LET ((CL:ARRAY CL:ARRAY)) (DECLARE (SYS:ARRAY-REGISTER CL:ARRAY)) (CL:DOTIMES (CL-USER::I (CL:LENGTH CL:ARRAY)) (CL:SETF (AREF CL:ARRAY CL-USER::I) CL-USER::I))):
	Trying to bind the instance variable CL:ARRAY,
	a LEXICAL variable will be used instead.

    There are many times when binding an instance variable is what I want to
    do, this being the most common of them.  Instead, I need to do something
    like call the array ARRAY-REG.

This example does not show the desire to 'bind' an instance variable.
You want a way to declare it local.  Suppose it were *array* instead.
Array registers must be local variables; they cannot be specials,
instance, or free variables.  This works, but for the wrong reasons.

    (defflavor foo
	    ((array (make-array 100)))
	    ())

    (defmethod (foo :bar)
	       ()
      (let ((array array))
	(declare (unspecial array)
		 (sys:array-register array))
	(dotimes (i (length array))
	  (setf (aref array i)
		i))))

22-Oct-85 23:49:55-EDT,3810;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 27 Aug 85 17:37-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6040; Tue 27-Aug-85 17:35:43-EDT
Date: Tue, 27 Aug 85 17:35 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: I wish I could have local variables with the same name as instance variables
To: DCP@SCRC-QUABBIN.ARPA, sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850827164030.7.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850827173526.5.CYPHER@YOGI.MIT>

    Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 27 Aug 85 16:42-EDT
    Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6034; 27 Aug 85 16:40:08-EDT
    Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 302137; Tue 27-Aug-85 16:39:20-EDT
    Date: Tue, 27 Aug 85 16:40 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    Subject: I wish I could bind instance variables
    To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
	BUG-LISPM@MIT-GOLDILOCKS.ARPA
    In-Reply-To: <850827102703.4.CYPHER@YOGI.MIT>
    Message-ID: <850827164030.7.NFEP@NEPONSET.SCRC.Symbolics.COM>

    This example does not show the desire to 'bind' an instance variable.
    You want a way to declare it local.  Suppose it were *array* instead.
    Array registers must be local variables; they cannot be specials,
    instance, or free variables.  This works, but for the wrong reasons.

You're right.   My terminology was brain-damaged.  I really wish I could
have local variables with the same names as instance variables without
getting that warning (in CHECK-FOR-BINDING-INSTANCE-VARIABLE) that the
compiler is doing exactly what I want it to be doing and would expect it
to do.

However, for array registers, it still does not work, because the array
register declaration checker doesn't do the right thing in the instance
variable case, even though at one point in the warnings you are told
that it has used a lexical variable, which it does. Changing
INITIALIZE-VARIABLE to:

compiler:
(defun initialize-variable (var-name declaration class value-form)
  (let ((real-class (if (listp class) (car class) class)))
    (phase-1 value-form 'stack)
    (when (memq real-class '(array-register array-register-1d))
      (if (neq declaration 'special)
	  (emit-setup-array (selectq real-class
			      (array-register 'normal)
			      (array-register-1d 'force-1d)))
	  (phase-1-warning "~S is declared special, array register declaration ignored." var-name))))) 

makes it work in the case I gave (the normal INITIALIZE-VARIABLE assumes
anything that is not lexical is special).  I have also noticed that if
you give the array register declaration like this:

(defmethod (foo :bar)
	   ()
  (declare (sys:array-register array))
  ...)

then it is ignored with the normal INITIALIZE-VARIABLE, as well as mine,
WITHOUT giving the warning given if you try to do it to a special
variable.  I guess this is another bug.


There are non array-register cases where it is desirable to have a local
variable with the same name as an instance variable.  For example,
suppose the FOO flavor has the ORANGE instance variable, telling the
orange color level.  The :FRUIT-COUNT method does something that has
nothing to do with colors, but at one point finds it convenient to use
the local variable name ORANGE as it sums the number of oranges.  Also,
since you can do the following without any kind of warning, I don't see
why you should get warned about doing it for an instance variable, since
an instance is a kind of closure.

(defun foo (z)
  #'(lambda ()
      (let ((z (+ z 1)))
	z)))
22-Oct-85 23:49:55-EDT,3187;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 29 Aug 85 10:52-EDT
Received: from MIT-XX.ARPA by MIT-MC.ARPA 29 Aug 85 10:51:58 EDT
Date: Thu 29 Aug 85 10:51:47-EDT
From: Ken Traub <KT@MIT-XX.ARPA>
Subject: Re: Hardcopy bug reported earlier
To: joseph@SCRC-QUABBIN.ARPA
cc: MMcM@SCRC-QUABBIN.ARPA, bug-lispm%MIT-OZ@MIT-MC.ARPA
In-Reply-To: Message from "Joseph R Goldstone <joseph@SCRC-QUABBIN.ARPA>" of Fri 16 Aug 85 15:42:15-EDT

   Return-Path: <@HARLEM.SCRC.Symbolics.COM:joseph@SCRC-QUABBIN.ARPA>
   Received: from HARLEM.SCRC.Symbolics.COM ([192.10.41.134].#Internet) by MIT-XX.ARPA with TCP; Fri 16 Aug 85 15:42:06-EDT
   Date: Fri, 16 Aug 85 15:40 EDT
   From: Joseph R Goldstone <joseph@SCRC-QUABBIN.ARPA>
   Subject: Hardcopy bug reported earlier
   To: Ken Traub <KT@MIT-XX.ARPA>, MMcM@SCRC-QUABBIN.ARPA,
       bug-lispm%MIT-OZ@MIT-MC.ARPA
   In-Reply-To: The message of 10 Aug 85 16:09-EDT from Ken Traub <KT@MIT-XX.ARPA>
   Message-ID: <850816154008.2.JOSEPH@HARLEM.SCRC.Symbolics.COM>

       Date: Sat 10 Aug 85 16:09:16-EDT
       From: Ken Traub <KT@MIT-XX>

       Having received no response regarding the hardcopy bug I reported, I took
       matters into my own hands and found a fix.  Here it is for all who are
       interested:

       The problem was that tabs were being screwed up for fonts other than LPT10.
       The cause was that when the current font was changed going between headers
       and text, the "current font" was updated, but the "device current font" was
       not.  The following patch, actually a modification of a patch that many
       people are using to get hardcopy to work at all, fixes the problem:

       press:
       (defmethod (press-stream :character-width) (char)
	 (unless (eq si:current-font si:device-current-font)	;Update device-current-font
	   (send self :set-device-font))		;if current-font has changed.
	 (max 0 (aref (seventh si:device-current-font) (char-code char))))

       If somebody knows of a reason why this patch might cause problems, I'd
       appreciate if he or she could let me know.

				       --- Ken
       -------

   Thanks for the report.  The problem here was that the width was being
   calculated from si:device-current-font, rather than si:current-font.
   Your code forces device-current-font to be EQ to si:current-font, in
   turn making the calculation work out.  The :set-device-font method

       (DEFMETHOD (PRESS-STREAM :SET-DEVICE-FONT) ()
	 (SEND SELF ':PUT-PENDING-CHARS)
	 (ENTITY-BYTE (+ 160 SI:CURRENT-FONT-NUMBER))
	 (SETQ SI:DEVICE-CURRENT-FONT SI:CURRENT-FONT))

   does the job, but it makes more sense (and runs faster) to calculate the
   width from the right place:

       (DEFMETHOD (PRESS-STREAM :CHARACTER-WIDTH) (CHAR)
	 (MAX 0 (AREF (SEVENTH SI:CURRENT-FONT) (CHAR-CODE CHAR))))

   Thanks to MMcM for pointing this out.  I'd test it on our Dover to be sure,
   but that's kind of hard, since we don't have one.  Could you please...

-----

Yes, your version of the patch (in which you change SI:CURRENT-DEVICE-FONT
to SI:CURRENT-FONT) works like a charm.  Thanks!
				--- Ken
-------
22-Oct-85 23:49:55-EDT,2193;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 28 Aug 85 03:07-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 28 AUG 85  03:06:54 EDT
Date: Wednesday, 28 August 1985, 03:06-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:


In ZWEI, I did Help D or s i Return to find what Ordinarily Self Insert does:


>>ERROR: Cannot coerce NIL into a character
Backtrace from the debugger:

CLI:CHARACTER (P.C. = 51)

 Arg 0 (X): NIL


FORMAT::FORMAT-CTL-CHARACTER (P.C. = 92)

 Arg 0 (ARG): NIL
 Arg 1 (IGNORE): NIL
Local 0 (CHNAME): NIL
Local 1 (BITS): NIL
Local 2 (LOWER-CASE): NIL
Local 3: NIL
Local 4 (LEN): NIL
Local 5 (I): NIL


FORMAT::FORMAT-CTL-OP (P.C. = 43)

 Arg 0 (OP): FORMAT::C
 Arg 1 (ARGS): (NIL NIL NIL)
 Arg 2 (PARAMS): NIL
Local 0 (TEM): FORMAT::FORMAT-CTL-CHARACTER


FORMAT::FORMAT-CTL-STRING (P.C. = 100)

 Arg 0 (ARGS): (NIL NIL NIL)
 Arg 1 (CTL-STRING): "~&Self insertion: ~:C inserts a /"~:[~C~;~\lozenged-char\~]/"."
Local 0 (FORMAT-PARAMS): #<ART-Q-LIST-10 7724244>
Local 1 (TEM): FORMAT::C


FORMAT (P.C. = 144)

 Arg 0 (STREAM): #:*TERMINAL-IO*-SYN-STREAM
 Arg 1 (CTL-STRING): "~&Self insertion: ~:C inserts a /"~:[~C~;~\lozenged-char\~]/"."
 Rest arg (ARGS): (NIL NIL NIL)
Local 1 (VAL): NIL
Local 2: NIL


Remainder of stack:

(:PROPERTY ZWEI::COM-SELF-INSERT ZWEI::DOCUMENTATION-FUNCTION) (P.C. = 47)
ZWEI::PRINT-DOC (P.C. = 65)
ZWEI::DOCUMENT-STANDARD-COMMAND (P.C. = 48)
ZWEI::PRINT-DOC (P.C. = 65)
ZWEI::COM-DESCRIBE-COMMAND (P.C. = 47)
ZWEI::COM-DOCUMENTATION (P.C. = 205)
ZWEI::COMMAND-EXECUTE (P.C. = 92)
ZWEI::PROCESS-COMMAND-CHAR (P.C. = 61)
(:METHOD ZWEI:WINDOW :PROCESS-COMMAND-CHAR) (P.C. = 20)
(:METHOD ZWEI:WINDOW :EDIT) (P.C. = 307)
(:INTERNAL (:METHOD ZWEI:ZMACS-WINDOW :COMBINED :EDIT) 0) (P.C. = 60)
FUNCALL (P.C. = 21)
(:METHOD ZWEI::DISPLAYER :AROUND :EDIT) (P.C. = 25)
(:METHOD ZWEI:ZMACS-WINDOW :COMBINED :EDIT) (P.C. = 39)
ZWEI::ZMACS-WINDOW-TOP-LEVEL (P.C. = 38)
SI::PROCESS-TOP-LEVEL (P.C. = 115)
22-Oct-85 23:49:57-EDT,1199;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 28 Aug 85 10:36-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6069; 28 Aug 85 10:35:31-EDT
Received: from HUDSON.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 302558; Wed 28-Aug-85 10:34:10-EDT
Date: Wed, 28 Aug 85 10:34 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: TAGBODY's arglist is wrong
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850822144101.3.CYPHER@YOGI.MIT>
Message-ID: <850828103445.5.HORNIG@HUDSON.SCRC.Symbolics.COM>

    Date: Thu, 22 Aug 85 14:41 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.12, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    (arglist 'tagbody) =>
    (SI:BODY SI:ENV)
    NIL
    SPECIAL 

Thank you for this report.  The problem will be fixed in a future
release.

22-Oct-85 23:49:57-EDT,3148;000000000000
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 28 Aug 85 15:21-EDT
Received: from STARLING by ZERMATT via CHAOS with CHAOS-MAIL id 11163; Wed 28-Aug-85 15:20:52-EDT
Date: Wed, 28 Aug 85 15:20 EDT
From: Bill Long <WJL@MIT-MC.ARPA>
Subject: zwei:pop-up-ed-string
To: BUG-LISPM@MIT-ZERMATT.ARPA
Message-ID: <850828152041.1.WJL@STARLING>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Starling:
Warm booted from: Common Lisp Listener 1.

;;; This seems to happen when the standalone editor resource has to increase the size of the window for a string

>>Error: The object #<EDITOR-TYPEOUT-WINDOW Editor Typeout Window 18 43277565 exposed> received a :SIZE-DELTAS-FOR-STRING message, which went unclaimed.
         The rest of the message was (#"
         \(((LOW BLOOD-PRESS) ++)
          ((NORMAL BLOOD-PRESS) +)
          ((HIGH BLOOD-PRESS) O))")
While in the function (:METHOD ZWEI:BASIC-STANDALONE-EDITOR-FRAME :SET-SIZE-FROM-STRING)  ZWEI:POP-UP-EDSTRING  HF:BAR

(:METHOD ZWEI:BASIC-STANDALONE-EDITOR-FRAME :SET-SIZE-FROM-STRING):  (P.C. = 32)
   Arg 0 (SELF): #<POP-UP-STANDALONE-EDITOR-FRAME Pop Up Standalone Editor Frame 1 43242220 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:BASIC-STANDALONE-EDITOR-FRAME -- 5. IV's, 0. FL's 104441237>
   Arg 2 (OPERATION): :SET-SIZE-FROM-STRING
   Arg 3 (STRING): #"
\(((LOW BLOOD-PRESS) ++)
 ((NORMAL BLOOD-PRESS) +)
 ((HIGH BLOOD-PRESS) O))"
   Arg 4 (MIN-WIDTH): NIL
   Arg 5 (MIN-HEIGHT): NIL
   --Defaulted args:--
   Arg 6 (MAX-WIDTH): 1067
   Arg 7 (MAX-HEIGHT): 769
   Local 8 (DWT): 1067
   Local 9 (DHT): 769
   Local 10 (MODE-LINE-HEIGHT): NIL

ZWEI:POP-UP-EDSTRING:  (P.C. = 24)
   Arg 0 (STRING): #"
\(((LOW BLOOD-PRESS) ++)
 ((NORMAL BLOOD-PRESS) +)
 ((HIGH BLOOD-PRESS) O))"
   --Defaulted args:--
   Arg 1 (NEAR-MODE): (:MOUSE)
   Arg 2 (MODE-LINE-LIST): NIL
   Arg 3 (MIN-WIDTH): NIL
   Arg 4 (MIN-HEIGHT): NIL
   Arg 5 (INITIAL-MESSAGE): NIL

HF:BAR:
   Arg 0 (OCONDITION): (((HF:LOW HF:BLOOD-PRESS) ++) ((HF:NORMAL HF:BLOOD-PRESS) +) ((HF:HIGH HF:BLOOD-PRESS) HF:O))

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (HF:BAR HF:BB)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 11340102>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 11340107>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 1500367 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

Rest of stack:
SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:49:57-EDT,1012;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 28 Aug 85 15:35-EDT
Received: from GODOT.THINK.COM by MIT-MC.ARPA 28 Aug 85 15:26:05 EDT
Received: from botolph by GODOT.THINK.COM via CHAOS; Wed, 28 Aug 85 15:25:53 edt
Date: Wednesday, 28 August 1985, 15:26-EDT
From: Paul Rosenblum <PSR@THINK.COM>
Subject: failure to warn about unused variable
To: BUG-LISPM@oz
Message-Id: <850828152648.1.PSR@BOTOLPH.THINK.COM>

In Symbolics 3600 Release 6.0, Experimental IP-TCP 31.0,
Experimental TMC 7.1, Experimental TMC-ENHANCEMENTS 6.6,
Experimental QMS 16.1, Experimental CGL 31.3, microcode TMC5-MIC 319,
FEP 17, on St. Botolph:

The compiler failed to tell me that Y2 was unused.  Isn't it supposed to
catch all unused variables?

Paul

(defmacro dist (x1 y1 x2 y2)
  "Computes the distance between the points."
  `(sqrt (+ (sqr (- y2 y1)) (sqr (- x2 x1)))))

  For Function DIST
    The variable X2 was never used.
    The variable Y1 was never used.
    The variable X1 was never used.
22-Oct-85 23:49:59-EDT,577;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 28 Aug 85 16:13-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 28 AUG 85  16:08:04 EDT
Date: Wednesday, 28 August 1985, 16:08-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

Why won't this compile?  It interprets ok.

(defun max-window-width ()
  (apply #'max (mapcar #'(:method tv:sheet :width) tv:all-the-screens)))

(max-window-width)
22-Oct-85 23:49:59-EDT,1276;000000000000  
Received: from MIT-SID by MIT-OZ via Chaosnet; 29 Aug 85 14:57-EDT
Date: Thu, 29 Aug 85 14:57 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: incomplete control-X command set
To: BUG-LISPM@OZ
Message-ID: <850829145758.1.JAR@SID>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

Why is it that the two situations:

(a) entering editor via c-M command in debugger (send bug report)
(b) sending a bug report via the editor's Bug command

give me different versions of the editor command tables?  In (a) I get
an editor that says ZWEI in mode line, and the M-X Set Package command
(for example) is not defined (I really wanted to use it, but it was
"Unavailable in current context" - which statement is actually false,
since it IS available through C-M-X Set Package); in (b) I'm in still in
the normal editor which says ZMACS in the mode line, and I can do M-X
Set Package.

This seems really obscure to me.  The idea of commands "unavailable in a
context" seems questionable to me in the first place - and why should
Set Package, essential for doing Evaluate Into Buffer and things like
that, be unavailable anywhere? - but at least there should be some
consistency about it.
22-Oct-85 23:50:00-EDT,2867;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 29 Aug 85 16:43-EDT
Received: from MIT-ROCKY-GRAZIANO by MIT-REAGAN via CHAOS with CHAOS-MAIL id 7201; Thu 29-Aug-85 16:46:09-EDT
Date: Thu, 29 Aug 85 16:43 EDT
From: Roland Ouellette <Roly@MIT-MC>
Subject: Dired bug
To: BUG-LISPM@OZ
Message-ID: <850829164318.1.ROLY@MIT-ROCKY-GRAZIANO>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, ECG 1.1,
microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Rocky Graziano:

To reproduce this error:
Meta-x dired a directory.
Put the point at the end of a line with an author.
Type . (dot) to get a menu of properties to change.
Make the name of the author shorter.  For instance change FROBNICATION
to FOO.
Then exit.

It is possible to mouse the window somewhere and then resume, but this
is not obvious at first.

>>Error: Recenter type :POINT left point outside the window
While in the function ZWEI:REDISPLAY  ZWEI:REDISPLAY-ALL-WINDOWS  (:METHOD ZWEI:EDITOR :EDIT)

ZWEI:REDISPLAY:  (P.C. = 1554)
   Arg 0 (WINDOW): #<WINDOW 121162025>
   --Defaulted args:--
   Arg 1 (RECENTER-TYPE): :POINT
   Arg 2 (RC1): NIL
   Arg 3 (RC2): NIL
   Arg 4 (FORCE-TO-COMPLETION-P): NIL
   Local 5 (N-PLINES): 49
   Local 6 (POINT): ("      preferences.bin.3    2   2332(16) !   08//28//85 15:28:37 (08//29//85)  EHL" 86 :NORMAL)
   Local 7 (SHEET): #<ZMACS-WINDOW-PANE Zmacs Window Pane 1 43240666 exposed>
   Local 8 (DEGREE): 4
   Local 9 (POINT-BLINKER): #<RECTANGULAR-BLINKER 56242334>
   Local 10 (INTERVAL): #<DIRED-BUFFER "*Dired-1*" 6240227>
   Local 11 (START-BP): ("JOE:>ECG>*.*.*" 0 :NORMAL)
   Local 12 (NOW): 559
   Local 13 (POINT-PLINE): NIL
   Local 14 (LH): 14
   Local 15 (POINT-LINE): "      preferences.bin.3    2   2332(16) !   08//28//85 15:28:37 (08//29//85)  EHL"
   Local 16 (POINT-INDEX): 86
   Local 17 (TOP-LINE): "JOE:>ECG>*.*.*"
   Local 18 (TOP-INDEX): 0
   Local 19 (LAST-BP): ("" 0 :MOVES)
   Local 20 (INITIAL-DEGREE): 4
   Local 21: #<DIRED-BUFFER "*Dired-1*" 6240227>

ZWEI:REDISPLAY-ALL-WINDOWS:  (P.C. = 34)
   Arg 0 (FORCE-TO-COMPLETION-P): NIL
   Arg 1 (SELECT-P): NIL

(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 210)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:EDITOR -- 12. IV's, 0. FL's 142346020>
   Arg 2 (OPERATION): :EDIT
   --Defaulted args:--
   Arg 3 (TOP-LEVEL-P): T
   Arg 4 (DESCRIPTION): NIL

(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
   Arg 0 (SELF): #<ZMACS-TOP-LEVEL-EDITOR 121171573>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor ZWEI:TOP-LEVEL-EDITOR -- 13. IV's, 1. FL's 142345776>
   Arg 2 (.OPERATION.): :EDIT
   Rest arg (.DAEMON-CALLER-ARGS.): NIL

ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:01-EDT,1154;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 30 Aug 85 14:13-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6201; Fri 30-Aug-85 14:11:43-EDT
Date: Fri, 30 Aug 85 14:11 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Forwarding instance variable value cells
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850830141159.1.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Property of Robert Kassel:

SET-IN-INSTANCE doesn't follow DTP-ONE-Q-FORWARDs if there are any in
the instance variable's cell.

Also, the behavior of VARIABLE-LOCATION on a forwarded instance variable
is not that given in the manual.  The pointer is to the cell in the
instance, not the cell holding the value.  (If this is changed to do
what the manual says, please supply something that gives the current
behavior, since it makes it much easier to undo the forwarding that
way).
22-Oct-85 23:50:01-EDT,567;000000000000  
Received: from MIT-SID by MIT-OZ via Chaosnet; 30 Aug 85 17:13-EDT
Date: Fri, 30 Aug 85 17:12 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: #+FOO interacts badly with Evaluate Region
To: BUG-LISPM@OZ
Message-ID: <850830171223.2.JAR@SID>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

Doing a control-shift-E (Evaluate Region) command with the cursor over
an expression which is preceded by a #+FOO (or #-FOO) produces
"Trap: the variable FOO is unbound."

#-FOO
(list 1 2)
22-Oct-85 23:50:02-EDT,1797;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 30 Aug 85 22:33-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6203; Fri 30-Aug-85 22:31:54-EDT
Date: Fri, 30 Aug 85 22:31 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: :DRAW-WIDE-CURVE doesn't work right for an alu of TV:ALU-XOR
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850830223151.8.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

(setq x (make-array 100.))

(fillarray x '(600 601 602 603 604 605 606 607 608 609 610 611 612 613
614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631
632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649
650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667
668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685
686 687 688 689 690 691 692 693 694 695 696 697 698 699))

(setq y (make-array 100.))
(fillarray y '(105 105 102 100 102 102 102 101 105 115 130 129 115 105
104 113 135 154 150 137 126 122 123 123 121 116 112 112 115 119 121 118
112 103 100 100 100 102 102 100 101 102 102 101 101 101 101 100 101 120
139 135 119 100 109 100 120 124 106 100 102 106 101 104 106 103 114 169
206 197 143 110 117 156 186 179 161 145 132 121 118 117 111 101 101 104
103 100 101 108 109 101 104 108 101 103 104 101 100 102))

(progn (send standard-output :clear-window)
       (send standard-output :draw-wide-curve x y 10 nil tv:alu-ior)
       (send standard-output :draw-wide-curve x y 10 nil tv:alu-xor))
22-Oct-85 23:50:02-EDT,794;000000000000
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Aug 85 16:54-EDT
Date: Sat, 31 Aug 85 16:54 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: Common Lisp MAKE-PATHNAME and FS:*ITS-UNINTERESTING-TYPES* weirdness
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850831165416.1.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

In Common Lisp, with *default-pathname-defaults* set to 
#<ITS-PATHNAME "MC: JAR; FOO >">

(make-pathname :type (string "LISP"))
#<ITS-PATHNAME "MC: DEV: FOO; FOO >">

(make-pathname :defaults (string "FOO") :type (string "LISP"))
#<ITS-PATHNAME "MC: FOO LISP">

Why is it that sometimes fs:*its-uninteresting-types* does its
thing and sometimes doesn't?

Jonathan
22-Oct-85 23:50:02-EDT,634;000000000000
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Aug 85 17:11-EDT
Date: Sat, 31 Aug 85 17:11 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: PATHNAME-TYPE etc. return ZL string instead of CL strings
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850831171107.2.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

PATHNAME-NAME and friends are supposed to return strings, but don't.

(lisp:pathname-name (lisp:string "MC::FOO BAR"))
   =>  the ZL string "FOO"

(lisp:stringp (lisp:pathname-name (lisp:string "MC::FOO BAR")))
   =>  NIL
22-Oct-85 23:50:03-EDT,754;000000000000
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Aug 85 17:21-EDT
Date: Sat, 31 Aug 85 17:21 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (pathname-device (make-pathname)) => #"DEV"
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850831172150.3.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

(lisp:pathname-device (lisp:make-pathname))

   =>  the ZL string "DEV"

According to "Common Lisp, the Language," page 416, the device slot of
(MAKE-PATHNAME) should always be NIL.  (If not NIL, it should at least
be a CL string.)

I wish I could fix these Common Lisp problems myself - but we don't have
the sources here!  This is really frustrating.
22-Oct-85 23:50:03-EDT,4080;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 31 Aug 85 18:08-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6204; Sat 31-Aug-85 18:08:17-EDT
Date: Sat, 31 Aug 85 18:08 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: :DRAW-WIDE-CURVE doesn't work right for an alu of TV:ALU-XOR
To: sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850830223151.8.CYPHER@YOGI.MIT>
Message-ID: <850831180822.9.CYPHER@YOGI.MIT>

    Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 30 Aug 85 22:33-EDT
    Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6203; Fri 30-Aug-85 22:31:54-EDT
    Date: Fri, 30 Aug 85 22:31 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
    Subject: :DRAW-WIDE-CURVE doesn't work right for an alu of TV:ALU-XOR
    To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
    Message-ID: <850830223151.8.CYPHER@YOGI.MIT>

To see another problem with :DRAW-WIDE-CURVE, with any ALU type, do

(send tv:selected-window :draw-wide-curve #(100 700 700 500 200 100 200 100)#(100 100 600 500 700 500 200 100) 50)

I have come up with the following, which does a much neater job on the
corners of fat things.  I'm sure there must be an easier way to find the
opposite corners of a trapezoid than mine, and this still has the
problem with xor (oh well).

(defmethod (tv:graphics-mixin :draw-wide-curve-1)
	   (px py curve-width &optional end (alu tv:char-aluf))
  (or end (setq end (length px)))
  (macrolet ((square (x) (once-only (x) `(* ,x ,x)))
	     (mag2 (x y) (once-only (x y) `(+ (square ,x) (square ,y)))))
    (flet ((draw-trapezoid (xa1 ya1 xa2 ya2 xb1 yb1 xb2 yb2)
	     (send self :draw-triangle xa1 ya1 xb1 yb1 xb2 yb2 alu)
	     (let ((v1x (- xb1 xa1))
		   (v1y (- yb1 ya1))
		   (v2x (- xb2 xa2))
		   (v2y (- yb2 ya2)))
	       ;; Are V1 and V2 parallel?
	       (if (> (square (+ (* v1x v2x) (* v1y v2y)))
		      (* (+ (square v1x) (square v1y))
			 (+ (square v2x) (square v2y))
			 .95))
		   (send self :draw-triangle xa1 ya1 xb2 yb2 xa2 ya2 alu)
		   (send self :draw-triangle xa1 ya1 xb1 yb1 xa2 ya2 alu)))))
    (loop for i from 2 below end
	  with last-x = (aref px 0)
	  with last-x-adj-1 = last-x
	  with last-x-adj-2 = last-x
	  with this-x = (aref px 1)
	  with last-y = (aref py 0)
	  with last-y-adj-1 = (- last-y (round curve-width 2))
	  with last-y-adj-2 = (+ last-y-adj-1 curve-width)
	  with this-y = (aref py 1)
	  with last-dx = (- this-x last-x)
	  with last-dy = (- this-y last-y)
	  for next-x = (aref px i)
	  for next-y = (aref py i)
	  with last-l = (sqrt (mag2 last-dx last-dy))
	  doing
      (cond
	((and (= this-x next-x)(= this-y next-y)))
	((and (= last-x this-x)(= last-y this-y))
	 (setq this-x next-x this-y next-y))
	(t (let ((next-dx (- next-x this-x))
		 (next-dy (- next-y this-y)))
	     (cond
	       ((= (* next-dx last-dy) (* next-dy last-dx)))
	       (t (let* ((next-l (sqrt (mag2 next-dx next-dy)))
			 (dir-x (- (* last-dx next-l) (* next-dx last-l)))
			 (dir-y (- (* last-dy next-l) (* next-dy last-l)))
			 (k (/ (* .5 curve-width)
			       (sqrt (- (square (* last-l next-l))
					(square (+ (* last-dx next-dx)
						   (* last-dy next-dy)))))))
			 (dx (* k dir-x))
			 (dy (* k dir-y))
			 (x-adj-1 (round (+ this-x dx)))
			 (x-adj-2 (round (- this-x dx)))
			 (y-adj-1 (round (+ this-y dy)))
			 (y-adj-2 (round (- this-y dy))))
		    (draw-trapezoid last-x-adj-1 last-y-adj-1 last-x-adj-2 last-y-adj-2
				    x-adj-1 y-adj-1 x-adj-2 y-adj-2)
		    (setq last-x this-x
			  last-y this-y
			  this-x next-x
			  this-y next-y
			  last-l next-l
			  last-dx next-dx
			  last-dy next-dy
			  last-x-adj-1 x-adj-1
			  last-x-adj-2 x-adj-2
			  last-y-adj-1 y-adj-1
			  last-y-adj-2 y-adj-2)))))))
	  finally
	    (draw-trapezoid last-x-adj-1 last-y-adj-1 last-x-adj-2 last-y-adj-2
			    this-x (+ this-y (round curve-width 2))
			    this-x (- (+ this-y (round curve-width 2)) curve-width))))))
22-Oct-85 23:50:03-EDT,650;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 31 Aug 85 18:51-EDT
Date: Sat, 31 Aug 85 18:50:57 EDT
From: Jonathan A Rees <JAR@MIT-MC.ARPA>
Subject:  No weirdness with fs:*its-uninteresting-types*
To: BUG-LISPM@MIT-MC.ARPA
cc: JAR@MIT-MC.ARPA
References:
	<850831165416.1.JAR@ELVIS>
Message-ID: <[MIT-MC.ARPA].629770.850831.JAR>

Sorry, I should have read the documentation of
FS:*ITS-UNINTERESTING-TYPES* more carefully.  If I had specified
:VERSION :NEWEST , I would have got the behavior I wanted.

My other bugs remain, however: getting strings of the wrong type, and
non-nil component values from MAKE-PATHNAME.

Jonathan
22-Oct-85 23:50:04-EDT,688;000000000000 
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Aug 85 19:02-EDT
Date: Sat, 31 Aug 85 19:02 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (lisp:streamp (lisp:open 'foo :direction :probe)) => nil
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850831190251.4.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

(Another Common Lisp I/O bug.)

According to CLtL page 419, (open pathname :direction :probe) is
supposed to return either nil or a stream.  But if the file exists, the
value returned is a #<FILE-PROBE-STREAM ...>, which doesn't satisfy
STREAMP and can't be passed to PATHNAME.
22-Oct-85 23:50:04-EDT,4366;000000000000  
Received: from MIT-ELVIS by MIT-OZ via Chaosnet; 31 Aug 85 21:01-EDT
Date: Sat, 31 Aug 85 21:00 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: File not found error doing (lisp:open "oz:<jar>foo.bar" :direction :probe)
To: BUG-LISPM@OZ
cc: jar@MIT-MC
Message-ID: <850831210057.5.JAR@ELVIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

When probing for the existence of a file, one should not get an error if
the file doesn't exist.  ZL:PROBEF appropriately returns NIL, but
CL:OPEN with :DIRECTION :PROBE bombs out.  (For the ITS host MIT-MC it
works; for the TOPS-20 host MIT-OZ it doesn't.)

			- Jonathan Rees

[Common Lisp]

(open "oz:<jar>foo.bar" :direction :probe)

>>Error: File not found
         For OZ:PS:<JAR>FOO.BAR
While in the function (:METHOD FS:HOST-UNIT :COMMAND)  FS:OPEN-CHAOS  (:METHOD FS:QFILE-ACCESS-PATH :OPEN)

(:METHOD FS:HOST-UNIT :COMMAND):  (P.C. = 236)
   Arg 0 (SELF): #<HOST-UNIT 30553253>
   Arg 1 (SELF-MAPPING-TABLE): FS:HOST-UNIT
   Arg 2 (OPERATION): :COMMAND
   Arg 3 (MARK-P): NIL
   Arg 4 (STREAM-OR-HANDLE): NIL
   Arg 5 (SIMPLE-P): NIL
   Arg 6 (WHOSTATE): #"Probe"
   Rest arg (COMMANDS): (#"OPEN " :PROBE #" " :CHARACTER #"" #"" #"" #"" #"" #"" ...)
   Local 8 (HANDLE): NIL
   Local 9 (STREAM): NIL
   Local 10 (PKT): #<Chaos Packet 6004524>
   Local 11 (SUCCESS): NIL
   Local 12 (STRING): #" ERROR FNF F File not found"
   Local 13 (TRANSACTION-ID): #"T2811"
   Local 14 (CREATE-P): NIL
   Local 15 (CONDITION): NIL
   Local 16: T
   Local 17: #<CASE-HANDLER 120711625>
   Local 18: NIL
   Local 19: (#<CASE-HANDLER 120711625>)

FS:OPEN-CHAOS:  (P.C. = 674)
   Arg 0 (ACCESS-PATH): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 30553242>
   Arg 1 (REAL-PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Arg 2: #P"OZ:PS:<JAR>FOO.BAR"
   Arg 3 (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

(:METHOD FS:QFILE-ACCESS-PATH :OPEN):  (P.C. = 7)
   Arg 0 (SELF): #<TOPS20-QFILE-ACCESS-PATH OZ using QFILE 30553242>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:QFILE-ACCESS-PATH -- 4. IV's, 0. FL's 121666243>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (REAL-PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Arg 4 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Rest arg (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

(:METHOD FS:ACTIVE-PATHNAME-MIXIN :OPEN):  (P.C. = 14)
   Arg 0 (SELF): #P"OZ:PS:<JAR>FOO.BAR"
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor FS:ACTIVE-PATHNAME-MIXIN -- 1. IV's, 0. FL's 105211451>
   Arg 2 (OPERATION): :OPEN
   Arg 3 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Rest arg (OPTIONS): (:DIRECTION :PROBE :BYTE-SIZE NIL :CHARACTERS T)

FS:COMMON-LISP-OPEN:  (P.C. = 450)
   Arg 0 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Arg 1 (KEYWORD-ARGS): (:CHARACTERS T :BYTE-SIZE NIL :DIRECTION :PROBE)

ZL:OPEN:  (P.C. = 257)
   Arg 0 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Local 0 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Rest arg (KEYWORD-ARGS): (:CHARACTERS T :BYTE-SIZE NIL :DIRECTION :PROBE)

OPEN:  (P.C. = 167)
   Arg 0 (PATHNAME): "oz:<jar>foo.bar"
   Local 0 (PATHNAME): #P"OZ:PS:<JAR>FOO.BAR"
   Rest arg (KEYWORD-ARGS): (:DIRECTION :PROBE)

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (OPEN "oz:<jar>foo.bar" :DIRECTION :PROBE)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 11100101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 11100106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 1200000 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 1200000 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:04-EDT,1080;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 31 Aug 85 22:05-EDT
Received: from MCC.ARPA by MIT-MC.ARPA 31 Aug 85 22:04:27 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Sat 31 Aug 85 21:02:21-CDT
Date: Sat, 31 Aug 85 21:02 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: auto-creation of packages
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850831210254.3.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

I tried to load a file into ZMACS which had the following property
list: 
;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: CYC; Base: 10; Lowercase: Yes; -*-

The package CYC did not exist, so I told the machine to "Create it with
the default characteristics."  Unfortunately, it created it with the
default characteristics for Zippy-lisp, not Common-lisp.  This lead to
werdnesses like the fact I could do (TYPEP #\RETURN) and have
it return :CHARACTER.

I suppose I can get around it by putting the right options in the
property list, but it's still a bug.
22-Oct-85 23:50:05-EDT,591;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 1 Sep 85 19:51-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  1 Sep 85 19:50:54 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Sun 1 Sep 85 18:50:03-CDT
Date: Sun, 1 Sep 85 18:49 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: CL DOCUMENTATION takes only one argument
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850901184937.4.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

It's supposed to take two, according to page 440 of the silver bible.
22-Oct-85 23:50:05-EDT,1423;000000000000
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 1 Sep 85 22:09-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 7228; 1 Sep 85 22:12:57-EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 304817; Sun 1-Sep-85 22:07:44-EDT
Date: Sun, 1 Sep 85 22:08 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: (pathname-device (make-pathname)) => #"DEV"
To: Jonathan A Rees <JAR@MIT-MC.ARPA>
cc: BUG-LISPM@OZ.mit
In-Reply-To: <850831172150.3.JAR@ELVIS>
Message-ID: <850901220849.7.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Sat, 31 Aug 85 17:21 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, FEP 22, on Lisp Machine Elvis Presley:

    (lisp:pathname-device (lisp:make-pathname))

       =>  the ZL string "DEV"

    According to "Common Lisp, the Language," page 416, the device slot of
    (MAKE-PATHNAME) should always be NIL.  (If not NIL, it should at least
    be a CL string.)

Anything involving strings and the interface to the operating system is shakey
in the Release 6 Common Lisp implementation.  I think that's documented.

You're right that lisp:make-pathname is using the wrong default for the
:defaults argument.

Both of these problems will be fixed in a future release.  Thanks for reporting them.

22-Oct-85 23:50:05-EDT,3051;000000000000  
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 1 Sep 85 23:19-EDT
Received: from ASPEN by ZERMATT via CHAOS with CHAOS-MAIL id 11327; Sun 1-Sep-85 23:19:02-EDT
Date: Sun, 1 Sep 85 23:19 EDT
From: Steve Seda <Seda@MIT-ZERMATT.ARPA>
Subject: BITBLT-CLIP does not handle negative widths and heights correctly.
To: BUG-LISPM@MIT-ZERMATT.ARPA
Message-ID: <850901231902.2.SEDA@ASPEN>

In Symbolics 3640 Release 6.0, IP-TCP 29.0, MLSite 7.2,
Experimental Schema 96.6, COLOR 135.1, microcode TMC5-IO4-ST506-MIC 319, on Lisp Machine Aspen:

The macro BITBLT-CLIP (in TV package, in file >...>r6>window>shwarm.lisp) does not handle
negative widths and heights correctly.  In particular, it needs to use the ABSOLUTE VALUE of
the width and height when calculating RIG-OVERRUN and BOT-OVERRUN.

;;; ------------------------------------------------------------------------------------------
;;; Current definition:

(DEFMACRO BITBLT-CLIP (WID HEI TO-X TO-Y FROM-X FROM-Y TO-LIMIT-WID TO-LIMIT-HEI)
  `(LET* ((CLIPPED-TO-X (MIN (MAX 0 ,TO-X) ,TO-LIMIT-WID))     
	  (CLIPPED-TO-Y (MIN (MAX 0 ,TO-Y) ,TO-LIMIT-HEI))
	  (LEF-OVERRUN (MAX 0 (- ,TO-X)))
	  (TOP-OVERRUN (MAX 0 (- ,TO-Y)))
	  (RIG-OVERRUN (MAX 0 (- (+ ,TO-X ,WID) ,TO-LIMIT-WID)))
	  (BOT-OVERRUN (MAX 0 (- (+ ,TO-Y ,HEI) ,TO-LIMIT-HEI))))
     (SETQ ,WID (* (IF (MINUSP ,WID) -1 1) (MAX 0 (- (ABS ,WID) LEF-OVERRUN RIG-OVERRUN)))
	   ,HEI (* (IF (MINUSP ,HEI) -1 1) (MAX 0 (- (ABS ,HEI) TOP-OVERRUN BOT-OVERRUN)))
	   ,FROM-X (+ ,FROM-X LEF-OVERRUN)
	   ,FROM-Y (+ ,FROM-Y TOP-OVERRUN)
	   ,TO-X CLIPPED-TO-X
	   ,TO-Y CLIPPED-TO-Y)))
;;; ------------------------------------------------------------------------------------------

Furthermore when calculating CLIPPED-TO-X and CLIPPED-TO-Y, the (MIN ... ,TO-LIMIT-WID/HEI)
portions are not really necessary since
  (1) they don't guarantee that the point (CLIPPED-TO-X CLIPPED-TO-Y) is in the "clipped
      window" anyhow, and
  (2) if the ,TO-LIMIT-WID or ,TO-LIMIT-HEI values were chosen by MIN, the width and/or height
      would get set to 0 further down in the code.

Thus we can really do without CLIPPED-TO-X and CLIPPED-TO-Y as in the following definition:

;;; ------------------------------------------------------------------------------------------
;;; Possible new definition:

(DEFMACRO BITBLT-CLIP (WID HEI TO-X TO-Y FROM-X FROM-Y TO-LIMIT-WID TO-LIMIT-HEI)
  `(LET ((LEF-OVERRUN (MAX 0 (- ,TO-X)))
	 (TOP-OVERRUN (MAX 0 (- ,TO-Y)))
	 (RIG-OVERRUN (MAX 0 (- (+ ,TO-X (ABS ,WID)) ,TO-LIMIT-WID)))
	 (BOT-OVERRUN (MAX 0 (- (+ ,TO-Y (ABS ,HEI)) ,TO-LIMIT-HEI))))
     (SETQ ,WID (* (IF (MINUSP ,WID) -1 1) (MAX 0 (- (ABS ,WID) LEF-OVERRUN RIG-OVERRUN)))
	   ,HEI (* (IF (MINUSP ,HEI) -1 1) (MAX 0 (- (ABS ,HEI) TOP-OVERRUN BOT-OVERRUN)))
	   ,FROM-X (+ ,FROM-X LEF-OVERRUN)
	   ,FROM-Y (+ ,FROM-Y TOP-OVERRUN)
	   ,TO-X (+ ,TO-X LEF-OVERRUN)
	   ,TO-Y (+ ,TO-Y TOP-OVERRUN))))
;;; ------------------------------------------------------------------------------------------
22-Oct-85 23:50:06-EDT,1647;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 2 Sep 85 04:27-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  2 Sep 85 04:27:19 EDT
Received: from ARIES by MCC.ARPA via Chaosnet; Mon 2 Sep 85 03:25:53-CDT
Date: Mon, 2 Sep 85 03:25 CDT
From: David Vinayak Wallace <Gumby@MCC-AI>
Subject: rodent considered not featureful
To: BUG-LISPM%mc@MCC-AI
Message-ID: <850902032528.5.GUMBY@MCC-GANESH>

In Symbolics 3640 Release 6.0, MCC-Site 2.1, CYC 5.1, IP-TCP 29.0,
microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

I just tried a CL:ASSERT.  It blows out into the error handler all
right, but when I typed <resume> it popped up a tiny
choose-variable-values window by the mouse.  Since I wasn't using the
mouse, it was near the far edge of the screen, so for a moment I thought
the machine was hanging.  Since my attention was where the debugger
output was anyway, wouldn't it have been easier to have entered some
little dialogue about what to change (it was only one variable, anyway)?

Since lusers like me want to use one consistent interface and yet write
the same code for everybody, why not have some variable that controls
the "presentation style" of queries?  Choose-variable-values could look
at this and decide whether to use a dialogue, a menu, some tiny editor
thing, the cp, etc.  This would make it easier to write programs which
people could use over telnet streams -- I'd just use
(tv:choose-vvariable-values ..) or whatever and the telnet stream could
forcibly bind this variable to be sure everything worked OK.

This is what CYC does so the same code can be used by the hackers and
the hard-of-typing.
22-Oct-85 23:50:06-EDT,703;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Sep 85 01:24-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 3 SEP 85  01:24:42 EDT
Date: Tuesday, 3 September 1985, 01:24-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

Either LOGIN or COMPILE-FILE is broken because

(compile-file "ed:devon linit"
	      :output-filename "mc:dsk:guest5;devon lispm"
	      :package 'zwei)

produces a file that loads into SI: instead of ZWEI: when I log in,
erroring me to aggravation.  If I use LOAD afterwards it works ok.
22-Oct-85 23:50:07-EDT,1534;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Sep 85 12:45-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  3 Sep 85 12:44:04 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Tue 3 Sep 85 11:44:46-CDT
Received: from PUFFIN.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 305379; Tue 3-Sep-85 12:42:16-EDT
Date: Tue, 3 Sep 85 12:43 EDT
From: Sue Miller <smiller@SCRC-STONY-BROOK.ARPA>
Subject: CL DOCUMENTATION takes only one argument
To: Gumby@MCC.ARPA, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850901184937.4.GUMBY@MCC-GANESH>
Message-ID: <850903124357.2.SMILLER@PUFFIN.SCRC.Symbolics.COM>

    Return-path: <@MIT-MC.ARPA:Gumby@MCC.ARPA>
    Received: from MIT-MC.ARPA by SCRC-STONY-BROOK.ARPA via INTERNET with SMTP id 304800; 1 Sep 85 19:50:04-EDT
    Received: from MCC.ARPA by MIT-MC.ARPA  1 Sep 85 19:50:54 EDT
    Received: from ARIES by MCC.ARPA via Chaosnet; Sun 1 Sep 85 18:50:03-CDT
    Date: Sun, 1 Sep 85 18:49 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>
    Subject: CL DOCUMENTATION takes only one argument
    To: BUG-LISPM%mc@MCC-AI
    Message-ID: <850901184937.4.GUMBY@MCC-GANESH>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
    microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

    It's supposed to take two, according to page 440 of the silver bible.

This is a known difference; it's documented as an incompatible
difference in Volume 2 (p. 645) of the SCL doc set.  SCL:DOCUMENTATION
is the same as ZL:DOCUMENTATION.

22-Oct-85 23:50:07-EDT,1037;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 3 Sep 85 13:38-EDT
Received: from MCC.ARPA by MIT-MC.ARPA  3 Sep 85 13:37:28 EDT
Received: from SCRC-STONY-BROOK.ARPA by MCC.ARPA with TCP; Tue 3 Sep 85 12:37:54-CDT
Received: from PEACE.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 305434; Tue 3-Sep-85 13:35:14-EDT
Date: Tue, 3 Sep 85 13:36 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: CL DOCUMENTATION takes only one argument
To: David Vinayak Wallace <Gumby@MCC.ARPA>, BUG-LISPM%mc@MCC.ARPA
In-Reply-To: <850901184937.4.GUMBY@MCC-GANESH>
Message-ID: <850903133633.1.HORNIG@PEACE.SCRC.Symbolics.COM>

    Date: Sun, 1 Sep 85 18:49 CDT
    From: David Vinayak Wallace <Gumby@MCC-AI>

    In Symbolics 3640 Release 6.0, MCC-Site 2.1, IP-TCP 29.0,
    microcode TMC5-IO4-ST506-MIC 319, on Lord Ganesh:

    It's supposed to take two, according to page 440 of the silver bible.

Thank you for this report.  The problem you describe will be fixed in a
future release.

22-Oct-85 23:50:07-EDT,614;000000000000
Received: from MIT-JANIS by MIT-OZ via Chaosnet; 3 Sep 85 17:33-EDT
Date: Tue, 3 Sep 85 17:33 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: lisp:get-macro-character bug
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850903173358.1.JAR@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

Is the (documented) bug in the Common Lisp GET-MACRO-CHARACTER function,
whereby e.g. (GET-MACRO-CHARACTER #\') returns NIL instead of a
function, going to be fixed?  I have an application which requires this
to work correctly.

Jonathan Rees
22-Oct-85 23:50:08-EDT,1304;000000000000    
Received: from MIT-LENNON by MIT-OZ via Chaosnet; 4 Sep 85 13:50-EDT
Date: Wed, 4 Sep 85 13:50 EDT
From: Chris Lindblad <CJL@OZ>
Subject: Bug in si:get-hardcopy-device-alist
To: BUG-LISPM@OZ
Message-ID: <850904135048.3.CJL@LENNON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, PASCAL 25.31,
microcode TMC5-MIC 319, on Lisp Machine John Lennon:

When I change the pretty name of a printer, the function
si:get-hardcopy-device-alist won't change *last-hardcopy-device-alist*
to have this new pretty name, because no printers have been added or
removed from the namespace.

(DEFUN GET-HARDCOPY-DEVICE-ALIST ()
  (LET ((LOCAL-PRINTERS (NETI:SEARCHING-ONE-SITE (NET:*LOCAL-SITE*)
			  (NET:FIND-OBJECTS-FROM-PROPERTY-LIST ':PRINTER
							       ':SITE NET:*LOCAL-SITE*))))
    (UNLESS (EQUAL LOCAL-PRINTERS *LAST-HARDCOPY-DEVICE-LIST*)
      (SETQ *LAST-HARDCOPY-DEVICE-ALIST*
	    (COPYTREE (SORTCAR (LOOP FOR PRINTER IN LOCAL-PRINTERS
				     COLLECT (CONS (SEND PRINTER ':PRETTY-NAME)
						   PRINTER))
			       #'STRING-LESSP)
		      NETI:NETWORK-CONS-AREA))
      (SETQ *LAST-HARDCOPY-DEVICE-LIST* (COPYLIST LOCAL-PRINTERS NETI:NETWORK-CONS-AREA)))
    (DOLIST (PRINTER LOCAL-PRINTERS)
      (PRINTER-SPOOLER-HOSTS PRINTER)))
  *LAST-HARDCOPY-DEVICE-ALIST*)
22-Oct-85 23:50:08-EDT,497;000000000000  
Received: from MIT-LENNON by MIT-OZ via Chaosnet; 4 Sep 85 14:06-EDT
Date: Wed, 4 Sep 85 14:06 EDT
From: Chris Lindblad <CJL@OZ>
Subject: Hardcopy bug.
To: BUG-LISPM@OZ
Message-ID: <850904140645.4.CJL@LENNON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, PASCAL 25.31,
microcode TMC5-MIC 319, on Lisp Machine John Lennon:

It appears that si:get-hardcopy-device does not check the validity of
the printer object or the host to which the printer is attached.
Shouldn't it? 
22-Oct-85 23:50:08-EDT,6692;000000000000 
Received: from MIT-HILBERT by MIT-OZ via Chaosnet; 4 Sep 85 17:58-EDT
Date: Wed, 4 Sep 85 17:58 EDT
From: Patrick A. O'Donnell <PAO@MIT-EECS>
Subject: %BITBLT-SHORT-ROW
To: BUG-LISPM@OZ
cc: PAO@MIT-EECS
Message-ID: <850904175809.5.PAO@HILBERT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, Manip 5.12,
Puma 5.12, microcode TMC5-MIC 319, FEP 18, on Lisp Machine David Hilbert:

Apparently %bitblt-short-row and %bitblt-long-row do not agree on just
how to interpret their parameters.  In the following error, I am trying
to draw a filled-in polygon onto an 8-bit array (in particular, a color
screen).  I specified tv:bitblt-unpacking-constant to the desired color,
then specified an alu of (logior %extended-alu %template-alu tv:alu-seta).

If only %bitblt-long-row is used, the operation works fine.  However,
when %bitblt-short-row must be used, the following error occurs.  If I
set up the BB-S-* variables to something halfway reasonable (pointing
into the destination array), then there's no error, but the short rows
are drawn as if they were taking their data from the array, rather than
the unpacking constant.

Is there any way I can work around this problem?


>>Trap: The ZETALISP-SYSTEM:%BITBLT-SHORT-ROW microcode ran into a SOURCE-OFFSET that was not a fixnum.
While in the function TV:%DRAW-FILLED-POLYGON-INTERNAL  (:METHOD GREY:GREY-HARDWARE-SCREEN-MIXIN :%DRAW-FILLED-POLYGON)  (:METHOD TV:GRAPHICS-MIXIN :DRAW-FILLED-POLYGON)

TV:%DRAW-FILLED-POLYGON-INTERNAL:  (P.C. = 321)  (from OZ:OZ:<PAO.LISPM>FILL-POLY)
   Arg 0 (EDGE-LIST): (#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T> #<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
   Local 0 (EDGE-LIST): (#<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
   Arg 1 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
   Arg 2 (ALU): -2147483627
   Arg 3 (ARRAY): #2A((255 255 255 255 255 255 255 255 255 255 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) ...))
   Arg 4 (LIMITS): (2 2 574 452)
   Local 4 (LIMITS): NIL
   Local 5 (IGNORE): NIL
   Local 6 (IGNORE): NIL
   Local 7 (IGNORE): NIL
   Local 8 (IGNORE): NIL
   Local 9 (BB-WIDTH): 8
   Local 10 (BB-S-DATA-ADDR): 0
   Local 11 (BB-S-ROW-OFFSET): NIL
   Local 12 (BB-S-OFFSET): NIL
   Local 13 (BB-S-BITPOS): NIL
   Local 14 (BB-S-ROW-LENGTH): 0
   Local 15 (BB-D-DATA-ADDR): 255328256
   Local 16 (BB-D-OFFSET): 14882
   Local 17 (BB-D-BITPOS): 8
   Local 18 (BB-EVENT-COUNT): 73322
   Local 19 (BB-ALU-OPERATION): -2147483643
   Local 20 (S-ROW-BITPOS): 0
   Local 21 (S-ROW-OFFSET): 0
   Local 22 (S-ROW): 0
   Local 23 (D-ROW-BITPOS): 8
   Local 24 (D-ROW-OFFSET): 50
   Local 25 (D-ROW): 103
   Local 26 (S-BEG-ADDR): NIL
   Local 27 (S-BEG-BITPOS): 0
   Local 28 (S-ROW-LENGTH): 262144
   Local 29 (S-ROW-SPAN): 0
   Local 30 (S-HEIGHT): 1
   Local 31 (S-BITS-PER-ELT): 1
   Local 32 (D-BEG-ADDR): 255328256
   Local 33 (D-BEG-BITPOS): 0
   Local 34 (D-ROW-LENGTH): 576
   Local 35 (D-ROW-SPAN): 144
   Local 36 (D-HEIGHT): 454
   Local 37 (D-BITS-PER-ELT): 3
   Local 38 (S-ROW-ADDR-OFFSET): NIL
   Local 39 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
   Local 40: 1342250602
   Local 41: #<DTP-LOCATIVE 33507416>
   Local 42: 50
   Local 43 (XMIN): 2
   Local 44 (YMIN): 2
   Local 45 (XMAX): 574
   Local 46 (YMAX): 452
   Local 47 (YLIM): 201
   Local 48 (D-ADDR-OFFSET): 14882
   Local 49 (Y): 103
   Local 50: NIL
   Local 51 (I): 0
   Local 52: 2
   Local 53 (E1): #<EDGE 0-1 (311..0/144) <102 201> 3/T>
   Local 54: 1342250602
   Local 55: #<DTP-LOCATIVE 27207417>
   Local 56: 14
   Local 57 (E2): #<EDGE 1-2 (312..144/454) <102 401> 2/T>
   Local 58: 1342250602
   Local 59: #<DTP-LOCATIVE 27207436>
   Local 60: 14
   Local 61 (X1): 201
   Local 62 (X2): 202
   Local 63 (XFRAC): NIL
   Local 64 (LEFT): 201
   Local 65 (RIGHT): 202
   Local 66 (.WIDTH.): 8

(:METHOD GREY:GREY-HARDWARE-SCREEN-MIXIN :%DRAW-FILLED-POLYGON):  (from OZ:OZ:<PAO.LISPM>NEW-GREY-FILL-POLY)
   Arg 0 (SELF): #<GREY-SCREEN-WITH-ALU GREY 602766 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor GREY:GREY-HARDWARE-SCREEN-MIXIN -- 2. IV's, 0. FL's 7111135>
   Arg 2 (OPERATION): :%DRAW-FILLED-POLYGON
   Arg 3 (EDGE-LIST): (#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T> #<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
   Arg 4 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
   Arg 5 (ALU): -200
   Arg 6 (SHEET): #<WINDOW Window 4 603053 exposed>
   Rest arg (LIMITS): (2 2 574 452)

(:METHOD TV:GRAPHICS-MIXIN :DRAW-FILLED-POLYGON):  (P.C. = 74)  (from OZ:OZ:<PAO.LISPM>FILL-POLY)
   Arg 0 (SELF): #<WINDOW Window 4 603053 exposed>
   Arg 1 (SELF-MAPPING-TABLE): TV:GRAPHICS-MIXIN
   Arg 2 (OPERATION): :DRAW-FILLED-POLYGON
   Arg 3 (X-ARRAY): #(100 200 300 400)
   Arg 4 (Y-ARRAY): #(200 100 400 300)
   Arg 5 (ALU): -200

SEND:  (P.C. = 6)
   Arg 0 (OBJECT): #<WINDOW Window 4 603053 exposed>
   Arg 1 (MESSAGE-NAME): :DRAW-FILLED-POLYGON
   Rest arg (ARGUMENTS): (#(100 200 300 400) #(200 100 400 300) -200)

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SEND WWW :DRAW-FILLED-POLYGON XXX YYY -200)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 37000101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 37000106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 602657 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 602657 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:08-EDT,1523;000000000000
Received: from MIT-JANIS by MIT-OZ via Chaosnet; 4 Sep 85 19:05-EDT
Date: Wed, 4 Sep 85 19:05 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: LISP: or GLOBAL: ?
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850904190544.1.JAR@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

[In Common Lisp:]

This form:

  (let ((*package* (make-package "FOO" :use '()))) (print 'car))

prints:

  GLOBAL:CAR 

instead of:

  LISP:CAR

This means that files printed by Symbolics Common Lisp can't
be read into other Common Lisps (without some kludge such as defining
GLOBAL, etc. as nicknames for LISP in the CL doing the READ).

While nothing in the CL manual explicitly states that the LISP package
must be the home package of its exported symbols, I would say that this
behavior violates the spirit of read-print symmetry in Common Lisp.

I recommend hacking the Zetalisp GLOBAL package (and others explicitly
or implicitly used by the LISP package) the same way that CL-USER, etc.
are hacked: when in "Common Lisp mode" (I forget whether this is
controlled by the read table or by the value of *PACKAGE*), GLOBAL etc.
should pretend that their name is LISP, just as CL-USER pretends that
it's USER.

I don't see how this could possibly break anything, and it would fix my
problem.  It might also, conceivably, save you future headaches, e.g. if
you decide to move some symbol out of GLOBAL and into LISP.

Jonathan Rees
22-Oct-85 23:50:09-EDT,1671;000000000000  
Received: from MIT-JANIS by MIT-OZ via Chaosnet; 4 Sep 85 19:42-EDT
Date: Wed, 4 Sep 85 19:42 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: Printing using :
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850904194232.2.JAR@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

[In Common Lisp, although not really a Common-Lisp-specific problem:]

The expression

  (let ((*package* (make-package "FOO" :use '()))
	(*readtable* (copy-readtable nil)))
    (set-syntax-from-char #\: #\!)
    (print 'member))

prints

  CL:MEMBER

When read using the same readtable with which the symbol was printed,
you won't get the same symbol back, but rather the symbol |CL:MEMBER|.
Now, aside from the problem that this prints CL:MEMBER instead of
LISP:MEMBER, it seems to me that you needn't throw away read/print
symmetry so quickly.

The system already strives to preserve symmetry in the face of macro
character definition.  E.g. if $ is a read macro, then the symbol |$|
prints that way.  Now admittedly you can't plan for every contingency
(e.g. how would one print zero, if the character 0 were a read macro?),
but in the case of colon, one could use the #. syntax:

  #.(intern "MEMBER" "CL")  instead of  CL:MEMBER

If you don't want to go this far, or if you want to do something less
dwim-ish and more generally applicable, then I would put forth that it
would be very useful if an error was signalled in cases where an
ordinarily re-readable object can't be printed re-readably according to
the current read table.

Think about it, at least...

Jonathan Rees
22-Oct-85 23:50:09-EDT,2169;000000000000    
Received: from MIT-MOON by MIT-OZ via Chaosnet; 5 Sep 85 11:31-EDT
Date: Thu, 5 Sep 85 11:31 EDT
From: Sue Felshin <sylph@OZ>
Subject: bug in Common Lisp predicate some
To: BUG-LISPM@OZ
Message-ID: <850905113152.1.FELSHIN@MOON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
microcode TMC5-MIC 319, on Lisp Machine Keith Moon:

The Common Lisp predicate some doesn't work on arrays.  I checked every,
too, and it doesn't work, either.  Reduce does work, however.  They all
worked fine on lists.  The particular array I was using was a bit-array,
but art-q arrays didn't work any better when I tried them.  ???

>>Trap: The subscript given to the ZL:AR-1 instruction, NIL, was not a fixnum.
While in the function SOME  SI:*EVAL  (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0)

SOME:  (P.C. = 51)
   Arg 0 (PREDICATE): #<DTP-COMPILED-FUNCTION PLUSP 2104066>
   Rest arg (SEQUENCES): (#<ART-1B-79 10476661>)
   Local 2: 1
   Local 3: 1
   Local 4: (#<ART-1B-79 10476661>)
   Local 5: #<ART-1B-79 10476661>
   Local 6: 0
   Local 7: 1

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SOME (FUNCTION PLUSP) FOO)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 11140101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 11140106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 600000 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 600000 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:11-EDT,1117;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 5 Sep 85 12:40-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  5 Sep 85 12:38:31 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 307135; Thu 5-Sep-85 12:04:47-EDT
Date: Thu, 5 Sep 85 12:12 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: bug in Common Lisp predicate some
To: sylph@OZ, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850905113152.1.FELSHIN@MOON>
Message-ID: <850905121251.9.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Thu, 5 Sep 85 11:31 EDT
    From: Sue Felshin <sylph@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, on Lisp Machine Keith Moon:

    The Common Lisp predicate some doesn't work on arrays.  I checked every,
    too, and it doesn't work, either.  Reduce does work, however.  They all
    worked fine on lists.  The particular array I was using was a bit-array,
    but art-q arrays didn't work any better when I tried them.  ???

This has been fixed in release 6.1, to be distributed shortly.

22-Oct-85 23:50:11-EDT,1190;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 5 Sep 85 12:40-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA  5 Sep 85 12:38:38 EDT
Received: from CONCORD.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 307137; Thu 5-Sep-85 12:05:09-EDT
Date: Thu, 5 Sep 85 12:13 EDT
From: Bernard S. Greenberg <BSG@SCRC-STONY-BROOK.ARPA>
Subject: bug in Common Lisp predicate some
To: sylph%OZ@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850905113152.1.FELSHIN@MOON>
Supersedes: <850905121251.9.BSG@CONCORD.SCRC.Symbolics.COM>
Message-ID: <850905121312.0.BSG@CONCORD.SCRC.Symbolics.COM>

    Date: Thu, 5 Sep 85 11:31 EDT
    From: Sue Felshin <sylph@OZ>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, on Lisp Machine Keith Moon:

    The Common Lisp predicate some doesn't work on arrays.  I checked every,
    too, and it doesn't work, either.  Reduce does work, however.  They all
    worked fine on lists.  The particular array I was using was a bit-array,
    but art-q arrays didn't work any better when I tried them.  ???

This has been fixed in release 6.1, to be distributed shortly.

22-Oct-85 23:50:12-EDT,5268;000000000000
Received: from MIT-DUANE by MIT-OZ via Chaosnet; 5 Sep 85 14:07-EDT
Date: Thu, 5 Sep 85 14:07 EDT
From: Ken Haase <KWH@OZ>
Subject: Login lossage
To: BUG-LISPM@OZ
Message-ID: <850905140742.1.KWH@DUANE>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
Experimental Meta Representation Langauge 5.10,
microcode TMC5-IO4-MIC 319, FEP 22, Fixed :BATCH, on Lisp Machine Duane Allman:

When a user logs in to a particular host (when, for instance, her usual
host is down), LOGIN construct an uinterned user object for her; this
seems mildly bogus, since the most used semantics of the host keyword is
"get my init file (and other default user customizations) from host FOO
instead of host BAR".  The following is a patch to LOGIN which fixes
this problem, but handles the particular screw case where KWH@SU-AI
(someone different from KWH@MC) logs in with (login 'kwh :host 'su-ai)
and gets the user object for the KWH who usually uses MC. (It also assumes
that a user logging into a lisp machine corresponds to a local user.)

(DEFUN FIND-USER-OBJECT (USER-NAME HOST)
  (LET ((GUESS (CONDITION-CASE ()
		   (NETI:FIND-OBJECTS-FROM-PROPERTY-LIST
		     :USER :LOGIN-NAME `((,USER-NAME ,HOST)))
		 (NETI:OBJECT-NOT-FOUND))))
    (OR (AND (LISTP GUESS) (NULL (CDR GUESS)) (CAR GUESS))
	(and (eq (send host :system-type) :LISPM)
	     (neti:find-object-named :user user-name NIL))
	(SI:MAKE-UNINTERNED-USER USER-NAME HOST))))

(DEFUNP LOGIN (USER-NAME &KEY HOST ((:LOAD-INIT-FILE *LOGIN-LOAD-INIT-FILE-P*) T)
			 NO-QUERY-WHEN-UNKNOWN
			 &AUX OFFER-TO-ADD)
  (LOGOUT)
  (SETQ USER-NAME (STRING-TRIM '(#\SP) USER-NAME))
  RETRY-LOGIN
  (CONDITION-CASE (ERROR)
      (IF (NULL HOST)
	  (SETQ *USER* (NET:FIND-OBJECT-NAMED ':USER USER-NAME))
	  (SETQ HOST   (PARSE-LOGIN-HOST HOST)
		*USER* (find-user-object user-name host)))
    (UNKNOWN-HOST-NAME
      (FORMAT T "~&~A:  ~A~&Please log in again, to another host."
	      (SEND ERROR ':TYPE) ERROR)
      (RETURN NIL))
    (NET:OBJECT-NOT-FOUND
      (WHEN NO-QUERY-WHEN-UNKNOWN
	(SETQ HOST NET:*LOCAL-HOST*)
	(GO RETRY-LOGIN))
      (SELECTQ (FQUERY '(:CLEAR-INPUT T
			 :CHOICES (((T "Yes.") #/Y #\SP)
				   ((NIL "No.") #/N #\RUBOUT)
				   ((:RETRY "Retry user object lookup.") #/R)))
		       "~A:~&Do you want to log in as ~A on some specific host? "
		       ERROR USER-NAME)
	((T)
	 (LOOP AS HST = (PROMPT-AND-READ ':STRING-TRIM "Host to log in to: ")
	       UNTIL (CONDITION-CASE (ERROR)
			 (SETQ HOST (PARSE-LOGIN-HOST HST))
		       (UNKNOWN-HOST-NAME
			 (FORMAT T "~&~A" ERROR)
			 NIL)))
	 (WHEN (SEND ERROR ':VALID-P)
	   (SETQ OFFER-TO-ADD T))
	 (GO RETRY-LOGIN))
	((:RETRY)
	 (NETI:DECACHE-OBJECT-NAMED ':USER USER-NAME)
	 (NETI:RESET-ALL-HOST-AVAILABILITIES)
	 (GO RETRY-LOGIN))
	((NIL)
	 (RETURN NIL)))))
  (SET-USER-VARIABLES)
  (INITIALIZATIONS 'LOGIN-INITIALIZATION-LIST)
  (RESET-INITIALIZATIONS 'LOGOUT-INITIALIZATION-LIST)
  (PUSH (LIST (STRING (SEND *USER* :PRIMARY-NAME))
	      (AND (BOUNDP 'NET:*LOCAL-HOST*) (STRING (SEND NET:*LOCAL-HOST* :PRIMARY-NAME)))
	      (AND (FBOUNDP 'TIME:GET-UNIVERSAL-TIME) (TIME:GET-UNIVERSAL-TIME))
	      NIL)				;Init file not loaded
	LOGIN-HISTORY)
  RETRY-HOMEDIR
  (WHEN FS:USER-LOGIN-MACHINE			;this is NIL during QLD.
    (UNLESS
      (CATCH-ERROR-RESTART ((FS:FILE-ERROR NETWORK-ERROR)
			    (IF HOST "Retry logging into some other host, instead of ~A"
				"Specify a host other than ~A to use for the home directory")
			    (OR HOST FS:USER-LOGIN-MACHINE))
	(ERROR-RESTART ((FS:FILE-ERROR NETWORK-ERROR)
			"Try again to find home directory for ~A on host ~A."
			USER-ID FS:USER-LOGIN-MACHINE)
	  (LET ((HOMEDIR (IF *LOGIN-LOAD-INIT-FILE-P*
			     (FS:USER-HOMEDIR FS:USER-LOGIN-MACHINE)
			     (FS:QUIET-USER-HOMEDIR FS:USER-LOGIN-MACHINE))))
	    (FS:SET-DEFAULT-PATHNAME HOMEDIR FS:*DEFAULT-PATHNAME-DEFAULTS*)
	    (FS:SET-DEFAULT-PATHNAME HOMEDIR FS:LOAD-PATHNAME-DEFAULTS)))
	(WHEN *LOGIN-LOAD-INIT-FILE-P*
	  (LOOP FOR INIT-FILE-HOST FIRST FS:USER-LOGIN-MACHINE
		    THEN (PROMPT-FOR-FILE-HOST "Name of host from which to load init file: ") DO
	    (CATCH-ERROR-RESTART
	      ((FS:FILE-ERROR NETWORK-ERROR)
	       "Try to load your init file from some other host, instead of ~A"
	       INIT-FILE-HOST)
	      (LET ((PATHNAME (FS:INIT-FILE-PATHNAME "LISPM" NIL INIT-FILE-HOST)))
		(ERROR-RESTART (ERROR "Retry loading ~A" PATHNAME)
		  (CATCH-ERROR-RESTART (ERROR "Skip loading ~A" PATHNAME)
		    (WITH-OPEN-STREAM (STREAM (CONDITION-CASE (ERROR)
						  (FS:LOAD-OPEN PATHNAME NIL T)
						(FS:FILE-LOOKUP-ERROR
						  (FORMAT T "~&No init file: ~A~%" ERROR)
						  (RETURN))))
		      (SETF (FOURTH (FIRST LOGIN-HISTORY)) (STRING (SEND STREAM ':TRUENAME)))
		      (FS:LOAD-STREAM STREAM)))))
	      (RETURN))))
	T)
      (LET ((NEW-HOST (PROMPT-FOR-FILE-HOST "Name of host to log into: ")))
	(COND (HOST
	       (SETQ HOST NEW-HOST)
	       (GO RETRY-LOGIN))
	      (T
	       (SETQ FS:USER-LOGIN-MACHINE NEW-HOST)
	       (GO RETRY-HOMEDIR))))))
  (WHEN (AND OFFER-TO-ADD
	     (FQUERY NIL "Do you wish to add ~A to the user database? " USER-ID))
    (OBJECTIFY-USER))
  (MAKE-LOGIN-SLOWER)
  T)

22-Oct-85 23:50:12-EDT,2547;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 5 Sep 85 14:25-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 7356; 5 Sep 85 14:30:28-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 307279; Thu 5-Sep-85 14:22:43-EDT
Date: Thu, 5 Sep 85 14:26 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: incomplete control-X command set
To: Jonathan A Rees <JAR@MIT-MC.ARPA>, BUG-LISPM@OZ.mit
In-Reply-To: <850829145758.1.JAR@SID>
Message-ID: <850905142619.4.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Thu, 29 Aug 85 14:57 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-IO4-MIC 319, FEP 22, on Lisp Machine Sid Vicious:

    Why is it that the two situations:

    (a) entering editor via c-M command in debugger (send bug report)
    (b) sending a bug report via the editor's Bug command

    give me different versions of the editor command tables?  In (a) I get
    an editor that says ZWEI in mode line, and the M-X Set Package command
    (for example) is not defined (I really wanted to use it, but it was
    "Unavailable in current context" - which statement is actually false,
    since it IS available through C-M-X Set Package); in (b) I'm in still in
    the normal editor which says ZMACS in the mode line, and I can do M-X
    Set Package.

    This seems really obscure to me.  The idea of commands "unavailable in a
    context" seems questionable to me in the first place - and why should
    Set Package, essential for doing Evaluate Into Buffer and things like
    that, be unavailable anywhere? - but at least there should be some
    consistency about it.

c-m-X allows you to get your paws on just about everything.  Some things
simply cannot work correctly because the data structures on which they
operate may not be findable.

Zwei is the editor substrate.  Zmacs is the editor program, which is
built on Zwei.  Zmail is a mail reading/sending program which is built
on Zwei.  Converse, likewise, is built on Zwei.  m-X Set Package is a
command side effects buffers.  Buffers do not exist in Zwei, Zmail,
Converse or the bug window from c-M.  Buffers are only meaningful in
Zmacs.  The thing you get with c-M is not a buffer, but something rather
close (an interval of some sort), but it doesn't have a name, can't
have a file associated with it, nor several other attributes that
buffers have.

22-Oct-85 23:50:12-EDT,2041;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 5 Sep 85 21:55-EDT
Received: from SCRC-VALLECITO.ARPA by MIT-MC.ARPA  5 Sep 85 21:53:49 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-VALLECITO.ARPA via CHAOS with CHAOS-MAIL id 33134; Thu 5-Sep-85 21:55:59-EDT
Date: Thu, 5 Sep 85 21:55 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: LISP: or GLOBAL: ?
To: Jonathan A Rees <JAR@MIT-MC.ARPA>
cc: BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850904190544.1.JAR@JANIS>
Message-ID: <850905215550.0.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Wed, 4 Sep 85 19:05 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

    [In Common Lisp:]

    This form:

      (let ((*package* (make-package "FOO" :use '()))) (print 'car))

    prints:

      GLOBAL:CAR 

    instead of:

      LISP:CAR

    This means that files printed by Symbolics Common Lisp can't
    be read into other Common Lisps (without some kludge such as defining
    GLOBAL, etc. as nicknames for LISP in the CL doing the READ).

    While nothing in the CL manual explicitly states that the LISP package
    must be the home package of its exported symbols, I would say that this
    behavior violates the spirit of read-print symmetry in Common Lisp.

    I recommend hacking the Zetalisp GLOBAL package (and others explicitly
    or implicitly used by the LISP package) the same way that CL-USER, etc.
    are hacked: when in "Common Lisp mode" (I forget whether this is
    controlled by the read table or by the value of *PACKAGE*), GLOBAL etc.
    should pretend that their name is LISP, just as CL-USER pretends that
    it's USER.

Since you bound *package* to a package that has nothing to do with the Common
Lisp packages, how could the printer know that you were "in Common Lisp mode"?
In the normal case of a package that uses CL or SCL, the printer does the
right Common Lisp thing.

22-Oct-85 23:50:13-EDT,1313;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 09:38-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6307; Fri 6-Sep-85 09:38:15-EDT
Date: Fri, 6 Sep 85 09:38 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: c-sh-a DWIM wrong
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850906093806.3.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

I often use c-sh-a to check for the existence of a function/special
form, particularly in Common Lisp where things are often called by
different names.  A while ago, I started typing something like

(defsubst my-function

and then typed c-sh-a and got beeped at and wrongly concluded that
defsubst doesn't exist in Symbolics Common Lisp since it's not in the
manual.  It seems that what is happening is that c-sh-a is looking for
the definition of "my-function" for any defined def kind of form.  I
guess this has its uses, but it should give the arguments to the def
thing if it can't find the def'd thing (just like funcall should
default).
22-Oct-85 23:50:13-EDT,838;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 10:12-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6308; Fri 6-Sep-85 10:12:07-EDT
Date: Fri, 6 Sep 85 10:11 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: WRITE/READ-SEQUENCE
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850906101159.4.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

In Common Lisp there should be functions like WRITE-SEQUENCE and
READ-SEQUENCE with the same relationship to WRITE-BYTE that WRITE-STRING
and READ-STRING have to WRITE-CHAR.

22-Oct-85 23:50:13-EDT,821;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 10:15-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6309; Fri 6-Sep-85 10:15:14-EDT
Date: Fri, 6 Sep 85 10:15 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: M-X bug bug
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850906101510.5.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

If I do M-X bug from a Common Lisp syntax/package buffer, the package
stays as CL-USER but the syntax reverts to Zetalisp, so, for example,

(elt "String" 2) ==> 114
22-Oct-85 23:50:13-EDT,706;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 11:13-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6310; Fri 6-Sep-85 11:13:00-EDT
Date: Fri, 6 Sep 85 11:12 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Format ~@c backwards
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850906111251.6.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

In Common Lisp, (format t "~@c" #\a) ==> #/a
22-Oct-85 23:50:14-EDT,1136;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 12:15-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6311; 6 Sep 85 12:14:48-EDT
Received: from TURKEY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 308009; Fri 6-Sep-85 11:58:06-EDT
Date: Fri, 6 Sep 85 12:00 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: Format ~@c backwards
To: sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906111251.6.CYPHER@YOGI.MIT>
Message-ID: <850906120005.2.GREENWALD@TURKEY.SCRC.Symbolics.COM>

    Date: Fri, 6 Sep 85 11:12 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    In Common Lisp, (format t "~@c" #\a) ==> #/a

Thanks for the report.  This has been fixed in release 7.

22-Oct-85 23:50:14-EDT,1943;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 12:43-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6314; 6 Sep 85 12:43:30-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 308059; Fri 6-Sep-85 12:38:42-EDT
Date: Fri, 6 Sep 85 12:42 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: c-sh-a DWIM wrong
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906093806.3.CYPHER@YOGI.MIT>
Message-ID: <850906124233.4.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 6 Sep 85 09:38 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    I often use c-sh-a to check for the existence of a function/special
    form, particularly in Common Lisp where things are often called by
    different names.  A while ago, I started typing something like

    (defsubst my-function

    and then typed c-sh-a and got beeped at and wrongly concluded that
    defsubst doesn't exist in Symbolics Common Lisp since it's not in the
    manual.  It seems that what is happening is that c-sh-a is looking for
    the definition of "my-function" for any defined def kind of form.  I
    guess this has its uses, but it should give the arguments to the def
    thing if it can't find the def'd thing (just like funcall should
    default).

(1) Instead of beeping, it should say "foo is not fdefined" or
something.

(2) It's a bit hard to backtrace.  It should really be based on where
the cursor is.  This is on my queue, someplace.

22-Oct-85 23:50:15-EDT,636;000000000000   
Received: from MIT-JANIS by MIT-OZ via Chaosnet; 6 Sep 85 13:40-EDT
Date: Fri, 6 Sep 85 13:40 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (lisp:in-package "USER")  =>  the ZL USER package
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850906134028.1.JAR@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.0,
microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

*package*
#<Package USER (really COMMON-LISP-USER) 101361667>
(fboundp 'elt)
T
(find-package "USER")
#<Package USER (really COMMON-LISP-USER) 101361667>
(in-package "USER")
#<Package USER 101200000>
(fboundp 'elt)
NIL

This seems wrong.
22-Oct-85 23:50:15-EDT,2568;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 14:37-EDT
Date: Fri,  6 Sep 85 14:35:02 EDT
From: Jonathan A Rees <JAR@MIT-MC.ARPA>
Subject:  LISP: or GLOBAL: (or ZL:) ?
To: Moon@SCRC-STONY-BROOK.ARPA
cc: JAR@MIT-MC.ARPA, BUG-LISPM@MIT-OZ
In-reply-to: Msg of Thu 5 Sep 85 21:55 EDT from David A. Moon <Moon at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].635878.850906.JAR>

    Date: Thu, 5 Sep 85 21:55 EDT
    From: David A. Moon <Moon at SCRC-STONY-BROOK.ARPA>

    Since you bound *package* to a package that has nothing to do with
    the Common Lisp packages, how could the printer know that you were
    "in Common Lisp mode"?

Au contraire, the package has a lot to do with Common Lisp packages - it
was created by one of the Common Lisp functions MAKE-PACKAGE or
IN-PACKAGE.  I don't know how relative names, prefix-names, and all that
works in the Zetalisp package system, but it would seem easy enough for
a package to know that it is or isn't a "Common Lisp package," either by
setting a bit (flag) in the package structure, setting up the relative
names a-list appropriately, or by some other mechanism.  The flag (or
whatever) could be not-CL by default, and set to CL by the CL package
creation functions (independent of the :USE list).

Then the printer could check this bit in *PACKAGE* to decide whether to
use CL names or ZL names when printing package prefixes.  The CL names
of the CL and GLOBAL packages would be LISP, and I'd be happy.

There's a small problem with this, since some magic is going on to make
symbols like GLOBAL:CAR accessible to package that use CL, but not
symbols like GLOBAL:MEMQ.  When *PACKAGE* is a CL package, and
GLOBAL:CAR and GLOBAL:MEMQ are inaccessible, then GLOBAL:CAR ought to
print as LISP:CAR, but GLOBAL:MEMQ mustn't print as LISP:MEMQ.
But it could print as ZETALISP:MEMQ, or even as LISP::MEMQ (!).

    In the normal case of a package that uses CL or SCL, the printer
    does the right Common Lisp thing.

If *PACKAGE* uses CL, and LISP:CAR is not accessible (CLtL page 172)
(e.g. because of a (SHADOW 'LISP:CAR)), then the symbol LISP:CAR prints
out as ZL:CAR (or sometimes as ZETALISP:CAR - depending on whether
*PACKAGE* is CL-USER or not! - but that's another story).  Similarly, if
LISP:ELT is not accessible, then LISP:ELT prints as CL:ELT.  So I won't
be able to print symbols exported by the LISP package and re-read them
in a different Common Lisp implementation.  I wouldn't say this is the
"right Common Lisp thing."

Jonathan
22-Oct-85 23:50:15-EDT,8111;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 17:22-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 7376; 6 Sep 85 17:27:18-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 308358; Fri 6-Sep-85 17:19:30-EDT
Date: Fri, 6 Sep 85 17:23 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: %BITBLT-SHORT-ROW
To: Patrick A. O'Donnell <PAO@MIT-EECS.mit>, BUG-LISPM@OZ.mit
In-Reply-To: <850904175809.5.PAO@HILBERT>
Message-ID: <850906172323.8.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Wed, 4 Sep 85 17:58 EDT
    From: Patrick A. O'Donnell <PAO@MIT-EECS>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5, Manip 5.12,
    Puma 5.12, microcode TMC5-MIC 319, FEP 18, on Lisp Machine David Hilbert:

    Apparently %bitblt-short-row and %bitblt-long-row do not agree on just
    how to interpret their parameters.  In the following error, I am trying
    to draw a filled-in polygon onto an 8-bit array (in particular, a color
    screen).  I specified tv:bitblt-unpacking-constant to the desired color,
    then specified an alu of (logior %extended-alu %template-alu tv:alu-seta).

    If only %bitblt-long-row is used, the operation works fine.  However,
    when %bitblt-short-row must be used, the following error occurs.  If I
    set up the BB-S-* variables to something halfway reasonable (pointing
    into the destination array), then there's no error, but the short rows
    are drawn as if they were taking their data from the array, rather than
    the unpacking constant.

    Is there any way I can work around this problem?

We really have no way to help without seeing the code.  I will note that
the ALU is negative, and I think %BITBLT-SHORT-ROW simply is not
designed to work with that form of extended alus.  "That's what you get
for using undocumented features."  I believe all the system code that
currently uses extended alus never uses %bitblt-short-row.  Note that
%bitblt-short-row is an optimized %bitblt-long-row, so you can use
%bitblt-long-row to do your work.

    >>Trap: The ZETALISP-SYSTEM:%BITBLT-SHORT-ROW microcode ran into a SOURCE-OFFSET that was not a fixnum.
    While in the function TV:%DRAW-FILLED-POLYGON-INTERNAL  (:METHOD GREY:GREY-HARDWARE-SCREEN-MIXIN :%DRAW-FILLED-POLYGON)  (:METHOD TV:GRAPHICS-MIXIN :DRAW-FILLED-POLYGON)

    TV:%DRAW-FILLED-POLYGON-INTERNAL:  (P.C. = 321)  (from OZ:OZ:<PAO.LISPM>FILL-POLY)
       Arg 0 (EDGE-LIST): (#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T> #<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
       Local 0 (EDGE-LIST): (#<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
       Arg 1 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
       Arg 2 (ALU): -2147483627
       Arg 3 (ARRAY): #2A((255 255 255 255 255 255 255 255 255 255 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) (255 0 0 0 0 0 0 0 0 0 ...)) ...))
       Arg 4 (LIMITS): (2 2 574 452)
       Local 4 (LIMITS): NIL
       Local 5 (IGNORE): NIL
       Local 6 (IGNORE): NIL
       Local 7 (IGNORE): NIL
       Local 8 (IGNORE): NIL
       Local 9 (BB-WIDTH): 8
       Local 10 (BB-S-DATA-ADDR): 0
       Local 11 (BB-S-ROW-OFFSET): NIL
       Local 12 (BB-S-OFFSET): NIL
       Local 13 (BB-S-BITPOS): NIL
       Local 14 (BB-S-ROW-LENGTH): 0
       Local 15 (BB-D-DATA-ADDR): 255328256
       Local 16 (BB-D-OFFSET): 14882
       Local 17 (BB-D-BITPOS): 8
       Local 18 (BB-EVENT-COUNT): 73322
       Local 19 (BB-ALU-OPERATION): -2147483643
       Local 20 (S-ROW-BITPOS): 0
       Local 21 (S-ROW-OFFSET): 0
       Local 22 (S-ROW): 0
       Local 23 (D-ROW-BITPOS): 8
       Local 24 (D-ROW-OFFSET): 50
       Local 25 (D-ROW): 103
       Local 26 (S-BEG-ADDR): NIL
       Local 27 (S-BEG-BITPOS): 0
       Local 28 (S-ROW-LENGTH): 262144
       Local 29 (S-ROW-SPAN): 0
       Local 30 (S-HEIGHT): 1
       Local 31 (S-BITS-PER-ELT): 1
       Local 32 (D-BEG-ADDR): 255328256
       Local 33 (D-BEG-BITPOS): 0
       Local 34 (D-ROW-LENGTH): 576
       Local 35 (D-ROW-SPAN): 144
       Local 36 (D-HEIGHT): 454
       Local 37 (D-BITS-PER-ELT): 3
       Local 38 (S-ROW-ADDR-OFFSET): NIL
       Local 39 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
       Local 40: 1342250602
       Local 41: #<DTP-LOCATIVE 33507416>
       Local 42: 50
       Local 43 (XMIN): 2
       Local 44 (YMIN): 2
       Local 45 (XMAX): 574
       Local 46 (YMAX): 452
       Local 47 (YLIM): 201
       Local 48 (D-ADDR-OFFSET): 14882
       Local 49 (Y): 103
       Local 50: NIL
       Local 51 (I): 0
       Local 52: 2
       Local 53 (E1): #<EDGE 0-1 (311..0/144) <102 201> 3/T>
       Local 54: 1342250602
       Local 55: #<DTP-LOCATIVE 27207417>
       Local 56: 14
       Local 57 (E2): #<EDGE 1-2 (312..144/454) <102 401> 2/T>
       Local 58: 1342250602
       Local 59: #<DTP-LOCATIVE 27207436>
       Local 60: 14
       Local 61 (X1): 201
       Local 62 (X2): 202
       Local 63 (XFRAC): NIL
       Local 64 (LEFT): 201
       Local 65 (RIGHT): 202
       Local 66 (.WIDTH.): 8

    (:METHOD GREY:GREY-HARDWARE-SCREEN-MIXIN :%DRAW-FILLED-POLYGON):  (from OZ:OZ:<PAO.LISPM>NEW-GREY-FILL-POLY)
       Arg 0 (SELF): #<GREY-SCREEN-WITH-ALU GREY 602766 exposed>
       Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor GREY:GREY-HARDWARE-SCREEN-MIXIN -- 2. IV's, 0. FL's 7111135>
       Arg 2 (OPERATION): :%DRAW-FILLED-POLYGON
       Arg 3 (EDGE-LIST): (#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T> #<EDGE 3-0 (146..0/144) <202 301> 0/T> #<EDGE 2-3 (622..0/144) <302 401> 1/T>)
       Arg 4 (ES): #(#<EDGE 0-1 (311..0/144) <102 201> 3/T> #<EDGE 1-2 (312..144/454) <102 401> 2/T>)
       Arg 5 (ALU): -200
       Arg 6 (SHEET): #<WINDOW Window 4 603053 exposed>
       Rest arg (LIMITS): (2 2 574 452)

    (:METHOD TV:GRAPHICS-MIXIN :DRAW-FILLED-POLYGON):  (P.C. = 74)  (from OZ:OZ:<PAO.LISPM>FILL-POLY)
       Arg 0 (SELF): #<WINDOW Window 4 603053 exposed>
       Arg 1 (SELF-MAPPING-TABLE): TV:GRAPHICS-MIXIN
       Arg 2 (OPERATION): :DRAW-FILLED-POLYGON
       Arg 3 (X-ARRAY): #(100 200 300 400)
       Arg 4 (Y-ARRAY): #(200 100 400 300)
       Arg 5 (ALU): -200

    SEND:  (P.C. = 6)
       Arg 0 (OBJECT): #<WINDOW Window 4 603053 exposed>
       Arg 1 (MESSAGE-NAME): :DRAW-FILLED-POLYGON
       Rest arg (ARGUMENTS): (#(100 200 300 400) #(200 100 400 300) -200)

    SI:*EVAL:  (P.C. = 403)
       Arg 0 (FORM): (SEND WWW :DRAW-FILLED-POLYGON XXX YYY -200)
       Local 0 (FORM): NIL
       --Defaulted args:--
       Arg 1 (ENV): NIL
       Arg 2 (HOOK): NIL

    (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
       Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 37000101>

    TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
       Arg 0 (NEW-MODE): :BLAST
       Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
       Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 37000106>

    SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
       Arg 0 (NAME): #"Common Lisp Top Level"
       Arg 1 (ABORT-FUNCTION): NIL
       Arg 2 (READ-FUNCTION): NIL
       Arg 3 (EVAL-FUNCTION): NIL
       Arg 4 (PRINT-FUNCTION): NIL

    SI:LISP-COMMAND-LOOP:  (P.C. = 67)
       Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 602657 exposed>
       Rest arg: (:NAME #"Common Lisp Top Level")

    SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
       Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 602657 exposed>

    SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
       --Defaulted args:--
       Arg 0 (IGNORE): NIL


22-Oct-85 23:50:16-EDT,1937;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 17:31-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6315; 6 Sep 85 17:30:33-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 308371; Fri 6-Sep-85 17:27:17-EDT
Date: Fri, 6 Sep 85 17:31 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Forwarding instance variable value cells
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850830141159.1.CYPHER@YOGI.MIT>
Message-ID: <850906173112.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Fri, 30 Aug 85 14:11 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Property of Robert Kassel:

    SET-IN-INSTANCE doesn't follow DTP-ONE-Q-FORWARDs if there are any in
    the instance variable's cell.

    Also, the behavior of VARIABLE-LOCATION on a forwarded instance variable
    is not that given in the manual.  The pointer is to the cell in the
    instance, not the cell holding the value.  (If this is changed to do
    what the manual says, please supply something that gives the current
    behavior, since it makes it much easier to undo the forwarding that
    way).

The bottom line is that we never considered forwarding instance
variables and therefore we don't claim to support this.

As for variable-location, I /think/ this will always point to the
value-holding cell in the future, which means your code will break.
Perhaps if you could describe some motivation for this we could either
declare it as desirable or not?

22-Oct-85 23:50:17-EDT,6152;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 20:15-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6317; Fri 6-Sep-85 20:15:57-EDT
Date: Fri, 6 Sep 85 20:15 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Forwarding instance variable value cells
To: DCP@SCRC-QUABBIN.ARPA, sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906173112.9.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850906201550.9.CYPHER@YOGI.MIT>

    Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 17:31-EDT
    Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6315; 6 Sep 85 17:30:33-EDT
    Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 308371; Fri 6-Sep-85 17:27:17-EDT
    Date: Fri, 6 Sep 85 17:31 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    Subject: Forwarding instance variable value cells
    To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
	BUG-LISPM@MIT-GOLDILOCKS.ARPA
    In-Reply-To: <850830141159.1.CYPHER@YOGI.MIT>
    Message-ID: <850906173112.9.NFEP@NEPONSET.SCRC.Symbolics.COM>

	Date: Fri, 30 Aug 85 14:11 EDT
	From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

	In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
	Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
	Display 6.20, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
	ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Property of Robert Kassel:

	SET-IN-INSTANCE doesn't follow DTP-ONE-Q-FORWARDs if there are any in
	the instance variable's cell.

	Also, the behavior of VARIABLE-LOCATION on a forwarded instance variable
	is not that given in the manual.  The pointer is to the cell in the
	instance, not the cell holding the value.  (If this is changed to do
	what the manual says, please supply something that gives the current
	behavior, since it makes it much easier to undo the forwarding that
	way).

    The bottom line is that we never considered forwarding instance
    variables and therefore we don't claim to support this.

Page 15 of Internals, second paragraph of FORWARD-VALUE-CELL, "To
forward one arbitrary cell to another (rather than specifically one
value to another), given two locatives, do
   (%P-STORE-TAG-AND-POINTER locative1 DTP-ONE-Q-FORWARD locative2)"
could be interpreted as claiming support of forwarding instance
variables, array elements, list elements, and anything else you can get
a locative to.

    As for variable-location, I /think/ this will always point to the
    value-holding cell in the future, which means your code will break.
    Perhaps if you could describe some motivation for this we could either
    declare it as desirable or not?

Suppose I have a person in a room.  I can do this with a flavor
instance:

(defflavor person-in-room
	(temperature
	 lights-on?
	 x-position
	 y-position)
	()
  :initable-instance-variables)

Now I can have the person turn the lights off:

(defmethod (person-in-room :turn-off-lights)
	   ()
  (if lights-on?
      (setq lights-on? nil)
      (ferror "The lights are already off")))

Now what do I do if I have two people in the room?  Clearly I don't want
to make a TWO-PEOPLE-IN-ROOM flavor.  One possibility is to macroexpand
into something like this, dependent upon the number of people.  Each
returned value is a person:

(let ((temperature 70)
      (lights-on? t))
  (values
    (let ((x-position 3)
	  (y-position 5))
      #'(lambda (f)
	  (multiple-value-setq (temperature lights-on? x-position y-position)
			       (funcall f temperature lights-on? x-poisition y-position))))
    (let ((x-position 2)
	  (y-position 8))
      #'(lambda (f)
	  (multiple-value-setq (temperature lights-on? x-position y-position)
			       (funcall f temperature lights-on? x-poisition y-position))))))

In this implementation, the argument f to the people takes the place of
the method.  It's not great, but it works and generalizes to N people
at room instantiation time without defining additional code.  But now
I've had the people doing things in the room for a while and someone
else comes along wanting to go in the room.  The best I can do is to
send everyone messages that capture their lexical environment variable
values and use these to initialized a new lexical environment with the
old values and the new person.

But it can get more complicated.  Now suppose each person works for a
company.  I want to have a person-in-room-who-works-for-company thing
that inherits some cells from the company, some from the room, and has
some of its own.  I could also do it with flavors, defining a room with
a temperature and lights-on?, a company with a boss, and a product, and
a person with x-postion, y-position, and possible "hidden" variables
room and company.  But then I need to know that for some cells I need to
send to a variable to get the values, and for others I don't, which is
kind of ugly (actually, a number of these issues are similar to those
the reader faces with the package system).  So, what I tried doing was
making a flavor that has all of the instance variables (some of which
are perhaps renamed to something more appropriate or to avoid name
clashes) and forwarded the values of some of the instance variables.

For some situations, I think that is a reasonable thing to do, given
what is available, to get this kind of behavior.  However, it is
somewhat painful to move a person from one room to another since you
have to have something undo the forwarding.  I also wanted to have a
shadowable forwarding, in which an empty cell forwards to another cell,
but a non-empty cell does not.  Emptying the cell reinstates the
forwarding.  So, I do the name/value association myself now and use the
language tools stuff to wrap something around functions to take care of
references to my environment variables (I hadn't realized it was so easy
to do something like that now).
22-Oct-85 23:50:19-EDT,2122;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 22:12-EDT
Received: from SCRC-QUABBIN.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6318; 6 Sep 85 22:10:37-EDT
Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 198963; Fri 6-Sep-85 22:09:19-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 120089; Fri 6-Sep-85 22:11:45-EDT
Date: Fri, 6 Sep 85 22:12 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Forwarding instance variable value cells
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    DCP@SCRC-QUABBIN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906201550.9.CYPHER@YOGI.MIT>
Message-ID: <850906221218.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

Sorry for not reading your example very carefully right now (it's late).
I'll contend your database is wrong.  lights-on is not a property of a
person, it is a property of the room.  Ditto with temperature.
Therefore, you get

(defflavor person-in-room
	(room
	 x-position
	 y-position)
	()
  :initable-instance-variables)

and a room flavor.  (:method person-in-room :turn-off-lights) send a
message to the room.  Querying a person about the lights is probably the
wrong modularity; you should query the room.

This does not require forwarding at all.

Additionally, if you have 9 people, and somehow you choose one of them
to be the keeper of the lights-on? I-V (meaning everybody else forwarded
to him/her), suppose that person changed rooms with 3 other people, but
the other 5 stayed put.  Now you have the task of somehow (and that's a
big somehow) finding the others (5 in this case), and forwarding their
I-Vs to someplace else.

Bottom line: your example holds no water.  Neither do your extended
examples.  As a challenge, I can probably debunk every maintainable
database that you think requires forwarding.  (By maintainable, I mean
one that is understandable, realistic, modifiable, and all the other
goodies that means a new person has a hope of fixing it.)

22-Oct-85 23:50:19-EDT,7039;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 7 Sep 85 12:59-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6322; Sat 7-Sep-85 12:59:17-EDT
Date: Sat, 7 Sep 85 12:59 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Forwarding instance variable value cells
To: DCP@SCRC-QUABBIN.ARPA, sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906221218.3.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850907125916.2.CYPHER@YOGI.MIT>

    Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 22:12-EDT
    Received: from SCRC-QUABBIN.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6318; 6 Sep 85 22:10:37-EDT
    Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 198963; Fri 6-Sep-85 22:09:19-EDT
    Received: from NEPONSET.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 120089; Fri 6-Sep-85 22:11:45-EDT
    Date: Fri, 6 Sep 85 22:12 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    Subject: Forwarding instance variable value cells
    To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
	DCP@SCRC-QUABBIN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
    In-Reply-To: <850906201550.9.CYPHER@YOGI.MIT>
    Message-ID: <850906221218.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Sorry for not reading your example very carefully right now (it's late).
    I'll contend your database is wrong.  lights-on is not a property of a
    person, it is a property of the room.  Ditto with temperature.
    Therefore, you get

    (defflavor person-in-room
	    (room
	     x-position
	     y-position)
	    ()
      :initable-instance-variables)

    and a room flavor.  (:method person-in-room :turn-off-lights) send a
    message to the room.  Querying a person about the lights is probably the
    wrong modularity; you should query the room.

    This does not require forwarding at all.

Sorry about any problems with the example.  It was late for me when I
made the example up, and in the editing the following line got lost "one
implementation involved forwarding".

I think your missing the point of the example.  I'll use one from the
Holy Book:

(defflavor ship (x-position
		 y-position
		 x-velocity
		 y-velocity
		 mass)
	   ()
  :gettable-instance-variables)

(defmethod (ship :speed) ()
  (sqrt (+ (expt x-velocity 2)
	   (expt y-velocity 2))))

(defmethod (ship :direction) ()
  (atan y-velocity x-velocity))

First of all, you'll notice that the position and velocity vectors have
been open coded.  I could paraphrase you and say "Querying a ship about
the position and velocity vector components is probably the wrong
modularity; you should query the vectors."  The vectors can have
:MAGNITUDE and :DIRECTION messages, and the ship's messages could send
to the vectors.  And, every time some ship message needed to know
X-VELOCITY, it could say (SEND VELOCITY :X-COMPONENT).  But, to be
safest, I should say
(SEND (SEND SELF :VELOCITY) :X-COMPONENT)
because there are reasons why velocity and position might want to be
part of a positioning kind of object.  I'm sure you'd rather maintain
code with X-POSITION in it than with all those sends.  In fact,
X-POSITION is really like a symbol macro, since it turns into
%INSTANCE-REF.  One could extend the analogy and let it expand into
the sending of a message to various components of the instance, in a
flavor-definition-dependent way.

Now, getting back to my example.  I hope I have convinced you that there
can be reasons for wanting LIGHTS-ON? to look like an instance variable
of a PERSON-IN-ROOM object.  You misunderstood one part though.  There
is a PERSON object and a ROOM object, as well as a PERSON-IN-ROOM object.
The PERSON object holds PERSON-specific information.  The ROOM object
holds ROOM-specific information.  Any ROOM methods know nothing of
the person.  Any PERSON methods know nothing about the ROOM. However,
PERSON-IN-ROOM methods know about the PERSON and the ROOM, and share
some of the state from each of them.

In simple cases, forwarding is a reasonable implementation of a
PERSON-IN-ROOM object using release 6. In this implementation, we have
(defflavor room
	(lights-on?
	 temperature
	 house)
	())

(defflavor person
	(name
	 age
	 occupation)
	())

(defflavor person-in-room
	(lights-on?
	 x-position
	 y-position
	 name)
	())

Now, a room could be set by

(defmethod (person-in-room :new-room)
	   (room)
  (forward-variable (self lights-on?) (room lights-on?)))

So, the room is the keeper of the LIGHTS-ON?.  That's modular, and
maintainable.  I can make several people be in the same room by just
sending the PERSON-IN-ROOM instances :NEW-ROOM messages.  I can put a
person in a different room just as easily.  All the hair boils down to
making FORWARD-VARIABLE work.  Sure, it doesn't REQUIRE forwarding since
I could always do a bunch of sends instead (so you are off the hook on
the debunking challenge) or analyze the code and make appropriate
changes to make the forwarding appear to happen, which allows for some
extra flexibility at the cost of more cryptic looking compiled code.

I can even give a real example that I did with sends and now want to
redo:  Picture a window that has several drawings on it.  Each drawer is
an object.  To make all the pictures line up nicely, you want them to
all use the same scaling and positioning parameters, so the drawers want
to get that information from the window.  Each drawer is drawing a
particular representation of some object.  To do this, each drawer gets
some parameters from that object.  But, different drawers may be drawing
different objects.  And, no drawer has any business knowing all about
the objects or all about the window.  So, there you have it -- an
environment which consists of some local state and some shared state.
And, it makes sense to change the object associated with the drawer, and
in this case, there is an extra level of indirection, because you want
to change the object for several drawers at once from one object to
another.  But this is easily done by having an indirection object which
they all forward through, and changing what the indirection object
forwards too.

To summarrize, I want to do something that is similar to what flavors
do, but which they don't do, and forwarding instance variables was good
enough to provide a prototype, although SET-IN-INSTANCE made things
confusing until I realized it wasn't following the forwarding.  The
prototype showed forwarding wasn't quite powerful enough for what I
wanted to do (although it is for part of my drawers example).  Anyways,
there is either a bug in the internals documentation or a bug in the
SET-IN-INSTANCE stuff, and it would be nice if someday objects could do
this kind of thing and have flavor-local definitions for macros and
symbol macros.
22-Oct-85 23:50:20-EDT,1183;000000000000
Mail-From: GZ created at  8-Sep-85 14:47:41
Received: from MIT-RIEMANN by MIT-OZ via Chaosnet; 8 Sep 85 14:42-EDT
Date: Sun, 8 Sep 85 14:42 EDT
From: Philippe Brou <PHILIP@OZ>
Subject: Catch problem
To: BUG-COMPILER@OZ
Message-ID: <"850908144235.1.philip@OZ"@RIEMANN>
ReSent-Date: Sun 8 Sep 85 14:47:41-EDT
ReSent-From: "Gail Zacharias" <GZ@MIT-OZ>
ReSent-To: bug-lispm@MIT-OZ
ReSent-Message-ID: <12141666792.21.GZ@MIT-OZ>

In Symbolics 3600 COMPILER in Release 6.0, IP-TCP 29.0, AISite 10.1,
microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

When can I expect the compiler to be fixed to handle
the following expressions [Progn nil refers to more complex expressions
which are irrelevant here]

(defun BREAK-IT (&OPTIONAL (wait-to-clear t))
  (unwind-protect
      (prog ((useless (loop FOR i IN '(1 2. 3.) COLLECT i)))
	    (progn nil)
	    (unwind-protect
		(progn nil)
	      ;;; User wants to return, last drawing is still on screen
	      (if (null wait-to-clear) (return t))))
    nil))



C-sh-C on this definition leads to a CATCH error.

This bug was reported many months ago but I never received a reply.
22-Oct-85 23:50:20-EDT,1812;000000000000 
Received: from MIT-MOON by MIT-OZ via Chaosnet; 8 Sep 85 16:15-EDT
Date: Sun, 8 Sep 85 16:15 EDT
From: Chris Lindblad <CJL@OZ>
Subject: Namespace bug
To: BUG-LISPM@OZ
Message-ID: <850908161509.1.CJL@MOON>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.1,
microcode TMC5-MIC 319, Rodent Free Namespace Editor, on Lisp Machine Keith Moon:

One cannot change capitalization in the pretty name of an object.

For example, if I were editing the printer foo in the namespace editor,
and changed its pretty name from Foo to FoO, and tried to save the
change. The user interface acts as if the change occurred, but in fact
it didn't. THis is probably because (:method net:object
:set-valid-for-namespace) uses EQUAL to see if any properties have
changed, and (equal "Foo" "FoO") => T. In fact, I suspect if any
property has a string value, and all that is changed is the
capitalization of the string, then the change doesn't seem to happen.

(DEFMETHOD (OBJECT :SET-VALID-FOR-NAMESPACE) (NAMESPACE PRIMARY-NAME PROPERTY-LIST
							&AUX CHANGED-P)
  (DECLARE (VALUES CHANGED-P))
  (LET ((VALIDATION-TIMESTAMP (OBJECT-GET-VALIDATION-TIMESTAMP NAMESPACE T)))
    (WHEN (NEQ PRIMARY-NAME (VALIDATION-TIMESTAMP-PRIMARY-NAME VALIDATION-TIMESTAMP))
      (SETF CHANGED-P T)
      (SETF (VALIDATION-TIMESTAMP-PRIMARY-NAME VALIDATION-TIMESTAMP) PRIMARY-NAME))
    (UNLESS (LOOP WITH OLD-PL = (VALIDATION-TIMESTAMP-PROPERTY-LIST VALIDATION-TIMESTAMP)
		  FOR (INDICATOR NIL) ON (CLASS-ALL-TEMPLATES CLASS) BY #'CDDR
		  ALWAYS (EQUAL (GET (LOCF OLD-PL) INDICATOR)
				(GET (LOCF PROPERTY-LIST) INDICATOR)))
      (SETQ CHANGED-P T)
      (SETF (VALIDATION-TIMESTAMP-PROPERTY-LIST VALIDATION-TIMESTAMP)
	    (COPYTREE PROPERTY-LIST *NAMESPACE-OBJECT-AREA*))))
  ;;Return,
  CHANGED-P)
22-Oct-85 23:50:20-EDT,1113;000000000000
Received: from MIT-AI.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 19:03-EDT
Received: from MIT-JANIS by MIT-AI.ARPA via Chaosnet; 9 SEP 85  15:55:38 EDT
Date: Mon, 9 Sep 85 15:51 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: calls with many arguments
To: BUG-LISPM@OZ
Message-ID: <850909155100.2.JAR@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.1,
microcode TMC5-MIC 319,
on Lisp Machine Janis Joplin:
Warm booted from: Common Lisp Listener 1, Common Lisp Listener 1.

Compile the following function and call it.  Lisp will "stop itself".

(defun z ()
  (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1))
22-Oct-85 23:50:21-EDT,1267;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 19:15-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6338; Mon 9-Sep-85 14:01:03-EDT
Date: Mon, 9 Sep 85 14:01 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Common Lisp Type Bug
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850909140127.3.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

This is a bug in Common Lisp the Language, not in the implementation
(where should these be sent?).


As far as I can tell, there is no way to define a type that is true for
something like "all strings less than 60 characters in length" short of
doing an or of string of length 1, 2, 3, etc.

If satisfies could have extra arguments, and then pass then on to the
predicate, then you could say

(deftype sequence-length-range (from to) '(and sequence (satisfies length-pred from to)))

(defun length-pred (sequence from to)
  ( from (length sequence) to))

and have a lot more flexibility.
22-Oct-85 23:50:21-EDT,1912;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 19:38-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 7601; 9 Sep 85 09:33:00-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 309219; Mon 9-Sep-85 09:30:17-EDT
Date: Mon, 9 Sep 85 09:34 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Catch problem
To: Philippe Brou <PHILIP@OZ.mit>, BUG-LispM@OZ.mit
In-Reply-To: <"850908144235.1.philip@OZ"@RIEMANN>
Message-ID: <850909093455.1.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Sun, 8 Sep 85 14:42 EDT
    From: Philippe Brou <PHILIP@OZ>

[Does bug-compiler@OZ really forward to SCRC?]

    In Symbolics 3600 COMPILER in Release 6.0, IP-TCP 29.0, AISite 10.1,
    microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

    When can I expect the compiler to be fixed to handle
    the following expressions [Progn nil refers to more complex expressions
    which are irrelevant here]


    (defun BREAK-IT (&OPTIONAL (wait-to-clear t))
      (unwind-protect
	  (prog ((useless (loop FOR i IN '(1 2. 3.) COLLECT i)))
		(progn nil)
		(unwind-protect
		    (progn nil)
		  ;;; User wants to return, last drawing is still on screen
		  (if (null wait-to-clear) (return t))))
	nil))



    C-sh-C on this definition leads to a CATCH error.

    This bug was reported many months ago but I never received a reply.

It doesn't matter how hard we fix the compiler, your program is
semantically incorrect.  What the error is really trying to tell you
(you should include backtraces in bug reports), is that you aren't
allowed to do GOs and RETURNs from inside an unwind-protect.  I fully
believe that, and you can fool our compiler into producing (non-working)
code for that case, but unfortunately I see no mention of this in CLtL.

22-Oct-85 23:50:21-EDT,2964;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 23:08-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6342; Mon 9-Sep-85 23:06:38-EDT
Date: Monday, 9 September 1985, 23:05-EDT
From: Scott Cyphers <sr.ehpyc at MIT-SPEECH>
Subject: Catch problem
To: DCP at SCRC-QUABBIN, PHILIP at OZ, BUG-LispM at OZ
In-Reply-To: <850909093455.1.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850909230559.0.CYPHER@YOGI.MIT>

    Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 19:38-EDT
    Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 7601; 9 Sep 85 09:33:00-EDT
    Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 309219; Mon 9-Sep-85 09:30:17-EDT
    Date: Mon, 9 Sep 85 09:34 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    Subject: Catch problem
    To: Philippe Brou <PHILIP@OZ.mit>, BUG-LispM@OZ.mit
    In-Reply-To: <"850908144235.1.philip@OZ"@RIEMANN>
    Message-ID: <850909093455.1.NFEP@NEPONSET.SCRC.Symbolics.COM>

	Date: Sun, 8 Sep 85 14:42 EDT
	From: Philippe Brou <PHILIP@OZ>

    [Does bug-compiler@OZ really forward to SCRC?]

	In Symbolics 3600 COMPILER in Release 6.0, IP-TCP 29.0, AISite 10.1,
	microcode TMC5-MIC 319, FEP 17, on Lisp Machine Georg Friedrich Bernhard Riemann:

	When can I expect the compiler to be fixed to handle
	the following expressions [Progn nil refers to more complex expressions
	which are irrelevant here]


	(defun BREAK-IT (&OPTIONAL (wait-to-clear t))
	  (unwind-protect
	      (prog ((useless (loop FOR i IN '(1 2. 3.) COLLECT i)))
		    (progn nil)
		    (unwind-protect
			(progn nil)
		      ;;; User wants to return, last drawing is still on screen
		      (if (null wait-to-clear) (return t))))
	    nil))



	C-sh-C on this definition leads to a CATCH error.

	This bug was reported many months ago but I never received a reply.

    It doesn't matter how hard we fix the compiler, your program is
    semantically incorrect.  What the error is really trying to tell you
    (you should include backtraces in bug reports), is that you aren't
    allowed to do GOs and RETURNs from inside an unwind-protect.  I fully
    believe that, and you can fool our compiler into producing (non-working)
    code for that case, but unfortunately I see no mention of this in CLtL.

Wait a minute...

Page 141, CLtL, quoted witout permission (but for educational purposes)
"It should be emphasized that UNWIND-PROTECT protects against ALL
attempts to exit from the protected form, including not only such
``dynamic exit'' facilities such as THROW but also ``lexical exit''
facilities such as GO and RETURN-FROM."

Also, he is returning from the cleanup forms, which are not a part of
the inner unwind protect (same page) and everything is within the outer
unwind protect (which shouldn't make a difference anyways).
22-Oct-85 23:50:22-EDT,1416;000000000000  
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 23:17-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6344; 9 Sep 85 23:14:54-EDT
Received: from MERRIMACK.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 309895; Mon 9-Sep-85 23:12:02-EDT
Date: Mon, 9 Sep 85 23:14 EDT
From: Mike McMahon <MMcM@SCRC-STONY-BROOK.ARPA>
Subject: Common Lisp Type Bug
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
cc: BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850909140127.3.CYPHER@YOGI.MIT>
Message-ID: <850909231436.1.MMCM@MERRIMACK.SCRC.Symbolics.COM>

    Date: Mon, 9 Sep 85 14:01 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    As far as I can tell, there is no way to define a type that is true for
    something like "all strings less than 60 characters in length" short of
    doing an or of string of length 1, 2, 3, etc.

    If satisfies could have extra arguments, and then pass then on to the
    predicate, then you could say

    (deftype sequence-length-range (from to) '(and sequence (satisfies length-pred from to)))

    (defun length-pred (sequence from to)
      ( from (length sequence) to))

    and have a lot more flexibility.

You can say
(deftype sequence-length-range (from to)
  `(and sequence (satisfies ,(lambda (sequence) ( from (length sequence) to)))))

22-Oct-85 23:50:22-EDT,2295;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 9 Sep 85 23:44-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6345; Mon 9-Sep-85 23:42:31-EDT
Date: 9 Sep 1985  23:43 EDT (Mon)
Message-ID: <SR.EHPYC.12142026418.BABYL@MIT-SPEECH>
From: Scott Cyphers <SR.EHPYC@MIT-SPEECH>
To:   Mike McMahon <MMcM@SCRC-STONY-BROOK.ARPA>
Cc:   BUG-LISPM@MIT-GOLDILOCKS.ARPA,
      Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Common Lisp Type Bug
In-reply-to: Msg of 9 Sep 1985  23:14-EDT from Mike McMahon <MMcM at SCRC-STONY-BROOK.ARPA>

    Date: Monday, 9 September 1985  23:14-EDT
    From: Mike McMahon <MMcM at SCRC-STONY-BROOK.ARPA>
    To:   Scott Cyphers <sr.ehpyc%MIT-SPEECH at MIT-REAGAN.ARPA>
    cc:   BUG-LISPM at MIT-GOLDILOCKS.ARPA
    Re:   Common Lisp Type Bug

        Date: Mon, 9 Sep 85 14:01 EDT
        From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

        As far as I can tell, there is no way to define a type that is true for
        something like "all strings less than 60 characters in length" short of
        doing an or of string of length 1, 2, 3, etc.

        If satisfies could have extra arguments, and then pass then on to the
        predicate, then you could say

        (deftype sequence-length-range (from to) '(and sequence (satisfies length-pred from to)))

        (defun length-pred (sequence from to)
          ( from (length sequence) to))

        and have a lot more flexibility.

    You can say
    (deftype sequence-length-range (from to)
      `(and sequence (satisfies ,(lambda (sequence) ( from (length sequence) to)))))

That does work, but if you look at satisfies on page 43 of CLtL, it
says you can't do that because the predicate has to be a name and
lambda expression aren't allowed in order to avoid scoping problems (I
can't think of how it could myself, but it's late).  I guess it's not
quite a lambda expression in this case.  It's certainly not a name
though, and there's no way you can get a name in there that will do
the job, that I can see.  Like if you try to get around it with an
FLET, it won't matter because the form will be in a different
environment when it gets used, so the predicate you made won't be what
you get.
22-Oct-85 23:50:22-EDT,1649;000000000000    
Received: from MIT-HTVAX.ARPA by MIT-OZ via Chaosnet; 10 Sep 85 11:47-EDT
Received: from SCRC-STONY-BROOK.ARPA (scrc-stony-brook.arpa.ARPA) by MIT-HTVAX.ARPA (4.12/4.7) 
	id AA28438; Tue, 10 Sep 85 10:15:52 edt
Received: from YAMASKA.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 310055; Tue 10-Sep-85 10:13:07-EDT
Date: Tue, 10 Sep 85 10:16 EDT
From: Mark A. Bell <mbell@SCRC-QUABBIN.ARPA>
Subject: calls with many arguments
To: JAR%MIT-MC@MIT-HTVAX.ARPA, BUG-LISPM%OZ@MIT-HTVAX.ARPA
In-Reply-To: <850909155100.2.JAR@JANIS>
Message-Id: <850910101604.2.MBELL@YAMASKA.SCRC.Symbolics.COM>

    Date: Mon, 9 Sep 85 15:51 EDT
    From: Jonathan A Rees <JAR%MIT-MC@MIT-HTVAX.ARPA>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.1,
    microcode TMC5-MIC 319,
    on Lisp Machine Janis Joplin:
    Warm booted from: Common Lisp Listener 1, Common Lisp Listener 1.

    Compile the following function and call it.  Lisp will "stop itself".

    (defun z ()
      (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
    1 1 1 1 1 1 1 1 1))

Thank you for the bug report.  This is fixed in an upcoming release.

22-Oct-85 23:50:23-EDT,2123;000000000000
Received: from MIT-APIARY-7 by MIT-OZ via Chaosnet; 10 Sep 85 13:11-EDT
Date: Tue, 10 Sep 85 13:08 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: (get-dispatch-macro-character #\# #\#) => error
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850910130854.2.JAR@APIARY-7>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.6,
Experimental Apiary: The Actor Computing System 1.0,
Experimental Traveler: The Apiary Observatory 1.0,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-7:

[in Symbolics Common Lisp]

(get-dispatch-macro-character #\# #\#)

>>Error: Can't return value of built-in # macro function
While in the function GET-DISPATCH-MACRO-CHARACTER  SI:*EVAL  (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0)

GET-DISPATCH-MACRO-CHARACTER:  (P.C. = 46)
   Arg 0 (DISP-CHAR): #\#
   Local 0 (DISP-CHAR): 35
   Arg 1 (SUB-CHAR): #\#
   Local 1 (SUB-CHAR): 35
   --Defaulted args:--
   Arg 2 (A-READTABLE): #<READTABLE 120362317>
   Local 3 (ENTRY): SI:XR-CL-##-MACRO

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (GET-DISPATCH-MACRO-CHARACTER #\# #\#)
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 14500101>

TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
   Arg 0 (NEW-MODE): :BLAST
   Arg 1 (STREAM): #:TERMINAL-IO-SYN-STREAM
   Arg 2 (CONTINUATION): #<LEXICAL-CLOSURE (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0) 14500106>

SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
   Arg 0 (NAME): #"Common Lisp Top Level"
   Arg 1 (ABORT-FUNCTION): NIL
   Arg 2 (READ-FUNCTION): NIL
   Arg 3 (EVAL-FUNCTION): NIL
   Arg 4 (PRINT-FUNCTION): NIL

SI:LISP-COMMAND-LOOP:  (P.C. = 67)
   Arg 0: #<COMMON-LISP-LISTENER Common Lisp Listener 1 11241007 exposed>
   Rest arg: (:NAME #"Common Lisp Top Level")

SI:COMMON-LISP-TOP-LEVEL:  (P.C. = 46)
   Arg 0 (WINDOW): #<COMMON-LISP-LISTENER Common Lisp Listener 1 11241007 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:23-EDT,1190;000000000000   
Received: from MIT-APIARY-7 by MIT-OZ via Chaosnet; 10 Sep 85 13:36-EDT
Date: Tue, 10 Sep 85 13:34 EDT
From: Jonathan A Rees <JAR@MIT-MC>
Subject: GET-DISPATCH-MACRO-CHARACTER ignores its third argument!
To: BUG-LISPM@OZ
cc: JAR@MIT-MC
Message-ID: <850910133440.3.JAR@APIARY-7>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.6,
Experimental Apiary: The Actor Computing System 1.0,
Experimental Traveler: The Apiary Observatory 1.0,
microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-7:

[In Symbolics Common Lisp:]

GET-DISPATCH-MACRO-CHARACTER appears to ignore its third argument, and
use the value of *READTABLE* instead.

(let ((cl-readtable *readtable*))
  (eq (let ((*readtable* (copy-readtable nil)))
	(set-dispatch-macro-character #\# #\?
				      #'(lambda (&rest ignore) '?))
	(get-dispatch-macro-character #\# #\? cl-readtable))
      (get-dispatch-macro-character #\# #\? cl-readtable)))

This evaluates to NIL.  It should evaluate to T.  That is, both
arguments to EQ ought to be NIL.  The first call to
GET-DISPATCH-MACRO-CHARACTER is incorrectly returning the function from
modified readtable, instead of NIL from the unmodified one.
22-Oct-85 23:50:23-EDT,1969;000000000000    
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 10 Sep 85 21:02-EDT
Received: from SCRC-QUABBIN by MIT-REAGAN via INTERNET with SMTP id 7707; 10 Sep 85 19:29:44-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 199973; Tue 10-Sep-85 19:29:24-EDT
Date: Tue, 10 Sep 85 19:29 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: Catch problem
To: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>,
    Philippe Brou <PHILIP%MIT-OZ@MIT-MC.ARPA>,
    Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    Philippe Brou <PHILIP@OZ.mit>, BUG-LispM@OZ.mit,
    PHILIP%OZ@MIT-AI.ARPA, BUG-LispM%OZ@MIT-AI.ARPA
In-Reply-To: <850909093455.1.NFEP@NEPONSET.SCRC.Symbolics.COM>,
             <12142017912.44.PHILIP@MIT-OZ>,
             <850909230559.0.CYPHER@YOGI.MIT>,
             <850909230559.0.CYPHER@YOGI.MIT>
Message-ID: <850910192941.3.NFEP@NEPONSET.SCRC.Symbolics.COM>

Well, it turns out Guy Steele can explain call cases of non-local
frobbing inside unwind-protect cleanups, and the below code should work.
The problem is not really the return inside the unwind-protect, but
instead the LOOP which is used for the prog variable initialization.
For example, In 6.1, the original code still fails:

	(defun BREAK-IT (&OPTIONAL (wait-to-clear t))
	  (unwind-protect
	      (prog ((useless (loop FOR i IN '(1 2. 3.) COLLECT i)))
		    (progn nil)
		    (unwind-protect
			(progn nil)
		      ;;; User wants to return, last drawing is still on screen
		      (if (null wait-to-clear) (return t))))
	    nil))

but this code compiles:

	(defun BREAK-IT (&OPTIONAL (wait-to-clear t))
	  (unwind-protect
	      (prog ((useless 3))
		    (progn nil)
		    (unwind-protect
			(progn nil)
		      ;;; User wants to return, last drawing is still on screen
		      (if (null wait-to-clear) (return t))))
	    nil))

and actually returns the correct answer.

22-Oct-85 23:50:23-EDT,664;000000000000
Received: from MIT-JANIS by MIT-OZ via Chaosnet; 10 Sep 85 22:26-EDT
Date: Tue, 10 Sep 85 22:25 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: making a local host w/namespace-editor
To: BUG-LISPM@OZ
Message-ID: <850910222504.2.GUMBY@JANIS>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.1,
microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

I wanted to access a host out on the internet a couple of times, so I
created a host called temp (locally).  The first time I touched temp I
got the error that it wasn't in the namespace and would be deleted.  It
then printed out as <deleted>.  I then couldn't refer to the host at
all!
22-Oct-85 23:50:24-EDT,4369;000000000000    
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 10 Sep 85 23:33-EDT
Date: Tue, 10 Sep 85 23:31 EDT
From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>
Subject: Compiler problems
To: BUG-LISPM@MIT-ZERMATT.ARPA
Message-ID: <850910233118.5.RZ@ZERMATT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
Imagen Spooler 5.1, Experimental Schema 96.19,
microcode TMC5-IO4-MIC 322, Network-Security patch, Server-Finger patch,
File system updater, on Zermatt:

I was compiling the following method when this happened.

(defmethod (protocol :has-operation?) (op)
  (check-arg op (typep op 'operation) "an operation")
  (block has-protocol?
    (send self :map-over-protocol
	  (lambda (protocol)
	    (let ((ops (mem #'operation-equal op (send protocol :operations))))
	      (when ops
		(return-from has-protocol? (first ops))))))))

>>Error: Internal compiler error - couldn't find pop-vars
While in the function COMPILER:CAPTURE-BINDINGS  COMPILER:CAPTURE-INDIVIDUAL-BINDINGS  COMPILER:DETERMINE-LEXICAL-RESIDENCE

COMPILER:CAPTURE-BINDINGS:  (P.C. = 133)
   Arg 0 (LIST-OF-BINDINGS): (#<Inst (Name .INTERNAL-CATCH-FOR-PROG-479..-3670)>)
   Local 1 (NEW-CALL-INST-LIST): NIL
   Local 2 (I): #<Inst (Name .INTERNAL-CATCH-FOR-PROG-479..-3670)>
   Local 3: NIL
   Local 4 (OPCODE): COMPILER:NAME
   Local 5 (VAR): #<NORMAL-LEXICAL-VARIABLE .INTERNAL-CATCH-FOR-PROG-479.. 21014456>
   Local 6 (POINTER): #<NORMAL-LEXICAL-VARIABLE COMPILER:.LEXICAL-NESTED-CAPTIVE-POINTER. 21015623>
   Local 7 (LINK-I): #<Inst (Var .LEXICAL-NESTED-CAPTIVE-POINTER.-3674)>
   Local 8 (CALL-I): #<Inst (Call CAPTURE-VARIABLE 2. COMPILER:STACK)>
   Local 9 (UPDATE-I): #<Inst (Setq .LEXICAL-NESTED-CAPTIVE-POINTER.-3674)>
   Local 10 (BYTE-LAP): NIL

COMPILER:CAPTURE-INDIVIDUAL-BINDINGS:  (P.C. = 325)
   Arg 0 (FUNCTION): #<EXTERNAL-FUNCTION 21012644>

COMPILER:DETERMINE-LEXICAL-RESIDENCE:  (P.C. = 207)

COMPILER:RUN-PHASE-2:  (P.C. = 4)

COMPILER:COMPILE-DEFINITION-1:  (P.C. = 43)
   Arg 0 (TYPE): DEFUN
   Arg 1 (FUNCTION-SPEC): (:METHOD PROTOCOL :HAS-OPERATION?)
   Arg 2 (LAMBDA-LIST): (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP)
   Arg 3 (DEBUG-INFO): NIL
   Arg 4 (DEFINITION): ((PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (CHECK-ARG OP (TYPEP OP (QUOTE OPERATION)) "an operation") (BLOCK HAS-PROTOCOL? (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 5 (FIXUP-P): T

COMPILER:COMPILE-DEFINITION:  (P.C. = 122)
   Arg 0 (EXP): (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (CHECK-ARG OP (TYPEP OP (QUOTE OPERATION)) "an operation") (BLOCK HAS-PROTOCOL? (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 1 (FIXUP-P): T
   Arg 2 (DEBUG-INFO): NIL

(:INTERNAL COMPILER:COMPILE-TO-CORE 0. (:DUMP-DEFINITION)):  (P.C. = 5)
   Arg 0 (**DEFSELECT-OP**): :DUMP-DEFINITION
   Arg 1 (EXP): (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (CHECK-ARG OP (TYPEP OP (QUOTE OPERATION)) "an operation") (BLOCK HAS-PROTOCOL? (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))

COMPILER:COMPILE-TO-CORE:  (P.C. = 12)
   Arg 0 (OPERATION): :DUMP-DEFINITION
   Rest arg (SELECT-METHOD-ARGS): ((DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (CHECK-ARG OP (TYPEP OP **) "an operation") (BLOCK HAS-PROTOCOL? (SEND SELF :MAP-OVER-PROTOCOL **))))

Rest of stack:
COMPILER:COMPILE-FORM-FUNCTION:  (P.C. = 41)
COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 330)
SYS:COMPILER-LET-INTERNAL:  (P.C. = 227)
COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 304)
COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 165)
COMPILER:PROCESS-FORMS-FROM-STREAM:  (P.C. = 117)
COMPILER:COMPILE-FROM-STREAM:  (P.C. = 237)
ZWEI:COMPILE-INTERVAL:  (P.C. = 142)
ZWEI:COMPILE-PRINT-INTERVAL:  (P.C. = 121)
ZWEI:COMPILE-DEFINITION-INTERNAL:  (P.C. = 100)
ZWEI:COM-COMPILE-REGION:  (P.C. = 5)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:50:24-EDT,4545;000000000000   
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 10 Sep 85 23:44-EDT
Date: Tue, 10 Sep 85 23:42 EDT
From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>
Subject: Another compiler bug
To: BUG-LISPM@MIT-ZERMATT.ARPA
Message-ID: <850910234217.7.RZ@ZERMATT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
Imagen Spooler 5.1, Experimental Schema 96.19,
microcode TMC5-IO4-MIC 322, Network-Security patch, Server-Finger patch,
File system updater, on Zermatt:

I tried another version of the same function, trying to get around the
compiler bug mentioned previously and got the following.  Deleting the 
check-arg form causes the compiler to succeed.

(defmethod (protocol :has-operation?) (op)
  (block has-protocol?
    (check-arg op (typep op 'operation) "an operation")
    (send self :map-over-protocol
	  (lambda (protocol)
	    (dolist (operation (send protocol :operations))
	      (when (operation-equal op operation)
		(return-from has-protocol? op)))))))

>>Error: #<Inst Tag-2865.:> was flushed by phase 2 but is still referenced.
While in the function COMPILER:CEMENT-INTERVAL  COMPILER:RUN-PHASE-2  COMPILER:COMPILE-DEFINITION-1

COMPILER:CEMENT-INTERVAL:  (P.C. = 152)
   Arg 0 (INTERVAL): #<INTERVAL 37257301>
   Arg 1 (INITIAL-LEVEL): 0.
   --Defaulted args:--
   Arg 2 (INITIAL-B-LEVEL): 0.
   Local 3: NIL
   Local 4: 0.
   Local 5: 0.
   Local 6: 0.
   Local 7 (INST): NIL
   Local 8: NIL
   Local 9: NIL
   Local 10 (TAG): #<Inst Tag-2865.:>
   Local 11: NIL

COMPILER:RUN-PHASE-2:  (P.C. = 27)

COMPILER:COMPILE-DEFINITION-1:  (P.C. = 43)
   Arg 0 (TYPE): DEFUN
   Arg 1 (FUNCTION-SPEC): (:METHOD PROTOCOL :HAS-OPERATION?)
   Arg 2 (LAMBDA-LIST): (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP)
   Arg 3 (DEBUG-INFO): NIL
   Arg 4 (DEFINITION): ((PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP (TYPEP OP **) "an operation") (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 5 (FIXUP-P): T

COMPILER:COMPILE-DEFINITION:  (P.C. = 122)
   Arg 0 (EXP): (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP (TYPEP OP **) "an operation") (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 1 (FIXUP-P): T
   Arg 2 (DEBUG-INFO): NIL

(:INTERNAL COMPILER:COMPILE-TO-CORE 0. (:DUMP-DEFINITION)):  (P.C. = 5)
   Arg 0 (**DEFSELECT-OP**): :DUMP-DEFINITION
   Arg 1 (EXP): (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP (TYPEP OP **) "an operation") (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))

COMPILER:COMPILE-TO-CORE:  (P.C. = 12)
   Arg 0 (OPERATION): :DUMP-DEFINITION
   Rest arg (SELECT-METHOD-ARGS): ((DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP ** "an operation") (SEND SELF :MAP-OVER-PROTOCOL **))))

COMPILER:COMPILE-FORM-FUNCTION:  (P.C. = 41)
   Arg 0 (FORM): (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP (TYPEP OP **) "an operation") (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 1 (COMPILE-TIME-P): NIL
   Arg 2 (LOAD-TIME-P): T

COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 330)
   Arg 0: (DEFUN (:METHOD PROTOCOL :HAS-OPERATION?) (SELF SYS:SELF-MAPPING-TABLE SI:OPERATION OP) (PROGN SELF SYS:SELF-MAPPING-TABLE SI:OPERATION NIL) (BLOCK HAS-PROTOCOL? (CHECK-ARG OP (TYPEP OP **) "an operation") (SEND SELF :MAP-OVER-PROTOCOL (LAMBDA ** **))))
   Arg 1 (COMPILE-TIME-TOO): NIL

Rest of stack:
SYS:COMPILER-LET-INTERNAL:  (P.C. = 227)
COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 304)
COMPILER:COMPILE-FROM-STREAM-1:  (P.C. = 165)
COMPILER:PROCESS-FORMS-FROM-STREAM:  (P.C. = 117)
COMPILER:COMPILE-FROM-STREAM:  (P.C. = 237)
ZWEI:COMPILE-INTERVAL:  (P.C. = 142)
ZWEI:COMPILE-PRINT-INTERVAL:  (P.C. = 121)
ZWEI:COMPILE-DEFINITION-INTERNAL:  (P.C. = 100)
ZWEI:COM-COMPILE-REGION:  (P.C. = 5)
ZWEI:COMMAND-EXECUTE:  (P.C. = 57)
ZWEI:PROCESS-COMMAND-CHAR:  (P.C. = 14)
(:METHOD ZWEI:EDITOR :EDIT):  (P.C. = 233)
(:METHOD ZWEI:TOP-LEVEL-EDITOR :COMBINED :EDIT):  (P.C. = 60)
ZWEI:ZMACS-WINDOW-TOP-LEVEL:  (P.C. = 51)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:50:25-EDT,1581;000000000000  
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 09:50-EDT
Received: from SCRC-STONY-BROOK by ZERMATT via INTERNET with SMTP id 11807; 11 Sep 85 09:48:05-EDT
Received: from YAMASKA.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 310804; Wed 11-Sep-85 09:46:41-EDT
Date: Wed, 11 Sep 85 09:49 EDT
From: Mark A. Bell <mbell@SCRC-QUABBIN.ARPA>
Subject: Compiler problems
To: RZ@MIT-ZERMATT.ARPA, BUG-LISPM@MIT-ZERMATT.ARPA
In-Reply-To: <850910233118.5.RZ@ZERMATT>
Message-ID: <850911094947.4.MBELL@YAMASKA.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 23:31 EDT
    From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
    Imagen Spooler 5.1, Experimental Schema 96.19,
    microcode TMC5-IO4-MIC 322, Network-Security patch, Server-Finger patch,
    File system updater, on Zermatt:

    I was compiling the following method when this happened.

    (defmethod (protocol :has-operation?) (op)
      (check-arg op (typep op 'operation) "an operation")
      (block has-protocol?
	(send self :map-over-protocol
	      (lambda (protocol)
		(let ((ops (mem #'operation-equal op (send protocol :operations))))
		  (when ops
		    (return-from has-protocol? (first ops))))))))

    >>Error: Internal compiler error - couldn't find pop-vars
    While in the function COMPILER:CAPTURE-BINDINGS  COMPILER:CAPTURE-INDIVIDUAL-BINDINGS  COMPILER:DETERMINE-LEXICAL-RESIDENCE

	...
Thank you for the bug report.  This is fixed in an upcoming release.

22-Oct-85 23:50:25-EDT,1579;000000000000    
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 10:00-EDT
Received: from SCRC-STONY-BROOK by ZERMATT via INTERNET with SMTP id 11810; 11 Sep 85 09:58:09-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 310808; Wed 11-Sep-85 09:54:38-EDT
Date: Wed, 11 Sep 85 09:57 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: Compiler problems
To: RZ@MIT-ZERMATT.ARPA, BUG-LISPM@MIT-ZERMATT.ARPA
cc: Bug-Compiler@SCRC-QUABBIN.ARPA
In-Reply-To: <850910233118.5.RZ@ZERMATT>
Message-ID: <850911095738.9.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 23:31 EDT
    From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
    Imagen Spooler 5.1, Experimental Schema 96.19,
    microcode TMC5-IO4-MIC 322, Network-Security patch, Server-Finger patch,
    File system updater, on Zermatt:

    I was compiling the following method when this happened.

    (defmethod (protocol :has-operation?) (op)
      (check-arg op (typep op 'operation) "an operation")
      (block has-protocol?
	(send self :map-over-protocol
	      (lambda (protocol)
		(let ((ops (mem #'operation-equal op (send protocol :operations))))
		  (when ops
		    (return-from has-protocol? (first ops))))))))

    >>Error: Internal compiler error - couldn't find pop-vars
    While in the function COMPILER:CAPTURE-BINDINGS  COMPILER:CAPTURE-INDIVIDUAL-BINDINGS  COMPILER:DETERMINE-LEXICAL-RESIDENCE

This works in 6.1.  Thanks for your report.

22-Oct-85 23:50:25-EDT,1728;000000000000
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 10:02-EDT
Received: from SCRC-STONY-BROOK by ZERMATT via INTERNET with SMTP id 11811; 11 Sep 85 10:00:21-EDT
Received: from THAMES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 310809; Wed 11-Sep-85 09:56:42-EDT
Date: Wed, 11 Sep 85 09:59 EDT
From: Scott McKay <SWM@SCRC-QUABBIN.ARPA>
Subject: Another compiler bug
To: RZ@MIT-ZERMATT.ARPA, Bug-Compiler@SCRC-QUABBIN.ARPA
cc: BUG-LISPM@MIT-ZERMATT.ARPA
In-Reply-To: <850910234217.7.RZ@ZERMATT>
Message-ID: <850911095946.0.SWM@THAMES.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 23:42 EDT
    From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, MLSite 7.2, Mailer 43.0,
    Imagen Spooler 5.1, Experimental Schema 96.19,
    microcode TMC5-IO4-MIC 322, Network-Security patch, Server-Finger patch,
    File system updater, on Zermatt:

    I tried another version of the same function, trying to get around the
    compiler bug mentioned previously and got the following.  Deleting the 
    check-arg form causes the compiler to succeed.

    (defmethod (protocol :has-operation?) (op)
      (block has-protocol?
	(check-arg op (typep op 'operation) "an operation")
	(send self :map-over-protocol
	      (lambda (protocol)
		(dolist (operation (send protocol :operations))
		  (when (operation-equal op operation)
		    (return-from has-protocol? op)))))))

    >>Error: #<Inst Tag-2865.:> was flushed by phase 2 but is still referenced.
    While in the function COMPILER:CEMENT-INTERVAL  COMPILER:RUN-PHASE-2  COMPILER:COMPILE-DEFINITION-1

Thanks for your report, again.

This still happens in 6.1

22-Oct-85 23:50:26-EDT,1556;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 11:05-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 11 Sep 85 11:02:57 EDT
Received: from TURKEY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 310980; Wed 11-Sep-85 11:01:34-EDT
Date: Wed, 11 Sep 85 11:05 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: lisp:get-macro-character bug
To: JAR@MIT-MC.ARPA, BUG-LISPM%MIT-OZ@MIT-MC.ARPA
In-Reply-To: <850903173358.1.JAR@JANIS>
Message-ID: <850911110502.6.GREENWALD@TURKEY.SCRC.Symbolics.COM>

    Date: Tue, 3 Sep 85 17:33 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.5,
    microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

    Is the (documented) bug in the Common Lisp GET-MACRO-CHARACTER function,
    whereby e.g. (GET-MACRO-CHARACTER #\') returns NIL instead of a
    function, going to be fixed?  I have an application which requires this
    to work correctly.

    Jonathan Rees

I'm not certain, but here's what I think.  (Anyone, please correct me if
I am wrong.)

In release 7 (GET-MACRO-CHARACTER <char>) will work - but only for those
characters that actually are macro characters (predefined macro
characters are listed on pg. 26 of Ref. Guide to Symbolics Lisp).  CL
defines #\(, #\), and #\" to be macro characters also.  This is not true
in the Symbolics implementation, and therefore they will continue to
return NIL.

This is an incompatible difference between SCL and CL.

22-Oct-85 23:50:26-EDT,1768;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 11:16-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 11 Sep 85 11:13:46 EDT
Received: from TURKEY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 311020; Wed 11-Sep-85 11:07:44-EDT
Date: Wed, 11 Sep 85 11:11 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: (get-dispatch-macro-character #\# #\#) => error
To: JAR@MIT-MC.ARPA, BUG-LISPM%OZ@MIT-MC.ARPA
In-Reply-To: <850910130854.2.JAR@APIARY-7>
Message-ID: <850911111116.7.GREENWALD@TURKEY.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 13:08 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.6,
    Experimental Apiary: The Actor Computing System 1.0,
    Experimental Traveler: The Apiary Observatory 1.0,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-7:

    [in Symbolics Common Lisp]

    (get-dispatch-macro-character #\# #\#)

    >>Error: Can't return value of built-in # macro function
    While in the function GET-DISPATCH-MACRO-CHARACTER  SI:*EVAL  (:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0)

This was an "undocumented incompatible difference" :-) between SCL and
CL.  Unfortunately, GET-DISPATCH-MACRO-CHARACTER only returns the
function for dispatch macros defined by SET-DISPATCH-MACRO-CHARACTER.
No builtin macros were defined using this facility.  

This will be fixed in release 7.

    GET-DISPATCH-MACRO-CHARACTER:  (P.C. = 46)
       Arg 0 (DISP-CHAR): #\#
       Local 0 (DISP-CHAR): 35
       Arg 1 (SUB-CHAR): #\#
       Local 1 (SUB-CHAR): 35
       --Defaulted args:--
       Arg 2 (A-READTABLE): #<READTABLE 120362317>
       Local 3 (ENTRY): SI:XR-CL-##-MACRO




22-Oct-85 23:50:26-EDT,1183;000000000000
Received: from MIT-ZERMATT.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 11:21-EDT
Date: Wed, 11 Sep 85 11:19 EDT
From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>
Subject: Compiler problems
To: mbell@SCRC-QUABBIN.ARPA, BUG-LISPM@MIT-ZERMATT.ARPA
In-Reply-To: <850911094947.4.MBELL@YAMASKA.SCRC.Symbolics.COM>,
             <850911094947.4.MBELL@YAMASKA.SCRC.Symbolics.COM>
Message-ID: <850911111915.8.RZ@ZERMATT>

    Date: Wed, 11 Sep 85 09:49 EDT
    From: Mark A. Bell <mbell@SCRC-QUABBIN.ARPA>

	Date: Tue, 10 Sep 85 23:31 EDT
	From: Richard E. Zippel <RZ@MIT-ZERMATT.ARPA>

	    ...
    Thank you for the bug report.  This is fixed in an upcoming release.


    Date: Wed, 11 Sep 85 09:49 EDT
    From: Mark A. Bell <mbell@SCRC-QUABBIN.ARPA>

	    ...
    Thank you for the bug report.  This is fixed in an upcoming release.

I think it would nice if when you send a response like this you could be
a little more precise about when the bug might be fixed. i.e.
(a) Fixed in 6.1
(b) Probably fixed before 7.0
(c) Probably fixed in 7.0

or something similar.  On these reports, SWM indicated the ``upcoming
release'' is 6.1.  Thanks for the quick response.
22-Oct-85 23:50:27-EDT,1267;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 11:37-EDT
Date: Wed, 11 Sep 85 11:34:47 EDT
From: Jonathan A Rees <JAR@MIT-MC.ARPA>
Subject:  lisp:get-macro-character bug
To: Greenwald@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM@MIT-OZ
In-reply-to: Msg of Wed 11 Sep 85 11:05 EDT from Michael Greenwald <Greenwald at SCRC-STONY-BROOK.ARPA>
Message-ID: <[MIT-MC.ARPA].641142.850911.JAR>

    Date: Wed, 11 Sep 85 11:05 EDT
    From: Michael Greenwald <Greenwald at SCRC-STONY-BROOK.ARPA>

    In release 7 (GET-MACRO-CHARACTER <char>) will work - but only for those
    characters that actually are macro characters (predefined macro
    characters are listed on pg. 26 of Ref. Guide to Symbolics Lisp).  CL
    defines #\(, #\), and #\" to be macro characters also.  This is not true
    in the Symbolics implementation, and therefore they will continue to
    return NIL.

    This is an incompatible difference between SCL and CL.

I don't see any reason why this can't be made to work.  Just make
GET-MACRO-CHARACTER return a function which invokes the appropriate
internal function inside the reader (the list reader, comment reader, or
whatever).  You should reserve incompatibilities for difficult problems,
not things like this!
22-Oct-85 23:50:27-EDT,1356;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 12:36-EDT
Received: from SCRC-YUKON.ARPA by MIT-REAGAN via INTERNET with SMTP id 7907; 11 Sep 85 12:35:35-EDT
Received: from NEPONSET.SCRC.Symbolics.COM by SCRC-YUKON.ARPA via CHAOS with CHAOS-MAIL id 151333; Wed 11-Sep-85 12:34:21-EDT
Date: Wed, 11 Sep 85 12:36 EDT
From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
Subject: making a local host w/namespace-editor
To: David Vinayak Wallace <Gumby@MIT-MC.ARPA>, BUG-LISPM@OZ.mit
In-Reply-To: <850910222504.2.GUMBY@JANIS>
Message-ID: <850911123605.4.NFEP@NEPONSET.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 22:25 EDT
    From: David Vinayak Wallace <Gumby@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.1,
    microcode TMC5-MIC 319, on Lisp Machine Janis Joplin:

    I wanted to access a host out on the internet a couple of times, so I
    created a host called temp (locally).  The first time I touched temp I
    got the error that it wasn't in the namespace and would be deleted.  It
    then printed out as <deleted>.  I then couldn't refer to the host at
    all!

The bottom line is that making objects locally doesn't work in Release
6.  It was decided that fixing this was too risky (i.e., patching it
might break other things worse if we aren't careful) for the benefit.

22-Oct-85 23:50:28-EDT,1770;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 16:27-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 11 Sep 85 16:24:59 EDT
Received: from TURKEY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 311822; Wed 11-Sep-85 16:24:02-EDT
Date: Wed, 11 Sep 85 16:27 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: GET-DISPATCH-MACRO-CHARACTER ignores its third argument!
To: JAR%MIT-MC@SCRC-STONY-BROOK.ARPA, BUG-LISPM%MIT-OZ@MIT-MC.ARPA
cc: Greenwald@SCRC-STONY-BROOK.ARPA
In-Reply-To: <850910133440.3.JAR@APIARY-7>
Message-ID: <850911162731.4.GREENWALD@TURKEY.SCRC.Symbolics.COM>

    Date: Tue, 10 Sep 85 13:34 EDT
    From: Jonathan A Rees <JAR@MIT-MC>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.6,
    Experimental Apiary: The Actor Computing System 1.0,
    Experimental Traveler: The Apiary Observatory 1.0,
    microcode TMC5-MIC 319, FEP 18, on Lisp Machine Apiary-7:

    [In Symbolics Common Lisp:]

    GET-DISPATCH-MACRO-CHARACTER appears to ignore its third argument, and
    use the value of *READTABLE* instead.

    (let ((cl-readtable *readtable*))
      (eq (let ((*readtable* (copy-readtable nil)))
	    (set-dispatch-macro-character #\# #\?
					  #'(lambda (&rest ignore) '?))
	    (get-dispatch-macro-character #\# #\? cl-readtable))
	  (get-dispatch-macro-character #\# #\? cl-readtable)))

    This evaluates to NIL.  It should evaluate to T.  That is, both
    arguments to EQ ought to be NIL.  The first call to
    GET-DISPATCH-MACRO-CHARACTER is incorrectly returning the function from
    modified readtable, instead of NIL from the unmodified one.

This has been fixed in 6.1, along with several other reported CL
problems.

22-Oct-85 23:50:28-EDT,913;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 11 Sep 85 16:56-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6359; Wed 11-Sep-85 16:56:21-EDT
Date: Wed, 11 Sep 85 16:55 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: NRECONC documentation
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850911165520.3.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

Doing m-sh-D on NRECONC has a reference to the NREVERSE1 "above".  For
"above" kinds of reference, something ought to arrange for the "above"
to be there.

Also, looking in the hardcopy version, the "above" is two pages earlier
with NREVERSE.
22-Oct-85 23:50:28-EDT,1756;000000000000  
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Sep 85 09:13-EDT
Received: from MIT-OZ by MIT-MC.ARPA via Chaosnet; 12 SEP 85  09:10:30 EDT
Received: from MIT-APIARY-9 by MIT-OZ via Chaosnet; 12 Sep 85 09:12-EDT
Date: Thu, 12 Sep 85 09:11 EDT
From: Thomas Reinhardt <Tomr%OZ@MIT-AI.ARPA>
Subject: Network Bug[?] sometime After-Cold[?] Initializations.
To: BUG-LISPM@MIT-MC.ARPA
cc: TomR@MIT-XX.ARPA, Tomr%OZ@MIT-AI.ARPA
Message-ID: <850912091131.1.TOMR@APIARY-9>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 9.6,
microcode TMC5-MIC 319, on Lisp Machine Apiary-9:

This morning, while attempting to re-boot several Apiary Machines, I
encountered the following scenerio:

Sometime after the system-initializations, but before the completion of all
initializations, Lisp-Listener 1 "Heap Locked".  Typing Function-0-S exposed
the background interaction window which said,

>>Error: Could not find item for key 454 in heap #<Process-Locking-Heap...>.
(:METHOD SI:HEAP :DELETE-BY-ITEM)

Arg 0: (SELF) ...  
Arg 1: (SELF-MAPPING-TABLE)...  
Arg 2: (OPERATION) :DELETE-BY-ITEM 
Arg 3: (ITEM) 454 
Arg 4: (EQUAL-PREDICATE) #<DTP-COMPILED-FUNCTION (:INTERNAL
                                                  SI:REMOVE-TIMER-FROM-QUEUE-ENTRY 0)...>

A backtrace showed:
(SI:REMOVE-TIMER-QUEUE-ENTRY 454)
(#<IP-PROTOCOL...> :DISABLE)
(#<INTERNET-NETWORK INTERNET 1400023> :DISABLE)
(#<INTERNET-NETWORK INTERNET 1400023> :RESET)
(SEND #<INTERNET-NETWORK INTERNET 1400023> :RESET)
...
Some stuff followed but was too tedious to record. Basically, it indicated
that we were running some Tcp processing...I'm assuming this was an
initialization list, though I'm having a difficult time finding it.

Cheers,

TOMR
22-Oct-85 23:50:28-EDT,670;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 12 Sep 85 09:56-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6367; 12 Sep 85 09:56:12-EDT
Received: from MENOTOMY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 312341; Thu 12-Sep-85 09:52:30-EDT
Date: Thu, 12 Sep 85 09:55 EDT
From: rom@SCRC-YUKON.ARPA
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Subject: NRECONC documentation
References: <850911165520.3.CYPHER@YOGI.MIT>
Message-ID: <850912095531.2.ROM@MENOTOMY.SCRC.Symbolics.COM>

[The referenced message has been redirected:
    bug-lispm has been removed;
    bug-doc has been added.]

22-Oct-85 23:50:29-EDT,7071;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 12 Sep 85 12:10-EDT
Date: Thu, 12 Sep 85 12:09 EDT
From: CJL@OZ
Sender: File-Server@MIT-REAGAN
Subject: disk ECC errors - What to do?
To: BUG-LISPM@OZ
Message-ID: <850912120900.2.FILE-SERVER@MIT-REAGAN>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, Mailer 43.0, AISite 9.6,
microcode TMC5-MIC 319, Network-Security patch,
Update-Internet-Namespace patch, Server-Finger patch,
Inquir-update patch, Rodent Free Namespace Editor, on Lisp Machine Ronald Reagan:

I consistently get ECC errors on this part of the disk. How do I fix
this? Can I BAT out sectors from lisp? Or do I have to make a new IFS
tape?

>>Error: %DISK-ERROR-ECC during a %DCW-READ32 on unit 1., cyl 238., surf 12., sec 1.,
           Fatal ECC error,
           1. pending transfer associated with this disk event aborted.
         Word 21144 of file data, record #o37425 of partition 1
         (File partition in FEP1:>lmfs.file.1)
         For B:>sys>site>MIT-Hosts.text.813
While in the function (:METHOD LMFS:LMFS-OPENING-MIXIN :ESTABLISH-ADDRESSOR)  (:METHOD LMFS:LMFS-OPENING-MIXIN :NEXT-INPUT-BUFFER)  (:METHOD SI:BASIC-BUFFERED-INPUT-STREAM :SETUP-NEXT-INPUT-BUFFER)

(:METHOD LMFS:LMFS-OPENING-MIXIN :ESTABLISH-ADDRESSOR):  (P.C. = 450)
   Arg 0 (SELF): #<LMFS-CHAR-INPUT-OPENING "B:>sys>site>MIT-Hosts.text" 20740341>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor LMFS:LMFS-OPENING-MIXIN -- 20. IV's, 0. FL's 142715457>
   Arg 2 (OPERATION): :ESTABLISH-ADDRESSOR
   Arg 3 (FOR-OUTPUT): NIL
   Local 4: #<FILE-DESC 20740600 MIT-Hosts.text.813>
   Local 5 (SAVED-ADDRESSOR): NIL
   Local 6: 281728.
   Local 7: 284.
   Local 8: 8804.
   Local 9: 31.
   Local 10: 8804.
   Local 11: 281728.
   Local 12: 35216.
   Local 13: 0.
   Local 14: 9088.
   Local 15: 290816.
   Local 16: 36352.
   Local 17: 36352.
   Local 18: 1136.
   Local 19 (.LMFS-ERROR.): #<LMFS-DATA-ERROR 42034651>

(:METHOD LMFS:LMFS-OPENING-MIXIN :NEXT-INPUT-BUFFER):  (P.C. = 23)
   Arg 0 (SELF): #<LMFS-CHAR-INPUT-OPENING "B:>sys>site>MIT-Hosts.text" 20740341>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor LMFS:LMFS-OPENING-MIXIN -- 20. IV's, 0. FL's 142715457>
   Arg 2 (OPERATION): :NEXT-INPUT-BUFFER
   Rest arg (IGNORE): (NIL)

(:METHOD SI:BASIC-BUFFERED-INPUT-STREAM :SETUP-NEXT-INPUT-BUFFER):  (P.C. = 12)
   Arg 0 (SELF): #<LMFS-CHAR-INPUT-OPENING "B:>sys>site>MIT-Hosts.text" 20740341>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SI:BASIC-BUFFERED-INPUT-STREAM -- 3. IV's, 0. FL's 142715475>
   Arg 2 (OPERATION): :SETUP-NEXT-INPUT-BUFFER
   Arg 3 (NO-HANG-P): NIL
   Arg 4 (EOF): NIL

(:METHOD LMFS:LMFS-CHAR-INPUT-OPENING :COMBINED :SETUP-NEXT-INPUT-BUFFER):  (P.C. = 11)
   Arg 0 (SELF): #<LMFS-CHAR-INPUT-OPENING "B:>sys>site>MIT-Hosts.text" 20740341>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor LMFS:LMFS-CHAR-INPUT-OPENING -- 4. IV's, 6. FL's 142715520>
   Arg 2 (.OPERATION.): :SETUP-NEXT-INPUT-BUFFER
   Rest arg (.DAEMON-CALLER-ARGS.): (NIL NIL)

(:METHOD SI:BUFFERED-LINE-INPUT-MIXIN :LINE-IN):  (P.C. = 17)
   Arg 0 (SELF): #<LMFS-CHAR-INPUT-OPENING "B:>sys>site>MIT-Hosts.text" 20740341>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SI:BUFFERED-LINE-INPUT-MIXIN -- 3. IV's, 0. FL's 142715541>
   Arg 2 (OPERATION): :LINE-IN
   --Defaulted args:--
   Arg 3 (LEADER): NIL

NETI:COPY-CLASS-FILE-EXCEPT-FOR-RECORD:  (P.C. = 66)
   Arg 0 (NAMESPACE): #<NAMESPACE MIT 56300233>
   Arg 1 (OBJECT): #<LISPM-HOST RTS-6 56600157>
   Arg 2 (CONTINUATION): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD NETI:LOCAL-NAMESPACE-ACCESS-PATH :UPDATE-OBJECT) 0.) 22103376>
   Arg 3 (AUTHOR): "File-Server"

(:METHOD NETI:LOCAL-NAMESPACE-ACCESS-PATH :UPDATE-OBJECT):  (P.C. = 12)
   Arg 0 (SELF): #<LOCAL-NAMESPACE-ACCESS-PATH Namespace Lock REAGAN 17746356>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:LOCAL-NAMESPACE-ACCESS-PATH -- 0. IV's, 1. FL's 105134411>
   Arg 2 (OPERATION): :UPDATE-OBJECT
   Arg 3 (NAMESPACE): #<NAMESPACE MIT 56300233>
   Arg 4 (OBJECT): #<LISPM-HOST RTS-6 56600157>
   Arg 5 (ON-BEHALF-OF): "File-Server"

(:INTERNAL (:METHOD NETI:LOCAL-NAMESPACE-ACCESS-PATH :COMBINED :UPDATE-OBJECT) 0.):  (P.C. = 10)
   Arg 0 (SELF): #<LOCAL-NAMESPACE-ACCESS-PATH Namespace Lock REAGAN 17746356>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:LOCAL-NAMESPACE-ACCESS-PATH -- 0. IV's, 1. FL's 105134411>
   Arg 2 (.OPERATION.): :UPDATE-OBJECT
   Rest arg (.DAEMON-CALLER-ARGS.): (#<NAMESPACE MIT 56300233> #<LISPM-HOST RTS-6 56600157> "File-Server")

(:METHOD NETI:NAMESPACE-ACCESS-PATH :WHOPPER :UPDATE-OBJECT):  (P.C. = 42)
   Arg 0 (SELF): #<LOCAL-NAMESPACE-ACCESS-PATH Namespace Lock REAGAN 17746356>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:NAMESPACE-ACCESS-PATH -- 3. IV's, 0. FL's 105134416>
   Arg 2 (.WHOPPER-CONTINUATION.): #<DTP-COMPILED-FUNCTION (:INTERNAL (:METHOD NETI:LOCAL-NAMESPACE-ACCESS-PATH :COMBINED :UPDATE-OBJECT) 0.) 22103425>
   Arg 3 (.OLD-SELF-MAPPING-TABLE.): #<Map to flavor NETI:LOCAL-NAMESPACE-ACCESS-PATH -- 0. IV's, 1. FL's 105134411>
   Arg 4 (.OPERATION.): :UPDATE-OBJECT
   Arg 5 (NAMESPACE): #<NAMESPACE MIT 56300233>
   Arg 6 (OBJECT): #<LISPM-HOST RTS-6 56600157>
   Arg 7 (ON-BEHALF-OF): "File-Server"

(:METHOD NETI:LOCAL-NAMESPACE-ACCESS-PATH :COMBINED :UPDATE-OBJECT):  (P.C. = 13)
   Arg 0 (SELF): #<LOCAL-NAMESPACE-ACCESS-PATH Namespace Lock REAGAN 17746356>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:LOCAL-NAMESPACE-ACCESS-PATH -- 0. IV's, 1. FL's 105134411>
   Arg 2 (.OPERATION.): :UPDATE-OBJECT
   Rest arg (.DAEMON-CALLER-ARGS.): (#<NAMESPACE MIT 56300233> #<LISPM-HOST RTS-6 56600157> "File-Server")

NETI:UPDATE-OBJECT-THROUGH-NETWORK:  (P.C. = 55)
   Arg 0 (NAMESPACE): #<NAMESPACE MIT 56300233>
   Arg 1 (OBJECT): #<LISPM-HOST RTS-6 56600157>

NET:UPDATE-OBJECT-PERMANENTLY:  (P.C. = 34)
   Arg 0 (CLASS): :HOST
   Arg 1 (NAMESPACE): #<NAMESPACE MIT 56300233>
   Arg 2 (NAME): #<NAME MIT|RTS-6 56600126>
   Arg 3 (PROPERTY-LIST): (:SYSTEM-TYPE :LISPM :SITE #<SITE ML 56350411> :NICKNAME (#<NAME MIT|MIT-RTS-6 56600145> #<NAME MIT|RTS6 56600153>) :SHORT-NAME (#<NAME MIT|RTS-6 56600126>) :MACHINE-TYPE :TI-EXPLORER ...)
   Arg 4 (DONT-UPDATE-FILES): NIL

(:DEFUN-METHOD NETI:PERFORM-COMMAND):  (P.C. = 445)
   Arg 0 (SELF): #<NAMESPACE-EDITOR-FRAME Namespace Editor 1 1540305 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:NAMESPACE-EDITOR-FRAME -- 15. IV's, 13. FL's 122665776>
   Arg 2 (CH): 115.
   Local 2 (CH): 83.

(:METHOD NETI:NAMESPACE-EDITOR-FRAME :TOP-LEVEL):  (P.C. = 121)
   Arg 0 (SELF): #<NAMESPACE-EDITOR-FRAME Namespace Editor 1 1540305 exposed>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor NETI:NAMESPACE-EDITOR-FRAME -- 15. IV's, 13. FL's 122665776>
   Arg 2 (OPERATION): :TOP-LEVEL

NETI:START-NAMESPACE-EDITOR:  (P.C. = 4)
   Arg 0 (WINDOW): #<NAMESPACE-EDITOR-FRAME Namespace Editor 1 1540305 exposed>

SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
   --Defaulted args:--
   Arg 0 (IGNORE): NIL
22-Oct-85 23:50:29-EDT,2140;000000000000   
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Sep 85 16:33-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 12 Sep 85 16:30:29 EDT
Received: from TURKEY.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 312786; Thu 12-Sep-85 16:29:25-EDT
Date: Thu, 12 Sep 85 16:33 EDT
From: Michael Greenwald <Greenwald@SCRC-STONY-BROOK.ARPA>
Subject: lisp:get-macro-character bug
To: JAR@MIT-MC.ARPA, Greenwald@SCRC-STONY-BROOK.ARPA
cc: BUG-LISPM%MIT-OZ@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].641142.850911.JAR>
Message-ID: <850912163306.5.GREENWALD@TURKEY.SCRC.Symbolics.COM>

    Date: Wed, 11 Sep 85 11:34:47 EDT
    From: Jonathan A Rees <JAR@MIT-MC.ARPA>

	Date: Wed, 11 Sep 85 11:05 EDT
	From: Michael Greenwald <Greenwald at SCRC-STONY-BROOK.ARPA>

	In release 7 (GET-MACRO-CHARACTER <char>) will work - but only for those
	characters that actually are macro characters (predefined macro
	characters are listed on pg. 26 of Ref. Guide to Symbolics Lisp).  CL
	defines #\(, #\), and #\" to be macro characters also.  This is not true
	in the Symbolics implementation, and therefore they will continue to
	return NIL.

	This is an incompatible difference between SCL and CL.

    I don't see any reason why this can't be made to work.  Just make
    GET-MACRO-CHARACTER return a function which invokes the appropriate
    internal function inside the reader (the list reader, comment reader, or
    whatever).  You should reserve incompatibilities for difficult problems,
    not things like this!

You are right.  I misspoke.  "therefore they will continue to return
NIL" sounds like something cast in concrete - and a decision not to
change.  

I meant to say, (and should have said), that "I know that the macro
characters other than #\(, #\), and #\" will be accessible through
SET/GET-MACRO-CHARACTER by release 7.  I don't *know* that for #\(, #\),
and #\".  While these three are also easy, and will probably also be
changed in one of the upcoming releases, I can't guarantee it; so for
the time being they will continue to be incompatibly different than CL."

22-Oct-85 23:50:29-EDT,4852;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 12 Sep 85 23:31-EDT
Received: from SCRC-STONY-BROOK.ARPA by MIT-MC.ARPA 12 Sep 85 23:27:38 EDT
Received: from EUPHRATES.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 313041; Thu 12-Sep-85 23:26:38-EDT
Date: Thu, 12 Sep 85 23:29 EDT
From: David A. Moon <Moon@SCRC-STONY-BROOK.ARPA>
Subject: LISP: or GLOBAL: (or ZL:) ?
To: Jonathan A Rees <JAR@MIT-MC.ARPA>
cc: BUG-LISPM@MIT-MC.ARPA
In-Reply-To: <[MIT-MC.ARPA].635878.850906.JAR>
Message-ID: <850912232948.1.MOON@EUPHRATES.SCRC.Symbolics.COM>

    Date: Fri,  6 Sep 85 14:35:02 EDT
    From: Jonathan A Rees <JAR@MIT-MC.ARPA>

	Date: Thu, 5 Sep 85 21:55 EDT
	From: David A. Moon <Moon at SCRC-STONY-BROOK.ARPA>

	Since you bound *package* to a package that has nothing to do with
	the Common Lisp packages, how could the printer know that you were
	"in Common Lisp mode"?

    Au contraire, the package has a lot to do with Common Lisp packages - it
    was created by one of the Common Lisp functions MAKE-PACKAGE or
    IN-PACKAGE.  I don't know how relative names, prefix-names, and all that
    works in the Zetalisp package system, but it would seem easy enough for
    a package to know that it is or isn't a "Common Lisp package," either by
    setting a bit (flag) in the package structure, setting up the relative
    names a-list appropriately, or by some other mechanism.  The flag (or
    whatever) could be not-CL by default, and set to CL by the CL package
    creation functions (independent of the :USE list).

We don't do it this way.  Instead, the property of being a CL package is
inherited from the :USEd package.  I don't like your suggestion, but I'm
having trouble articulating why.  The best I can do is:  the Common Lispness
of a package may not be directly related to the function that creates it.
Suppose a package is created by a programming tool, which is equally capable
of creating Zetalisp and Common Lisp packages.  You probably won't find this
very convincing, but it's the motivation behind the way we currently do things.

In any case, you can use the :relative-names defpackage option (an extension
to Common Lisp) to set up your package so symbols print however you like
when that package is current.

The rest of your message gets back to the other topic, which was the topic
of your original message, namely that if a symbol exists in both Zetalisp and
Common Lisp, and has to be printed with a package prefix, you would prefer
to see the prefix as LISP: rather than ZL: or even CL:.  I can't argue with
that, however I don't know when we'll be able to implement it.  The easiest
way to implement the suggestion would be to chuck Zetalisp.

    Then the printer could check this bit in *PACKAGE* to decide whether to
    use CL names or ZL names when printing package prefixes.  The CL names
    of the CL and GLOBAL packages would be LISP, and I'd be happy.

    There's a small problem with this, since some magic is going on to make
    symbols like GLOBAL:CAR accessible to package that use CL, but not
    symbols like GLOBAL:MEMQ.  When *PACKAGE* is a CL package, and
    GLOBAL:CAR and GLOBAL:MEMQ are inaccessible, then GLOBAL:CAR ought to
    print as LISP:CAR, but GLOBAL:MEMQ mustn't print as LISP:MEMQ.
    But it could print as ZETALISP:MEMQ, or even as LISP::MEMQ (!).

	In the normal case of a package that uses CL or SCL, the printer
	does the right Common Lisp thing.

    If *PACKAGE* uses CL, and LISP:CAR is not accessible (CLtL page 172)
    (e.g. because of a (SHADOW 'LISP:CAR)), then the symbol LISP:CAR prints
    out as ZL:CAR (or sometimes as ZETALISP:CAR - depending on whether
    *PACKAGE* is CL-USER or not! - but that's another story).  Similarly, if
    LISP:ELT is not accessible, then LISP:ELT prints as CL:ELT.  So I won't
    be able to print symbols exported by the LISP package and re-read them
    in a different Common Lisp implementation.  I wouldn't say this is the
    "right Common Lisp thing."

Agreed.  However, it shouldn't be a serious impediment, since you can use
RENAME-PACKAGE to add nicknames to the LISP package in your different Common
Lisp implementation so that you can read in your file.  Or you can use the
:relative-names defpackage option as suggested above, e.g.

(defpackage care-package (:use common-lisp) (:shadow elt)
	    (:relative-names (lisp . common-lisp)))
(let ((*package* (find-package 'care-package)))
  (print 'elt))

Of course this doesn't help with the CAR versus MEMQ problem.  There is no
way to get them to print with different package prefixes, currently.  That's
something we'll have to address eventually, probably when we make Common Lisp
the primary language and relegate Zetalisp to a compatibility feature.

22-Oct-85 23:50:30-EDT,494;000000000000
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 14 Sep 85 01:47-EDT
Date: Sat, 14 Sep 85 01:47 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: why must tv:*finger-arg-alist* contain host objects?
To: BUG-LISPM@OZ
Message-ID: <850914014707.2.GUMBY@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.2,
microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

This means I can't make a ESC-x-F option like ".free@reagan".  I don't
see what this gains you.

Grumble.
22-Oct-85 23:50:31-EDT,659;000000000000
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 14 Sep 85 01:55-EDT
Date: Sat, 14 Sep 85 01:55 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: namespace editor constraints
To: BUG-LISPM@OZ
Message-ID: <850914015507.3.GUMBY@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.2,
microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

Wht does the namespace editor pane specify its internal pane sizes in
absolute terms?  I thought I could re-shape it in order to get more of
the object in question into the display, but no such look.  And making
it too small sent me into the cold-load-stream (which is a bit extreme,
I think).
22-Oct-85 23:50:31-EDT,629;000000000000
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 14 Sep 85 02:36-EDT
Date: Sat, 14 Sep 85 02:36 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: optional argument to :help
To: Bug-Lispm@OZ
Message-ID: <850914023601.4.GUMBY@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.2,
microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

The cp command :Help should take an opional argument which is the
command to explain.  Define-cp-command should take a documentation
argument like most other definer forms.

This all works so well in EMACS (and by tradition, ZWEI).  Why not in
the command frobber?
22-Oct-85 23:50:31-EDT,1185;000000000000   
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 14 Sep 85 03:49-EDT
Date: Sat, 14 Sep 85 03:48 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: time:parse-interval-or-never vs "Twenty"
To: BUG-LISPM@OZ
Message-ID: <850914034838.7.GUMBY@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.2,
microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

This speaks for itself

>>Error: "Twenty" encountered where number expected in time interval spec.
While in the function TIME:BARF  TIME:TIME-INTERVAL-TO-SECONDS  TIME:PARSE-INTERVAL-OR-NEVER

TIME:BARF:  (P.C. = 14)
   Arg 0 (FORMAT-STRING): "~S encountered where number expected in time interval spec."
   Rest arg (FORMAT-ARGS): ("Twenty")

TIME:TIME-INTERVAL-TO-SECONDS:  (P.C. = 37)
   Arg 0 (STRING): "Twenty minutes"

TIME:PARSE-INTERVAL-OR-NEVER:  (P.C. = 27)
   Arg 0 (STRING): "Twenty minutes"
   Local 0 (STRING): "Twenty minutes"
   --Defaulted args:--
   Arg 1 (START): NIL
   Arg 2 (END): NIL

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (TIME:PARSE-INTERVAL-OR-NEVER "Twenty minutes")
   Local 0 (FORM): NIL
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

22-Oct-85 23:50:32-EDT,477;000000000000  
Received: from MIT-JIMI by MIT-OZ via Chaosnet; 14 Sep 85 05:19-EDT
Date: Sat, 14 Sep 85 05:19 EDT
From: David Vinayak Wallace <Gumby@MIT-MC>
Subject: time:read-interval-or-never?
To: BUG-LISPM@OZ
Message-ID: <850914051906.8.GUMBY@JIMI>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, AISite 10.2,
microcode TMC5-MIC 319, on Lisp Machine Jimi Hendrix:

Despite page 365 of the Magnum Opus Symbolicorum, I cannot find the
function TIME:READ-INTERVAL-OR-NEVER anywhere.
22-Oct-85 23:50:32-EDT,1292;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 14 Sep 85 11:55-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6384; Sat 14-Sep-85 11:55:40-EDT
Date: Sat, 14 Sep 85 11:54 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Compiler scoping bug
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850914115440.4.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

Suppose I have the following:

(defun square (n)
  (* n n))

(defun bar (n)
  (+ 1 (square n)))

(defun foo (x)
  (flet ((square (n) (float (* n n))))
    (bar x)))

Then (foo 1) is 2

Now if I change it to

(defun square (n)
  (* n n))

(defsubst bar (n)
  (+ 1 (square n)))

(defun foo (x)
  (flet ((square (n) (float (* n n))))
    (bar x)))

then (foo 1) is 2.0 with compiled code and 2 with interpreted code.  The
documentation claims that a DEFSUBST is equivalent to a DEFUN, except
that there is no function call (and the compiler and interpreter
should be using the same environment rules).
22-Oct-85 23:50:32-EDT,1062;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 14 Sep 85 16:00-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6388; Sat 14-Sep-85 16:01:11-EDT
Date: Sat, 14 Sep 85 16:00 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Minor environment bug
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850914160010.8.CYPHER@YOGI.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

(defun test (x)
  (flet ((x () (* x x)))
    (setf #'x #'(lambda () (* x x x)))
    #'x))

(funcall (test 2)) ==> 4
(x) ==> 8

This could cause problems if someone were trying to do something like

(defun foo (x)
  (flet ((fn1 ...)
	 (fn2 ...)
	 ...
         (fnk ...))
    (loop until done doing
      ...stuff involving fn1 and fn2...
      (rotatef #'fn1 #'fn2 ... #'fnk))))

22-Oct-85 23:50:33-EDT,1654;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 15 Sep 85 19:04-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6397; 15 Sep 85 19:03:52-EDT
Received: from PEACE.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 314012; Sun 15-Sep-85 18:34:14-EDT
Date: Sun, 15 Sep 85 18:37 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Minor environment bug
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850914160010.8.CYPHER@YOGI.MIT>
Message-ID: <850915183745.1.HORNIG@PEACE.SCRC.Symbolics.COM>

    Date: Sat, 14 Sep 85 16:00 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    (defun test (x)
      (flet ((x () (* x x)))
	(setf #'x #'(lambda () (* x x x)))
	#'x))

    (funcall (test 2)) ==> 4
    (x) ==> 8

    This could cause problems if someone were trying to do something like

    (defun foo (x)
      (flet ((fn1 ...)
	     (fn2 ...)
	     ...
	     (fnk ...))
	(loop until done doing
	  ...stuff involving fn1 and fn2...
	  (rotatef #'fn1 #'fn2 ... #'fnk))))

Thank you for this report.  (How is it that everyone finds the same bug
at the same time?)  This problem has been fixed in our development
system and will be distributed in some future release.

22-Oct-85 23:50:33-EDT,1989;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 16 Sep 85 12:05-EDT
Received: from SCRC-STONY-BROOK.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6415; 16 Sep 85 12:03:49-EDT
Received: from PEACE.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 314013; Sun 15-Sep-85 18:35:22-EDT
Date: Sun, 15 Sep 85 18:38 EDT
From: Charles Hornig <Hornig@SCRC-STONY-BROOK.ARPA>
Subject: Compiler scoping bug
To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850914115440.4.CYPHER@YOGI.MIT>
Message-ID: <850915183854.2.HORNIG@PEACE.SCRC.Symbolics.COM>

    Date: Sat, 14 Sep 85 11:54 EDT
    From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
    Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
    Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
    ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-IO4-FPA-MIC 319, on Lisp Machine Yogi:

    Suppose I have the following:

    (defun square (n)
      (* n n))

    (defun bar (n)
      (+ 1 (square n)))

    (defun foo (x)
      (flet ((square (n) (float (* n n))))
	(bar x)))

    Then (foo 1) is 2

    Now if I change it to

    (defun square (n)
      (* n n))

    (defsubst bar (n)
      (+ 1 (square n)))

    (defun foo (x)
      (flet ((square (n) (float (* n n))))
	(bar x)))

    then (foo 1) is 2.0 with compiled code and 2 with interpreted code.  The
    documentation claims that a DEFSUBST is equivalent to a DEFUN, except
    that there is no function call (and the compiler and interpreter
    should be using the same environment rules).

Thank you for this report.  The problem you describe has been fixed in
our development system and will be distributed in some future release.
The fix was to never expand a subst in-line if it has a free reference
to an active lexical function.

22-Oct-85 23:50:33-EDT,1174;000000000000    
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 17 Sep 85 12:10-EDT
Received: from MIT-TWEETY-PIE.ARPA by MIT-MC.ARPA via Chaosnet; 17 SEP 85  12:09:15 EDT
Date: Tuesday, 17 September 1985, 12:09-EDT
From: Webster Dove <dove at MIT-BUGS-BUNNY>
Subject: faster multiplies
To: BUG-LISPM at OZ
Message-ID: <850917120951.2.DOVE@TWEETY-PIE.MIT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0,
microcode TMC5-IO4-FPA-MIC 319, with UTIL, on Lisp Machine Tweety Pie:

Anyone know why the following can't use

BUILTIN *-INTERNAL FP|1

instead of

PUSH-LOCAL FP|1            ;B
BUILTIN *-INTERNAL STACK 

--------
;;; -*- Mode: LISP -*-
(DEFUN TEST ()
  (LET ((A 1.0) (B 1.1))
    (* A B B B)))

TEST:
  0  ENTRY: 0 REQUIRED, 0 OPTIONAL
  1  PUSH-CONSTANT '1.0         ;creating A(FP|0)
  2  PUSH-CONSTANT '1.1         ;creating B(FP|1)
  3  PUSH-LOCAL FP|0            ;A
  4  PUSH-LOCAL FP|1            ;B
  5  BUILTIN *-INTERNAL STACK 
  6  PUSH-LOCAL FP|1            ;B
  7  BUILTIN *-INTERNAL STACK 
 10  PUSH-LOCAL FP|1            ;B
 11  BUILTIN *-INTERNAL STACK 
 12  RETURN-STACK 
--------

P.S.
Forgive me if it is a silly question.
22-Oct-85 23:50:34-EDT,1377;000000000000 
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 17 Sep 85 18:19-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 8148; 17 Sep 85 18:19:21-EDT
Received: from CUYAHOGA.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 315379; Tue 17-Sep-85 18:14:11-EDT
Date: Tue, 17 Sep 85 18:18 EDT
From: Robert A. Cassels <Cassels@TENEX.SCRC.Symbolics.COM>
Subject: faster multiplies
To: dove@MIT-BUGS-BUNNY.ARPA, BUG-LISPM%OZ@MIT-REAGAN.ARPA
In-Reply-To: <850917120951.2.DOVE@TWEETY-PIE.MIT>
Message-ID: <850917181859.0.CASSELS@CUYAHOGA.SCRC.Symbolics.COM>
Reply-To: Cassels@SCRC-STONY-BROOK.ARPA

    Date: Tuesday, 17 September 1985, 12:09-EDT
    From: Webster Dove <dove at MIT-BUGS-BUNNY>

    In Symbolics 3600 Release 6.0, IP-TCP 29.0,
    microcode TMC5-IO4-FPA-MIC 319, with UTIL, on Lisp Machine Tweety Pie:

    Anyone know why the following can't use

    BUILTIN *-INTERNAL FP|1

There is no such instruction on the 3600.  The disassembler prints
things in an orthogonal-looking format only to confuse you.  The
instruction set isn't really orthogonal in that dimension.

    instead of

    PUSH-LOCAL FP|1            ;B
    BUILTIN *-INTERNAL STACK 

Since multiply is necessarily a multi-cycle instruction, the percentage
saved by not doing the single-cycle PUSH-LOCAL would be small.

22-Oct-85 23:50:34-EDT,2803;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 18 Sep 85 01:47-EDT
Received: from MIT-LISPM-9 by MIT-MC.ARPA via Chaosnet; 18 SEP 85  01:46:06 EDT
Date: Wednesday, 18 September 1985, 01:46-EDT
From: Devon S. McCullough <Devon@MIT-MC>
To: BUG-LISPM@MIT-OZ, Devon@MIT-MC

In System 99.27, CADR 4.2, Experimental ZMail 54.4, MIT-Specific 23.0,
Experimental Macsyma 6.1, microcode 320, GC@2, on Lisp Machine Nine:

m-X Occur
croaks when you type
c-H c-F

>>TRAP 14165 (ARGTYP NUMBER PP 0 QIEQL)
The first argument to =, NIL, was of the wrong type.
The function expected a number.
Backtrace from the debugger:

MUST-REDISPLAY (P.C. = 41)

 Arg 0 (WINDOW): #<ZWEI-MINI-BUFFER Zwei Mini Buffer 2 2703174 deexposed>
 Arg 1 (DEGREE): NIL
 Arg 2 (LINE): NIL
 Arg 3 (INDEX): NIL
   --Defaulted args:--
 Arg 4 (NO-NEED-FOR-OTHER-WINDOWS): NIL
Local 0 (W-DEGREE): 0


PROCESS-COMMAND-CHAR (P.C. = 88)

 Arg 0 (CH): #/c-H
Local 0 (VALUE): NIL
Local 1 (LINE): NIL
Local 2 (INDEX): NIL
Local 3: NIL
Local 4 (HOOK): NIL


(:METHOD WINDOW :PROCESS-COMMAND-CHAR) (P.C. = 20)
  (SELF is #<ZWEI-MINI-BUFFER Zwei Mini Buffer 2 2703174 deexposed>)

 Arg 0 (.OPERATION.): :PROCESS-COMMAND-CHAR
 Arg 1 (CH): 10000110


(:METHOD WINDOW :EDIT) (P.C. = 307)
  (SELF is #<ZWEI-MINI-BUFFER Zwei Mini Buffer 2 2703174 deexposed>)

 Arg 0 (.OPERATION.): :EDIT
   --Defaulted args:--
 Arg 1 (IGNORE): NIL
 Arg 2 (*COMTAB*): #<COMTAB NIL 20140776>
 Arg 3 (*MODE-LINE-LIST*): ((*EXTENDED-STRING-SEARCH-BJ-P* "BJ ") (*EXTENDED-STRING-SEARCH-ZJ-P* "ZJ ") (*EXTENDED-STRING-SEARCH-REVERSE-P* "Reverse ") (*EXTENDED-STRING-SEARCH-TOP-LINE-P* "Top line ") ...)
 Arg 4 (TOP-LEVEL-P): NIL
Local 0: ("Return to editor command loop.")
Local 1: ((SYS:ABORT ERROR) ("Return to editor command loop.") T ("Return to editor command loop.") ...)
Local 2 (CH): 10000110


(:INTERNAL (:METHOD ZWEI-WITHOUT-TYPEOUT :COMBINED :EDIT) 0) (P.C. = 51)

 Rest arg (.DAEMON-CALLER-ARGS.): (:EDIT)
Local 1 (.DAEMON-MAPPING-TABLE.): #<ART-16B-5 21424543>


Remainder of stack:

FUNCALL (P.C. = 21)
(:METHOD DISPLAYER :AROUND :EDIT) (P.C. = 25)
(:METHOD ZWEI-WITHOUT-TYPEOUT :COMBINED :EDIT) (P.C. = 39)
EDIT-IN-MINI-BUFFER (P.C. = 216)
GET-EXTENDED-STRING-SEARCH-STRINGS (P.C. = 77)
COM-LIST-MATCHING-LINES (P.C. = 66)
COM-OCCUR (P.C. = 17)
COM-EXTENDED-COMMAND (P.C. = 56)
COMMAND-EXECUTE (P.C. = 92)
PROCESS-COMMAND-CHAR (P.C. = 61)
(:METHOD WINDOW :PROCESS-COMMAND-CHAR) (P.C. = 20)
(:METHOD WINDOW :EDIT) (P.C. = 307)
(:INTERNAL (:METHOD ZMACS-WINDOW :COMBINED :EDIT) 0) (P.C. = 60)
FUNCALL (P.C. = 21)
(:METHOD DISPLAYER :AROUND :EDIT) (P.C. = 25)
(:METHOD ZMACS-WINDOW :COMBINED :EDIT) (P.C. = 39)
ZMACS-WINDOW-TOP-LEVEL (P.C. = 38)
SI::PROCESS-TOP-LEVEL (P.C. = 115)
22-Oct-85 23:50:34-EDT,5067;000000000000 
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 19 Sep 85 08:09-EDT
Received: from SMOKEY by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6505; Thu 19-Sep-85 08:08:00-EDT
Date: Thu, 19 Sep 85 08:07 EDT
From: Jack Unverferth <sr.jack%MIT-SPEECH@MIT-REAGAN.ARPA>
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850919080756.3.JACK@SMOKEY.MIT>

In Symbolics 3670 Release 6.0, Experimental Versatec 6.1,
Experimental Spire 17.0, IP-TCP 29.0, Zoo 6.14,
microcode TMC5-IO4-FPA-MIC 319, on Jack's Bear:


This is from select layout, the other was from edit layout (sorry)
>>Error: Cannot coerce (NIL) into a string.
While in the function STRING-LENGTH  (:METHOD SPIRE-COMMAND-MENU :BUTTON-DOC)  (:METHOD SPIRE-COMMAND-MENU :RESOLVE-ITEM-LIST)

STRING-LENGTH:  (P.C. = 51)
   Arg 0 (STRING): (NIL)
   Local 1 (TEM): NIL

(:METHOD SPIRE-COMMAND-MENU :BUTTON-DOC):  (P.C. = 57)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU NIL 1601207 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (OPERATION): :BUTTON-DOC
   Arg 3 (BUTTON-LIST): ((:LEFT :COMMAND COM-CREATE-DISPLAY) (:MIDDLE :COMMAND COM-CREATE-ANY-WINDOW))

(:METHOD SPIRE-COMMAND-MENU :RESOLVE-ITEM-LIST):  (P.C. = 165)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU NIL 1601207 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (OPERATION): :RESOLVE-ITEM-LIST
   Arg 3 (ITEM-LIST): (("Redisplay" :COMMAND COM-REDISPLAY :DOCUMENTATION "Redisplay the screen in case it has gotten screwed up somehow") ("Edit Display Options" :COMMAND COM-EDIT-DISPLAY-OPTIONS :DOCUMENTATION "Click any button, then select window to alter its display options (e.g. x-scale).") ("Edit Overlay" :COMMAND COM-EDIT-OVERLAY :DOCUMENTATION "Modify the overlay(s). Select display to edit its overlay(s).") ("Create Display" :BUTTONS ((:LEFT :COMMAND COM-CREATE-DISPLAY) (:MIDDLE :COMMAND COM-CREATE-ANY-WINDOW))) (COM-KILL-DISPLAY) (COM-MOVE-DISPLAY) (COM-RESHAPE-DISPLAY) (COM-SAVE-LAYOUT) (COM-CLONE-LAYOUT) (COM-RENAME-LAYOUT) ...)

(:METHOD SPIRE-COMMAND-MENU :BEFORE :INIT):  (P.C. = 21)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU NIL 1601207 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (OPERATION): :INIT
   Arg 3 (PLIST): #<DTP-LOCATIVE 16740625>

(:METHOD SPIRE-COMMAND-MENU :COMBINED :INIT):  (P.C. = 13)  (from SPIRE: COMMAND; MENU)
   Arg 0 (SELF): #<SPIRE-COMMAND-MENU NIL 1601207 deactivated>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-COMMAND-MENU -- 3. IV's, 20. FL's 1120541>
   Arg 2 (.OPERATION.): :INIT
   Rest arg (.DAEMON-CALLER-ARGS.): (#<DTP-LOCATIVE 16740625>)

Tv:MAKE-WINDOW:  (P.C. = 66)
   Arg 0 (FLAVOR-NAME): SPIRE-COMMAND-MENU
   Rest arg (OPTIONS): (:LABEL (:FONT FONTS:HL12I :STRING "Edit Layout") :ITEM-LIST-POINTER (EVAL *EDIT-LAYOUT-MENU-ITEM-LIST*))
   Local 1 (OPTIONS): (:TAB-NCHARS 8 :BLINKER-FLAVOR TV:HOLLOW-RECTANGULAR-BLINKER :DEFAULT-FONT #<FONT HL12B 120536336> :SUPERIOR #<MAIN-SCREEN Main Screen 43200000 exposed> :SCREEN #<MAIN-SCREEN Main Screen 43200000 exposed> ...)

(LAMBDA NIL (TV:MAKE-WINDOW (QUOTE SPIRE-COMMAND-MENU) :LABEL (QUOTE **) :ITEM-LIST-POINTER ...)):
   --Extraneous args:--
   Arg 0: NIL

(:METHOD SPIRE-MACROS:LAZY-FLAVOR :UNCLAIMED-MESSAGE):  (P.C. = 4)  (from SPIRE: SPIRE-MACROS; MACROS)
   Arg 0 (SELF): #<LAZY-FLAVOR 14172410>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SPIRE-MACROS:LAZY-FLAVOR -- 1. IV's, 0. FL's 1100077>
   Arg 2 (OPERATION): :UNCLAIMED-MESSAGE
   Rest arg (ARGS): (:CHOOSE)

Rest of stack:
SI:FLAVOR-UNCLAIMED-MESSAGE:  (P.C. = 20)
SI:INSTANCE-HASH-UNCLAIMED-MESSAGE:  (P.C. = 35)
EDIT-LAYOUT:  (P.C. = 33)  (from GOLDY:>s>spire-17>display>layout)
COMMAND-EXECUTE:  (P.C. = 147)  (from GOLDY:>JACK>spire-17-fixes)
(:METHOD SPIRE-COMMAND-MENU :WHOPPER :EXECUTE):  (P.C. = 24)  (from SPIRE: COMMAND; MENU)
(:METHOD SPIRE-COMMAND-MENU :COMBINED :EXECUTE):  (P.C. = 12)  (from SPIRE: COMMAND; MENU)
(:METHOD TV:BASIC-MENU :CHOOSE):  (P.C. = 26)
(:METHOD SPIRE-COMMAND-MENU :COMBINED :CHOOSE):  (P.C. = 42)  (from SPIRE: COMMAND; MENU)
SPIRE-MENU:  (P.C. = 34)  (from GOLDY:>s>spire-17>display>top-level)
COMMAND-EXECUTE:  (P.C. = 147)  (from GOLDY:>JACK>spire-17-fixes)
(:METHOD TOP-LEVEL-SPIRE :EXECUTE-COMMAND):  (P.C. = 45)  (from GOLDY:>s>spire-17>display>top-level)
(:METHOD TOP-LEVEL-SPIRE :MOUSE-COMMAND):  (P.C. = 6)  (from GOLDY:>s>spire-17>display>top-level)
(:METHOD TOP-LEVEL-SPIRE :READ-AND-HANDLE-COMMAND):  (P.C. = 27)  (from GOLDY:>s>spire-17>display>top-level)
(:METHOD TOP-LEVEL-SPIRE :COMMAND-LOOP):  (P.C. = 223)  (from GOLDY:>s>spire-17>display>top-level)
(:METHOD TOP-LEVEL-SPIRE :INSPIRE):  (P.C. = 136)  (from GOLDY:>s>spire-17>display>top-level)
SPIRE-TOP-LEVEL:  (P.C. = 31)  (from GOLDY:>s>spire-17>display>top-level)
SI:PROCESS-TOP-LEVEL:  (P.C. = 54)
22-Oct-85 23:50:35-EDT,435;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 19 Sep 85 08:15-EDT
Received: from SMOKEY by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6506; Thu 19-Sep-85 08:13:50-EDT
Date: Thu, 19 Sep 85 08:13 EDT
From: Jack Unverferth <sr.jack%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Sorry About all that Spire garbage
To: bug-lispm@MIT-GOLDILOCKS.ARPA
Message-ID: <850919081344.4.JACK@SMOKEY.MIT>

I sent the wrong report...

jack
22-Oct-85 23:50:35-EDT,988;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Sep 85 16:07-EDT
Received: from uw-beaver.arpa by MIT-MC.ARPA 19 Sep 85 16:02:28 EDT
Received: by uw-beaver.arpa (4.42/4.1+)
	id AA16016; Thu, 19 Sep 85 13:05:35 PDT
Return-Path: <ssc-vax!gml@uw-beaver.arpa>
Received: by ssc-vax (4.12/4.7)
	id AA16887; Thu, 19 Sep 85 12:34:44 pdt
Date: Thu, 19 Sep 85 12:34:44 pdt
From: ssc-vax!gml@uw-beaver.arpa (Gregory M Lobdell)
Message-Id: <8509191934.AA16887@ssc-vax>
To: uw-beaver!bug-lispm%mit-oz@mit-mc.arpa
Subject: Termcaps for lispm-unix connections

I know, this isn't really a lispm bug but here goes.

We are running 36xx's here with a vax/unix file server (actually
ultrix) and want to use the terminal facility of the Lispms to login
directly to the vax.  This means that the vax needs to understand the
lispm terminal.  I am told that the right thing is a termcaps program.
Does anyone know where I can obtain such a thing?

Thanks in advance,
Gregg Lobdell
22-Oct-85 23:50:35-EDT,498;000000000000 
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 19 Sep 85 20:44-EDT
Received: from MIT-LENNON by MIT-MC.ARPA via Chaosnet; 19 SEP 85  20:41:32 EDT
Date: Thu, 19 Sep 85 20:44 EDT
From: David Vinayak Wallace <Gumby@MIT-MC.ARPA>
Subject: Termcaps for lispm-unix connections
To: Gregory M Lobdell <ssc-vax!gml@UW-BEAVER.ARPA>
cc: bug-lispm@MIT-MC.ARPA
In-Reply-To: <8509191934.AA16887@ssc-vax>
Message-ID: <850919204414.2.GUMBY@LENNON>

Why don't you just put up a supdup server instead?
22-Oct-85 23:50:36-EDT,2118;000000000000
Received: from MIT-SPEECH by MIT-OZ via Chaosnet; 20 Sep 85 08:15-EDT
Date: 20 Sep 1985  08:15 EDT (Fri)
Message-ID: <SR.EHPYC.12144741190.BABYL@MIT-SPEECH>
From: Scott Cyphers <SR.EHPYC@MIT-SPEECH>
To:   bug-lispm@oz
Subject: [MLY: [Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>: Forwarding instance variable value cells]]

Goldy knows only what Reagan tells it about Quabbin.  Has MIT bought
Symbolics?

Date: Thursday, 19 September 1985  18:21-EDT
From: "Your Friendly(*) Marketing Representative" <MLY at MIT-OZ>
To:   postmaster at MIT-GOLDILOCKS.ARPA
Re:   [Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>: Forwarding instance variable value cells]

scrc-quabbin.mit ?!
                ---------------

Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 7 Sep 85 12:59-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6322; Sat 7-Sep-85 12:59:17-EDT
Date: Sat, 7 Sep 85 12:59 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: Forwarding instance variable value cells
To: DCP@SCRC-QUABBIN.ARPA, sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA,
    BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850906221218.3.NFEP@NEPONSET.SCRC.Symbolics.COM>
Message-ID: <850907125916.2.CYPHER@YOGI.MIT>

    Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 6 Sep 85 22:12-EDT
    Received: from SCRC-QUABBIN.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6318; 6 Sep 85 22:10:37-EDT
    Received: from WAIKATO.SCRC.Symbolics.COM by SCRC-QUABBIN.ARPA via CHAOS with CHAOS-MAIL id 198963; Fri 6-Sep-85 22:09:19-EDT
    Received: from NEPONSET.SCRC.Symbolics.COM by WAIKATO.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 120089; Fri 6-Sep-85 22:11:45-EDT
    Date: Fri, 6 Sep 85 22:12 EDT
    From: David C. Plummer in disguise <DCP@SCRC-QUABBIN.ARPA>
    Subject: Forwarding instance variable value cells
    To: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>,
	DCP@SCRC-QUABBIN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
    In-Reply-To: <850906201550.9.CYPHER@YOGI.MIT>
    Message-ID: <850906221218.3.NFEP@NEPONSET.SCRC.Symbolics.COM>
22-Oct-85 23:50:36-EDT,1546;000000000000  
Mail-From: CJL created at 20-Sep-85 12:09:56
Date: Fri, 20 Sep 1985  12:09 EDT
Message-ID: <CJL.12144783802.BABYL@MIT-OZ>
From: Chris Lindblad <CJL@MIT-OZ>
To:   Scott Cyphers <SR.EHPYC@MIT-SPEECH>
Cc:   bug-lispm@MIT-OZ
Subject: [MLY: [Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>: Forwarding instance variable value cells]]
In-reply-to: Msg of 20 Sep 1985  08:15-EDT from Scott Cyphers <SR.EHPYC at MIT-SPEECH>

    Date: Friday, 20 September 1985  08:15-EDT
    From: Scott Cyphers <SR.EHPYC at MIT-SPEECH>

    Goldy knows only what Reagan tells it about Quabbin.  Has MIT bought
    Symbolics?

        Received: from SCRC-QUABBIN.MIT by GOLDILOCKS.MIT via INTERNET with SMTP id 6318; 6 Sep 85 22:10:37-EDT

I believe it is bogus that lispms just assume that the internet domain
name for a host is the same as the local namespace for that host.
Consider this scenario:

SCRC-QUABBIN is in the INTERNET namespace, built from the NIC host
table. Some people here at MIT like to refer to Quabbin as Q:, because
they also work at Symbolics. So they create a host object scrc-quabbin
in the MIT namespace that shadows the one in the internet namespace.
Now, whenever the internet namespace is updated from the NIC host table,
the hosts INTERNET|SCRC-QUABBIN in the internet namespace doesn't get
automatically matched with MIT|SCRC-QUABBIN, because there is no site
SCRC in any namespace here.  So I make a site SCRC, with local namespace
MIT, so host merging will work right.

Fine, except for the mailer.
22-Oct-85 23:50:36-EDT,1423;000000000000
Received: from MIT-MC.ARPA by MIT-OZ via Chaosnet; 20 Sep 85 14:29-EDT
Received: from 40700015427 by MIT-MC.ARPA via Chaosnet; 20 SEP 85  14:28:01 EDT
Date: Friday, 20 September 1985, 14:27-EDT
From: Cory Myers <cory at MIT-BUGS-BUNNY>
Subject: Readtables and Packages
To: BUG-LISPM at OZ
Fcc: BUGS-BUNNY: /u0/cory/mbox
Message-ID: <850920142716.1.CORY@DAFFY-DUCK.MIT>

In Symbolics 3670 Release 6.0, IP-TCP 29.0,
microcode TMC5-IO4-FPA-MIC 319, FEP 22, with UTIL, on Lisp Machine Daffy Duck:

I would like to be able to have readtables that depend on the current
package (both the READTABLE and the SI:STANDARD-READTABLE for break
loops).  I know how to set these up for processes (STANDARD-VALUE-LET)
but I would like this behavior to work for editor, compiler, loader,
etc.  For example, I have a package A with a readtable A-READTABLE and a
file A-FILE with a package attribute of A and another package B with a
readtable B-READTABLE and a file B-FILE with a package attribute of B.
When I edit A-FILE, compile it or load it, I want it to use the
A-READTABLE and similar for B-FILE.

I know this looks more like readtables and files rather than readtables
and packages but I tend to organize my work such that all files which use
the same readtable use the same package.  I would like to be able to use
the reader macros associated with a given readtable when I am in the
associated package.
22-Oct-85 23:50:37-EDT,2456;000000000000  
Received: from MIT-REAGAN.ARPA by MIT-OZ via Chaosnet; 20 Sep 85 17:14-EDT
Received: from SCRC-STONY-BROOK by MIT-REAGAN via INTERNET with SMTP id 8227; 20 Sep 85 17:15:38-EDT
Received: from CUYAHOGA.SCRC.Symbolics.COM by SCRC-STONY-BROOK.ARPA via CHAOS with CHAOS-MAIL id 318122; Fri 20-Sep-85 17:12:58-EDT
Date: Fri, 20 Sep 85 17:14 EDT
From: Robert A. Cassels <Cassels@TENEX.SCRC.Symbolics.COM>
Subject: Readtables and Packages
To: cory@MIT-BUGS-BUNNY.ARPA, BUG-LISPM%OZ@MIT-REAGAN.ARPA
In-Reply-To: <850920142716.1.CORY@DAFFY-DUCK.MIT>
Message-ID: <850920171413.2.CASSELS@CUYAHOGA.SCRC.Symbolics.COM>
Reply-To: Cassels@SCRC-STONY-BROOK.ARPA

    Date: Friday, 20 September 1985, 14:27-EDT
    From: Cory Myers <cory at MIT-BUGS-BUNNY>

    In Symbolics 3670 Release 6.0, IP-TCP 29.0,
    microcode TMC5-IO4-FPA-MIC 319, FEP 22, with UTIL, on Lisp Machine Daffy Duck:

    I would like to be able to have readtables that depend on the current
    package (both the READTABLE and the SI:STANDARD-READTABLE for break
    loops).  I know how to set these up for processes (STANDARD-VALUE-LET)
    but I would like this behavior to work for editor, compiler, loader,
    etc.  For example, I have a package A with a readtable A-READTABLE and a
    file A-FILE with a package attribute of A and another package B with a
    readtable B-READTABLE and a file B-FILE with a package attribute of B.
    When I edit A-FILE, compile it or load it, I want it to use the
    A-READTABLE and similar for B-FILE.

    I know this looks more like readtables and files rather than readtables
    and packages but I tend to organize my work such that all files which use
    the same readtable use the same package.  I would like to be able to use
    the reader macros associated with a given readtable when I am in the
    associated package.

The SYNTAX file attribute is the way the system does it:

(DEFUN (:PROPERTY :COMMON-LISP FS:SYNTAX-ATTRIBUTE-HANDLER) ()
  (VALUES (LIST 'READTABLE) (LIST SI:*COMMON-LISP-READTABLE*)))

(DEFUN (:PROPERTY :ZETALISP FS:SYNTAX-ATTRIBUTE-HANDLER) ()
  (VALUES (LIST 'READTABLE) (LIST SI:STANDARD-READTABLE)))

The values returned by the FS:SYNTAX-ATTRIBUTE-HANDLER property are
bound in a PROGV.  So you could bind any special variable this way.

The existence of the handler is the way that values for SYNTAX are
validated, so define the handler before you try to set the syntax.

22-Oct-85 23:50:37-EDT,5218;000000000000
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 21 Sep 85 15:08-EDT
Received: from GRIZZLY by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6611; Sat 21-Sep-85 15:07:03-EDT
Date: Sat, 21 Sep 85 15:06 EDT
From: sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA
Sender: sr.randolph%MIT-SPEECH@MIT-REAGAN.ARPA
Subject: GC/Hash table bug
To: BUG-LISPM@MIT-GOLDILOCKS.ARPA
Message-ID: <850921150654.1.RANDOLPH@GRIZZLY.MIT>

In Symbolics 3600 Release 6.0, IP-TCP 29.0, Spire-Macros 5.1,
Attribute 5.6, Compute 5.4, Audio 4.0, Speech-Attributes 4.3,
Display 6.22, Speech-Layouts 6.4, Prtout 4.0, Versatec 5.1, Spire 16.0,
ZOO 6.14, ZOO-SPIRE 2.3, microcode TMC5-MIC 319, on Lisp Machine Grizzly:

It looks like a dynamic flip (old-loc wasn't in an ephemeral area)
happened during the looping through the hash table, causing the table to
get moved without the place-holding locative getting changed to the new
location.  When the error happened, the GC was waiting to flip (I think
ephemerally).

>>Error: Location given to :NEXT-ELEMENT is outside of the hash table.
While in the function (:METHOD SI:EQ-HASH-TABLE :NEXT-ELEMENT)  (:METHOD EDA:SAMPLE :FORCE)  (:METHOD EDA:SAMPLE :COLUMN-OPERATION)

(:METHOD SI:EQ-HASH-TABLE :NEXT-ELEMENT):  (P.C. = 41)
   Arg 0 (SELF): #<EQ-HASH-TABLE 127710656>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor SI:EQ-HASH-TABLE -- 8. IV's, 0. FL's 104704256>
   Arg 2 (OPERATION): :NEXT-ELEMENT
   Arg 3 (OLD-LOC): #<DTP-LOCATIVE 127724415>
   Local 4 (ARRAY-LOC): #<DTP-LOCATIVE 55736400>
   Local 5 (START-INDEX): 11004942

(:METHOD EDA:SAMPLE :FORCE):  (P.C. = 105)  (from GOLDY:>p>randolph>statistics>experimental>spire-eda-interface)
   Arg 0 (SELF): #<SAMPLE 117707133>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor EDA:SAMPLE -- 2. IV's, 0. FL's 31033524>
   Arg 2 (OPERATION): :FORCE
   Arg 3 (COLUMN-IDS): ("Zero Crossing Rate")

(:METHOD EDA:SAMPLE :COLUMN-OPERATION):  (P.C. = 40)  (from GOLDY:>p>randolph>statistics>experimental>basic-eda-data-structure)
   Arg 0 (SELF): #<SAMPLE 117707133>
   Arg 1 (SELF-MAPPING-TABLE): #<Map to flavor EDA:SAMPLE -- 2. IV's, 0. FL's 31033524>
   Arg 2 (OPERATION): :COLUMN-OPERATION
   Arg 3 (OPERATION): EDA:MAX-IN-ARRAY
   Arg 4 (COLUMN-ID): "Zero Crossing Rate"
   Arg 5 (NEW-COLUMN-ID): "Peak Zero Crossing Rate"
   --Defaulted args:--
   Arg 6 (REMOVE-OLD-COLUMN?): NIL

SEND:  (P.C. = 6)
   Arg 0 (OBJECT): #<SAMPLE 117707133>
   Arg 1 (MESSAGE-NAME): :COLUMN-OPERATION
   Rest arg (ARGUMENTS): (EDA:MAX-IN-ARRAY "Zero Crossing Rate" "Peak Zero Crossing Rate")

SI:*EVAL:  (P.C. = 403)
   Arg 0 (FORM): (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MAX-IN-ARRAY) "Zero Crossing Rate" "Peak Zero Crossing Rate")
   Local 0 (FORM): NIL
   Arg 1 (ENV): NIL
   --Defaulted args:--
   Arg 2 (HOOK): NIL

PROGN:  (P.C. = 13)
   Arg 0 (.FORM.): (PROGN (PARAMETERS UTTS (QUOTE ("Quantization Range" "Minor Regions Broad Transcription" "Zero Crossing Rate"))) (SETQ SAMPLE3 (EDA:MAKE-SPIRE-SAMPLE UTTS NIL :ALL (QUOTE **) (QUOTE **) 200 "Minor Regions Broad Transcription")) (SEND SAMPLE3 :ADD-TOKEN) (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE FIND-UNDERLYING-TRANSCRIPTION-STRING) "Token" "Underlying Transcription-string") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE FIND-UNDERLYING-TRANSCRIPTION) "Token" "Underlying Transcription") (SEND SAMPLE3 :COLUMN-OPERATION (FUNCTION (SI:DIGESTED-LAMBDA ** NIL 2305 262401 NIL ** NIL **)) "Underlying Transcription" "Catagory") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MAX-IN-ARRAY) "Zero Crossing Rate" "Peak Zero Crossing Rate") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MIN-IN-ARRAY) "Quantization Range" "Min Quantization Range") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MAX-IN-ARRAY) "Quantization Range" "Peak Quantization Range") ...)
   Arg 1 (ENV): NIL

SI:*EVAL:  (P.C. = 165)
   Arg 0 (FORM): (PROGN (PARAMETERS UTTS (QUOTE ("Quantization Range" "Minor Regions Broad Transcription" "Zero Crossing Rate"))) (SETQ SAMPLE3 (EDA:MAKE-SPIRE-SAMPLE UTTS NIL :ALL (QUOTE **) (QUOTE **) 200 "Minor Regions Broad Transcription")) (SEND SAMPLE3 :ADD-TOKEN) (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE FIND-UNDERLYING-TRANSCRIPTION-STRING) "Token" "Underlying Transcription-string") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE FIND-UNDERLYING-TRANSCRIPTION) "Token" "Underlying Transcription") (SEND SAMPLE3 :COLUMN-OPERATION (FUNCTION (SI:DIGESTED-LAMBDA ** NIL 2305 262401 NIL ** NIL **)) "Underlying Transcription" "Catagory") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MAX-IN-ARRAY) "Zero Crossing Rate" "Peak Zero Crossing Rate") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MIN-IN-ARRAY) "Quantization Range" "Min Quantization Range") (SEND SAMPLE3 :COLUMN-OPERATION (QUOTE EDA:MAX-IN-ARRAY) "Quantization Range" "Peak Quantization Range") ...)
   --Defaulted args:--
   Arg 1 (ENV): NIL
   Arg 2 (HOOK): NIL

(:INTERNAL SI:LISP-COMMAND-LOOP-INTERNAL 0):  (P.C. = 152)
   Arg 0 (.LEXICAL-ENVIRONMENT-POINTER.): #<DTP-LOCATIVE 500047>

Rest of stack:
TV:WITH-NOTIFICATION-MODE-INTERNAL:  (P.C. = 16)
SI:LISP-COMMAND-LOOP-INTERNAL:  (P.C. = 54)
SI:LISP-COMMAND-LOOP:  (P.C. = 67)
SI:LISP-TOP-LEVEL1:  (P.C. = 5)
SI:LISP-TOP-LEVEL:  (P.C. = 7)
22-Oct-85 23:50:37-EDT,1699;000000000000    
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 21 Sep 85 15:24-EDT
Received: from MIT-SPEECH by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6613; Sat 21-Sep-85 15:23:31-EDT
Received: from GRIZZLY by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6612; Sat 21-Sep-85 15:20:49-EDT
Date: Saturday, 21 September 1985, 15:20-EDT
From: sr.ehpyc at MIT-SPEECH
Sender: sr.randolph at MIT-SPEECH
Subject: Hash table bug
To: bug-lispm at MIT-SPEECH
Message-ID: <850921152048.2.RANDOLPH@GRIZZLY.MIT>

I think this should fix the problem.  I don't see why old-loc was a
locative instead of an index, since it gets converted back into an index
each time anyways.

(DEFMETHOD (EQ-HASH-TABLE :NEXT-ELEMENT) (OLD-LOC)
  (DECLARE (VALUES NEW-LOCATIVE-OR-NIL KEY VALUE))
  (LET* ((ARRAY-LOC (%MAKE-POINTER-OFFSET DTP-LOCATIVE HASH-ARRAY
					  (ARRAY-DATA-OFFSET HASH-ARRAY)))
	 (START-INDEX
	   (COND ((NULL OLD-LOC)		;Initialize on first call
		  ;; Rehash now so that deleting the current element won't
		  ;; disturb the mapping operation
		  (IF ( GC-GENERATION-NUMBER %GC-GENERATION-NUMBER)
		      (SEND SELF ':COPY-HASH-LOCKED HASH-ARRAY SIZE))
		  0)
		 (T (1+ old-loc)))))
    (IF (OR (< START-INDEX 0) ( START-INDEX (ARRAY-LENGTH HASH-ARRAY)))
	(FERROR "Location given to :NEXT-ELEMENT is outside of the hash table."))
    (LOOP FOR I FROM START-INDEX BELOW (ARRAY-LENGTH HASH-ARRAY)
	  FOR LOC = (%MAKE-POINTER-OFFSET DTP-LOCATIVE ARRAY-LOC I)
	  DO (COND ((LDB-TEST (BYTE 1 3) I)	; (ODDP (// I 8))
		    (INCF I 7))
		   ((= (%P-DATA-TYPE LOC) DTP-NULL))
		   (T (RETURN (VALUES i (CAR LOC) (%P-CONTENTS-OFFSET LOC 8)))))
	  FINALLY (RETURN (VALUES NIL NIL NIL)))))
22-Oct-85 23:50:38-EDT,571;000000000000   
Received: from MIT-GOLDILOCKS.ARPA by MIT-OZ via Chaosnet; 21 Sep 85 15:46-EDT
Received: from YOGI by GOLDILOCKS via CHAOS with CHAOS-MAIL id 6614; Sat 21-Sep-85 15:45:28-EDT
Date: Sat, 21 Sep 85 15:46 EDT
From: Scott Cyphers <sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA>
Subject: GC/Hash table bug
To: sr.ehpyc%MIT-SPEECH@MIT-REAGAN.ARPA, BUG-LISPM@MIT-GOLDILOCKS.ARPA
In-Reply-To: <850921150654.1.RANDOLPH@GRIZZLY.MIT>
Message-ID: <850921154608.1.CYPHER@YOGI.MIT>


    It looks like a dynamic flip (old-loc wasn't in an ephemeral area)

I meant region, not area.
