10-Feb-83 18:21:45-EST,508;000000000001
Date: Thursday, 10 February 1983, 18:17-EST
From: Robert P. Krajewski <RpK at MIT-OZ>
Subject: New list
To: LM-DOC-CHANGES at MIT-OZ

LM-DOC-CHANGES is where you should send descriptions of visible changes to
functions and facilities so that, when somebody feels like updating the
documentation, he doesn't have to wade through the code.  Also, some people
who hack the Lisp Machine software for MIT (this means you) are on it.

The archive file is OZ:SRC:<L.DOC>DOC-CHANGES-MAIL.TXT.1

``Bob''
10-Feb-83 22:12:46-EST,839;000000000001
Date: Thursday, 10 February 1983, 22:09-EST
From: Hdt@MIT-OZ
Subject: MIT documentation problems
To: Info-LispM@MIT-OZ
Cc: bug-lmdoc@MIT-OZ


	Users of the MIT LispMachine software are encouraged to report any
errors that they may find in the on- or off-line documentation of the
LispMachine software to BUG-LMDOC@OZ (which points to LM-DOC-CHANGES@OZ).

	Please report any documentation that you find inaccurate or
merely confusing, as well as any suggestions that you have for improving
the overall documentation of the system to the above list.
Your suggestions will be acted upon promptly.

Note: the above applies to all documentation problems other than those
associated with the old and new Lisp Machine Manuals.  Mistakes found
in the manuals should be reported to BUG-LMMAN@OZ.

	Thanks for your cooperation.
11-Feb-83 13:52:25-EST,234;000000000001
Date: 11 Feb 1983 09:15:37-EST
From: dove at mit-dspg
Subject: window methods
To: bug-lmdoc at mit-oz

How about some documentation on methods invoked by the mouse while
over windows like who line documentation and mouse-moves
14-Feb-83 00:33:58-EST,285;000000000001
Date: Monday, 14 February 1983, 00:31-EST
From: Robert P. Krajewski <RPK at MIT-OZ>
Subject: Time functions understand :ITALIAN
To: Shark at MIT-OZ
Cc: LM-DOC-CHANGES at MIT-OZ

Patched in 91.43 for your immediate enjoyment, and changed in the source for
System 93.

``Bob''
14-Feb-83 10:16:07-EST,1013;000000000001
Date: 14 Feb 1983 10:15:15-EST
From: dove at mit-dspg
Subject: Re:  window methods
To: bug-lmdoc at mit-oz

I would like to see printed documentation for such things as
:mouse-moves and :who-line-documentation-string.  The window
documentation avoids discussing methods that can be included by windows
for these purposes.  I was only able to learn them from Dave Shipman.

I do find those mechanisms the easiest way (together with
:force-kbd-input) to use the window package to implement interactive
graphic windows.

While I am on the subject, getting documentation for functions invoked
by pop up windows (e.g. "layouts") is hard if you don't know the
precise name of the function in question.  For example, I save a layout
that has a frame in it with multiple configurations.  I notice that
when I recall the layout, it always forces the frame back to the
configuration that it was in when the save took place.  I would rather
it didn't, but I have no way of finding out what it is doing.
14-Feb-83 22:12:46-EST,238;000000000001
Date: 14 Feb 1983 2209-EST
Sender: JWALKER at SCRC-TENEX
Subject: bug-lmdoc list
From: JWALKER at SCRC-TENEX
To: bug-lmdoc at OZ, HDT at MC
Message-ID: <[SCRC-TENEX]14-Feb-83 22:09:22.JWALKER>

bug-lmdoc-scrc@SCRC now does exist.
15-Feb-83 03:28:56-EST,2077;000000000001
Mail-From: CENT created at 15-Feb-83 03:25:38
Date: Tuesday, 15 February 1983  03:25-EST
Sender: CENT @ MIT-OZ
From: CENT @ MIT-MC
To:   bug-lmdoc @ MIT-OZ
Subject:files archived (thank you)

(dumper was supposed to send you this itself. apparently its mail
file creating mechanism doesn't know it has to put headers on msgs.)
----------
L.DOC

Archived files
 The following files have been archived:

SRC:<L.DOC>ARRAY.INTENT.1 File archived, contents deleted
SRC:<L.DOC>BUG.LISPM13.1 File archived, contents deleted
SRC:<L.DOC>CLOSUR.TEXT.12 File archived, contents deleted
SRC:<L.DOC>CURSOR.ANSWER.1 File archived, contents deleted
SRC:<L.DOC>DFS.TEXT.12 File archived, contents deleted
SRC:<L.DOC>EDDOC.TEXT.6 File archived, contents deleted
SRC:<L.DOC>EDFND.TEXT.11 File archived, contents deleted
SRC:<L.DOC>EINED.TEXT.5 File archived, contents deleted
SRC:<L.DOC>FASLD.TEXT.1 File archived, contents deleted
SRC:<L.DOC>GOTO.TEXT.1 File archived, contents deleted
SRC:<L.DOC>IF.ANSWER.1 File archived, contents deleted
SRC:<L.DOC>KBDS.TEXT.8 File archived, contents deleted
SRC:<L.DOC>LMCOMP.TEXT.3 File archived, contents deleted
SRC:<L.DOC>LMFNS.TEXT.8 File archived, contents deleted
SRC:<L.DOC>LMNUC.TEXT.156 File archived, contents deleted
SRC:<L.DOC>MACRO.TEXT.28 File archived, contents deleted
SRC:<L.DOC>MENU.TEXT.1 File archived, contents deleted
SRC:<L.DOC>MESS.TEXT.5 File archived, contents deleted
SRC:<L.DOC>MOUSE.TEXT.3 File archived, contents deleted
SRC:<L.DOC>NAME.TEXT.5 File archived, contents deleted
SRC:<L.DOC>PACKD.TEXT.5 File archived, contents deleted
SRC:<L.DOC>RENAME.TEXT.21 File archived, contents deleted
SRC:<L.DOC>STACKG.TEXT.4 File archived, contents deleted
SRC:<L.DOC>SYS74.MSG.1 File archived, contents deleted
SRC:<L.DOC>SYS78.MSG.1 File archived, contents deleted
SRC:<L.DOC>SYS79.MSG.1 File archived, contents deleted
SRC:<L.DOC>SYS85.MSG.1 File archived, contents deleted
SRC:<L.DOC>TVDOC.TEXT.34 File archived, contents deleted
SRC:<L.DOC>ZWEI.ANSWER.1 File archived, contents deleted
16-Feb-83 22:34:32-EST,384;000000000001
Mail-From: CHIRON created at 16-Feb-83 22:32:24
Date: 16 February 1983  22:32-EST (Wednesday)
Sender: CHIRON @ MIT-OZ
From: Chiron <CHIRON @ MIT-MC>
To:   BUG-LMDOC @ MIT-OZ
Subject: Hardware Manual Bug

Howdy!
	Where in the manual does it talk about the diagnostic display,
specifically where does it talk about the lettered lights lime "P" and
"MEM"?  

						--Chiron
22-Feb-83 16:54:00-EST,263;000000000001
Date: Tuesday, 22 February 1983, 16:50-EST
From: Patrick Sobalvarro <PGS at MIT-OZ>
To: bug-lmdoc at MIT-OZ

Okay, I give up.  Why does the concepts index in the new lm manual show Paper
tape punch as being on page 146 (where various string functions are)?
 2-Mar-83 12:22:42-EST,629;000000000001
Return-path: <HDT@MIT-OZ>
Date: Monday, 28 February 1983, 03:48-EST
From: HDT@MIT-OZ
To: PGS@MIT-OZ, bug-lmdoc@MIT-OZ
CC: Hdt@OZ
In-reply-to: The message of 22 Feb 83 16:50-EST from Patrick Sobalvarro <PGS at MIT-OZ>

    Date: Tuesday, 22 February 1983, 16:50-EST
    From: Patrick Sobalvarro <PGS at MIT-OZ>
    To:   bug-lmdoc at MIT-OZ

    Okay, I give up.  Why does the concepts index in the new lm manual show Paper
    tape punch as being on page 146 (where various string functions are)?

It must be a joke, or a hack.  At first I thought you were kidding, because
there is certainly no Paper tape READER.19-Mar-83 01:18:41-EST,454;000000000001
Return-path: <CENT@MIT-OZ>
Mail-From: CENT created at 19-Mar-83 01:15:02
Date: Sat, 19 Mar 1983  01:15 EST
From: CENT@MIT-OZ
To:   bug-lmdoc@MIT-OZ
Subject:file archived

(dumper was supposed to send you this itself. apparently its mail
file creating mechanism doesn't know it has to put headers on msgs.)
----------
L.DOC

Archived files
 The following files have been archived:

SRC:<L.DOC>BUG.LISPM14.1 File archived, contents deleted
31-Dec-83 17:28:42-EST,3024;000000000001
Received: from MIT-MC by MIT-OZ via Chaosnet; 31 Dec 83 17:28-EST
Date: Saturday, 31 December 1983, 17:19-EST
From: Kent M Pitman <kmp at MIT-MC>
Subject: Initializing instance variables
To: BUG-LMDOC at OZ

Documentation should make some stylistic comments about when 
to use the :DEFAULT-INIT-PLIST and when to use the list 
of variables to set the values of variables in a flavor.
eg, for a FLAVOR foo with initable instance variables X and Y,
I can write:

  (DEFFLAVOR FOO (X Y) ()
    :INITABLE-INSTANCE-VARIABLES
    (:DEFAULT-INIT-PLIST
      :X (X-FN)
      :Y (Y-FN)))

or

  (DEFFLAVOR FOO ((X (X-FN)) (Y (Y-FN))) ()
    :INITABLE-INSTANCE-VARIABLES)

I would expect these to be essentially equivalent except in the
presence of multiple flavors. Only the pathological case
  (DEFFLAVOR FOO ((X 3)) ()
    :INITABLE-INSTANCE-VARIABLES
    (:DEFAULT-INIT-PLIST :X 4))
should allow one to tell which is checked first when only a single
flavor is involved. However, to my surprise, mixing flavors has
little effect. Here's the test case I constructed...

  (DEFFLAVOR PLIST-ONLY-1 (X) ()
    :INITABLE-INSTANCE-VARIABLES
    :GETTABLE-INSTANCE-VARIABLES
    (:DEFAULT-INIT-PLIST :X 'PLIST-ONLY-1))
  (DEFFLAVOR PLIST-ONLY-2 (X) ()
    :INITABLE-INSTANCE-VARIABLES
    :GETTABLE-INSTANCE-VARIABLES
    (:DEFAULT-INIT-PLIST :X 'PLIST-ONLY-2))

  (DEFFLAVOR INIT-ONLY-1 ((X 'INIT-ONLY-1)) ()
    :INITABLE-INSTANCE-VARIABLES
    :GETTABLE-INSTANCE-VARIABLES)
  (DEFFLAVOR INIT-ONLY-2 ((X 'INIT-ONLY-2)) ()
    :INITABLE-INSTANCE-VARIABLES
    :GETTABLE-INSTANCE-VARIABLES)

  (DEFFLAVOR PLISTS-NORMAL   () (PLIST-ONLY-1 PLIST-ONLY-2))
  (DEFFLAVOR PLISTS-REVERSED () (PLIST-ONLY-2 PLIST-ONLY-1))

  (DEFFLAVOR INITS-NORMAL   () (INIT-ONLY-1 INIT-ONLY-2))
  (DEFFLAVOR INITS-REVERSED () (INIT-ONLY-2 INIT-ONLY-1))

  (DEFFLAVOR PLIST-INIT () (PLIST-ONLY-1 INIT-ONLY-1))
  (DEFFLAVOR INIT-PLIST () (INIT-ONLY-1 PLIST-ONLY-1))

I was not surprised by

  (SEND (MAKE-INSTANCE 'INITS-NORMAL) ':X)	=> INIT-ONLY-1
  (SEND (MAKE-INSTANCE 'INITS-REVERSED) ':X)	=> INIT-ONLY-2
  (SEND (MAKE-INSTANCE 'PLISTS-NORMAL) ':X)	=> PLIST-ONLY-1
  (SEND (MAKE-INSTANCE 'PLISTS-REVERSED) ':X)	=> PLIST-ONLY-2
  (SEND (MAKE-INSTANCE 'PLIST-INIT) ':X)	=> PLIST-ONLY-1

but I was somewhat surprised by

  (SEND (MAKE-INSTANCE 'INIT-PLIST) ':X)	=> INIT-ONLY-1

I would somehow have expected that all the default init plists 
would be scanned before all the default inits, so I expected
this last case to return PLIST-ONLY-1 ... but in fact it 
seems to be that it interleaves the two scans.

The point of all this is that it would be nice if better documentation
were available for what the significance of these various choices
are. It's hard enough trying to figure out the consequences of mixing
flavors is when you know what you're doing, but with the signficance
of even simple choices like this left largely open, it can be a
real challenge sometimes.
-kmp
 2-Feb-84 22:45:23-EST,491;000000000001
Received: from MIT-ML by MIT-OZ via Chaosnet; 2 Feb 84 22:45-EST
Date: Thursday, 2 February 1984, 22:44-EST
From: Charles E. Leiserson <cel at MIT-ML>
Subject: Documentation
To: BUG-LMDOC at OZ

In LMDOC in Release 4.5, site configuration 62, on PI Project:

We have one copy of ``Software Tools and Development'' (or some such
title) for our 3600, but it keeps getting ripped off.  We also have
about six people using our machine.  What can we do to get more
copies?  Thanks.

28-Feb-84 18:52:19-EST,395;000000000001
Mail-From: ZVONA created at 28-Feb-84 18:52:12
Date: Tue 28 Feb 84 18:52-EST
From: David Chapman <ZVONA@MIT-OZ>
Subject: ACCESS command
To: BUG-lmdoc@MIT-OZ

OZ:<L.DOC>CHFILE.TEXT does not document it.  <S.DOC> and <S.R5.DOC> are
pretty much empty.  Foo.  This is footnoted in the Chaosnet document as
the canonical source of info on the file protocol; is there something
more recent?
28-Feb-84 21:22:35-EST,366;000000000001
Received: from MIT-MOON by MIT-OZ via Chaosnet; 28 Feb 84 21:21-EST
Date: Tuesday, 28 February 1984, 21:22-EST
From: David Chapman <Zvona at MIT-OZ>
To: bug-lmdoc at MIT-OZ

The access command is not documented in the recent Symbolics hardcopy
FILE protocol document either.  The format, in case anyone cares, seems
to be
ACCESS<NL>dir<SP>pass<NL><NL><EOP>
29-Feb-84 11:58:18-EST,921;000000000001
Received: from SCRC-QUABBIN by MIT-OZ via Chaosnet; 29 Feb 84 11:58-EST
Received: from SCRC-CHICOPEE by SCRC-QUABBIN with CHAOS; Wed 29-Feb-84 12:02:16-EST
Date: Wednesday, 29 February 1984, 12:01-EST
From: Daniel L. Weinreb <DLW at SCRC-TENEX>
Subject: versions of FILE protocol documentation
To: Zvona at MIT-OZ, bug-lmdoc at MIT-OZ
In-Reply-To: The message of 28 Feb 84 21:22-EST from David Chapman <Zvona at MIT-OZ>

Um, I can't tell whether you read ROM's message before you sent your
second message.  Just to make things more clear, there is an entirely
rewritten document describind the FILE protocol.  The "recent Symbolics
hardcopy FILE protocol document" you mention in your second message is
not the one I'm talking about; there's a VERY new one that hasn't been
seen outside of Symbolics yet, mainly because it was just written.  It
will be in the official, real Release 5.0 documentation set.
 6-Mar-84 14:13:58-EST,1053;000000000001
Received: from MIT-MC by MIT-OZ via Chaosnet; 6 Mar 84 14:13-EST
Date: Tuesday, 6 March 1984, 14:01-EST
From: Web Dove <dove at MIT-SYLVESTER>
Subject: def
To: BUG-LMDOC at OZ

In LMDOC in Release 4.5, Experimental KBSP 38.1, site configuration 86, on Lisp Machine Frank Sinatra:

I have a macro that defines some functions attached to properties of a
symbol 'utt-1.  In the (progn 'compile ...) at top level I have
(def utt-1), but when I try meta-. of utt-1 it can't be found, and there
seem to be no properties on utt-1 of relevence to locating the file
containing it.

I cannot tell from the documentation who or what actually puts the
relevent properties on the symbol, so I can't do it by hand.  As an
aside, when I was generating the symbols on the fly, it was hard even to
attempt this because (def .) quotes its arguments.

It would be nice if the mechanism responsible for identifying the source
file of a function/symbol were documented more thoroughly.  It would also
be nice if the (def utt-1) form I had used worked.
 6-Mar-84 15:27:22-EST,8258;000000000001
Received: from SCRC-QUABBIN by MIT-OZ via Chaosnet; 6 Mar 84 15:27-EST
Received: from SCRC-MOBILE by SCRC-QUABBIN with CHAOS; Tue 6-Mar-84 15:25:06-EST
Date: Tuesday, 6 March 1984, 15:26-EST
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: def
To: dove at MIT-SYLVESTER, BUG-LMDOC at MIT-OZ
Cc: DEG at SCRC-TENEX
In-reply-to: The message of 6 Mar 84 14:01-EST from Web Dove <dove at MIT-SYLVESTER>

    Date: Tuesday, 6 March 1984, 14:01-EST
    From: Web Dove <dove at MIT-SYLVESTER>
    In LMDOC in Release 4.5, Experimental KBSP 38.1, site configuration 86, on Lisp Machine Frank Sinatra:

    I have a macro that defines some functions attached to properties of a
    symbol 'utt-1.  In the (progn 'compile ...) at top level I have
    (def utt-1), but when I try meta-. of utt-1 it can't be found, and there
    seem to be no properties on utt-1 of relevence to locating the file
    containing it.

Def is not the right thing to use in this case.  See below for the RIGHT thing.

    It would be nice if the mechanism responsible for identifying the source
    file of a function/symbol were documented more thoroughly.  It would also
    be nice if the (def utt-1) form I had used worked.


This same question was answered a while ago.  At that time it was sent to
bug-lmdoc, so it should presumably now be in the real 5.0 documentation.  in
the meantime, I happened to have saved the msg, so I'm enclosing a copy for
you.

    Date: Saturday, 16 July 1983, 16:00-EDT
    From: David A. Moon <Moon at SCRC-TENEX>
    Subject: SYS:FUNCTION-PARENT
    To: JCMA at MIT-OZ
    Cc: bug-lispm at SCRC-TENEX, kmp at MIT-MC, bug-lmdoc at SCRC-TENEX
    Forward-References: The message of 16 Jul 83 03:25-EDT from JCMA at MIT-APIARY-2

	Date: Saturday, 16 July 1983, 03:25-EDT
	From: JCMA at MIT-APIARY-2
	The explanation of this function in the 4.0 release notes (pp. 104-105)
	is totally unclear, and the examples are virtually useless.

	I have some macros that expand into defmethods and defun-methods which I
	want meta-. and other things to handle properly. They look like this:

	(defagency (object-type message-name) lambda-list
		documentaiton-string
		body)

	(defun-agency (object-type name) lambda-list
		documentaiton-string
		body)

	What I think I don't understand is what the NAME argument to
	SYS:FUNCTION-PARENT is supposed to be, but I'm not sure.
	Please advise.

    A "definition" is a Lisp expression that appears in a source program
    file and has a name by which a user would like to refer to it.
    Definitions come in a variety of types.  The main point of definition
    types is that two definitions with the same name and different types
    can exist simultaneously, but two definitions with the same name and
    the same type redefine each other when evaluated.  Some examples of
    definition type symbols and special forms that define such definitions
    are:

	    Type symbol	Type name in English	Special form names
	    DEFUN		function		DEFUN, DEFMACRO, DEFMETHOD
	    DEFVAR		variable		DEFVAR, DEFCONST
	    DEFFLAVOR	flavor			DEFFLAVOR
	    DEFSTRUCT	structure		DEFSTRUCT

    Things to note: there can be more than one special form that defines a given
    kind of definition.  The name of the most representative special form is
    typically chosen as the type symbol.  This symbol typically has a
    SI:DEFINITION-TYPE-NAME property of a string that acts as a prettier
    form of the name for people to read.  RECORD-SOURCE-FILE-NAME and related
    functions take a name and a type symbol as arguments.  The editor understands
    certain definition-making special forms, and knows how to parse them
    to get out the name and the type.  This mechanism has not yet been made
    user-extensible.  Currently the editor assumes that any top-level form
    it doesn't know about that starts with "(DEF" must be defining a function
    (a definition of type DEFUN) and assumes that the CADR of that form is
    the name of the function.  Heuristics are applied to this name if it
    is a list that are the right thing for DEFUN.

    You have to be aware that there is currently a bug that strikes whenever the
    name of a non-function definition is not a symbol (i.e. is a list).  KMP
    reports this roughly every six weeks, but it has not been fixed yet.

    The declaration SYS:FUNCTION-PARENT is of interest to users.  The function
    with the same name is probably not of interest to users; it is part of
    the mechanism by which the editor m-. command figures out what file to
    look in.  It might be of interest to users who themselves wanted to know
    what file contained a definition, given its name and type; the other functions
    involved in this are not documented I think.

    The examples are indeed useless.  Here is a complete example:

    ;I have functions called "frobulators" that are stored on the property
    ;list of symbols and require some special bindings wrapped around their bodies.
    ;Frobulator definitions are not considered function definitions, because the
    ;name of the frobulator does not become defined as a Lisp function.  Indeed
    ;I could have a frobulator named LIST and Lisp's LIST function would continue
    ;to work.  Instead we make a new definition type.

    (defmacro define-frobulator (name arglist &body body)
      `(progn 'compile
	      (add-to-list-to-known-frobulators ',name)
	      (record-source-file-name ',name 'define-frobulator)
	      (defun (:property ,name frobulator) (self ,@arglist)
		(declare (sys:function-parent ,name define-frobulator))
		(let (,(make-frobulator-bindings name arglist))
		  ,@body))))

    (defprop define-frobulator "Frobulator" si:definition-type-name)

    ;Here I would tell the editor how to parse define-frobulator if its parser
    ;was user-extensible.  Since it isn't yet, we rely on its heuristics to
    ;make m-. work adequately for frobulators.

    ;Here is how I would define a frobulator.  Not an interesting definition
    ;since I don't actually know what the word "frobulate" means.  I could
    ;always recast this example as a symbolic differentiator, in which case
    ;I would be defining the + frobulator to return a list of + and the
    ;frobulations of the arguments, the * frobulator to return sums of
    ;products of factors and derivatives of factors, etc.
    (define-frobulator list ()
      (frobulate-any-number-of-args self))

    In define-frobulator, we call record-source-file-name so that when a file
    containing frobulator definitions is loaded, we will know what file those
    definitions came from.  Inside the function that is generated, we include
    a function-parent declaration because there is no definition of that
    function apparent in any source file.  The system will take care of
    doing (RECORD-SOURCE-FILE-NAME '(:PROPERTY LIST FROBULATOR) 'DEFUN),
    as it always does when a function definition is loaded.  Suppose an error
    occurs in a frobulator function (say in the list one above we had
    a typo and tried to call frobulate-any-nubmer-of-args, which isn't defined),
    and you use the debugger c-E command to edit the source.  This will be
    trying to edit (:property list frobulator), the function in which you were
    editing.  The definition that defines this function does not have that
    name, rather it is named list and has type define-frobulator.  The
    sys:function-parent declaration enables the editor to know that fact.

    For another example, more complicated but real, use MEXP or the editor
    c-sh-M command to look at the macro expansion of
	    (defstruct (foo :conc-name) one two)
    The macro sys:defsubst-with-parent that it calls is just defsubst with
    a sys:function-parent declaration inside.  It only exists because of a bug
    in an old implementation of defsubst that made doing it the straightforward
    way not work.

    If this doesn't clarify things please send another message and I'll see
    what I can do to explain it more coherently.

    bug-lmdoc: please file this message for updating of the manual.
 7-Apr-84 17:49:25-EST,4226;000000000001
Received: from MIT-AVATAR by MIT-OZ via Chaosnet; 7 Apr 84 17:48-EST
Date: Saturday, 7 April 1984, 17:50-EST
From: Apprentice for KMP <KBE at MIT-OZ>
Subject: Base/IBase lossage in patch directory format used by MAKE-SYSTEM
To: BUG-LISPM at MIT-OZ
Cc: BUG-LMDOC at MIT-OZ

In Release 4.5, site configuration 88, Vanilla, on PA Lisp Machine Avatar:

It's probable that the last time I built this system, I did it in a world 
that had *NOPOINT bound to T. Normally, I would have *NOPOINT bound to NIL
when I build this world. In any event, I do not think the binding of *NOPOINT 
should affect the patch system's behavior. The patch dir file says to look for
("Knowledge-Based-Editor" 314 ...), which is being read now in BASE 8 because
proper care was not taken to preserve write-read number equivalence in the
patch system.

I find this sort of bug very aggravating. This is not the first time I've 
seen it (eg, there was a similar bug in the band transfer protocol which I
reported a while back). It is not a bug that arises due to something 
unforseen in a complex interaction. It is a simple bug that is easily
anticipated and which should not repeatedly appear in production-quality code.

This stupid little bug cost me about an hour and a half of work lost due 
to its occurrence (I was dumping a band), identifying the bug, sending the 
bug report, and hand-reformatting the patch directory to have dots after
the numbers so that the bug doesn't recur.

Perhaps the documentation people could take some time out in some
document or another and talk about the importance of either writing
"~D." rather than just "~D" in format or of guaranteeing the reader which
will re-read a form is going to understand the radix conventions.

-kmp

** NOTE: THIS BACKTRACE INFO IS IN BASE 8 **

>>Error: File not found
For OZ:PS:<KBE.PATCH>KNOWLEDGE-BASED-EDITOR-204.PATCH-DIR
While in the function (METHOD FS:HOST-UNIT COMMAND)  FS:OPEN-CHAOS  (METHOD FS:CHAOS-PATHNAME OPEN)

(METHOD FS:HOST-UNIT COMMAND):  (P.C. = 363)
   (SELF = #<HOST-UNIT 2732006>)
   Arg 0 (OPERATION): COMMAND
   Arg 1 (MARK-P): NIL
   Arg 2 (STREAM-OR-HANDLE): "I1947"
   Arg 3 (SIMPLE-P): NIL
   Arg 4 (WHOSTATE): "Open"
   Rest arg (COMMANDS): ("OPEN " READ " " CHARACTER "" "" "" "" "" "" ...)
   Local 1 (HANDLE): "I1947"
   Local 2 (STREAM): NIL
   Local 3 (PKT): #<CHAOS Packet 26141302>
   Local 4 (SUCCESS): NIL
   Local 5 (STRING): "I1947 ERROR FNF F File not found"
   Local 6 (TRANSACTION-ID): "T2144"
   Local 7 (CREATE-P): T
   Local 8 (FROM): 6
   Local 9 (CONDITION): NIL
   Local 10: T
   Local 11: (#<CASE-HANDLER 2351607>)

FS:OPEN-CHAOS:  (P.C. = 577)
   Arg 0 (HOST): #<TOPS20-CHAOS-HOST MIT-OZ>
   Arg 1 (*COMMAND-PATHNAME*): #<TOPS20-PATHNAME "OZ:PS:<KBE.PATCH>KNOWLEDGE-BASED-EDITOR-204.PATCH-DIR">
   Arg 2 (OPTIONS): NIL

(METHOD FS:CHAOS-PATHNAME OPEN):  (P.C. = 26)
   (SELF = #<TOPS20-PATHNAME "OZ:PS:<KBE.PATCH>KNOWLEDGE-BASED-EDITOR-204.PATCH-DIR">)
   Arg 0 (OPERATION): OPEN
   Arg 1 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<KBE.PATCH>KNOWLEDGE-BASED-EDITOR-204.PATCH-DIR">
   Rest arg (OPTIONS): NIL

OPEN:  (P.C. = 375)
   Arg 0 (PATHNAME): #<TOPS20-PATHNAME "OZ:PS:<KBE.PATCH>KNOWLEDGE-BASED-EDITOR-204.PATCH-DIR">
   Rest arg (KEYWORD-ARGS): NIL

SI:READ-PATCH-DIRECTORY:  (P.C. = 134)
   Arg 0 (PATCH): ("Knowledge-Based-Editor" 314 NIL NIL)
   --Defaulted args:--
   Arg 1 (NOERROR): NIL

SI:ADD-PATCH-SYSTEM:  (P.C. = 71)
   Arg 0 (NAME): "Knowledge-Based-Editor"

SI:INCREMENT-LOADED-VERSION-1:  (P.C. = 75)

SI:DO-FILE-TRANSFORMATIONS:  (P.C. = 317)

Rest of stack:
SI:PERFORM-TRANSFORMATIONS:  (P.C. = 207)
MAKE-SYSTEM:  (P.C. = 310)
SI:*EVAL:  (P.C. = 653)
LET*:  (P.C. = 75)
SI:*EVAL:  (P.C. = 567)
UNWIND-PROTECT:  (P.C. = 42)
SI:*EVAL:  (P.C. = 567)
LET:  (P.C. = 107)
SI:*EVAL:  (P.C. = 567)
PROGN:  (P.C. = 35)
SI:*EVAL:  (P.C. = 707)
UNWIND-PROTECT:  (P.C. = 42)
SI:*EVAL:  (P.C. = 567)
LET:  (P.C. = 107)
SI:*EVAL:  (P.C. = 567)
SI:READFILE-INTERNAL:  (P.C. = 154)
LOAD:  (P.C. = 320)
LOGIN:  (P.C. = 471)
SI:*EVAL:  (P.C. = 653)
SI:LISP-TOP-LEVEL1:  (P.C. = 210)
SI:LISP-TOP-LEVEL:  (P.C. = 35)
 8-Apr-84 16:44:01-EST,1505;000000000001
Received: from SCRC-STONY-BROOK by MIT-OZ via Chaosnet; 8 Apr 84 16:43-EST
Received: from SCRC-MOBILE by SCRC-STONY-BROOK via CHAOS with CHAOS-MAIL id 14627; Sun 8-Apr-84 16:44:49-EST
Date: Sunday, 8 April 1984, 16:46-EST
From: David E. Goldfarb <DEG at SCRC-TENEX>
Subject: Base/IBase lossage in patch directory format used by MAKE-SYSTEM
To: KBE at MIT-OZ, BUG-LISPM at MIT-OZ
Cc: BUG-LMDOC at MIT-OZ, DEG at SCRC-TENEX
In-reply-to: The message of 7 Apr 84 17:50-EST from Apprentice for KMP <KBE at MIT-OZ>

    Date: Saturday, 7 April 1984, 17:50-EST
    From: Apprentice for KMP <KBE at MIT-OZ>
    In Release 4.5, site configuration 88, Vanilla, on PA Lisp Machine Avatar:

    It's probable that the last time I built this system, I did it in a world 
    that had *NOPOINT bound to T. Normally, I would have *NOPOINT bound to NIL
    when I build this world. In any event, I do not think the binding of *NOPOINT 
    should affect the patch system's behavior. The patch dir file says to look for
    ("Knowledge-Based-Editor" 314 ...), which is being read now in BASE 8 because
    proper care was not taken to preserve write-read number equivalence in the
    patch system.

Apologies. I had thought this bug was fixed in 4.5, but apparently
not.  It was certainly fixed in all 5.0's.  As I recall, the bug was a typo on
my part; I had bound BASE to 10. around the read rather than binding IBASE.  In
any event, I fixed it last August or so.  Sorry for the inconvenience.
26-Jun-84 12:07:04-EDT,404;000000000001
Received: from MIT-ML by MIT-OZ via Chaosnet; 26 Jun 84 12:06-EDT
Date: Tuesday, 26 June 1984, 12:05-EDT
From: Harry L. Voorhees <HLV at MIT-OZ>
Subject: :superior init-option to tv:make-window...
To: BUG-LMDOC at MIT-OZ

In LMDOC in Release 5.0, Experimental MIT 1.4, COLOR 5.1, on Lisp Machine Buddy Holly (3600):

...does not appear to be documented in WINDOC (March 1984).

Harry Voorhees
30-Jun-84 17:36:48-EDT,537;000000000001
Received: from MIT-ASPEN by MIT-OZ via Chaosnet; 30 Jun 84 17:36-EDT
Date: Saturday, 30 June 1984, 17:30-EDT
From: The Boxer System <Bug-Boxer at MIT-MC>
Subject: windex: simple mouse sensitive items
To: BUG-LMDOC at MIT-OZ

In LMDOC in Release 5.0, Experimental MIT 1.4, Experimental Boxer 2.4,
FEP 18, on Lisp Machine Aspen (3600):

The code doesn't seem to work, there is nothing printed in the lisplistener
as promissed. Also the examples following, which use mouse-sen don't work
either.
		Thanks
		Roland Ouellette

25-Jul-84 22:13:44-EDT,1540;000000000001
Received: from MIT-MC by MIT-OZ via Chaosnet; 25 Jul 84 22:13-EDT
Date: 25 July 1984 22:14-EDT
From: Alan Bawden <ALAN @ MIT-MC>
Subject: Some pinhead...
To: bug-lmdoc @ MIT-OZ

On page 7 of the multiple volume slime documentation I notice that the
RETURN character has been removed from the character set and character code
215 is now "reserved for future".

Character code 15 is called "plus-minus", but the graphic shown is a large
plus sign.

When I worked for Symbolics two years ago, I spent an couple of hours
making sure that the "#\" reader macro accepted all of the various
inconsistent naming schemes implied by the names given for the non-standard
characters in this table.  (Like 4 is "and-sign", but 37 is just "or".)
Everybody shit on me at the time because they though it would be better to
agree on some naming scheme, document it, and only accept those names.  I
guess nobody believed that hard enough to actually take the trouble to DO
it.

Page 6, which explains the conversion rules for storing the Lisp Machine
character set in ASCII, should include a warning about the problem with the
inverse conversion.  Namely the screw where a 15 in an ASCII file (not
followed by a 12) will be corrupted if you read a file into a Lisp Machine
and then write it out again.

I might also wish that the correct mailing list to report problems in slime
documentation was recorded somewhere at the front of each manual.  I wasted
more time looking for the name of this mailing list than anything else.
22-Aug-84 00:02:32-EDT,1563;000000000001
Mail-From: X.GYRO created at 22-Aug-84 00:02:28
Date: 22 Aug 1984  00:02 EDT (Wed)
Message-ID: <X.GYRO.12041366634.BABYL@MIT-OZ>
From: Scott Layson <X.GYRO@MIT-OZ>
To:   bug-lmdoc@MIT-OZ
Subject: How to put a window on the Select submenu of the System Menu?
CC:   x.Gyro@MIT-OZ

I'm an utter novice at hacking the window system, though I know lots
of other parts of the LispM software.

I defined a new kind of window, a flavor of
tv:bordered-constraint-frame-with-shared-io-buffer.  I called up the
System Menu, moused Create, moused Any, typed the name of my flavor,
and selected the edges with the mouse.  No window appeared.  I figured
"well, it's not selected", called up the System menu, and moused
Select.  My window was not on the list.  I tried again, this time
explicitly calling tv:make-window with an :EXPOSE-P option of T.  This
succeeded in exposing a window I could select by clicking on, but the
window still wasn't on the Select menu.  Once it was deexposed, the
only way I could find to get back to it was via the Peek Windows
display.

I must be missing something obvious.  I would have thought that
inclusion on the Select menu was the automatic default, and that I
wouldn't have to think about it.  In any case, perusal of WINDOC
(including looking for things listed under "Select" in the index) was
fruitless.  It's not so much that I want to know the answer to my
question -- I'm sure I can find it by looking more carefully -- as
that I was frustrated that it wasn't in any of the obvious places.

-- Scott
22-Aug-84 18:49:09-EDT,2294;000000000001
Received: from SCRC-QUABBIN by MIT-OZ via Chaosnet; 22 Aug 84 18:49-EDT
Received: from SCRC-EUPHRATES by SCRC-QUABBIN via CHAOS with CHAOS-MAIL id 74326; Wed 22-Aug-84 16:55:26-EDT
Date: Wednesday, 22 August 1984, 16:56-EDT
From: David A. Moon <Moon at SCRC-TENEX>
Subject: How to put a window on the Select submenu of the System Menu?
To: Scott Layson <X.GYRO at MIT-OZ>
cc: bug-lmdoc at MIT-OZ
In-Reply-To: <X.GYRO.12041366634.BABYL@MIT-OZ>
Message-ID: <840822165602.6.MOON@EUPHRATES.SCRC.Symbolics>

    Date: 22 Aug 1984  00:02 EDT (Wed)
    From: Scott Layson <X.GYRO@MIT-OZ>

    I'm an utter novice at hacking the window system, though I know lots
    of other parts of the LispM software.

    I defined a new kind of window, a flavor of
    tv:bordered-constraint-frame-with-shared-io-buffer.  I called up the
    System Menu, moused Create, moused Any, typed the name of my flavor,
    and selected the edges with the mouse.  No window appeared.  I figured
    "well, it's not selected", called up the System menu, and moused
    Select.  My window was not on the list.  I tried again, this time
    explicitly calling tv:make-window with an :EXPOSE-P option of T.  This
    succeeded in exposing a window I could select by clicking on, but the
    window still wasn't on the Select menu.  Once it was deexposed, the
    only way I could find to get back to it was via the Peek Windows
    display.

    I must be missing something obvious.  I would have thought that
    inclusion on the Select menu was the automatic default, and that I
    wouldn't have to think about it.  In any case, perusal of WINDOC
    (including looking for things listed under "Select" in the index) was
    fruitless.  It's not so much that I want to know the answer to my
    question -- I'm sure I can find it by looking more carefully -- as
    that I was frustrated that it wasn't in any of the obvious places.

The :NAME-FOR-SELECTION message to your frame must have returned NIL.
This and the lack of exposing when CREATE-WINDOW-WITH-MOUSE sent
it a :MOUSE-SELECT message are likely to be due to the fact that
your window had no SELECTED-PANE.  WINDEX p.76.

Selection is essentially completely undocumented at present.  This is
being worked on I believe.
29-Aug-84 16:03:53-EDT,717;000000000001
Mail-From: DROGERS created at 29-Aug-84 16:03:35
Date: Wed 29 Aug 84 16:03:35-EDT
From: David Rogers <DRogers@MIT-OZ>
Subject: Re: [Postmaster at SCRC-STONY-BROOK: Unable to deliver letter]
To: JWalker@SCRC-TENEX
cc: bug-lmdoc@MIT-OZ, bug-lispm@MIT-OZ
In-Reply-To: Message from "Jan Walker <JWalker at SCRC-TENEX>" of Tue 28 Aug 84 18:11:33-EDT

Not totally true: I tried to include a Date: field when the time
was screwed up, and it wouldn't accept it. I would think that including
the From: line should be a settable option, rather than being forced
to not have it. It seems that less experienced people would benefit
from having it, with more experienced people able to turn it off.

David
-------
