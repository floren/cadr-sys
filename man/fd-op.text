.c This file is part of the Lisp Machine Manual.  -*-Bolio-*-
.c Function Description: Other Predicates.

.nopara
The following functions are some other general purpose predicates.

.defun eq x y
3(eq 2x y*) => t* if and only if 2x* and 2y* are the same object.
It should be noted that things that print the same are not necessarily 3eq* to each other.
In particular, numbers with the same value
need not be 3eq*, and two similar lists are usually not 3eq*.
.cindex eq versus equal
.lisp
.exdent 96 Examples:
(eq 'a 'b) => nil
(eq 'a 'a) => t
(eq (cons 'a 'b) (cons 'a 'b)) => nil
(setq x (cons 'a 'b)) (eq x x) => t
.end_lisp
Note that in Zetalisp equal fixnums are 3eq*; this is not true in Maclisp.
Equality does not imply 3eq*-ness for other types of numbers.  To compare numbers,
use 3=*; see (=-fun).
.end_defun

.defun neq x y
3(neq 2x y*)* = 3(not (eq 2x y*))*.  This is provided
simply as an abbreviation for typing convenience.
.end_defun

.defun eql x y
3eql* is the same as 3eq* unless both arguments are numbers;
in that case, it is the same as 3=*.
.end_defun

.defun equal x y
The 3equal* predicate returns 3t* if its arguments are similar
(isomorphic) objects. (cf. 3eq*)
.cindex eq versus equal
'cindex equal versus =
Two numbers are 3equal* if they have the same value and type (for
example, a float is never 3equal* to a fixnum, even if 3=* is true of them).
For conses, 3equal* is defined
recursively as the two cars being 3equal* and the two cdrs
being equal.  Two strings are 3equal* if they have the same length,
and the characters composing them are the same; see 3string=*,
(string=-fun).  Alphabetic case is significant.  All other objects
are 3equal* if and only if they are 3eq*.  Thus 3equal* could have
been defined by:
.lisp
(defun equal (x y)
  (cond ((eq x y) t)
	((neq (typep x) (typep y)) nil)
	((numberp x) (= x y))
	((stringp x) (string-equal x y))
	((listp x) (and (equal (car x) (car y))
			(equal (cdr x) (cdr y))))))
.end_lisp

As a consequence of the above definition, it can be seen that
3equal* may compute forever when applied to looped list structure. 
In addition, 3eq* always implies 3equal*; that is, if 3(eq a b)*
then 3(equal a b)*.  An intuitive definition of 3equal* (which is
not quite correct) is that two objects are 3equal* if they look the
same when printed out.  For example:
.lisp
(setq a '(1 2 3))
(setq b '(1 2 3))
(eq a b) => nil
(equal a b) => t
(equal "Foo" "foo") => nil
.end_lisp
.end_defun

.defun equalp x y
3equalp* is a broader kind of equality than 3equal*.  Two objects that
are 3equal* are always 3equalp*.  In addition,
Two numbers of different types are 3equalp* if they 3=*.  Two character
objects are 3equalp* if they are 3char-equal* (that is, they are compared
ignoring font, case and meta bits).

Two arrays of any sort are 3equalp* if they have the same dimensions
and corresponding elements are 3equalp*.  In particular, this means
that two strings are 3equalp* if they match ignoring case and font information.
.lisp
(equalp "Foo" "foo") => t
(equalp '1 '1.0) => t
(equalp '(1 "Foo") '(1.0 "foo")) => t
.end_lisp
Because 3equalp* is a Common Lisp function, it regards a string as having
character objects as its elements:
.lisp
(equalp "Foo" #(#/F #/o #/o)) => t
(equalp "Foo" #(#/F #/o #/o)) => nil
.end_lisp
.end_defun

.defun not x
.defun1 null x
	3not* returns 3t* if 2x* is 3nil*, else 3nil*.
3null* is the same as 3not*; both functions are included for the sake
of clarity.  Use 3null* to check whether something is 3nil*; use 3not*
to invert the sense of a logical value.  Even though Lisp uses the symbol
3nil* to represent falseness, you shouldn't make understanding of your program
depend on this fortuitously.  For example, one often writes:
.lisp
(cond ((not (null lst)) ... )
      ( ... ))
1rather than*
(cond (lst ... )
      ( ... ))
.end_lisp
	There is no loss of efficiency, since these will compile into exactly
the same instructions.
.end_defun
