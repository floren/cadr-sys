;;; -*- Mode: Lisp; Package: ZWEI; Base: 8.; Patch-File: T -*-
;;; Written 12/03/83 08:22:20 by RMS,
;;; Reason: Bug in Sort command after getting new mail.
;;; Flush duplications in menu of mail files.
;;; Handle % as delimiter in addresses.
;;; Compare subjects when checking for duplicate messages.
;;; Don't leave stream open if abort creating a mail file buffer.
;;; Bugs in C-X M within mailing.  Avoid extra blank line in headers.
;;; Editing current message doesn't clobber point.
;;; Reduce summary glitching while reading in mail file.
;;; Reason: Bug in Sort command after getting new mail.
;;; Flush duplications in menu of mail files.
;;; Handle % as delimiter in addresses.
;;; Compare subjects when checking for duplicate messages.
;;; Don't leave stream open if abort creating a mail file buffer.
;;; Bugs in C-X M within mailing.  Avoid extra blank line in headers.
;;; Editing current message doesn't clobber point.
;;; Reduce summary glitching while reading in mail file.
;;; while running on Lisp Machine Eighteen from band 6
;;; with Experimental System 98.1, CADR 3.0, Experimental ZMail 53.0, MIT-Specific 22.0, microcode 305, ZM MIT.



; From file COMNDS.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; COMNDS  "

(DEFUN SORT-ZMAIL-BUFFER (ZMAIL-BUFFER MODE FORWARD-P &OPTIONAL NO-BACKGROUND-FINISH)
  (AND (ZMAIL-BUFFER-DISK-P ZMAIL-BUFFER)
       (NOT NO-BACKGROUND-FINISH)
       (FOREGROUND-BACKGROUND-FINISH ZMAIL-BUFFER NIL))
  ;; Parse everything now, just in case.
  (DOMSGS (MSG ZMAIL-BUFFER)
    (ASSURE-MSG-PARSED MSG))
  (LET ((TEMPARRAY
	  (SI:COPY-OBJECT (FOLLOW-STRUCTURE-FORWARDING (ZMAIL-BUFFER-ARRAY ZMAIL-BUFFER)))))
    ;; If the sort itself bombs out, we have not clobbered the buffer.
    (COND ((EQ MODE 'MSG-POSITION-LESSP)
	   ;; For sorting by position, record each message's mail file and position in advance.
	   ;; Then comparison is much faster.
	   (DOTIMES (I (LENGTH TEMPARRAY))
	     (SETF (AREF TEMPARRAY I)
		   (LIST (MSG-MAIL-FILE-BUFFER (AREF TEMPARRAY I))
			 (LOCATE-MSG-IN-ZMAIL-BUFFER (AREF TEMPARRAY I)
						     (MSG-MAIL-FILE-BUFFER (AREF TEMPARRAY I)))
			 (AREF TEMPARRAY I))))
	   (FUNCALL (IF FORWARD-P #'STABLE-SORT #'REVERSE-STABLE-SORT)
		    TEMPARRAY 'MSG-POSITION-LESSP-CACHED)
	   (DOTIMES (I (LENGTH TEMPARRAY))
	     (SETF (AREF TEMPARRAY I)
		   (CADDR (AREF TEMPARRAY I)))))
	  (T
	   (FUNCALL (IF FORWARD-P #'STABLE-SORT #'REVERSE-STABLE-SORT)
		    TEMPARRAY MODE))) 
    (COPY-ARRAY-CONTENTS TEMPARRAY (ZMAIL-BUFFER-ARRAY ZMAIL-BUFFER)))
  (AND (ZMAIL-BUFFER-DISK-P ZMAIL-BUFFER)
       (RESPLICE-ZMAIL-BUFFER ZMAIL-BUFFER))
  ;; Sorting modifies the buffer even though not any one message.
  (SETF (NODE-TICK ZMAIL-BUFFER) (TICK))
  (COND ((EQ ZMAIL-BUFFER *ZMAIL-BUFFER*)
	 (FUNCALL *SUMMARY-WINDOW* ':NEED-FULL-REDISPLAY)
	 (ZMAIL-SELECT-MSG *MSG* NIL NIL))))

))

; From file COMNDS.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; COMNDS  "

(DEFUN GET-ZMAIL-BUFFER-ALISTS (&OPTIONAL OTHERS-TOO &AUX MFL TMFL MFL-PATHNAMES)
  (DOLIST (ZMAIL-BUFFER *ZMAIL-BUFFER-LIST*)
    (LET ((ELEM (CONS (ZMAIL-BUFFER-NAME ZMAIL-BUFFER) ZMAIL-BUFFER)))
      (IF (ZMAIL-BUFFER-DISK-P ZMAIL-BUFFER)
	  (PUSH ELEM MFL)
	  (PUSH ELEM TMFL))))
  (SETQ MFL (SORTCAR MFL #'STRING-LESSP)
	TMFL (SORTCAR TMFL #'STRING-LESSP))
  (SETQ MFL-PATHNAMES
	(MAPCAR 'BUFFER-PATHNAME
		*ZMAIL-BUFFER-LIST*))
  (IF (FIND-IF 'STRINGP *OTHER-MAIL-FILE-NAMES*)
      (SETQ *OTHER-MAIL-FILE-NAMES*
	    (MAPCAR 'PARSE-NAMESTRING *OTHER-MAIL-FILE-NAMES*)))
  (AND OTHERS-TOO
       (DOLIST (FILE-NAME (SORT *OTHER-MAIL-FILE-NAMES* 'STRING-LESSP))
	 (OR (MEMBER (SEND FILE-NAME ':NEW-VERSION :NEWEST) MFL-PATHNAMES)
	     (SETQ MFL (NCONC MFL (NCONS (CONS FILE-NAME FILE-NAME)))))))
  (VALUES MFL TMFL))

))

; From file WINDOW.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; WINDOW  "

(DEFUN SUMMARIZE-RECIPIENTS (LIST MAXL &AUX (STR (MAKE-EMPTY-STRING MAXL)))
  (DO-NAMED THE-LIST
      ((LIST LIST (CDR LIST))
       (PLIST)
       (COMMA NIL)
       (NAME))
      ((NULL LIST))
    (UNLESS (CONSP LIST) (RETURN))
    (SETQ PLIST (LOCF (CAR LIST)))
    (IF COMMA (OR (ARRAY-PUSH STR #/,) (RETURN-FROM THE-LIST)) (SETQ COMMA T))
    (COND ((SETQ NAME (GET PLIST ':NAME))
	   (OR (STRING-EQUAL NAME USER-ID)
	       (DO ((I 0 (1+ I))
		    (LEN (STRING-LENGTH NAME)))
		   (( I LEN))
		 (OR (ARRAY-PUSH STR (AREF NAME I)) (RETURN-FROM THE-LIST))))
	   (DO ((HS (GET PLIST ':HOST) (CDR HS)))
	       ((NULL HS))
	     (LET ((HOST (CAR HS)))
	       ;; Stop accumulating names when we run into one we know.
	       (AND (FUNCALL FS:USER-LOGIN-MACHINE ':PATHNAME-HOST-NAMEP HOST)
		    (RETURN))
	       (AND (LOOP FOR KNOWN IN *HOSTS-IGNORED-IN-SUMMARY*
			  THEREIS (FUNCALL KNOWN ':PATHNAME-HOST-NAMEP HOST))
		    (RETURN))
	       (OR (ARRAY-PUSH STR (IF (CDR HS) #/% #/@))
		   (RETURN-FROM THE-LIST))
	       (DO ((I 0 (1+ I))
		    (LEN (STRING-LENGTH HOST)))
		   (( I LEN))
		 (OR (ARRAY-PUSH STR (AREF HOST I)) (RETURN-FROM THE-LIST))))))))
  STR)

))

; From file MAIL.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; MAIL  "

(DEFUN STRING-FROM-HEADER (HEADER FORMAT &AUX (PLIST (LOCF HEADER)) TEM)
  (IF (AND (EQ FORMAT ':USE-ORIGINAL)
	   (SETQ TEM (GET PLIST ':INTERVAL)))
      (STRING-INTERVAL (FIRST TEM) (SECOND TEM) T)
    (LET ((STRING (GET PLIST ':NAME)))
      ;; If talking to the server, strip off any quoting
      (AND (EQ FORMAT ':HOST)
	   (QUOTED-RECIPIENT-P STRING)
	   (SETQ STRING (SUBSTRING STRING 1 (1- (STRING-LENGTH STRING)))))
      (LET ((HOST (GET PLIST ':HOST))
	    (AT (IF (MEMQ FORMAT '(:SHORT :HOST)) #/@ " at ")))
	(IF (AND HOST *QUOTE-HOSTS-FOR-XMAILR*)
	    (SETQ STRING (STRING-APPEND STRING AT #/ (CAR HOST) #/))
	  (DO ((HS HOST (CDR HS)))
	      ((NULL HS))
	    (SETQ STRING (STRING-APPEND STRING (IF (CDR HS) "%" AT) (CAR HS))))))
      (AND (MEMQ FORMAT '(:USE-ORIGINAL :INCLUDE-PERSONAL))
	   (SETQ TEM (GET PLIST ':PERSONAL-NAME))
	   (PROGN
	     (AND (NOT (QUOTED-RECIPIENT-P TEM))
		  (STRING-SEARCH-SET "/"," TEM)
		  (SETQ TEM (FORMAT:OUTPUT NIL (PRINT TEM))))
	     (SETQ STRING (STRING-APPEND TEM " <" STRING #/>))))
      STRING)))

(load "sys:zmail;lex733")
))


; From file COMNDS.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; COMNDS  "

;;; This intentionally ignores things like Redistributed-by which might be different.
;;; I think this is probably more right
(DEFUN MSG-HASH-ID (MSG &AUX STATUS)
  (SETQ STATUS (ASSURE-MSG-PARSED MSG))
  (OR (GET STATUS 'HASH-ID)
      (LET ((HASH-ID (OR (GET STATUS ':MESSAGE-ID)
			 (SOME-PLIST (CAR STATUS) '(:DATE :FROM :TO :CC :SUBJECT)))))
	(PUTPROP STATUS HASH-ID 'HASH-ID)
	HASH-ID)))

))

; From file FILTER.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; FILTER  "

(DEFUN MENU-GET-ZMAIL-BUFFER-FOR-SELECTION (&AUX ITEM-LIST)
  "Return a ZMAIL-BUFFER chose by the user.  We offer the menu."
  (MULTIPLE-VALUE-BIND (ZMAIL-BUFFER-ALIST TEMP-ZMAIL-BUFFER-ALIST)
      (GET-ZMAIL-BUFFER-ALISTS T)
    (LEXPR-FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':SET-GEOMETRY
		   (IF (OR ZMAIL-BUFFER-ALIST TEMP-ZMAIL-BUFFER-ALIST) '(2 NIL) '(NIL 1)))
    (SETQ ITEM-LIST (TV:APPEND-ITEM-LISTS ZMAIL-BUFFER-ALIST TEMP-ZMAIL-BUFFER-ALIST)))
  (SETQ ITEM-LIST (APPEND ITEM-LIST
			  (AND (ODDP (LENGTH ITEM-LIST)) '(("" :NO-SELECT T)))
			  '(("Read or create file" :VALUE :READ-FILE :FONT FONTS:HL12I
			     :DOCUMENTATION
			     "Read in and select a mail file, creating it if necessary.")
			    ("Mark summary" :VALUE :MARKING :FONT FONTS:HL12I
			     :DOCUMENTATION
		       "Select a temporary buffer made by clicking on the summary window.")
			    ("Abort" :VALUE :ABORT :FONT FONTS:HL12I
				     :DOCUMENTATION "Abort this command.")
			    ("Subset" :VALUE :SUBSET :FONT FONTS:HL12I
			     :DOCUMENTATION "Select a subset buffer made by filtering.")
			    )))
  (OR (EQUAL ITEM-LIST (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':ITEM-LIST))
      (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':SET-ITEM-LIST ITEM-LIST))
  (UNWIND-PROTECT
    (PROGN
      (TV:EXPOSE-WINDOW-NEAR *SELECT-ZMAIL-BUFFER-MENU* (RECTANGLE-NEAR-COMMAND-MENU))
      (DO ((ZMAIL-BUFFER)) (NIL)
	(SETQ ZMAIL-BUFFER (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':CHOOSE))
	(SET-COMMAND-BUTTON (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':LAST-BUTTONS))
	(SELECTQ ZMAIL-BUFFER
	  (:ABORT
	   (ABORT-CURRENT-COMMAND))
	  (:SUBSET
	   (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':DEACTIVATE)
	   (SETQ ZMAIL-BUFFER (READ-SUBSET-ZMAIL-BUFFER)))
	  (:MARKING
	   (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':DEACTIVATE)
	   (SETQ ZMAIL-BUFFER (MAKE-ZMAIL-BUFFER-BY-MARKING)))
	  (:READ-FILE
	   (SETQ ZMAIL-BUFFER (READ-ZMAIL-BUFFER-FILENAME *SELECT-ZMAIL-BUFFER-MENU*))))
	(COND ((OR (STRINGP ZMAIL-BUFFER) (TYPEP ZMAIL-BUFFER 'FS:PATHNAME))
	       (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':DEACTIVATE)
	       (SETQ ZMAIL-BUFFER (ZMAIL-FIND-FILE-NOSELECT ZMAIL-BUFFER))))
	(AND ZMAIL-BUFFER (RETURN ZMAIL-BUFFER))))
    (FUNCALL *SELECT-ZMAIL-BUFFER-MENU* ':DEACTIVATE)))

))

; From file MFILES.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; MFILES  "

(DEFUN GET-ZMAIL-FILE (STREAM PATHNAME &OPTIONAL BACKGROUND-P FLAVOR &AUX INFO SUCCESS)
  (SETQ INFO (SEND STREAM ':INFO))
  (UNWIND-PROTECT
      (OR (LET ((ZMAIL-BUFFER (GET-ZMAIL-BUFFER-FROM-PATHNAME PATHNAME)))
	    (WHEN ZMAIL-BUFFER
	      (IF (AND (NOT (EQUAL INFO (BUFFER-FILE-ID ZMAIL-BUFFER)))
		       (YES-OR-NO-P
			 (FORMAT NIL "File ~A has been changed since you last read or saved it.
Read in the new version? " PATHNAME)))
		  (PROGN
		    (KILL-ZMAIL-BUFFER ZMAIL-BUFFER)
		    NIL)
		(CLOSE STREAM)
		(SETQ SUCCESS T)
		(WHEN (ZMAIL-DISK-BUFFER-STREAM ZMAIL-BUFFER)
		  (ZMAIL-BACKGROUND-REQUEST-PUSH
		    (LIST 'ZMAIL-BACKGROUND-LOAD-FILE ZMAIL-BUFFER)))
		ZMAIL-BUFFER)))
	  (LET (APPEND-P ZMAIL-BUFFER)
	    (OR FLAVOR (MULTIPLE-VALUE (FLAVOR APPEND-P)
			 (SEND PATHNAME ':MAIL-FILE-FORMAT-COMPUTER STREAM)))
	    (SETQ ZMAIL-BUFFER (MAKE-ZMAIL-BUFFER FLAVOR ':PATHNAME PATHNAME ':STREAM STREAM ':FILE-ID INFO
						  ':APPEND-P APPEND-P))
	    (START-LOADING-ZMAIL-BUFFER ZMAIL-BUFFER STREAM BACKGROUND-P)
	    (SETQ SUCCESS T)
	    ZMAIL-BUFFER))
    (UNLESS SUCCESS (CLOSE STREAM))))
))

; From file MAIL.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; MAIL  "

;;; Editor commands in *REPLY-COMTAB*.

;;; Mail from inside mail
(DEFCOM COM-ZMAIL-RECURSIVE-MAIL "Start composing another message" ()
  (LET ((OLD-DRAFT-MSG *DRAFT-MSG*))
    (SAVE-DRAFT-MSG-WINDOW-STATE OLD-DRAFT-MSG)	;Save point
    (LET (*DRAFT-MSG* *DRAFT-HEADER-INTERVAL* *DRAFT-TEXT-INTERVAL*)
      (INITIALIZE-FOR-MAIL (MAKE-DRAFT-MSG) ':SUBJECT-TOO)	;Start a new message
      (SET-MAIL-WINDOW-CONFIGURATION NIL ':HEADER)
      (INSERT-MOVING (POINT) "To: ")
      (INSERT (POINT) #\RETURN)
      (*CATCH 'SEND-IT
	(FUNCALL *WINDOW* ':EDIT))			;Edit it
      (RESEPARATE-HEADER-AND-TEXT))
    (INITIALIZE-FOR-MAIL OLD-DRAFT-MSG)		;Restore old one
    (MAKE-WINDOW-CURRENT (CAAR (DRAFT-MSG-WINDOW-POINTS OLD-DRAFT-MSG))))
  DIS-NONE)

))

; From file MAIL.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; MAIL  "

(DEFUN COM-ZMAIL-MAIL-INTERNAL (MODE &AUX POINT WHO WHAT (STARTING-WINDOW ':HEADER)
					  (*SENDING-BUG-REPORT* NIL))
  (LET (*DRAFT-MSG* *DRAFT-HEADER-INTERVAL* *DRAFT-TEXT-INTERVAL*)
    (SELECTQ MODE
      (:FORWARD
       (OR *MSG* (BARF "There is no current message")))
      (:BUG
       (SETQ *SENDING-BUG-REPORT* T)
       (MULTIPLE-VALUE (WHO WHAT)
	 (PARSE-BUG-ARG (GET-BUG-ARG)))))
    (INITIALIZE-FOR-MAIL (MAKE-DRAFT-MSG) (IF (EQ MODE ':FORWARD) T ':SUBJECT-TOO))
    (LET ((*INTERVAL* *DRAFT-MSG*))
      (SETQ POINT (WINDOW-POINT *DRAFT-HEADER-WINDOW*))
      (INSERT-MOVING POINT "To: ")
      (INSERT POINT #\CR)
      (SELECTQ MODE
	(:MAIL
	 (WHEN *DEFAULT-MAIL-TEMPLATE*
	   (FUNCALL *DEFAULT-MAIL-TEMPLATE* *INTERVAL* NIL)))
	(:FORWARD
	 (SETF (DRAFT-MSG-MSGS-BEING-FORWARDED *DRAFT-MSG*) (NCONS *MSG*))
	 (AND *FORWARDED-ADD-SUBJECT*
	      (LET* ((STREAM (INTERVAL-STREAM-INTO-BP POINT))
		     (STATUS (ASSURE-MSG-PARSED *MSG*))
		     (FROM (CAR (GET STATUS ':FROM)))
		     (SUBJECT (GET STATUS ':SUBJECT)))
		(FORMAT STREAM "~%Subject: [~A: ~A]"
			(STRING-FROM-HEADER FROM ':LONG)
			(OR SUBJECT "Forwarded"))))
	 (INSERT-MSGS-INTO-WINDOW *DRAFT-TEXT-WINDOW* NIL *MSG*)
	 (OR (AND (STRING-EQUAL *FORWARDED-MESSAGE-BEGIN* "")
		  (STRING-EQUAL *FORWARDED-MESSAGE-END* ""))
	     (LET* ((BP (WINDOW-POINT *DRAFT-TEXT-WINDOW*))
		    (STREAM (INTERVAL-STREAM-INTO-BP (INTERVAL-FIRST-BP *DRAFT-TEXT-INTERVAL*))))
	       (FORMAT STREAM *FORWARDED-MESSAGE-BEGIN* 1)
	       (FUNCALL STREAM ':FRESH-LINE)
	       (FUNCALL STREAM ':SET-BP BP)
	       (FORMAT STREAM *FORWARDED-MESSAGE-END* 1)
	       (FUNCALL STREAM ':FRESH-LINE)
	       (MOVE-BP BP (FUNCALL STREAM ':READ-BP))))
	 (WHEN *DEFAULT-FORWARDING-TEMPLATE*
	   (FUNCALL *DEFAULT-FORWARDING-TEMPLATE* *INTERVAL* (LIST *MSG*))))
	(:BUG
	 (INSERT-MOVING POINT WHO)
	 (INSERT-MOVING (WINDOW-POINT *DRAFT-TEXT-WINDOW*) WHAT)
	 (SETQ STARTING-WINDOW ':TEXT)
	 (WHEN *DEFAULT-BUG-TEMPLATE*
	   (FUNCALL *DEFAULT-BUG-TEMPLATE* *INTERVAL* NIL))))
      ;; Avoid an extra blank line at end of headers.
      (WHEN (= (BP-CHAR-BEFORE (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*)) #\RETURN)
	(DELETE-INTERVAL (FORWARD-CHAR (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*) -1)
			 (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*) T))
      (ZMAIL-MAIL ':MAIL STARTING-WINDOW))))

))

; From file MAIL.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; MAIL  "

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-ZMAIL-REPLY "Reply to current message.
Left controlled by *REPLY-MODE* and *REPLY-WINDOW-MODE*.
Middle controlled by *MIDDLE-REPLY-MODE* and *MIDDLE-REPLY-WINDOW-MODE*.
Right gives a menu to specify recipients and window configuration.
Numeric argument of 1 replies according to *1R-REPLY-MODE*.
Numeric argument of 3 or 4 yanks in message.
Messages from COMSAT or draft messages are treated specially." (NUMERIC-ARG-OK)
  (LET (*DRAFT-MSG* *DRAFT-TEXT-INTERVAL* *DRAFT-HEADER-INTERVAL*)
    (DO ((L *ZMAIL-REPLY-PROCESSING-LIST* (CDR L))
	 (MODE) (STARTING-WINDOW))
	((NULL L) (FERROR NIL "Reply was not processed"))
      (MULTIPLE-VALUE (MODE STARTING-WINDOW)
	(FUNCALL (CAR L) *MSG*))
      (WHEN MODE
	(MOVE-BP (WINDOW-POINT *DRAFT-HEADER-WINDOW*)
		 (INTERVAL-FIRST-BP (WINDOW-INTERVAL *DRAFT-HEADER-WINDOW*)))
	;; Avoid an extra blank line at end of headers.
	(WHEN (= (BP-CHAR-BEFORE (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*)) #\RETURN)
	  (DELETE-INTERVAL (FORWARD-CHAR (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*) -1)
			   (INTERVAL-LAST-BP *DRAFT-HEADER-INTERVAL*) T))
	(WHEN *DEFAULT-REPLY-TEMPLATE*
	  (FUNCALL *DEFAULT-REPLY-TEMPLATE* *DRAFT-MSG*
		   (DRAFT-MSG-MSGS-BEING-REPLIED-TO *DRAFT-MSG*)))
	(RETURN (ZMAIL-MAIL MODE STARTING-WINDOW))))))

))

; From file COMNDS.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; COMNDS  "

(DEFINE-ZMAIL-TOP-LEVEL-COMMAND COM-EDIT-CURRENT-MSG "Edit the current message" ()
;  (MAKE-WINDOW-CURRENT *MSG-WINDOW*)
;  (SELECT-WINDOW *MSG-WINDOW*)
  (MUST-REDISPLAY *MSG-WINDOW* DIS-BPS)
  (TV:WITH-SELECTION-SUBSTITUTE (*MSG-WINDOW* *ZMAIL-WINDOW*)
    (UNWIND-PROTECT
	(PROGN
	  (LOCK-BACKGROUND-PROCESS)
	  (SETF (NODE-UNDO-STATUS *ZMAIL-BUFFER*)
		(NODE-UNDO-STATUS (MSG-INTERVAL *MSG*)))
	  (LET ((*COMTAB* *MSG-COMTAB*)
		(*MODE-LINE-LIST* '("ZMail " "Editing message " "(" *MODE-NAME-LIST*
				    ") " *ZMAIL-FILE-NAME* *CURRENT-MSG-NAME*)))
	    (FUNCALL *MSG-WINDOW* ':EDIT)
	    DIS-NONE))
      ;; Keep undo info on a per-message basis;
      ;; however, during editing, the undo info must
      ;; be on the top-level node.
      (SETF (NODE-UNDO-STATUS (MSG-INTERVAL *MSG*))
	    (NODE-UNDO-STATUS *ZMAIL-BUFFER*))
      (SETF (NODE-UNDO-STATUS *ZMAIL-BUFFER*) ':DONT)
      ;;Make sure the message is still separated ok
      (LET* ((*INTERVAL* (WINDOW-INTERVAL *MSG-WINDOW*))
	     (BP (INTERVAL-LAST-BP *INTERVAL*)))
	(OR (BEG-LINE-P BP) (INSERT BP #\CR))
	(FUNCALL (MSG-MAIL-FILE-BUFFER *MSG*) ':UPDATE-MSG-END *MSG*))
      (SETF (MSG-TICK *MSG*) (TICK))		;Munge message
      (UNCACHE-MSG-REFERENCES *MSG*)
      (SETF (MSG-STATUS *MSG*) (SOME-PLIST (MSG-STATUS *MSG*) *INTERNAL-TYPE-PROPERTIES*))
      (SET-PARSED-MSG-HEADERS *MSG*)
      (FUNCALL *SUMMARY-WINDOW* ':NEED-TO-REDISPLAY-MSG *MSG*)
      (SETF (WINDOW-MARK-P *MSG-WINDOW*) NIL)
      (LET ((BP (COPY-BP (WINDOW-POINT *MSG-WINDOW*))))
	(ZMAIL-SELECT-MSG *MSG*)			;May not have losing headers any more, say
	(MOVE-BP (WINDOW-POINT *MSG-WINDOW*) BP))
      (PROCESS-UNLOCK *ZMAIL-BACKGROUND-PROCESS-LOCK*))))

))

; From file WINDOW.LISP SRC:<L.ZMAIL> OZ:
#8R ZWEI#:
(COMPILER-LET ((PACKAGE (PKG-FIND-PACKAGE "ZWEI")))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMAIL; WINDOW  "

(DEFUN SUMMARY-DISPLAY-ITEM-STEPPER (INDEX &AUX ZMAIL-BUFFER LENGTH OTHER-ZMAIL-BUFFER NEW-INDEX
						DISPLAYED-INDEX MSG)
  (DECLARE (:SELF-FLAVOR ZMAIL-SUMMARY-SCROLL-WINDOW))
  (SETQ ZMAIL-BUFFER CURRENT-ZMAIL-BUFFER
	DISPLAYED-INDEX INDEX
	LENGTH (ZMAIL-BUFFER-NMSGS ZMAIL-BUFFER))
  (COND ((AND (TYPEP ZMAIL-BUFFER 'INBOX-BUFFER)
	      (SETQ OTHER-ZMAIL-BUFFER (SEND ZMAIL-BUFFER ':ASSOCIATED-MAIL-FILE-BUFFER)))
;Better to show them out of order
;than to keep glitching the summary of the inbox buffer
;as messages are read into the mail file buffer by the background process.
;	 (AND (ZMAIL-BUFFER-APPEND-P OTHER-ZMAIL-BUFFER)
;	      (PSETQ ZMAIL-BUFFER OTHER-ZMAIL-BUFFER
;		     OTHER-ZMAIL-BUFFER ZMAIL-BUFFER
;		     LENGTH (ZMAIL-BUFFER-NMSGS OTHER-ZMAIL-BUFFER)))
	 (AND ( INDEX LENGTH)
	      (SETQ DISPLAYED-INDEX (- INDEX LENGTH)
		    ZMAIL-BUFFER OTHER-ZMAIL-BUFFER))
	 (SETQ LENGTH (+ LENGTH (ZMAIL-BUFFER-NMSGS OTHER-ZMAIL-BUFFER)))))
  (SETQ MSG (AREF (ZMAIL-BUFFER-ARRAY ZMAIL-BUFFER) DISPLAYED-INDEX))
  (SETF (MSG-DISPLAYED-INDEX MSG) DISPLAYED-INDEX)
  (VALUES MSG
	  (SETQ NEW-INDEX (1+ INDEX))
	  ( NEW-INDEX LENGTH)))

(DEFMETHOD (ZMAIL-SUMMARY-SCROLL-WINDOW :BEFORE :REDISPLAY) (&AUX TOP-ZMAIL-BUFFER)
;								  OTHER-ZMAIL-BUFFER)
  (COND ((AND CURRENT-ZMAIL-BUFFER (PLUSP (ZMAIL-BUFFER-NMSGS CURRENT-ZMAIL-BUFFER)))
	 (SETQ TOP-ZMAIL-BUFFER (MSG-MAIL-FILE-BUFFER (SUMMARY-DISPLAY-ITEM-STEPPER 0)))
;	 (AND (TYPEP TOP-ZMAIL-BUFFER 'INBOX-BUFFER)
;	      (SETQ OTHER-ZMAIL-BUFFER (SEND TOP-ZMAIL-BUFFER ':ASSOCIATED-MAIL-FILE-BUFFER))
;	      (SETQ TOP-ZMAIL-BUFFER OTHER-ZMAIL-BUFFER))
	 ))
  (OR (EQ LAST-DISPLAYED-TOP-ZMAIL-BUFFER TOP-ZMAIL-BUFFER)
      (SETQ TV:TOP-ITEM NIL TV:TARGET-TOP-ITEM NIL))
  (SETQ LAST-DISPLAYED-TOP-ZMAIL-BUFFER TOP-ZMAIL-BUFFER))

(DEFUN SUMMARY-DISPLAY-VALIDATE-CURRENT-MSG-POSITION ()
  (DECLARE (:SELF-FLAVOR ZMAIL-SUMMARY-SCROLL-WINDOW))
  (AND *SUMMARY-SCROLL-FRACTION*
       (LET* ((CURRENT-INDEX (MSG-DISPLAYED-INDEX CURRENT-MSG))
	      (TOP-INDEX (OR TV:TOP-ITEM 0))
	      (N-LINES (TV:SHEET-NUMBER-OF-INSIDE-LINES))
	      (BOTTOM-INDEX (+ TOP-INDEX N-LINES))
	      NEW-TARGET
;	      OTHER-ZMAIL-BUFFER
	      )
;	 (AND (TYPEP CURRENT-ZMAIL-BUFFER 'INBOX-BUFFER)
;	      (SETQ OTHER-ZMAIL-BUFFER
;		    (SEND CURRENT-ZMAIL-BUFFER ':ASSOCIATED-MAIL-FILE-BUFFER))
;	      (ZMAIL-BUFFER-APPEND-P OTHER-ZMAIL-BUFFER)
;	      CURRENT-INDEX
;	      (SETQ CURRENT-INDEX (+ CURRENT-INDEX (ZMAIL-BUFFER-NMSGS OTHER-ZMAIL-BUFFER))))
	 (COND ((NULL CURRENT-INDEX))		;Not displayed yet
	       ((< CURRENT-INDEX TOP-INDEX)
		(SETQ NEW-TARGET (- CURRENT-INDEX
				    (FIX (* *SUMMARY-SCROLL-FRACTION* N-LINES)))))
	       (( CURRENT-INDEX BOTTOM-INDEX)
		(SETQ NEW-TARGET (+ (- CURRENT-INDEX N-LINES)
				    (FIX (* *SUMMARY-SCROLL-FRACTION* N-LINES))))))
	 (AND NEW-TARGET
	      (SETQ TV:TARGET-TOP-ITEM (MAX 0 NEW-TARGET)
		    MSGS-TO-BE-REDISPLAYED T)))))

))
