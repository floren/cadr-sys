Lisp Machine Base File System documentation
[Somewhat out of date, should be revised to correspond with the code.]


>Goals

BFS is the base level of the file system.  It provides reliable
storage of named files in a hierarchical directory system, including
a general property-list facility for files.  The BFS does not provide
a "reasonable" user interface and does not have any knowledge of
pathname syntax or file naming conventions.  These are matters for
higher levels of the file system.  (As are things like directory
listing and editing programs; many of these operations will operate
by copying the whole directory into the user's local machine
(reading it as a file) and operating on it there using variations
of some of the BFS directory-manipulation primitives.)

BFS is designed so that no "salvaging" is necessary to recover the
system after a crash; the structure on-disk is always consistent.
If there is reason to believe that the file-system may have been
damaged, a salvager exists which may be run.  However, free disk
blocks may be lost during a crash; a garbage-collector exists which
will recover these; it runs concurrently with normal file-system
operation.

BFS knows about names and the hierarchical organization of directories,
rather than only providing reliable storage of files.  This was done
to make the overall system simpler and easier to maintain (given a file,
you always know its name).  Certain other kinds of structures can
be simulated using property lists and generated names.

BFS is supposed to be free of unreasonable limits on things like
file name size, file size, and directory size.  It does not entirely
meet these goals in the current design, but it doesn't do terribly badly.

>VTOCEs

Just a note.  VTOCEs allow explicit control over writing out to disk of
addresses of the blocks of a file, which allows careful sequencing of
operations.  We will take care of this a different way.  VTOCEs also
collect all the information about files on a pack together, separately
from information about files on other packs.  This isn't too useful
in our context.  [This paragraph should be expanded.]

>Style

BFS will reside in the SYSTEM:FILE-SYSTEM (SYS:FS) package.  The
following abbreviations will be used consistently and other
abbreviations will be avoided:
	dir	directory
	prop	property
	fs	file-system
	bfs	base file-system
	kfd	known-file descriptor

Terms:
dp	directory pointer.  A number which is the address of the
	beginning of a directory mapped into the virtual memory.
ep	entry pointer.  A number which is the address of the beginning
	of an entry in a directory mapped into the virtual memory.
fmp	File-map pointer.
index	A number which is an address relative to the beginning of a
	directory.  Occasionally assumed to fit in 16 bits although
	this should be discouraged unless it is the index of a string
	(as opposed to an entry).
unit	A physical disk drive.
pack	A disk pack mounted on a drive.
partition	A portion of a disk pack set aside for a particular use
volume	A set of disk packs which logically belong together.
root
block	The smallest unit of hardware I/O on a disk.
quantum	The smallest unit of software allocation on a disk.

Most error conditions are indicated by signalling conditions rather
than by returning a success/failure value which the caller must check.

Gratuitous consing will be avoided, but a garbage-collector will be
assumed and we will not be paranoid about consing.

Locking hierarchy.

This is to eliminate deadlocks.

First lock "outside" things ("channels").
Lock directories, proceeding from low in the hierarchy up along
 parents to the root.
Lock units (free-quanta tables).
Lock physical I/O resources of some sort.
[Fix this up when we know better just which locks there are.]

>Efficiency

In the initial implementation disk I/O will not be overlapped with
computation, and no special microcode assists will exist.  This will
be fixed later.

>Data structure on disk

The file-system uses packs formatted in the standard Lisp-machine way.
Only the FILE partition of each pack is used.  The first block in the
FILE partition is the "pack fs header", which contains various useful
information, including the following:
	Identifier ("FILE") and version number (1).
	Name of volume to which this belongs
	Pack number of this pack within the volume (starting at 0)
	Number of packs in this volume.
	System incarnation number (incremented mod 2^24 each time the
		pack is accepted into the file system, used to detect
		when directories on this pack require validation.)
	Quantum size on this pack, in blocks.
	Quantum number and number of quanta of the root directory, if any.
	Quantum number and number of quanta of the allocation bit-map.
	Quantum number and number of quanta of the reserved-quanta table
		(used to mark out non-working disk blocks).
	Volume reference name table (for each volume-ID number used
		in file maps in directories on this pack, has the
		name of the volume referred to.)
	Character string comment.

Note that all quantum numbers are relative to the origin of the FILE
partition so that you can copy a FILE partition from one pack to another
and have it work.

>>Word

A word is 32 bits, numbered from right to left.  This is structured
as 4 8-bit bytes, 2 16-bit halfwords, or a 24-bit "address" and an
8-bit "tag" or "decrement".

>>Block

A block is a 256-word unit of disk storage.
[Formerly it was planned to make the last 6 words in a block contain
special identification information, but this was flushed because it
made accessing the data structure more complicated, and was relatively
useless since it served only to detect the case of a block in a file's
file map but not containing the file's data, which can easily be avoided.]
[[This will probably be put back]]

The file system does not normally deal with blocks, however (except
at the lowest level of I/O), but with quanta.
[Untrue]

>>File

A file is an ordered sequence of quanta, and a property list giving
attributes associated with the file.  A file always resides on a
single pack (for no tremendously compelling reason.)

>>Directory

[This is obsolete, see new stuff below]

A directory is a file containing information formatted as follows.
First there is a header containing certain fixed information:
	System incarnation ID of last system to validate this dir.
	Index of end of header (start of string table).
	Index of end of string table.  Allocate new strings here,
	 but avoid bumping into the following.
	Index of first entry
	Size of dir (index of end of last entry)
	Amount of known garbage in dir (padding entries)
	Index of root of string table
	...

There is a string table.  This is a balanced binary tree containing
all strings needed by this directory.  These strings are used for file
names and certain properties.  A string looks as follows:
    First word:
	(left 16 bits) Index of string to left (0 if none)
	(right 16 bits) Index of string to right (0 if none)
    Second word:
	(left 8 bits) Number of characters in the string.
	(right 24 bits) If this string is the name of a file, the
		index of the entry describing that file.  Otherwise 0.
    Third and following words:
	The string in successive bytes.

This sorted representation of the string table (instead of a hash table)
is mainly to allow convenient file-name-completion.

Note that the pointer to an entry in the string table is somewhat
out of place.  A good way to think of it is that there is a string
table and then there is another table associating strings with
entries.  For efficiency, the second table is stored in the middle
of the string table instead of separately.

After the string table come a sequence of entries.  These are property
lists (described in a moment).  An entry probably may not cross a block
boundary.  There are two kinds of entries: padding entries which represent
unused space in the directory, and normal entries which describe files,
directories, links, or whatever.

[New directory format]

Goals for the design of directories.

There should be no "silly limits", on such things as lengths of names, number
of files in a directory, and size of a file.

Looking up a file in a dir should be efficient.

Listing a directory should be reasonably efficient.  Also it should be possible
for a user-machine to read out a whole directory as a file and easily understand
the format (for directory listing and editing programs).

It should be possible to do completion of file-names.

To simplify addressing in the file-system programs, data structures should not
cross disk-block boundaries.

A directory is a file consisting of a bunch of blocks.  There are two kinds
of blocks, data blocks which are used to contain file descriptors, and index
blocks which are used for the names.  Index blocks come in two kinds, terminal
(points to data blocks) and non-terminal (points to other index blocks).  Block
0 of a directory is the root index block.

The index blocks are used to maintain a table of strings, each of which is stored
only once in a directory.  These strings are used for file names and for those
file attributes which are strings (rather than numbers).  The table is sorted
for fast lookup and for name completion.

Storage management of the index-block portion of a directory is by garbage
collection, to avoid the need for reference-counts on strings.  In the data-blocks,
storage can be explicitly freed, but compaction is by garbage-collection.
The copying garbage collector moves all the index blocks to the front of the
directory, but in general index blocks and data blocks may be mixed.

A file-address, as used in a directory, is a 24-bit number where the high
16 bits are a block number within the file and the low 8 bits are the word
number within that block.

Each index block consists of a header, an array of index entries, a gap, and
an array of strings.  The gap is unused space, into which the index entry
array and the strings may grow.  When they meet the index block must be split
into two, and the non-terminal index block which points at it adjusted.
Splitting the root index block into two introduces a new level of index block.

Each string starts on a word boundary.  The first 8 bit byte is the number of
characters to follow, one per each 8-bit byte.  Maximum length is 255 characters.
Strings are sorted according to "file-system-alphabetical" order, in which
B of either case is less than C of either case, while upper-case B is less
than lower-case B.

Each index-entry in the index-entry array is one word; the format depends
on the type of index block.  In a terminal index block, the high 8 bits
are the word address within this block of the associated string, and the
low 24 bits are the file-address of the file-descriptor for the file named
by this string, or zero if the string doesn't name a file.  In a non-terminal
index block, the high 8 bits are the word address within this block
of the string which is the first string in the pointed-to index block,
and the low 24 bits are the file-address (with word part zero) of the
pointed-to index block.  The index-entry array is sorted according to the
strings, in either case.

The header of an index block looks as follows:
word 0-	high half- flags
		Bit 0: 1 if this is a non-terminal index block, 0 if terminal
		Bits 1-15: must be zero
	low half- size of header (word-address of index-entry array)
word 1-	high half- word address of gap
	low half- word address of lowest string
In the case of the root index block, the following extended header exists:
These are mainly used to decide when to garbage-collect.
word 2-	tag-
	ptr- System incarnation ID of last system to validate this dir.
word 3-	tag-
	ptr- total number of strings in directory
word 4-	tag-
	ptr- number of deleted string-pointers since last GC (possibly-garbage strings)
word 5-	tag- maximum depth of index blocks (1+ number of non-terminals to reach a terminal)
	ptr- number of index blocks
word 6-	tag-
	ptr- number of data blocks
word 7-	tag-
	ptr- number of words of garbage in data blocks
word 8-	tag-
	ptr- file-address of first free space in last data block
		(where to create the next file-descriptor)

A data block contains a sequence of elements.  Elements may not cross
block boundaries.  There are two kinds of elements: property lists
(which describe files or other dir entries such as links) and gaps,
which represent unused space.  Gaps are reused if a property list needs
to grow, but in general a garbage-collection is required to consume
all the gaps.

A property list looks like this.  Generally the left 8 bits and
the right 24 bits are the divisions of a word.  The left 8 bits
are usually a type code for a property-list item.  There are four
kinds of items:
	number items.  The right 24 bits are a number (positive
		or negative)
	string items.  The right 24 bits are the index of a string
		in the dir's string table.
	multi-word items.  The right 12 bits are the number of words
		in the item including the first word.  The middle
		12 bits are for miscellaneous use.  The format of the
		following words depends on the type.
	arbitrary-property items.  A special 2-word item.  The right 24
		bits of the first word are the index of a string which names
		the property.  The second word is one of two items
		depending on whether the value of the property is a number
		or a string.
You can tell the item type from the numeric code:
	0-36	multi-word
	37	arbitrary-property
	40-177	number
	200-377	string

A property-list is represented as a multi-word item containing
an item for each property.

Here are some item types:

Gap (multi-word).  The contents is garbage.  This is used to fill
unused space between entries.

Entry (multi-word).  This is used for directory entries.
The contents are the items of a property list.  The misc bits are
the entry type (file, directory, link), and flags [to be defined].

Entry name (string).  A back-pointer from an entry to its name.

Creation date (number).
Reference date (number).
	A date and time expressed as a 24-bit 2's complement number.
	This is the time in minutes relative to the beginning of
	the year 1995.  This can express times from February 1979
	until November 2010.  No time-zone is implied, "local time"
	is used.

File length (number).  The number of valid bytes in the file.  This
	only allows a maximum of 8M bytes.  Alternatively it could
	be the number of valid bytes in the last quantum, preceding
	quanta assumed to be fully utilized.

File author (string).  Name of who wrote the file.

File comment (string).  Displayed in the directory listing.

Arbitrary property.  This is 2 consecutive words, first the
	indicator then the value:
 Arbitrary property indicator (string).  The name of a property
	which does not have an item-type code.
 Arbitrary property string value (string).  A string which is
	the value of the property.
 Arbitrary property number value (number).  A number which is
	the value of the property.

File-map (multi-word).  The misc bits contain 6 bits of
volume ID and 6 bits of which pack within the volume.  (A file
can only reside on one pack.)  The following words each describe
a contiguous sequence of quanta; the left 8 bits are the number of
quanta minus one, and the right 24 bits are the quantum number of the
first quantum.
[There should be provision for files which exist in multiple copies
on different disks.]

Symbolic link (string).  Contains the pathname of the file to be linked
to.  This has to be interpreted by outer levels of the file system,
and the syntax allowed here may well not be limited to just file names.

[More item types to be documented]

Some properties can be changed by the user, while others are read-only.
This is a function of the item-type code.

>>...

>Data structure in core

>>Unit Table
  (pack ids, volumes, free-quanta table)

A free-quanta table has the following:
      o	The free quanta themselves, expressed as a set of first-quantum,
	number-of-quanta pairs.  This could be sorted so as to merge
	adjacent regions, but this does not seem worth the cost.  I
	also don't think it necessary to use these in FIFO order.
	The issue is whether it is desirable to try to keep files in
	nearly contiguous blocks in ascending order of disk addresses.
	Should this be represented as an array or a list?
      o	The number of blocks per quantum.
      o	The numbers of words used and free in the table.
      o The number of free quanta in the table plus the number free
	in the pack's bit-map.  I.e. the number of quanta available to
	allocate to files.
      o The number of free quanta in the table.
      o Minimum.  If the number of free quanta falls below this, and
	there are more free quanta in the bit-map, get some.
      o Maximum.  If the number of free quanta rises above this, or
	if the number of free words in the table falls to zero, return
	some quanta to the bit-map.

>>KFD table

A KFD (known-file descriptor) is a handle on a file within the BFS,
and part of the interface between BFS and the outer levels of the file
system.  The KFD's in the world are linked into a structure which represents
a skeleton of the file hierarchy.  The root-directory has a parent KFD
of NIL and a name of "ROOT".  The components of a KFD are as follows.

KFD-NAME	a string which is the name of the file.
KFD-TYPE	one of { FILE, DIR, ROOT ~.  ROOT means a DIR whose
		describing entry property-list is not in a directory,
		this can either be the main root or the root of a foreign
		file-system grafted onto the hierarchy by creating a KFD
		with some name and parent (much as in Unix).
KFD-PARENT	the KFD for the directory containing this file.
KFD-ENTRY-INDEX	the index within the parent directory of the entry
		describing this file.  This is updated if the directory
		is changed.  For a ROOT, this is not an index but a numeric
		array containing a faked-up property list (dir entry).
		[Note: it may be that a root always contains the dir
		dir entry for itself.  The file-map also must be stored
		externally to allow reading the root to get the dir entry.]
KFD-ELDEST-CHILD
		the first KFD for a file in this directory, or NIL.
KFD-SIBLING	the next KFD for a file with the same parent, or NIL.
KFD-REGION	for a directory, the region number into which the dir
		has been mapped, or NIL if it is not currently mapped.
KFD-LOCK	lock cell for both the KFD and the represented dir or file.
		Locking of non-dir files may possibly not get used
		for anything.
KFD-REFERENCE-COUNT
		Number of people outside the BFS who know about
		this KFD.  If 0, KFD may be garbage collected if it has
		no issue.
KFD-MAP-REFERENCE-COUNT
		Number of reasons why this directory must remain
		mapped to a region.  If 0, region may be garbage
		collected.  [Does it ever need to remain mapped
		except when it is locked?]
KFD-NEXT	Link to next KFD on list of all allocated KFDs or
		all free KFDs.

>>Files

Files are accessed by doing "user disk I/O" to a buffer RQB provided
by the caller.  The extra words in the blocks will be generated/checked
by the BFS.  Writing off the end of a file will extend it, allocating
additional quanta.  Presumably the outer levels of the file system will
provide appropriate buffering of blocks of files.

An important point to note is that the file-map in the directory will
not be updated to specify that a quantum is contained in a file until
all of that quantum (or all except some at the end marked off by a
current-file-length property) has been written on and the I/O operation
has completed.  This ensures that a file can never contain "garbage"
because some blocks of the file were not written out before the
system crashed.  Before a quantum is put in the file-map it (actually
several contiguous quanta) are remembered in data-structure associated
with a file open-for-writing.  This probably belongs in the KFD.
Making directories bigger works a little differently since the length
of valid data in a directory is defined by its header, not by the
entry in the containing directory.

>>Directories

Directories are accessed by mapping them into the virtual memory.
This implies a maximum size for a directory (if things are to be kept
reasonably simple), and a maximum number of directories mappable
at a time.  (These limits are 64K words (about 1000 files) and 200
dirs roughly.)  A directory is a new kind of region.  It has a page
map, pointed to by region-gc-pointer, with one word for each page
giving the unit number and disk address where that page resides
(as 8 bits and 24 bits).  The microcode can read in directory pages
in response to a page fault, and can remove them from core if they
are not modified, but cannot write them to disk.  Macrocode takes
care of writing directory pages to disk and marking the in-core
copies not-modified.  This gives the macrocode full control over
writing out of directories.  Directories will not be written out
when locked, and will be locked while being written out so that
they cannot change.  All modified pages of a directory will be written
out together so that the "window" during which the directory on
disk is half-modified is minimized.

Macrocode often reads in several pages of a directory together,
typically the header and the entire name-table, in order to
improve efficiency.

If a half-modified directory should get out to disk, a procedure
called directory validation will notice this.  In any case allocation
and de-allocation of disk quanta is done in such a careful way
(explained elsewhere) that damage to a directory can affect only
the files in that directory and cannot cause general file-system
damage such as two files containing the same disk quantum.

Directory validation consists of checking over the directory for
consistency the first time it is accessed during a particular
session of the file system.  This is what the system incarnation
number in the directory header is for.  [Check
consistency of all pointers, undefined crud, partial entries, ...]
Problems with the directory result in either a trap to debugging
routines or automatic salvaging of as much as possible and
notification of someone.

[Give directory region tables, write-out algorithms, locking,
disk-error handling, directory reorganization, etc.]

>Allocation of disk quanta

It is important to avoid allocating the same quantum to two files.
It is also important to avoid losing track of free quanta, although
a small amount of this can be tolerated since there is a disk garbage
collector.

For each unit, we have a free-quanta table in core.  Each quantum
in this table is not allocated to any file, but is marked as allocated
in the bit-map stored on the unit.  The operations are:

1. Allocating a quantum to a file.  Take a quantum from the unit's
free-quanta table and put it in the file-map.  It is known that no
other file contains this quantum and that the bit-map on the disk
says this quantum is not free.  So everything is safe.

2. Removing a quantum from a file.  (Deleting the file is the
usual case, truncating is a bit different.)  Change the directory
so that it no longer points to this quantum, either by deleting
the file or by changing its file-map.  Write out the directory.
It is now guaranteed that nothing on the disk points to this
quantum, and that the quantum is marked as allocated in the bit-map.
Note that when deleting a file we write out the directory only
once, then free all the quanta of the file in one operation, keeping
the directory locked and getting the quantum addresses out of the
deleted dir entry which is actually still sitting in the directory.

3. Getting more free quanta when the unit's free-quanta table gets low.
Read in the bit-map from the disk.  Find some free quanta, mark
them allocated, and put them in the free-quanta table.  Write the bit-map
back out.  Wait for I/O completion, then unlock the free-quanta table.
It is guaranteed that no file points to these quanta.

4. Really freeing free quanta when the unit's free quanta table gets
full.  Read in the bit-map from the disk.  Remove free quanta from
the table and mark them free in the bit-map.  Write out the bit-map.
It is guaranteed that no files contain these supposed-to-be-free quanta.

This scheme avoids any inconsistent states on the disk, and minimizes
the number of I/O operations to the bit-map provided the size of the
free-quanta table is reasonable.  Note that transferring of quanta
between the free-quanta table and the bit-map could be done in the
background.

PROGRAM DOCUMENTATION

BFS0

This module manages disk units and allocation of disk space.

The format of the file-system-header block, which is block 0 of the
FILE partition on each pack, may be found in constants in this file.

The structure PACK-STRUCTURE exists in one instance for each mounted pack.
[The components of this structure could be documented here, but that
doesn't seem very interesting right now.]
[Also to be documented: quanta, volume reference table, free map,
available table, quantum GC]

The following functions are of interest to other modules:

ACCEPT-UNIT - Brings the pack mounted on the specified unit into the
file system.

DISMOUNT-UNIT - The opposite of ACCEPT-UNIT.

VERIFY-ACCEPTED-UNITS - makes sure that the set of packs mounted is
complete and consistent.

PRINT-MOUNTED-UNITS - prints summary information of what packs are mounted.

PRINT-REFERENCE-TABLES - prints a summary of the volume reference tables,
which map encoded volume IDs into specific packs [explain better].

PRINT-AVAILABLE-TABLE, PRINT-FREE-MAP - summarize these data structures,
which might be documented some time.

DECODE-PACK-ID - convert an encoded pack-ID obtained from a particular
pack into the pack-structure for the referenced pack.

ENCODE-PACK-ID - given a pack to be referenced and the pack on which
the encoded pack-ID will be stored, create such an ID.

ALLOCATE-DISK-QUANTA - allocates some space on a particular pack.

FREE-DISK-QUANTA - deallocates some space.


BFS1

This module manages access to physical disk blocks.  It maintains a
cache which holds several recently-used disk blocks.  This module is in
charge of doing physical disk I/O, possibly several blocks at a time.
Disk errors are handled by signalling the :DISK-ERROR condition.

[The data structures are the area used as a source of wired pages,
the table with one entry for each cache page giving unit number, block
number, wire-count, hash thread, lru-forward-thread, lru-backward-thread,
modified-flag, I/O-in-progress-flag (not used initially), and the
disk-address hash table, used to quickly find a block at a particular
address.]

The following functions are of interest to other modules:

INITIALIZE-DISK-CACHE - sets up the specified number of wired-down pages
as the disk cache.

DISK-CACHE-FIND - given a unit number, block number, whether the access
is create, read-only, or read-write, and the number of following blocks to try
to read in in the same I/O operation.  Returns the virtual address of
the first of the specified blocks; to access the remaining ones you must
call DISK-CACHE-FIND for each of them, they may not be at contiguous
virtual addresses.  Create access means that the block is being given
fresh contents, it need not be read in from the disk.

DISK-CACHE-RELEASE - releases the disk-cache block at a specified virtual
address, allowing it to be reused; it is written out before reuse if
it has been modified.

DISK-CACHE-FORCE-WRITE - given a unit number, block number, and number
of blocks, if any of those blocks are in the disk cache and have been
modified they are written out.  Does not return until the write is
completed successfully.  Depending on whether the number of block is
large, may look up each block individually or sweep the cache.

PRINT-DISK-CACHE-CONTENTS, PRINT-DISK-CACHE-STATISTICS - debugging functions


BFS2

This module manages directories.  The following functions are of interest
to other modules:  [specification not yet complete]

;Index processing
DIR-STRING-TO-LM-STRING strp bashable-indirect-array
FIND-DIR-STRING dp string create-if-not-found-p -> strp
FIND-DIR-ENTRY dp string -> strp or NIL
DIR-ENTRY-NAME-COMPLETIONS dp string stream - outputs strings to stream, CR's between
DELETE-DIR-STRING dp strp - just updates the header in the root index block

;Property-list processing

;General data-blocks management

;Garbage collector

;Validator

;Debugging
PRINT-DIR dp everything-p


>Program

>>Initialization

BFS-STARTUP
BFS-INITIALIZE
BFS-REINITIALIZE
ACCEPT-UNITS u1 u2 ...
ACCEPT-UNIT unit  (optional partition name instead of FILE)
VERIFY-ACCEPTED-UNITS
FABRICATE-ROOT-KFD unit blk nblks parent name

>>Directory mapping

 ;These next 4 may want to be rearranged
MAP-DIR kfd -> dp
RELEASE-DIR kfd
LOCK-DIR kfd
UNLOCK-DIR kfd

PAGE-IN-DIR-FIRST-PART dp		[how does this get dir size?]
PAGE-OUT-DIR dp

MAKE-DIR-PAGE-TABLE kfd
GC-DIR-REGIONS

Locking strategy?

Most of these primitives are called with the dir locked.

>>Directory contents manipulation

GET-ENTRY-PROP ep type -> number or string or fmp or NIL
PUT-ENTRY-PROP ep type value
REM-ENTRY-PROP ep type -> T or NIL

GET-ENTRY-GENERAL-PROP ep name -> number or string or NIL
PUT-ENTRY-GENERAL-PROP ep name value
REM-ENTRY-GENERAL-PROP ep name -> T or NIL

GET-DIR-STRING strp -> lm-string
FIND-DIR-STRING dp string -> strp or NIL
FIND-OR-CREATE-DIR-STRING dp string -> strp
FIND-DIR-ENTRY dp string -> ep or NIL

GROW-DIR-ENTRY dp ep n-new-words -> ep
ADJUST-DIR-ENTRY-SIZE ep ep n-words -> ep

DELETE-DIR-ENTRY dp ep

>>KFD manipulation

FIND-KFD parent-kfd name -> kfd
RELEASE-KFD kfd
MAP-KFD-CHILDREN kfd fcn
MAP-KFD-PARENTS kfd fcn
GET-EP-FROM-KFD kfd -> ep
GC-KFDS

>>Open file

This is just FIND-KFD

>>Create file

CREATE-DIR-ENTRY kfd name type &optional n-blocks logical-volume -> kfd

>>Delete, rename, get-name-completions, etc.

MAP-NAME-COMPLETIONS dp string fcn
   dp or kfd?

>>Disk quantum allocation & file-map manipulation

ALLOCATE-DISK-QUANTA unit n-blocks-wanted -> quantum n-quanta
		Yes the arg is n-blocks not n-quanta
		Only satisfies as much of request as it can contiguously
FREE-DISK-quanta unit quanta n-quanta
REFILL-FREE-QUANTA-TABLE unit n-quanta-up-to
FLUSH-FREE-QUANTA-TABLE unit n-quanta-down-to

TRUNCATE-FROM-FILE-MAP dp ep fmp n-quanta
APPEND-TO-FILE-MAP dp ep fmp quanta n-quanta
GROW-FILE-MAP dp ep fmp n-words
  (may move fm to end of entry, may move entry to end of dir.  Note
   that entries open for writing always have padding after them for
   the sake of this.)
ENCODE-PACK-ID dp unit -> pack-ID  (dp used to find unit dir is on
				    from which we get volume ref name tbl)
DECODE-PACK-ID dp pack-ID -> unit

>>File I/O

READ-FILE-RQB kfd rel-block-no n-blocks[?] rqb
WRITE-FILE-RQB kfd rel-block-no n-blocks[?] rqb
TRUNCATE-FILE ?
EXTEND-FILE ?

>>Directory validater

>>Directory garbage collector

>>Directory dumper/patcher

PRINT-DIR-DP dp
PRINT-DIR-HEADER dp
PRINT-DIR-STRING dp strx
PRINT-DIR-ENTRY dp entx
PRINT-DIR-PROP dp tag address

>>Interim higher levels

>>Table of conditions signalled

DISK-ERROR
DISK-PAGE-ERROR
DISK-FULL
DIR-FULL
DIR-ENTRY-FULL
[This needs to be expanded and expanded upon.]

>>...


>Note on associating one file with another

One way to do this is simply by naming conventions, by which the name
of one file can be derived from the name of the other.  This is the
traditional way, but it is not always satisfactory.

Another way is to put the name of one file on the property list of
the other file.  This is equivalent to "putting the file itself
on the property list."

>Note on possible temporary filename syntax

The following is designed to be upward-compatible with ITS filenames.
A file name consists of a sequence of "words".  A word consists of
a sequence of printing characters.  Equivalence sign is used to quote
special characters such as space, colon, semicolon, equivalence, and any
characters with meaning in higher-level naming conventions (such as *
and >).  Words come in three flavors:  name words are terminated by a space
or the end of the filename.  Device words are terminated by a colon.
Directory words are terminated by a semicolon.  The three flavors of
words may be intermixed freely; order only matters within a single flavor.

The name of the file (within its directory) is formed by concatenating
all non-null name words with a single space between.  (Non-null allows
extra spaces in the syntax).  Either alphabetic case may be used but it
is not significant when comparing file names.  Names generated by the
">" convention (of higher levels of the file system) will follow
the case conventions of existing names.

The name of the directory is formed from the directory words.  Each
directory word is the name of a directory in a path which normally
starts at the root, but if the first directory word is null (there is
a leading semicolon) the path starts from the "working directory".
Thus spaces in directory names must be quoted; this hopefully won't
be a problem, even though spaces will be used freely in file names.

If a device word is the name of a file-computer system, it specifies
that the file resides on that system (there is a "working file-computer"
which is the default).  Otherwise a device-word is interpreted by
the file-computer; for ITS and 20X it is a device-name, while for
the Lisp-machine file system it is used only when creating a file,
to specify what volume it should reside on (the default is a property
of the directory in which the file is created).

MOON@MIT-MC 05/28/79 12:27:53 Re: Tangled Hierarchy
To: (FILE [moon;bfsplm >]) at MIT-AI
Let it be divided into separable levels:
  1. Basic stuff which allocates and deallocates disk quanta and the like.
  2. Stuff which, looking at a dir entry, does I/O and so forth.
  3. Stuff which has to know the format of a dir (a file containing dir
     entries).  Adding a quantum or a property to a file, while part
     of level 2, must call level 3 if relocation is required.  It is not
     really a circular dependency since calling on parent dir.
  4. Stuff which knows how to look up file names.  This knows relations
     between dirs.  This level also includes create, delete, rename, etc.
     KFD's are used by lower levels but managed by this level.

Note that the structure of dir entries itself is necessarily hierarchical
since a file can have only one describing entry.  Tangled hierarchy
can be simulated in two ways:  Build an entirely separate naming structure
on top of this one, or allow "additional" entries for a file which contain
no information except how to find the primary entry.  The primary entry
must point back to the additional entries (a little different from links)
and this structure must be maintained in some fashion since it is not
all in one dir.

