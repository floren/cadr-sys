Brief documentation summary on LMFILE   -*-text-*-

LMFILE is a new Lisp machine file system which is running on the
Filecomputer Lisp machine.  It has several advanced features,
including tree-structured directories and tree-structured files
(actually the same thing, since directories are files).

LMFILE uses flavors at a fairly low level to allow implementation of
new types of files with interesting forms of behavior.  Special types
of files to use for mailboxes and data bases will probably exist some
day, and so will facilities for multiple forking versions of a program
which are combined automatically.  It is not user-extensible; new node
flavors must be installed as part of the system.

For the moment, LMFILE's most useful feature is access from the PDP10.
One special kind of file stores its data in PDP10 format, which means
that they store, effectively, 36-bit PDP10 words, using the PDP10
character set.  Both these and ordinary files containing 8-bit or
16-bit Lisp bytes can be accessed as if they were in either format.
As a result files can be written and read by either the PDP10 or Lisp
machines, with full compatibility.


Access from the PDP10.

 This uses the device name FC.  Files are read and written in the
ordinary manner, using ordinary ITS-style filenames.
Random access is not supported.

 To create a directory, read the file ..NEW. (UDIR) on that directory.
You will get "file not found", not "no such directory", confirming
that the directory now exists.

 Deleting a file does not really make it go away.  It can be
undeleted, but only from a lisp machine; there is no interface for
this from the PDP10 as yet.  Deleted files go away when the directory
is expunged.  To expunge the directory, read the file .EXPUN (DIR)
from the directory.  You will get "file not found".

 LMFILE allows multiple versions of all files, even those which on the
PDP10 appear to have a non-numeric FN2.  This means that multiple
file versions of what appears to be a precise filename can exist.
In other words, there can be several versions of the file FOO BAR,
and these versions do not appear in the directory listing on the PDP10,
since it has the standard format, which provides no place to show the
version when the FN2 is used for something else.  There is no way to
specify the version when you refer to the file from the PDP10.
Reading and renaming uses the latest version; deleting applies to the
earliest one.  These unoverridable defaults are normally the right
thing.

 Files whose names are too long cannot be accessed and do not appear
in PDP10 directory listings at all.  This can perhaps be changed, but
only if someone supplies a coherent design.

 Binary format directories are not supported yet, and neither is the
FCDIR device.  They will probably come along eventually.

 Links are supported.  :LINK works normally.

 Subdirectories cannot be accessed from the PDP10.  Sorry.
You can make a subdirectory accessible by creating a link
directly under the root which points to the desired subdirectory.
This link cannot be created from the PDP10, but it can be referred to
from the PDP10 like any other directory.


Access from Lisp machines.

 Access the file computer using host name FC.  If you have loaded the
relevant patches, this host name is now predefined.

Filename syntax

 A pathname for LMFILE contains any number of steps, separated by
backslashes.  Thus, RMS\FOO is the file FOO under the file RMS (under
the root).  Each step can be followed by a version-spec, which is "#"
followed by a number or ">", "<" or "!".  The case used for a name is
ignored, but when a file is created the case you specify will be used.

 "~" stands for the root directory.  You can specify a pathname
completely, starting with ~.  For example, ~\RMS\FOO means FOO under
RMS under the root.

 Alternatively, you can divide a pathname into a "name" part and a
"directory" part, as is usually done with Lisp machine pathnames.
Then the two parts default independently.  The directory part is
terminated with a semicolon.  Thus, RMS; FOO is also a way of
specifying FOO under RMS under the root.  So is ~;RMS\FOO.  The root
directory can also be referred to with the name ROOT, because there is
a file named ROOT, underneath the root directory, which is a link to
the root directory.  Thus ~\ROOT is equivalent to ~ and ROOT; is
equivalent to ~;

 When you omit the directory, the default directory is used (NOT the
root directory!); except that if your name starts with ~, the
directory is irrelevant anyway.

 FOO\BAR\BLETCH could be specified as FOO\BAR; BLETCH or FOO;
BAR\BLETCH.  (The spaces are not really significant and can be put
around backslashes as well).  If you specify FOO; BAR\BLETCH, and the
next pathname you use is just MUMBLE (no "directory"), it defaults to
FOO; MUMBLE.  If you specify FOO\BAR; BLETCH and then MUMBLE, it
defaults to FOO\BAR; MUMBLE.  This freedom will become useful when
there is editor support for editing a tree-structured file (that is, a
"directory") as a unit.

 There is one other difference between FOO; BAR\BLETCH and
FOO\BAR; BLETCH: opening the former for output will create the
intermediate directory BAR if it does not exist, but opening the
latter will get an error instead.

 In the editor, pathnames will appear like FOO  RMS rather than as
RMS; FOO.  (^X is the SAIL character leftarrow).  This alternate
syntax exists mainly to allow the editor to put the directory last, as
is convenient for buffer name completion.  You can also type this
syntax yourself.  It is fully equivalent to using the other order and
a semicolon.

 Files written from the PDP10 with two non-numeric filenames actually
have only a single name.  It contains the two PDP10 filenames
separated by the character Space.  Thus, if you write FC:FOO BAR, you
really get a file named "FOO BAR".  If you ue a PDP10 filename which
contains a non-trailing space, that space is translated into the SAIL
character  (double-headed-arrow) in the filename used on the file
computer.

Version numbers

 To specify a version number, use "#" followed by either a number or
one of the symbols >, <, or !.  Examples:

    RMS; FOO#>    RMS; FOO#69    RMS; FOO#<

> refers to the latest version; <, to the earliest; !, to the
"installed" version.  The installed version is one version marked with
a special flag.  Positive numbers refer to those exact version
numbers, while zero and negative numbers count back from the latest
version.  Zero is different from > in that it refers to the latest
existing version number even on output, whereas > makes a new version
(as it does on ITS).  If you do not specify a version, > is used.

 A version number can appear in any step in the path, not just in the
last step.  In other words, the pathname FC: RMS#3; FOO#> makes sense
and refers to the latest version of FOO in the third version of RMS.

 It is possible to create multiple versions of directories just as with
any other files, but normally directories have the :SUPERSEDE-PROTECT
property, so that you are not allowed to do this unless you specify a
non-nil value for :OVERRIDE-PROTECTION in the OPEN.  Supersede
protection also causes the directory's version number to be omitted
from truenames of files, where they would be ugly.  On the other hand,
you do not need to specify ':FLAVOR ':DIRECTORY, because that is
inherited from the previous version.  Supersede protection displays as
"#" in DIRED.

 When you create a new version of a directory, it initially contains
all the same things as the previous version: the same files, versions,
etc.  In fact, they are not really the same files; they are "hard
links" to those files, but the hard links act in most respects just
like the files they point to.  If you expunge the original files from
the original version of the directory, they migrate to replace the
links.  As a result, you can delete files in either version of the
directory without worrying that they will vanish from the other.
If you don't want the new version to inherit all the files from the
old, you can specify :INHERIT-SUBNODES as NIL in the open.

 Multiple versions of a directory are useful for preserving one
state of a complete system while going on to work on another.  The
"installed" version number feature may synergize with this.

File types

 In LMFILE, source files do NOT have a "file type".  Only auxiliary
files such as QFASL files, which are associated with other files, have
types.  In fact, this is not regarded as a "type of file" but rather a
relationship between files: the file named "FOO QFASL" is the QFASL of
the file named "FOO".

 You can specify a type in a Lisp machine LMFILE pathname using the
vertical bar character.  Thus, FC: RMS; FOO|QFASL refers to the QFASL
of the file FOO.  This pathname will retrieve the file named
FOO QFASL.  That is what will appear in a directory listing, and you
can also type that yourself.  The difference between FOO|QFASL and
FOO QFASL is primarily in the Lisp machine pathname system: the one
with the vertical bar has separate "name" and "version", but FOO QFASL
is simply a name; the internal space does not have syntactic
significance.  (Leading and trailing spaces are ignored.)

 What this comes down to in practice is that you will probably type in
"FOO QFASL" yourself, and get the right file, but programs that change
the type of a pathname to "QFASL" will effectively specify FOO|QFASL
and get the same file.

 If I work out the details, I will replace the character "|" in the
pathname syntax with the space character.  With luck, this will be
designed to eliminate the need for the user to distinguish two
different ways of specifying the pathnames.

 Eventually, given a tree-structured file named FOO with subparts such
as FOO\BAR, FOO\BLETCH, FOO\BLETCH\QUUX, etc., you will be able to
compile FOO all at once to make FOO|QFASL.  There will probably be no
file FOO\BAR|QFASL (unless we get structured QFASL files as well), so
if the system attempts to load or refer to FOO\BAR|QFASL, property
inheritance will cause FOO|QFASL to be loaded instead.

 Like version numbers, property files exist at all levels of the
hierarchy, so paths such as FOO|QFASL\BAR are legal and make
conceptual sense.  There is probably little use for them now.

Creating a Directory

 You can create a directory remotely.  Simply create it as a file, by
opening it.  Do

	(OPEN "FC: ~; username" ':CREATE T ':FLAVOR ':DIR)
	(CLOSE *)

 Also, if you create a file with multiple pathsteps in its "name" (as
opposed to its "directory"), directories are created automatically so
that the file can exist.  For example, if you open "FOO; BAR\BAZ" for
output, a directory FOO\BAR will be created automatically.  But if you
open "FOO\BAR; BAZ", FOO\BAR must exist already.

Listing a Directory

 You can use all the normal techniques for listing directories,
including the editor commands C-X C-D, View Directory and DIRED.
There is one interesting special feature: you can see multiple levels
of tree structure in one listing.

 It is a standard feature that if you specify a name which is not * to
C-X C-D or DIRED, you see only files with that name.  In LMFILE, you
can specify a name path of any number of steps, some of which can be *
or **.  Then, LMFILE lists all files which match that name path.  *
matches any name, but only one level of hierarchy.  ** matches any
number of levels.  So listing the directory of FC:RMS;** will include
all files under RMS at any level of subdirectories (including the
subdirectories themselves).  ** is currently equivalent to * if it is
not the last thing, but perhaps this will be extended.

 I would appreciate suggestions for improving the details of what
kinds of names are meaningful in directory listings, what they mean,
and what the defaults should be.

Format of Directory Listings in ZWEI

 One thing you will not be used to from ITS is that the word DIRECTORY
appears instead of the byte-length and byte size for files which are
directories.  Also, such files will print X=<last expunge date>
instead of (<reference date>) at the end of the line.

 Two new flags appear in addition to the traditional ! and $.
The new @ flag stands for the :dont-delete property, and the new #
flag stands for the the :dont-supersede property.  Directories
normally have both of these.  @, # and $ are all commands in DIRED
which toggle the matching flags.  To delete a directory, you must turn
off the @ flag first.  Note that DIRED will shown you all the
initially deleted files in the directory with "D"s to start with; if
you remove the D's, exiting DIRED will undelete those files.

Init Files

 Your init files go in a subdirectory named INIT, under your personal
directory.  In other words, your Lispm init file would have the name
USERNAME\INIT\LISPM.  You can simply write out USERNAME; INIT\LISPM.

Deletion and Expunging

 LMFILE resembles Twenex in that files do not disappear when they are
deleted; they can be undeleted.  You can open a deleted file by
specifying ':DELETED T in the OPEN.  The stream supports an operation
:UNDELETE which undeletes the file.  A function UNDELETEF will appear
soon.

 To make the deleted files disappear and bring back their disk space,
you expunge the directory.  Use the EXPUNGE-DIRECTORY function for
this, or the ZWEI command Expunge Directory.  For example,

	(FS:EXPUNGE-DIRECTORY "FC:RMS;")

 Unlike Twenex, LMFILE does not instantaneously destroy a file when
another file with the same name AND version is created.  As on ITS, a
new file is created in the deleted state, and does not appear until it
is closed.  (If you close with an argument of ':ABORT, the new file is
left deleted.)  The old file with the same name and version continues
to be visible until the new one is undeleted by closing it.  Then the
old file is merely deleted.  Like all other deleted files, it stays
around until the directory is expunged.

Links

 LMFILE implements both "hard" and "soft" links.  Soft links point
to another file by name, whereas hard links point to a particular
file, independent of its name.  ITS links are soft links.

 To create a soft link, simply open it as a file, specifying to make
it a link:

	(OPEN "FC: RMS; LINKNAME" ':CREATE T ':FLAVOR ':LINK
	      ':LINK-TO "FC: MUMBLE\BAZ; QUUX")
	(CLOSE *)

(Remember the file does not appear until closed).  Opening LINKNAME
will be the same as opening MUMBLE\BAZ\QUUX, and opening LINKNAME\FOO
will be the same as opening MUMBLE\BAZ\QUUX\FOO.  You can use a link
to make a subdirectory accessible to the PDP10 FC: device; simply make
the link directly under the root.  For example, if you link ~; RMSFOO
to the subdirectory RMS\FOO, opening RMSFOO;FILE will be the same as
opening RMS\FOO;FILE.  The FC: device cannot access RMS\FOO, but it
CAN access RMSFOO;.

 There is no user interface at the moment for creating hard links;
features will begin appearing soon that make use of them.

Listing all Directories

 The "master file directory" is simply the root.  To list all
directories, simply list the root directory.  You would specify the
pathname FC: ROOT; in the View Directory command of ZWEI.
