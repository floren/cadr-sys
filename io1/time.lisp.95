;;; Date and time routines -*- Mode:LISP; Package:TIME; BASE:8 -*-
;;;	** (c) Copyright 1984 Massachusetts Institute of Technology **

;;; Note: days and months are kept one-based throughout, as much as possible.
;;; Days of the week are zero-based on Monday.

;;; [Maybe this should have a global variable which causes it to use AM/PM in place
;;;  of 24-hour time, in all relevant functions?]
;; this should probably have variable which is the initial-year, 
;; in case we want more precision.


(DEFUN MICROSECOND-TIME (&AUX (INHIBIT-SCHEDULING-FLAG T))
  "Return the current value of the microsecond clock (a bignum).
Only differences in clock values are meaningful.
There are 32. bits of data, so the value wraps around every few hours."
  (SELECT SYS:PROCESSOR-TYPE-CODE
    (SI:CADR-TYPE-CODE
     (LET ((LOW (%UNIBUS-READ #o764120))  ;Hardware synchronizes if you read this one first
	   (HIGH (%UNIBUS-READ #o764122)))
       (DPB HIGH #o2020 LOW)))
    (SI:LAMBDA-TYPE-CODE
     (COMPILER:%MICROSECOND-TIME))))

(DEFUN FIXNUM-MICROSECOND-TIME (&AUX (INHIBIT-SCHEDULING-FLAG T))
  "Return the current value of the microsecond clock as two fixnums."
  (DECLARE (RETURN-LIST LOW-23-BITS TOP-9-BITS))
  (SELECT SYS:PROCESSOR-TYPE-CODE
    (SI:CADR-TYPE-CODE
     (LET ((LOW (%UNIBUS-READ #o764120))
	   (HIGH (%UNIBUS-READ #o764122)))
       (VALUES (DPB HIGH #o2007 LOW) (LDB #o0711 HIGH))))
    (SI:LAMBDA-TYPE-CODE
     (LET ((TIME (COMPILER:%MICROSECOND-TIME)))
       (VALUES (LDB #o0027 TIME) (LDB #o2711 TIME))))))

(DEFCONST INTERNAL-TIME-UNITS-PER-SECOND 60.)  ;60 60th of a sec in a second

;; Number of times (TIME) has wrapped around since booting.
(DEFVAR HIGH-TIME-BITS 0)
;; T if  (TIME) was TIME-LESSP than WARM-BOOT-TIME when last checked.
;; Each this changes from T to NIL, (TIME) has wrapped around once.
(DEFVAR WAS-NEGATIVE NIL)
(DEFVAR LAST-BOOT-TIME 0 "Value of (TIME) when machine was booted.")

(DEFF GET-INTERNAL-REAL-TIME 'GET-INTERNAL-RUN-TIME)
(DEFUN GET-INTERNAL-RUN-TIME ()
  "Returns time in 60'ths since last boot.  Can be a bignum."
  (LET ((TIME-DIFF (%POINTER-DIFFERENCE (TIME) WARM-BOOT-TIME)))
    (WHEN (AND (PROG1 WAS-NEGATIVE
		      (SETQ WAS-NEGATIVE (LDB-TEST (BYTE 1 22.) TIME-DIFF)))
	       (NOT WAS-NEGATIVE))
      (INCF HIGH-TIME-BITS))
    (DPB HIGH-TIME-BITS (BYTE 23. 23.) (LDB (BYTE 23. 0) TIME-DIFF))))

;;; This is code to read and initialize the LAMBDA's battery clock.

(defconst rtc-address-register-multibus-address #x1c124)
(defconst rtc-data-register-multibus-address #x1c120)

(defun read-rtc-reg (adr)
  (IF-IN-LAMBDA 
    (%nubus-write #xff rtc-address-register-multibus-address adr)
    (ldb 0010 (%nubus-read #xff rtc-data-register-multibus-address))))

(defun write-rtc-reg (adr data)
  (IF-IN-LAMBDA
    (%nubus-write #xff rtc-address-register-multibus-address adr)
    (%nubus-write #xff rtc-data-register-multibus-address data)))

;;; 0-15 used by clock chip
;;; 16,17 time zone
;;; 20 34 validation string.  "time is good"  for this version.
;;; 35 speed.  source cycles*8+execute cycles
;;; last-boot-by  0 unknown, 1 SDU dribble, 2 SDU via serial, 3 SDU via chaos, 4 CADR via debug.
;;; 36 rg-slot
;;; 37 tv-slot
;;; 40 prime-memory slot
;;; sdu serial port availability to LAMBDA. bit 1 port A, bit 2 port B.
;;; 41 ether exists.  bit 0, 3com ethernet board in usual place, bit 1 exelan board, etc.
;;; 42 magtape exists.   1 cipher streamer, 2 buffered cipher, 3 Kennedy,
;;; disk exists bitcode.  bit 0 unit 0 exists, bit 1 unit 1, etc.
;;; disk number to boot from.
;;; multibus serial card code.  0 none, 1 systec

(defvar rtc-array (IF-IN-LAMBDA (make-array 64.)))

(defconst rtc-seconds 0)
(defconst rtc-seconds-alarm 1)
(defconst rtc-minutes 2)
(defconst rtc-minutes-alarm 3)
(defconst rtc-hours 4)
(defconst rtc-hours-alram 5)
(defconst rtc-day-of-week 6)
(defconst rtc-date 7)
(defconst rtc-month 10)
(defconst rtc-year 11)
(defconst rtc-reg-a 12)
(defconst rtc-reg-b 13)
(defconst rtc-reg-c 14)
(defconst rtc-reg-d 15)
(defconst rtc-time-zone-low 16)			;not maintained by chip
(defconst rtc-time-zone-hi 17)			;not maintained by chip
;;; the rtc-cookie is written into the CMOS ram in the clock chip.  If the battery
;;; ever fails, the string will get trashed, so we wont believe the time.
(defconst rtc-cookie-start 20)
(defconst rtc-cookie "time is good")

;;; Bits in reg-a
(defconst %%rtc-update-bit 0701)

;;; Bits in reg-b
(defconst %%rtc-set-mode 0701)
(defconst %%rtc-binary-mode 0201)
(defconst %%rtc-24-hour-mode 0101)
(defconst %%rtc-daylight-savings-enable 0001)

;;; Bits in reg-d
(defconst %%rtc-valid-bit 0701)

(defun read-rtc-chip ()
  (cond ((bit-test %%rtc-update-bit (read-rtc-reg rtc-reg-a))
	 (process-sleep 2)
	 (if (bit-test %%rtc-update-bit (read-rtc-reg rtc-reg-a))
	     (format error-output "~&Warning: update bit on clock chip seems to be stuck."))))
  (dotimes (i 64.)
    (aset (read-rtc-reg i) rtc-array i)))

(defun write-rtc-chip ()
  (dotimes (i 64.)
    (write-rtc-reg i (aref rtc-array i))))

;(defun print-rtc ()
;  (read-rtc-chip)
;  (dotimes (i 64.)
;    (if (zerop (logand i 7)) (fresh-line))
;    (format t "~16,2r " (aref rtc-array i))))

;;;the chip turns off this bit if the battery ever dies
;;; this would be nice, but the SDU touches it before we get a chance to ...
;(defun rtc-valid-p ()
;  (bit-test %%rtc-valid-bit (read-rtc-reg rtc-reg-d)))

(defun rtc-valid-p ()
  (let ((s (with-output-to-string (str)
	     (dotimes (i (string-length rtc-cookie))
	       (send str ':tyo (aref rtc-array (+ rtc-cookie-start i)))))))
    (string-equal s rtc-cookie)))

(defvar lambda-number-of-source-cycles nil)
(defvar lambda-number-of-execute-cycles nil)
(defvar lambda-rg-slot-number nil)
(defvar lambda-tv-slot-number nil)
(defvar lambda-prime-memory-slot-number nil)
(defvar lambda-ethernet-configuration-mask nil)
(defvar lambda-magtape-configuration-mask nil)

(defun get-lambda-configuration-from-rtc-chip ()
  (if (null (rtc-valid-p))
      (ferror nil "cmos ram configuration information not set up"))
  (read-rtc-chip)
  (setq lambda-number-of-source-cycles (ldb 0303 (aref rtc-array 35)))
  (setq lambda-number-of-execute-cycles (ldb 0003 (aref rtc-array 35)))
  (setq lambda-rg-slot-number (aref rtc-array 36))
  (setq lambda-tv-slot-number (aref rtc-array 37))
  (setq lambda-prime-memory-slot-number (aref rtc-array 40))
  (setq lambda-ethernet-configuration-mask (aref rtc-array 41))
  (setq lambda-magtape-configuration-mask (aref rtc-array 42))
  (cond ((or (not (member lambda-number-of-source-cycles '(1 2 3)))
	     (not (member lambda-number-of-execute-cycles '(1 2 3)))
	     (< lambda-rg-slot-number 0)
	     (> lambda-rg-slot-number 14)
	     (< lambda-tv-slot-number 0)
	     (> lambda-tv-slot-number 14)
	     (< lambda-prime-memory-slot-number 0)
	     (> lambda-prime-memory-slot-number 14))
	 (ferror nil "bad data in cmos configuration ram")))
  )

(defun rtc-get-universal-time ()
  (read-rtc-chip)
  (cond ((rtc-valid-p)
	 (let ((tz (// (dpb (aref rtc-array rtc-time-zone-hi)
			    1010
			    (aref rtc-array rtc-time-zone-low))
		       60.)))
	   (if (not (= tz time:*timezone*))
	       (format error-output "~&warning: timezone in rtc chip is wrong")))
	 (time:encode-universal-time
	   (aref rtc-array rtc-seconds)
	   (aref rtc-array rtc-minutes)
	   (aref rtc-array rtc-hours)
	   (aref rtc-array rtc-date)
	   (aref rtc-array rtc-month)
	   (+ (aref rtc-array rtc-year) 1900.)))
	(t nil)))

;(defun print-rtc-array (&aux (*nopoint t))
;  (format t "~d//~d//~d ~d:~d:~d"
;	  (aref rtc-array rtc-month)
;	  (aref rtc-array rtc-date)
;	  (aref rtc-array rtc-year)
;	  (aref rtc-array rtc-hours)
;	  (aref rtc-array rtc-minutes)
;	  (aref rtc-array rtc-seconds)))

(defun rtc-set-universal-time (ut)
  (read-rtc-chip)
  (write-rtc-reg rtc-reg-b (logior (dpb 1 %%rtc-set-mode 0)
				   (dpb 1 %%rtc-binary-mode 0)
				   (dpb 1 %%rtc-24-hour-mode 0)
				   (dpb 1 %%rtc-daylight-savings-enable 0)))
  (multiple-value-bind (seconds minutes hours date month year day-of-week daylight-savings-p)
      (time:decode-universal-time ut)
    (aset seconds rtc-array rtc-seconds)
    (aset minutes rtc-array rtc-minutes)
    (aset (if daylight-savings-p
	      (1+ hours)
	    hours) 
	  rtc-array rtc-hours)
    (aset date rtc-array rtc-date)
    (aset month rtc-array rtc-month)
    (aset (- year 1900.) rtc-array rtc-year)
    (aset (if (= day-of-week 6)
	      1
	    (+ day-of-week 2)) rtc-array rtc-day-of-week))
  (aset (ldb 0010 (* time:*timezone* 60.)) rtc-array rtc-time-zone-low)
  (aset (ldb 1010 (* time:*timezone* 60.)) rtc-array rtc-time-zone-hi)
  (dotimes (i (string-length rtc-cookie))
    (aset (aref rtc-cookie i) rtc-array (+ i rtc-cookie-start)))
  (write-rtc-chip)
  ;;start time ticking
  (write-rtc-reg rtc-reg-b (logior (dpb 1 %%rtc-binary-mode 0)
				   (dpb 1 %%rtc-24-hour-mode 0)
				   (dpb 1 %%rtc-daylight-savings-enable 0)))
;  (read-rtc-reg rtc-reg-d) ; reading this reg sets the valid bit
  t)

;;; End of code for LAMBDA clock (RTChip)

;;; Conversion routines, universal time is seconds since 1-jan-00 00:00-GMT

(DEFINE-SITE-VARIABLE *TIMEZONE* :TIMEZONE)

;;; One-based array of cumulative days per month.
(DEFVAR *CUMULATIVE-MONTH-DAYS-TABLE* (MAKE-ARRAY 13. ':TYPE 'ART-16B))

(FILLARRAY *CUMULATIVE-MONTH-DAYS-TABLE*
	   '(0 0 31. 59. 90. 120. 151. 181. 212. 243. 273. 304. 334.))

;;; Takes Univeral Time (seconds since 1/1/1900) as a 32-bit number
;;; Algorithm from KLH's TIMRTS.
(DEFUN DECODE-UNIVERSAL-TIME (UNIVERSAL-TIME &OPTIONAL TIMEZONE
					     &AUX SECS MINUTES HOURS DAY MONTH
						  YEAR DAY-OF-THE-WEEK DST-P)
  "Given a UNIVERSAL-TIME, decode it into year, month number, day of month, etc.
TIMEZONE is hours before GMT (5, for EST).
DAY and MONTH are origin-1.  DAY-OF-THE-WEEK = 0 for Monday."
  (DECLARE (RETURN-LIST SECS MINUTES HOURS DAY MONTH YEAR
			DAY-OF-THE-WEEK DAYLIGHT-SAVINGS-P TIMEZONE))
  (IF TIMEZONE					;explicit timezone means no-dst
      (MULTIPLE-VALUE (SECS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
	 (DECODE-UNIVERSAL-TIME-WITHOUT-DST UNIVERSAL-TIME TIMEZONE))
    ;;Otherwise, decode the time and THEN daylight-adjust it.
    (MULTIPLE-VALUE (SECS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
      (DECODE-UNIVERSAL-TIME-WITHOUT-DST UNIVERSAL-TIME *TIMEZONE*))
    (AND (SETQ DST-P (DAYLIGHT-SAVINGS-TIME-P HOURS DAY MONTH YEAR))
	 ;; See if it's daylight savings time, time-zone number gets smaller if so.
	 (MULTIPLE-VALUE (SECS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
	   (DECODE-UNIVERSAL-TIME-WITHOUT-DST UNIVERSAL-TIME (1- *TIMEZONE*)))))
  (VALUES SECS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK DST-P
	  (OR TIMEZONE *TIMEZONE*)))

(DEFUN DECODE-UNIVERSAL-TIME-WITHOUT-DST (UNIVERSAL-TIME &OPTIONAL (TIMEZONE *TIMEZONE*)
							&AUX X SECS MINUTES HOURS
							 DAY MONTH YEAR)
  "Like DECODE-UNIVERSAL-TIME, but always uses standard time.
Even if the time is one at which daylight savings time would be in effect,
the hour and date are computed as for standard time."
  (DECLARE (RETURN-LIST SECS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK TIMEZONE))
  (SETQ UNIVERSAL-TIME (- UNIVERSAL-TIME (* TIMEZONE 3600.)))
  (SETQ SECS (\ UNIVERSAL-TIME #.(* 24. 60. 60.))
	X (TRUNCATE UNIVERSAL-TIME #.(* 24. 24. 40.)))		;Days since genesis.
  (LET ((B (\ X 365.))
	(A (FLOOR X 365.)))
    (COND ((NOT (ZEROP A))			
	   (SETQ B (- B (LSH (1- A) -2)))
	   (COND ((< B 0)
		  (SETQ A (1- A))
		  (SETQ A (+ A (TRUNCATE B 365.)))	;We must allow for times so far in the future
		  (SETQ B (\ B 365.))		;as to produce >> 365. Feb 29's.
		  (SETQ B (+ B 365.))		;(Of course, this doesn't allow for
						;the year 2100 not being a leap-year.)
		  (AND (NOT (BIT-TEST A 3))
		       (SETQ B (1+ B)))))))
    (DO ((C 12. (1- C)))
	(( B (AREF *CUMULATIVE-MONTH-DAYS-TABLE* C))
	 (COND ((AND (NOT (BIT-TEST A 3))
		     (> C 2))
		(SETQ B (1- B))
		(AND (< B (AREF *CUMULATIVE-MONTH-DAYS-TABLE* C))
		     (SETQ C (1- C)))
		(AND (= C 2)
		     (SETQ B (1+ B)))))
	 (SETQ B (- B (AREF *CUMULATIVE-MONTH-DAYS-TABLE* C)))
	 (SETQ YEAR (+ 1900. A))
	 (SETQ MONTH C)
	 (SETQ DAY (1+ B)))))
  (SETQ HOURS (FLOOR SECS 3600.)
	MINUTES (FLOOR (\ SECS 3600.) 60.)
	SECS (\ SECS 60.))
  (PROG () (RETURN SECS MINUTES HOURS DAY MONTH YEAR (\ X 7) TIMEZONE)))

(DEFUN DAYLIGHT-SAVINGS-TIME-P (HOURS DAY MONTH YEAR)
  "T if daylight savings time would be in effect at specified time in North America."
  (COND ((OR (< MONTH 4)	;Standard time if before 2 am last Sunday in April
	     (AND (= MONTH 4)
		  (LET ((LSA (LAST-SUNDAY-IN-APRIL YEAR)))
		    (OR (< DAY LSA)
			(AND (= DAY LSA) (< HOURS 2))))))
	 NIL)
	((OR (> MONTH 10.)	;Standard time if after 1 am last Sunday in October
	     (AND (= MONTH 10.)
		  (LET ((LSO (LAST-SUNDAY-IN-OCTOBER YEAR)))
		    (OR (> DAY LSO)
			(AND (= DAY LSO) ( HOURS 1))))))
	 NIL)
	(T T)))

;;; Domain-dependent knowledge
(DEFUN LAST-SUNDAY-IN-OCTOBER (YEAR)
  (LET ((LSA (LAST-SUNDAY-IN-APRIL YEAR)))
    ;; Days between April and October = 31+30+31+31+30 = 153  6 mod 7
    ;; Therefore the last Sunday in October is one less than the last Sunday in April
    ;; unless that gives 24. or 23. in which case it is six greater.
    (IF ( LSA 25.) (+ LSA 6) (1- LSA))))

(DEFUN LAST-SUNDAY-IN-APRIL (YEAR)
  (IF (> YEAR 100.)
      (SETQ YEAR (- YEAR 1900.)))
  ;; This copied from GDWOBY routine in ITS
  (LET ((DOW-BEG-YEAR
	  (LET ((B (\ (+ YEAR 1899.) 400.)))
	    (\ (- (+ (1+ B) (SETQ B (FLOOR B 4))) (FLOOR B 25.)) 7)))
	(FEB29 (IF (LEAP-YEAR-P YEAR) 1 0)))
    (LET ((DOW-APRIL-30 (\ (+ DOW-BEG-YEAR 119. FEB29) 7)))
      (- 30. DOW-APRIL-30))))

(DEFUN ENCODE-UNIVERSAL-TIME (SECONDS MINUTES HOURS DAY MONTH YEAR
			      &OPTIONAL TIMEZONE &AUX TEM)
  "Given a time, return a universal-time encoding of it.
A universal-time is the number of seconds since 1/1/00 00:00-GMT (a bignum)."
  (IF (< YEAR 100.)
      (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL NIL CURRENT-YEAR)
	  (GET-DECODED-TIME)
	;; In case called during startup or during DISK-SAVE.
	(UNLESS CURRENT-YEAR
	  (SETQ CURRENT-YEAR 2000.))
	(SETQ YEAR
	      (+ CURRENT-YEAR
		 (- (MOD (+ 50. (- YEAR (\ CURRENT-YEAR 100.))) 100.) 50.)))))
  (SETQ YEAR (- YEAR 1900.))
  (OR TIMEZONE
      (SETQ TIMEZONE (IF (DAYLIGHT-SAVINGS-TIME-P HOURS DAY MONTH YEAR)
			 (1- *TIMEZONE*) *TIMEZONE*)))
  (SETQ TEM (+ (1- DAY) (AREF *CUMULATIVE-MONTH-DAYS-TABLE* MONTH)
	       (FLOOR (1- YEAR) 4) (* YEAR 365.)))	;Number of days since 1/1/00.
  (AND (> MONTH 2) (LEAP-YEAR-P YEAR)
       (SETQ TEM (1+ TEM)))			;After 29-Feb in a leap year.
  (+ SECONDS (* 60. MINUTES) (* 3600. HOURS) (* TEM #.(* 60. 60. 24.)) (* TIMEZONE 3600.)))

;;; Maintenance functions

(DEFVAR *LAST-TIME-UPDATE-TIME* NIL)
(DEFVAR PREVIOUS-TOP-9-TIME-BITS NIL)
(DEFVAR *LAST-TIME-SECONDS*)
(DEFVAR *LAST-TIME-MINUTES*)
(DEFVAR *LAST-TIME-HOURS*)
(DEFVAR *LAST-TIME-DAY*)
(DEFVAR *LAST-TIME-MONTH*)
(DEFVAR *LAST-TIME-YEAR*)
(DEFVAR *LAST-TIME-DAY-OF-THE-WEEK*)
(DEFVAR *LAST-TIME-DAYLIGHT-SAVINGS-P*)
(DEFVAR *NETWORK-TIME-FUNCTION* NIL)
(DEFVAR *UT-AT-BOOT-TIME* NIL "Used for UPTIME protocol, do not random SETQ.")

(DEFUN INITIALIZE-TIMEBASE (&OPTIONAL UT)
  (AND (NULL UT) *NETWORK-TIME-FUNCTION*
       (SETQ UT (FUNCALL *NETWORK-TIME-FUNCTION*)))
  (PROG ()
	(AND (NUMBERP UT) (GO DO-IT))
	; don't deal with SDU clock until cold load is done ...
  	(COND ((= SYS:PROCESSOR-TYPE-CODE SI:LAMBDA-TYPE-CODE)
  	       (SETQ UT (RTC-GET-UNIVERSAL-TIME))
  	       (IF UT (GO DO-IT)))) ; change to GIVE-IT-A-SHOT if the user should be asked
     STRING
	(FORMAT QUERY-IO "~&Please type the date and time: ")
	(SETQ UT (READLINE QUERY-IO))
	(AND (STRING-EQUAL UT "")
	     (IF (Y-OR-N-P "Do you want to specify the time or not? ")
		 (GO STRING)
		 (RETURN (SETQ *LAST-TIME-UPDATE-TIME* NIL))))
	(CONDITION-CASE (ERROR)
	    (SETQ UT (PARSE-UNIVERSAL-TIME UT 0 NIL T 0))
	  (ERROR (SEND ERROR ':REPORT QUERY-IO)
		 (GO STRING)))
     GIVE-IT-A-SHOT
	(COND ((NOT (Y-OR-N-P (FORMAT NIL "Time is ~A, OK? " (PRINT-UNIVERSAL-DATE UT NIL))))
	       (GO STRING)))
     DO-IT
	(WITHOUT-INTERRUPTS
	  (IF (NOT (NULL *UT-AT-BOOT-TIME*))
          ;;if we are randomly changing the time while up, mung uptime
	      (SETQ *UT-AT-BOOT-TIME*
		    (+ *UT-AT-BOOT-TIME* (- UT (GET-UNIVERSAL-TIME))))
	    ;;no real surprise: changing at boot time
	    (SETQ *UT-AT-BOOT-TIME* UT))
	  (SETF (VALUES *LAST-TIME-UPDATE-TIME* PREVIOUS-TOP-9-TIME-BITS)
		(FIXNUM-MICROSECOND-TIME))
	  (MULTIPLE-VALUE (*LAST-TIME-SECONDS* *LAST-TIME-MINUTES* *LAST-TIME-HOURS*
			   *LAST-TIME-DAY* *LAST-TIME-MONTH* *LAST-TIME-YEAR*
			   *LAST-TIME-DAY-OF-THE-WEEK* *LAST-TIME-DAYLIGHT-SAVINGS-P*)
	    (DECODE-UNIVERSAL-TIME UT))
 	  (cond ((= sys:processor-type-code si:lambda-type-code)
  		 (rtc-set-universal-time ut)))
	  (RETURN T))))

(DEFUN SET-LOCAL-TIME (&OPTIONAL NEW-TIME)
  (AND (STRINGP NEW-TIME)
       (SETQ NEW-TIME (TIME:PARSE-UNIVERSAL-TIME NEW-TIME)))
  (LET ((*NETWORK-TIME-FUNCTION* NIL))
    (INITIALIZE-TIMEBASE NEW-TIME)))

;; This is so freshly booted machines don't give out an incorrect time or uptime until
;; they've found out for themselves what the time *really* is.
(ADD-INITIALIZATION "Forget time" '(SETQ TIME:*LAST-TIME-UPDATE-TIME* NIL) '(BEFORE-COLD))
(ADD-INITIALIZATION "Forget uptime" '(SETQ TIME:*UT-AT-BOOT-TIME* NIL) '(BEFORE-COLD))

;This must not process-wait, since it can be called inside the scheduler via the who-line
(DEFUN UPDATE-TIMEBASE (&AUX TIME TICK TOP-9-TIME-BITS INCREMENTAL-TOP-10-TIME-BITS
			(OLD-HOUR *LAST-TIME-HOURS*))
  "Update our information on the current time."
  (COND ((NOT (NULL *LAST-TIME-UPDATE-TIME*))
	 (WITHOUT-INTERRUPTS
	   ;; Put the following code back if the TIME function ever makes any attempt
	   ;; to be even close to 60 cycles.  Also change INITIALIZE-TIMEBASE.
	   ;(SETQ TIME (TIME)
	   ;	 TICK (TRUNC (TIME-DIFFERENCE TIME *LAST-TIME-UPDATE-TIME*) 60.)
	   ;	 *LAST-TIME-UPDATE-TIME*
	   ;	    (LDB 0027 (%24-BIT-PLUS (* 60. TICK) *LAST-TIME-UPDATE-TIME*)))
	   (SETF (VALUES TIME TOP-9-TIME-BITS)
		 (FIXNUM-MICROSECOND-TIME))
	   ;; Don't lose when installing this code,
	   ;; if PREVIOUS-TOP-9-TIME-BITS has not been being updated.
	   (OR PREVIOUS-TOP-9-TIME-BITS
	       (SETQ PREVIOUS-TOP-9-TIME-BITS TOP-9-TIME-BITS))
	   ;; See if we have "missed any ticks" in the low 23. bits;
	   ;; Normally we are supposed to be called frequently enough
	   ;; that bit 23. never increments twice between calls to this function
	   ;; but a long WITHOUT-INTERRUPTS can make that happen.
	   (SETQ INCREMENTAL-TOP-10-TIME-BITS
		 (LSH (- TOP-9-TIME-BITS PREVIOUS-TOP-9-TIME-BITS) 1)
		 PREVIOUS-TOP-9-TIME-BITS TOP-9-TIME-BITS)
	   ;; In the ordinary course of events, we DO notice bit 23 increment
	   ;; because we see the low 23 bits wrap around.
	   ;; So don't count those noticed increments in the "extras".
	   (IF (< TIME *LAST-TIME-UPDATE-TIME*)
	       (DECF INCREMENTAL-TOP-10-TIME-BITS 2))
	   ;; INCREMENTAL-TOP-10-TIME-BITS is now set to twice the number of times
	   ;; that bit 23 has incremented since we last ran, that we didn't notice.
	   ;; Now feed that many increments into bit 22, one by one.
	   ;; When finished with them (if there are any),
	   ;; handle the change in the low 23 bits themselves.
	   (DO (EXIT-THIS-TIME) (())
	     (IF ( INCREMENTAL-TOP-10-TIME-BITS 0)
		 (SETQ TICK (FLOOR (TIME-DIFFERENCE TIME *LAST-TIME-UPDATE-TIME*) 1000000.)
		       EXIT-THIS-TIME T)
	       (SETQ TICK (FLOOR (DPB 1 #o2601 0) 1000000.)))
	     (SETQ *LAST-TIME-UPDATE-TIME*
		   (LDB #o0027 (%MAKE-POINTER-OFFSET
			       DTP-FIX
			       (* 1000000. TICK) *LAST-TIME-UPDATE-TIME*)))
	     (OR (ZEROP TICK)
		 (< (SETQ *LAST-TIME-SECONDS* (+ *LAST-TIME-SECONDS* TICK)) 60.)
		 (< (PROG1 (SETQ *LAST-TIME-MINUTES* (+ *LAST-TIME-MINUTES*
							(FLOOR *LAST-TIME-SECONDS* 60.)))
			   (SETQ *LAST-TIME-SECONDS* (\ *LAST-TIME-SECONDS* 60.)))
		    60.)
		 (< (PROG1 (SETQ *LAST-TIME-HOURS* (+ *LAST-TIME-HOURS*
						      (FLOOR *LAST-TIME-MINUTES* 60.)))
			   (SETQ *LAST-TIME-MINUTES* (\ *LAST-TIME-MINUTES* 60.)))
		    24.)
		 ( (PROG1 (SETQ *LAST-TIME-DAY* (1+ *LAST-TIME-DAY*))
			   (SETQ *LAST-TIME-DAY-OF-THE-WEEK*
				 (\ (1+ *LAST-TIME-DAY-OF-THE-WEEK*) 7))
			   (SETQ *LAST-TIME-HOURS* 0))
		    (MONTH-LENGTH *LAST-TIME-MONTH* *LAST-TIME-YEAR*))
		 ( (SETQ *LAST-TIME-DAY* 1
			  *LAST-TIME-MONTH* (1+ *LAST-TIME-MONTH*))
		    12.)
		 (SETQ *LAST-TIME-MONTH* 1
		       *LAST-TIME-YEAR* (1+ *LAST-TIME-YEAR*)))
	     (IF EXIT-THIS-TIME
		 (RETURN NIL)
	       (DECF INCREMENTAL-TOP-10-TIME-BITS)))
	   (WHEN ( OLD-HOUR *LAST-TIME-HOURS*)
	     ;; If hour has incremented, turn decoded time into a UT
	     ;; using the timezone we were using up to now,
	     ;; use that to decide if we have turned DST on or off,
	     ;; and then re-decode the time.
	     (MULTIPLE-VALUE (*LAST-TIME-SECONDS* *LAST-TIME-MINUTES* *LAST-TIME-HOURS*
			      *LAST-TIME-DAY* *LAST-TIME-MONTH* *LAST-TIME-YEAR*
			      *LAST-TIME-DAY-OF-THE-WEEK* *LAST-TIME-DAYLIGHT-SAVINGS-P*)
	       (DECODE-UNIVERSAL-TIME
		 (ENCODE-UNIVERSAL-TIME
		   *LAST-TIME-SECONDS* *LAST-TIME-MINUTES* *LAST-TIME-HOURS*
		   *LAST-TIME-DAY* *LAST-TIME-MONTH* *LAST-TIME-YEAR*
		   (IF *LAST-TIME-DAYLIGHT-SAVINGS-P*
		       (1- *TIMEZONE*) *TIMEZONE*))))
	     ;; Update things for GET-INTERNAL-RUN-TIME at least once an hour.
	     (GET-INTERNAL-RUN-TIME))
	   T))
	;This used to call INITIALIZE-TIMEBASE.  However, since that gets called by
	;an initialization it seems best not to get processes into it at the same time.
	(T NIL)))

(ADD-INITIALIZATION "Initialize Timebase" 
  '(PROGN (SETQ LAST-BOOT-TIME (TIME) WAS-NEGATIVE NIL HIGH-TIME-BITS 0)
	  (INITIALIZE-TIMEBASE))
  '(:WARM :NOW))

;;; One-based lengths of months
(DEFVAR *MONTH-LENGTHS* '(0 31. 28. 31. 30. 31. 30. 31. 31. 30. 31. 30. 31.))

(DEFUN MONTH-LENGTH (MONTH YEAR)
  "Return the number of days in month MONTH in year YEAR.
Knows about leap years.  January is month 1."
  (IF (= MONTH 2)
      (IF (LEAP-YEAR-P YEAR) 29. 28.)
      (NTH MONTH *MONTH-LENGTHS*)))

(DEFUN LEAP-YEAR-P (YEAR)           ;;2000 is a leap year.  2100 is not.
  "T if YEAR is a leap year."
  (IF (< YEAR 100.)
      (SETQ YEAR (+ 1900. YEAR)))
  (AND (ZEROP (\ YEAR 4))
       (OR (NOT (ZEROP (\ YEAR 100.)))
	   (ZEROP (\ YEAR 400.)))))

(DEFUN DAYLIGHT-SAVINGS-P ()
  "T if we are now in daylight savings time."
  (UPDATE-TIMEBASE)
  *LAST-TIME-DAYLIGHT-SAVINGS-P*)

(DEFUN DEFAULT-YEAR ()
  "Return the current year, minus 1900."
  (UPDATE-TIMEBASE)
  *LAST-TIME-YEAR*)

;;; These are the functions the user should call
;;; If they can't find out what time it is, they return NIL
(DEFF GET-DECODED-TIME 'GET-TIME)
(DEFUN GET-TIME ()
  "Return the current time, decoded into second, hour, day, etc.
Returns NIL if the time is not known (during startup or DISK-SAVE)."
  (DECLARE (RETURN-LIST SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK
			DAYLIGHT-SAVINGS-P TIMEZONE))
  (AND (UPDATE-TIMEBASE)
       (VALUES *LAST-TIME-SECONDS* *LAST-TIME-MINUTES* *LAST-TIME-HOURS*
	       *LAST-TIME-DAY* *LAST-TIME-MONTH*
	       *LAST-TIME-YEAR*
	       *LAST-TIME-DAY-OF-THE-WEEK* *LAST-TIME-DAYLIGHT-SAVINGS-P*
	       *TIMEZONE*)))

(DEFUN GET-UNIVERSAL-TIME ()
  "Return the current time as a universal-time.
A universal-time is the number of seconds since 1/1/00 00:00-GMT (a bignum)."
  (UPDATE-TIMEBASE)
  (ENCODE-UNIVERSAL-TIME *LAST-TIME-SECONDS* *LAST-TIME-MINUTES* *LAST-TIME-HOURS*
			 *LAST-TIME-DAY* *LAST-TIME-MONTH* *LAST-TIME-YEAR*
			 (IF *LAST-TIME-DAYLIGHT-SAVINGS-P*
			     (1- *TIMEZONE*) *TIMEZONE*)))


(DEFVAR *DEFAULT-DATE-PRINT-MODE* ':MM//DD//YY	;site variable???????
  "Defines the default way to print the date. Possible values include:
:DD//MM//YY :MM//DD//YY :DD-MM-YY :DD-MMM-YY :|DD MMM YY| :DDMMMYY :YYMMDD :YYMMMDD")

;;args to format: DAY MONTH MONTH-STRING DONT-PRINT-YEAR-P YEAR
;;		  0   1     2            3                 4
(DEFPROP :DD//MM//YY "~D//~2,'0D~*~:[//~2,'0D~]" DATE-FORMAT)		;27/10{/66}
(DEFPROP :MM//DD//YY "~*~D//~0@*~2,'0D~2*~:[//~2,'0D~]" DATE-FORMAT)	;10/27{/66}
(DEFPROP :DD-MM-YY "~D-~2,'0D~*~:[-~2,'0D~]" DATE-FORMAT)		;27-10{-66}
(DEFPROP :DD-MMM-YY "~D-~*~A~:[-~2,'0D~]" DATE-FORMAT)			;27-Oct{-66}
(DEFPROP :DD/ MMM/ YY "~D ~*~A~:[ ~2,'0D~]" DATE-FORMAT)		;27 Oct{ 66}
(DEFPROP :DDMMMYY "~D~*~A~:[~2,'0D~]" DATE-FORMAT)			;27Oct{66}
(DEFPROP :YYMMDD "~4*~2,'0D~1@*~2,'0D~0@*~2,'0D" DATE-FORMAT)		;661027
(DEFPROP :YYMMMDD "~3*~:[~2,'0D~]~2@*~A~0@*~2,'0D" DATE-FORMAT)		;{66}Oct27

(DEFUN PRINT-CURRENT-TIME (&OPTIONAL (STREAM STANDARD-OUTPUT)
				     (DATE-PRINT-MODE *DEFAULT-DATE-PRINT-MODE*))
  "Print the current time on STREAM."
  (AND (UPDATE-TIMEBASE)
       (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR)
	   (GET-TIME)
         (PRINT-TIME SECONDS MINUTES HOURS DAY MONTH YEAR STREAM DATE-PRINT-MODE))))

(DEFUN PRINT-UNIVERSAL-TIME (UT
			     &OPTIONAL (STREAM STANDARD-OUTPUT)
			     TIMEZONE
			     (DATE-PRINT-MODE *DEFAULT-DATE-PRINT-MODE*))
  "Print the universal-time UT on STREAM, interpreting for time zone TIMEZONE.
TIMEZONE is the number of hours earlier than GMT."
  ;;Let DECODE-UNIVERSAL-TIME default the timezone if wanted, as that fcn
  ;;must know to suppress DST iff TIMEZONE is supplied.
  (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR)
      (DECODE-UNIVERSAL-TIME UT TIMEZONE)
    (PRINT-TIME SECONDS MINUTES HOURS DAY MONTH YEAR STREAM DATE-PRINT-MODE)))

(DEFUN PRINT-TIME (SECONDS MINUTES HOURS DAY MONTH YEAR
		   &OPTIONAL (STREAM STANDARD-OUTPUT)
			     (DATE-PRINT-MODE *DEFAULT-DATE-PRINT-MODE*)) 
  "Print time specified on STREAM using date format DATE-PRINT-MODE.
If STREAM is NIL, construct and return a string."
  (WITH-STACK-LIST (DATE-MODE-ARGS DAY MONTH (MONTH-STRING MONTH ':SHORT)
				       NIL (MOD YEAR 100.))
    (LET ((*NOPOINT T) (*PRINT-RADIX* NIL))
      (FORMAT STREAM "~? ~2,'0D:~2,'0D:~2,'0D"
	      (OR (GET DATE-PRINT-MODE 'DATE-FORMAT)
		  (FERROR NIL "Bad value type of DATE-PRINT-MODE: ~s" DATE-PRINT-MODE))
	      DATE-MODE-ARGS
	      HOURS MINUTES SECONDS))))

(DEFUN PRINT-CURRENT-DATE (&OPTIONAL (STREAM STANDARD-OUTPUT))
  "Print the current date in a verbose form on STREAM.
If STREAM is NIL, construct and return a string."
  (AND (UPDATE-TIMEBASE)
       (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
	   (GET-TIME)
         (PRINT-DATE SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK STREAM))))

(DEFUN PRINT-UNIVERSAL-DATE (UT &OPTIONAL (STREAM STANDARD-OUTPUT) TIMEZONE)
  "Print the universal-time UT in verbose form on STREAM, decoding for TIMEZONE.
If STREAM is NIL, construct and return a string."
  (MULTIPLE-VALUE-BIND (SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK)
      (DECODE-UNIVERSAL-TIME UT TIMEZONE)
    (PRINT-DATE SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK STREAM)))

(DEFUN PRINT-DATE (SECONDS MINUTES HOURS DAY MONTH YEAR DAY-OF-THE-WEEK
		   &OPTIONAL (STREAM STANDARD-OUTPUT))
  "Print the date and time in verbose form on STREAM.
If STREAM is NIL, construct and return a string."
  (SETQ MONTH (MONTH-STRING MONTH)
	DAY-OF-THE-WEEK (DAY-OF-THE-WEEK-STRING DAY-OF-THE-WEEK))
  (LET ((*NOPOINT T) (*PRINT-RADIX* NIL))
    (FORMAT STREAM
	    "~A the ~:R of ~A, ~D/; ~D:~2,'0D:~2,'0D ~A"
	    DAY-OF-THE-WEEK DAY MONTH YEAR (1+ (\ (+ HOURS 11.) 12.)) MINUTES SECONDS
	    (COND ((AND (ZEROP SECONDS)
			(ZEROP MINUTES)
			(MEMQ HOURS '(0 12.)))
		   (IF (= HOURS 0) "midnight" "noon"))
		  (( HOURS 12.) "pm")
		  (T "am")))))

(DEFUN PRINT-BRIEF-UNIVERSAL-TIME (UT &OPTIONAL (STREAM STANDARD-OUTPUT)
						(REF-UT (GET-UNIVERSAL-TIME))
						(DATE-PRINT-MODE *DEFAULT-DATE-PRINT-MODE*))
  "Prints only those aspects of the time, UT, that differ from the current time.
Also never prints seconds.  Used by notifications, for example.
If STREAM is NIL, construct and return a string."
  (MULTIPLE-VALUE-BIND (IGNORE MINUTES HOURS DAY MONTH YEAR)
      (DECODE-UNIVERSAL-TIME UT)
    (MULTIPLE-VALUE-BIND (IGNORE IGNORE IGNORE REF-DAY REF-MONTH REF-YEAR)
	(DECODE-UNIVERSAL-TIME REF-UT)
      ;; If not same day, print month and day numerically
      (LET ((*NOPOINT T) (*PRINT-RADIX* NIL))
	(IF (OR ( DAY REF-DAY) ( MONTH REF-MONTH) ( YEAR REF-YEAR))
	    (WITH-STACK-LIST (DATE-MODE-ARGS DAY MONTH (MONTH-STRING MONTH ':SHORT)
					     (= YEAR REF-YEAR) (MOD YEAR 100.))
	      (FORMAT STREAM "~? ~2,'0D:~2,'0D"
		      (OR (GET DATE-PRINT-MODE 'DATE-FORMAT)
			  (FERROR NIL "Bad value type of date-print-mode: ~s" DATE-PRINT-MODE))
		      DATE-MODE-ARGS
		      HOURS MINUTES))
	  ;; Always print hours colon minutes, even if same as now
	  (FORMAT STREAM "~2,'0D:~2,'0D" HOURS MINUTES))))))

(DEFUN PRINT-UPTIME ()
  "Print how long this machine has been up since last cold boot."
  (FORMAT T "~&This machine has been up ~\time-interval\."
	  (- (TIME:GET-UNIVERSAL-TIME) TIME:*UT-AT-BOOT-TIME*)))


;;;Essential stuff
(defun moonphase (&optional (ut (get-universal-time)))
;  (multiple-value-bind (seconds minutes hours date month year nil dstp)
;		       (decode-universal-time ut)
;    (let* ((secs (+ seconds (* minutes 60.) (* hours 3600.)
;		     (if dstp -3600. 0)
;		     (* (+ date -1
;			   (aref cumulative-month-days-table month))
;			 86400.)))
;	   (year-1 (1- year))
;	   (d (+ (- (+ (* year 365.) (ash year-1 -2)) (truncate year-1 100.))
;		 (truncate year-1 400.)
;		 1)))
;      ;If one wanted to waste time, it would seem to be possible to just
;      ; change the constants which follow, and just use the universal
;      ; time in place of all the code above and the quantity
;      ; (+ (* d 86400.) secs) below.  Possibly even reducing it such that
;      ; it was all fixnum arithmetic.
  (let* ((d (ash (+ ut 690882.)
		 2))
	 (r (ash (remainder d 2551443.) -2)))
    (values (ldb (byte 2 0) (truncate d 2551443.))
	    (truncate r #.(* 60. 60. 24.))
	    (\ (truncate r 3600.) 24.)
	    (\ (truncate r 60.) 60.)
	    (\ r 60.))))

;(defun test (&optional (ut (get-universal-time)))
;  (let* ((year (nth-value 5 (decode-universal-time ut)))
;	 (d (* (+ (- (+ (* year 365.)
;			(ash (1- year) -2))
;		     (truncate (1- year) 100.))
;		  (truncate (1- year) 400.)
;		  1)
;	       #.(* 60. 60. 24.))))
;    (format t "~D ~D" ut d)
;    (values ut d)))

(defun print-moonphase (quarter day hour minute second
			&optional (destination t) &aux (*nopoint t) (*print-radix* NIL))
  (format destination
	  "~A~@[+~:[~*~;~DD.~]~:[~*~;~DH.~]~:[~*~;~DM.~]~:[~*~;~DS.~]~]"
	  (nth quarter '("NM" "FQ" "FM" "LQ"))
	  (= (+ day hour minute second) 0)
	  (= day 0) day (= hour 0) hour
	  (= minute 0) minute (= second 0) second))


(defun print-universal-moonphase (ut &optional (destination t))
  (multiple-value-bind (quarter day hour minute second) (moonphase ut)
    (print-moonphase quarter day hour minute second destination)))


(defun print-current-moonphase (&optional (destination t))
  (print-universal-moonphase (get-universal-time) destination))



;;; Some useful strings and accessing functions.

;;; Days of the week.  Elements must be (in order):
;;; (1) Three-letter form.
;;; (2) Full spelling.
;;; (3) Middle-length form if any, else NIL.
;;; (4) Francais.
;;; (5) Deutsch.
;;; (6) Italian.  ; How do you say that in Italian ?

(DEFVAR *DAYS-OF-THE-WEEK* '(("Mon" "Monday" NIL "Lundi" "Montag" "Lunedi")
			     ("Tue" "Tuesday" "Tues" "Mardi" "Dienstag" "Martedi")
			     ("Wed" "Wednesday" NIL "Mercredi" "Mittwoch" "Mercoledi")
			     ("Thu" "Thursday" "Thurs" "Jeudi" "Donnerstag" "Giovedi")
			     ("Fri" "Friday" NIL "Vendredi" "Freitag" "Venerdi")
			     ("Sat" "Saturday" NIL "Samedi" "Samstag" "Sabato")
			     ("Sun" "Sunday" NIL "Dimanche" "Sonntag" "Domenica")))

(DEFUN DAY-OF-THE-WEEK-STRING (DAY-OF-THE-WEEK &OPTIONAL (MODE ':LONG) &AUX STRINGS)
  (SETQ STRINGS (NTH DAY-OF-THE-WEEK *DAYS-OF-THE-WEEK*))
  (SELECTQ MODE
    (:SHORT (FIRST STRINGS))
    (:LONG (SECOND STRINGS))
    (:MEDIUM (OR (THIRD STRINGS) (FIRST STRINGS)))
    (:FRENCH (FOURTH STRINGS))
    (:GERMAN (FIFTH STRINGS))
    (:ITALIAN (SIXTH STRINGS)) ;; After this, perhaps NDOWSS ?
    (OTHERWISE (FERROR NIL "~S is not a known day-of-the-week mode" MODE))))


;;; Months of the year:  Elements must be (in order):
;;; (1) Three-letter form.
;;; (2) Full spelling.
;;; (3) Middle-length form if any, else NIL.
;;; (4) Francais.
;;; (5) Roman numerals (used in Europe).
;;; (6) Deutsch.
;;; (7) Italian.

(DEFVAR *MONTHS* '(("Jan" "January" NIL "Janvier" "I" "Januar" "Genniao")
		   ("Feb" "February" NIL "Fevrier" "II" "Februar" "Febbraio")
		   ("Mar" "March" NIL "Mars" "III" "Maerz" "Marzo")
		   ("Apr" "April" NIL "Avril" "IV" "April" "Aprile")
		   ("May" "May" NIL "Mai" "V" "Mai" "Maggio")
		   ("Jun" "June" NIL "Juin" "VI" "Juni" "Giugno")
		   ("Jul" "July" NIL "Juillet" "VII" "Juli" "Luglio")
		   ("Aug" "August" NIL "Aout" "VIII" "August" "Agosto")
		   ("Sep" "September" "Sept" "Septembre" "IX" "September" "Settembre")
		   ("Oct" "October" NIL "Octobre" "X" "Oktober" "Ottobre")
		   ("Nov" "November" "Novem" "Novembre" "XI" "November" "Novembre")
		   ("Dec" "December" "Decem" "Decembre" "XII" "Dezember" "Dicembre")))

(DEFUN MONTH-STRING (MONTH &OPTIONAL (MODE ':LONG) &AUX STRINGS)
  (SETQ STRINGS (NTH (1- MONTH) *MONTHS*))
  (SELECTQ MODE
    (:SHORT (FIRST STRINGS))
    (:LONG (SECOND STRINGS))
    (:MEDIUM (OR (THIRD STRINGS) (FIRST STRINGS)))
    (:FRENCH (FOURTH STRINGS))
    (:ROMAN (FIFTH STRINGS))
    (:GERMAN (SIXTH STRINGS))
    (:ITALIAN (SEVENTH STRINGS))
    (OTHERWISE (FERROR NIL "~S is not a known month mode" MODE))))

;;; minutes offset from gmt, normal name, daylight name, miltary character
(DEFVAR *TIMEZONES* '((0 "GMT" NIL #/Z)			;Greenwich
		      (1 NIL NIL #/A)
		      (2 NIL NIL #/B)
		      (3 NIL "ADT" #/C)
		      (4 "AST" "EDT" #/D)		;Atlantic
		      (5 "EST" "CDT" #/E)		;Eastern
		      (6 "CST" "MDT" #/F)		;Central
		      (7 "MST" "PDT" #/G)		;Mountain
		      (8 "PST" "YDT" #/H)		;Pacific
		      (9 "YST" "HDT" #/I)		;Yukon
		      (10. "HST" "BDT" #/K)		;Hawaiian
		      (11. "BST" NIL #/L)		;Bering
		      (12. NIL NIL #/M)
		      (-1 NIL NIL #/N)
		      (-2 NIL NIL #/O)
		      (-3 NIL NIL #/P)
		      (-4 NIL NIL #/Q)
		      (-5 NIL NIL #/R)
		      (-6 NIL NIL #/S)
		      (-7 NIL NIL #/T)
		      (-8 NIL NIL #/U)
		      (-9 NIL NIL #/V)
		      (-10. NIL NIL #/W)
		      (-11. NIL NIL #/X)
		      (-12. NIL NIL #/Y)
		      (3.5 "NST" NIL -1)		;Newfoundland
		      ))

(DEFUN TIMEZONE-STRING (&OPTIONAL (TIMEZONE *TIMEZONE*)
				  (DAYLIGHT-SAVINGS-P (DAYLIGHT-SAVINGS-P)))
  "Return a string describing timezone TIMEZONE, optionally for daylight savings time.
Defaults are our own timezone, and DST if it is now in effect."
  (IF DAYLIGHT-SAVINGS-P
      (THIRD (ASSOC (1- TIMEZONE) *TIMEZONES*))
      (SECOND (ASSOC TIMEZONE *TIMEZONES*))))

;;; Date and time parsing

(DEFMACRO BAD-DATE-OR-TIME (REASON . ARGS)
  `(*THROW 'BAD-DATE-OR-TIME ,(IF (NULL ARGS) REASON `(FORMAT NIL ,REASON . ,ARGS))))

;;; Check that a date is ok: day is within month; and day-of-week, if specified, is valid
(DEFUN VERIFY-DATE (DAY MONTH YEAR DAY-OF-THE-WEEK)
  (COND ((> DAY (MONTH-LENGTH MONTH YEAR))
	 (FORMAT NIL "~A only has ~D day~:P" (MONTH-STRING MONTH) (MONTH-LENGTH MONTH YEAR)))
	(DAY-OF-THE-WEEK
	 (LET ((UT (ENCODE-UNIVERSAL-TIME 0 0 0 DAY MONTH YEAR)))
	   (MULTIPLE-VALUE-BIND (NIL NIL NIL NIL NIL NIL CORRECT-DAY-OF-THE-WEEK)
	       (DECODE-UNIVERSAL-TIME UT)
	     (AND ( DAY-OF-THE-WEEK CORRECT-DAY-OF-THE-WEEK)
		  (FORMAT NIL "The ~:R of ~A, ~D is a ~A, not a ~A"
			  (MONTH-STRING MONTH) DAY YEAR
			  (DAY-OF-THE-WEEK-STRING CORRECT-DAY-OF-THE-WEEK)
			  (DAY-OF-THE-WEEK-STRING DAY-OF-THE-WEEK))))))
	(T
	 NIL)))

