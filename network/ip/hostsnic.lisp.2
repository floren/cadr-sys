;;; -*- Mode:Lisp;Package:INTERNET;Base:10 -*-
;;; This is SYS: IP; HOSTSNIC

;;; The format for entries is:
;;;
;;; NET : NET-ADDR : NETNAME :
;;; GATEWAY : ADDR, ADDR : NAME : CPUTYPE : OPSYS : PROTOCOLS :
;;; HOST : ADDR, ALTERNATE-ADDR (if any): HOSTNAME,NICKNAME : CPUTYPE :
;;;   OPSYS : PROTOCOLS :
;;;
;;; Where:
;;;  ADDR = internet address in decimal, e.g., 26.0.0.73
;;;  CPUTYPE = machine type (PDP-11/70, VAX-11/780, FOONLY-F3, C/30, etc.)
;;;  OPSYS = operating system (UNIX, TOPS20, TENEX, ITS, etc.)
;;;  PROTOCOLS = transport/service (TCP/TELNET,TCP/FTP, etc.)
;;;  : (colon) = field delimiter
;;;  :: (2 colons) = null field
;;;
;;; See RFC810 for more details.

(DEFUN NMAPCAR (LIST &FUNCTIONAL FUNCTION)
  "Destructive map over the LIST with FUNCTION"
  (DO ((TAIL LIST (CDR TAIL)))
      ((NULL TAIL))
    (SETF (CAR TAIL) (FUNCALL FUNCTION (CAR TAIL)))))

(DEFVAR *IDX-VAR*)
(DEFVAR *BEGIN-VAR*)
(DEFVAR *LINE-VAR*)
(DEFVAR *TEMPORARY*)
(DEFVAR *FIELD-VAR*)

(DEFMACRO PARSING-ALONG ((LINE-VAR FIELD-VAR) &BODY BODY)
  `(COMPILER-LET ((*IDX-VAR* (GENTEMP "I"))
		   (*BEGIN-VAR* (GENTEMP "B"))
		   (*LINE-VAR* LINE-VAR)
		   (*FIELD-VAR* FIELD-VAR)
		   (*TEMPORARY* (GENTEMP)))
     (LET ((,*IDX-VAR* -1))
       ,@BODY)))

(DEFMACRO PARSE-ACT (&BODY AFTER-COLON &AUX (TAG (GENTEMP)))
  `(TAGBODY
       ,TAG
       (SETQ ,*FIELD-VAR* NIL)
       (SETQ ,*BEGIN-VAR* (+ ,*IDX-VAR* 1))
       (SETQ ,*IDX-VAR* (STRING-SEARCH-SET ",:" ,*LINE-VAR* ,*BEGIN-VAR*))
       (UNLESS (= 1 (- ,*IDX-VAR* ,*BEGIN-VAR*))
	 (SETQ ,*TEMPORARY* (STRING-TRIM " " (SUBSTRING ,*LINE-VAR* ,*BEGIN-VAR* ,*IDX-VAR*)))
	 (COND ((NULL ,*FIELD-VAR*)
		(SETQ ,*FIELD-VAR* ,*TEMPORARY*))
	       ((STRINGP ,*FIELD-VAR*)
		(SETQ ,*FIELD-VAR* (LIST ,*FIELD-VAR* ,*TEMPORARY*)))
	       (T
		(SETQ ,*FIELD-VAR* (NCONC ,*FIELD-VAR* (NCONS ,*TEMPORARY*)))))
	 (IF (CHAR= (AREF ,*LINE-VAR* ,*IDX-VAR*) #/,) (GO ,TAG)
	   ,AFTER-COLON))))

(DEFUN PARSE-NIC-PROTOCOL-SPEC (STRING &AUX (IDX (STRING-SEARCH-CHAR #// STRING)))
  (IF (NULL IDX) (INTERN STRING 'KEYWORD)
    (CONS (INTERN (STRING-RIGHT-TRIM " " (SUBSTRING STRING 0 IDX)) 'KEYWORD)
	  (INTERN (STRING-LEFT-TRIM " " (SUBSTRING STRING (1+ IDX))) 'KEYWORD))))

(DEFUN PARSE-NIC-MACHINE-LINE (LINE TYPE &AUX RESULT NAME)
  (PARSING-ALONG (LINE FIELD)
    (PARSE-ACT ; addresse(s)
      (PUSH (IF (CLI:LISTP FIELD) FIELD (LIST FIELD)) RESULT)
      (PUSH :ADDRESSES RESULT))
    (PARSE-ACT ; names(s)
      (COND ((STRINGP FIELD)
	     (SETQ NAME FIELD)
	     (SETQ FIELD (LIST FIELD)))
	    ((CONSP FIELD)
	     (SETQ NAME (FIRST FIELD))))
      (PUSH FIELD RESULT)
      (PUSH :HOST-NAMES RESULT))
    (PARSE-ACT ; cputype
      (PUSH (INTERN FIELD 'KEYWORD) RESULT)
      (PUSH :MACHINE-TYPE RESULT))
    (PARSE-ACT ; opsys
      (PUSH (INTERN FIELD 'KEYWORD) RESULT)
      (PUSH :SYSTEM-TYPE RESULT))
    (PARSE-ACT ; transport/services
      (IF (STRINGP FIELD)
	  (PUSH (LIST (INTERN FIELD 'KEYWORD)) RESULT)
	(NMAPCAR FIELD #'PARSE-NIC-PROTOCOL-SPEC)
	(PUSH FIELD RESULT))
      (PUSH :PROTOCOLS)))
  (CONS TYPE (CONS NAME RESULT)))

(DEFUN (:PROPERTY :HOST NIC-PARSE-LINE) (LINE)
  (PARSE-MACHINE-NIC-LINE LINE :HOST))

(DEFUN (:PROPERTY :GATEWAT NIC-PARSE-LINE) (LINE)
  (PARSE-MACHINE-NIC-LINE LINE :GATEWAY))

(DEFUN (:PROPERTY :NET NIC-PARSE-LINE) (LINE &AUX RESULT)
  (PARSING-ALONG (LINE FIELD)
    (PARSE-ACT ; address
      (PUSH FIELD RESULT)
      (PUSH :ADDRESS))
    (PARSE-ACT ; name
      ))
  (CONS :NET (CONS FIELD (CONS RESULT))))

(DEFUN PARSE-NIC-LINE (LINE INCLUDE-OBJECTS &AUX COLON TYPE PARSER)
  (IF (OR (ZEROP (STRING-LENGTH LINE)) (CHAR= (AREF LINE 0) #/;))
      (VALUES NIL NIL)
    (SETQ TYPE (INTERN
		 (STRING-TRIM " " (SUBSTRING LINE 0
					     (SETQ COLON (STRING-SEARCH-CHAR #/: LINE))))
		 (PKG-FIND-PACKAGE 'KEYWORD)))
    (WHEN (MEMQ TYPE INCLUDE-OBJECTS)
      (SETQ PARSER (GET TYPE 'NIC-PARSE-LINE))
      (IF (NULL PARSER)
	  (FERROR () "Unknown type ~S" TYPE)
	(VALUES T (FUNCALL PARSER (STRING-RIGHT-TRIM " " (SUBSTRING LINE (+ COLON 1)))))))))

(DEFVAR *INCLUDE-OBJECTS* :UNBOUND)
(DEFVAR *CURRENT-INPUT-STREAM* :UNBOUND)
(DEFVAR *CURRENT-INPUT-FILE-LIST* :UNBOUND)
(DEFVAR *NIC-STREAM* :UNBOUND)

(DEFUN NIC-ENTRY-STREAM-D-H (OP &OPTIONAL ARG1 &REST REST)
  (STREAM-DEFAULT-HANDLER *NIC-STREAM* OP ARG1 REST))

(DEFSELECT (NIC-ENTRY-STREAM NIC-ENTRY-STREAM-D-H)
  (:CLOSE (IGNORE)
    (AND *CURRENT-INPUT-STREAM* (SEND *CURRENT-INPUT-STREAM* :CLOSE)))
  (:ENTRY ()
    (IF (NOT (OR *CURRENT-INPUT-STREAM* *CURRENT-INPUT-FILES*))
	()
      (UNLESS *CURRENT-INPUT-STREAM*
	(SETQ *CURRENT-INPUT-STREAM* (OPEN (CAR *CURRENT-INPUT-FILE-LIST*)))
	(SETQ *CURRENT-INPUT-FILE-LIST* (CDR *CURRENT-INPUT-FILE-LIST*)))
      (DO (SOMETHING-HAPPENED RESULT LINE EOF)
	  (SOMETHING-HAPPENED RESULT)
	(MULTIPLE-VALUE (LINE EOF) (SEND *CURRENT-INPUT-STREAM* :LINE-IN))
	(WHEN EOF
	  (SEND *CURRENT-INPUT-STREAM* :CLOSE)
	  (SETQ *CURRENT-INPUT-STREAM* NIL))
	(MULTIPLE-VALUE (SOMETHING-HAPPENED RESULT) (PARSE-NIC-LINE LINE *INCLUDE-OBJECTS*))
	;; If nothing happened and there are more files to go, open the next one
	(UNLESS SOMETHING-HAPPENED
	  (COND (*CURRENT-INPUT-FILE-LIST*
		 (SETQ *CURRENT-INPUT-STREAM* (OPEN (CAR *CURRENT-INPUT-FILE-LIST*)))
		 (SETQ *CURRENT-INPUT-FILE-LIST* (CDR *CURRENT-INPUT-FILE-LIST*)))
		(T ; nothing happened, end of all input files: return a NIL
		 (SETQ SOMETHING-HAPPENED T RESULT NIL))))))))

(DEFUN MAKE-NIC-ENTRY-STREAM (INPUT-FILES INCLUDE-OBJECTS)
  (LET ((*CURRENT-INPUT-FILES* INPUT-FILES)
	(*CURRENT-INPUT-STREAM* NIL)
	(*NIC-STREAM* NIL))
    (SETQ *NIC-STREAM*
	  (CLOSURE '(*CURRENT-INPUT-FILES* *CURRENT-INPUT-STREAM* *NIC-STREAM*)
		   'NIC-ENTRY-STREAM))))

(DEFUN GENERATE-LISP-INTERNET-TABLE
       (&KEY (INPUT-FILES (LIST (GET-SITE-OPTION :LOCAL-INTERNET-HOST-TABLE)))
	     (OUTPUT-FILE "SYS: SITE; INTERNET LISP >")
	     (INCLUDE-OBJECTS '(:HOST)))
  (WITH-OPEN-STREAM (NIC (MAKE-NIC-ENTRY-STREAM INPUT-FILES INCLUDE-OBJECTS))
    (WITH-OPEN-FILE (OUT OUTPUT-FILE :DIRECTION :OUTPUT)
      )))