Date: 28 June 1982 23:46-EDT
From: Mark J. Dulcey <DULCEY at MIT-AI>
To: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI

In 86.44, Control-Q in Incremental Search is fixed to act like Control-Q
elsewhere in regard to control characters.  In other words, Control-Q
Control-F will put an epsilon in the search buffer.

Date: Monday, 28 June 1982, 23:19-EDT
From: Henry Lieberman <Henry at MIT-AI>
Subject: Calling keyboard macros from Lisp code
To: Mike McMahon <MMcM at SCRC-TENEX>
Cc: Bug-Zwei at MIT-AI


	How is it possible to call from Lisp a keyboard macro defined in Zwei?
    And have it do what?  Type editor commands to the lisp listener?

What I had in mind was calling it from Lisp code running inside the editor.
ZWEI:KEY-EXECUTE would be fine except that if you call it on a key containing
a keyboard macro it complains "This stream doesn't permit macros".

The reason I want it is that I often need keyboard macros which iterate over a
list or have conditionals, etc. (What I really need is Tinker in Zwei!) 
If I had a way to call a keyboard macro from Lisp I could write a little piece 
of Lisp code to accomplish this. It's the analog of typing Teco code in a
minibuffer in Emacs.

Date: 28 June 1982 22:23-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Can't search for control characters...
To: SALZ at MIT-AI, MMcM at SCRC-TENEX
cc: BUG-ZWEI at MIT-AI

    Date: Friday, 25 June 1982, 17:16-EDT
    From: Mike McMahon <MMcM at SCRC-TENEX>
    Subject: Can't search for control characters...
    To: SALZ at MIT-AI
    Cc: BUG-ZWEI at MIT-EECS

	Date: Thursday, 24 June 1982, 19:30-EDT
	From: Richard E. Salz <SALZ at MIT-AI>
	In ZWEI in System 210.80, ZMail 45.2, Remote-File 103.0,
	Experimental Macsyma 36.0, DAEDALUS 45.2, microcode 895,
	site configuration 8, 210.80 MacDaed, on Marvin:
	^Q ^F, for example, just gets treated as an F.
    The character C-F takes more than 8 bits.  It therefore cannot be in a buffer
    to search for.  The "ascii control" character  can be searched for without
    any special quoting.
							Also,
	is there a way to make case be a factor?  (ie, F <> f)
    Do M-X Set Variable
    Alphabetic Case Affects Search
    T

There is an inconsistency here.  Typing C-Q C-F at a buffer or
minibuffer gets you an  (epsilon).  Typing C-Q C-F at an I-search gets
you an F (capital F).  I think what he found really IS a bug in
I-search.

Date: 28 June 1982 21:58-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
To: AGRE at MIT-AI
cc: BUG-ZWEI at MIT-AI

    Date: Monday, 28 June 1982, 14:30-EDT
    From: Mike McMahon <MMcM at SCRC-TENEX>
    To: AGRE at MIT-AI
    Cc: BUG-ZWEI at MIT-AI

	Date: 27 June 1982 09:48-EDT
	From: Philip E. Agre <AGRE at MIT-AI>
	Is there something I can do to make Zwei pretend that all of the
	whitespace in a line is just spaces (i.e., NOT tabs)?...

    There is a version of C-D that treats tabs as sets of spaces like rubout in
    lisp mode does.

Since he didn't bother to mention the name of the command, I will: it's
Tab Hacking Delete Forward.  (The Lisp Mode definition of Rubout is
Tab Hacking Rubout, by the way.)

Date: Monday, 28 June 1982, 14:33-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
To: Henry at MIT-AI
Cc: BUG-zwei at MIT-EECS

    Date: Sunday, 27 June 1982, 17:54-EDT
    From: Henry Lieberman <Henry at MIT-AI>
    In zwei in System 210.95, ZMail 45.3, LMFS 27.15, Tape 10.6, Canon 14.2,
    Remote-File 103.0, microcode 896, site configuration 9, on Lisp Machine Eighteen:
    How is it possible to call from Lisp a keyboard macro defined in Zwei?
And have it do what?  Type editor commands to the lisp listener?

Date: Monday, 28 June 1982, 14:27-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: <Help>
To: kmp at MIT-MC
Cc: BUG-ZWEI at MIT-MC

    Date: 27 June 1982 07:19-EDT
    From: Kent M. Pitman <kmp at MIT-MC>
    * <Help> prompts "Doc A,C,D,L,V,W,<Space>,?: ", but does not mention "U" which
      is an allowable option at that point. The help text you get when you type "?"
      mentions "U", however.
It lists U iff it will work.


Date: Monday, 28 June 1982, 14:30-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 27 June 1982 09:48-EDT
    From: Philip E. Agre <AGRE at MIT-AI>
    Is there something I can do to make Zwei pretend that all of the
    whitespace in a line is just spaces (i.e., NOT tabs)?  Although
    I understand the usefulness of tabstops in compacting the disk
    versions of indented source code, I don't see any reason why I
    ever have to know about them.  (It offends my internal model
    to have C-D eliminate 8 "spaces" or for the space bar not to
    move the cursor, etc.)
There is a version of C-D that treats tabs as sets of spaces like rubout in
lisp mode does.

Date: Monday, 28 June 1982, 12:34-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-zwei at EE

In zwei in System 210.101, ZMail 45.3, Remote-File 103.0,
Local-File 103.0, DAEDALUS 45.2, microcode 895, site configuration 11,
Large Files, on Lisp Machine Eight:

When you do M-. with the cursor in the middle of a #'-ified function
name, as in (mapc #'block-parallelism-analysis blocks), that should be
the default function to edit, rather than DEFUN or MAPC or whatever.

Also, I have been having intermittent problems with using the mouse to
point at #'-ified function names with M-.  Zwei draws a box around the
name properly, but click-left just moves the cursor whereever the mouse
is and takes the box away.  This phenomenon doesn't occur invariably and
I can't figure out what laws govern it.

Date: Sunday, 27 June 1982, 17:54-EDT
From: Henry Lieberman <Henry at MIT-AI>
To: BUG-zwei at EE

In zwei in System 210.95, ZMail 45.3, LMFS 27.15, Tape 10.6, Canon 14.2,
Remote-File 103.0, microcode 896, site configuration 9, on Lisp Machine Eighteen:

How is it possible to call from Lisp a keyboard macro defined in Zwei?

Date: Sunday, 27 June 1982, 14:36-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: rms at MIT-AI
Cc: bug-zwei at MIT-AI

    rms@MIT-AI (Sent by ___032@MIT-AI) 06/27/82 12:17:52
    Does ZWEI have Indent Tabs Mode?  

Apropos on Indent and Tabs doesn't show anything close.

                                       In EMACS you can use that to
    tell it to not use tabs.  Then you use Tabify and Untabify
    to convert the file.

I hope you don't have to do this explicitly to get the savings in storage
space.  You ought to be able to set some variable or something in your init
file and never see a tab again without losing the storage advantages.

                          If ZWEI doesn't have them, I can add them.

That would be nice.  Thanks.   - phiL

Date: 27 June 1982 09:48-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

Is there something I can do to make Zwei pretend that all of the
whitespace in a line is just spaces (i.e., NOT tabs)?  Although
I understand the usefulness of tabstops in compacting the disk
versions of indented source code, I don't see any reason why I
ever have to know about them.  (It offends my internal model
to have C-D eliminate 8 "spaces" or for the space bar not to
move the cursor, etc.)     - pHil

Date: 27 June 1982 07:19-EDT
From: Kent M. Pitman <kmp at MIT-MC>
Subject: <Help>
To: BUG-ZWEI at MIT-MC

In System 79.52, ... 

* <Help> prompts "Doc A,C,D,L,V,W,<Space>,?: ", but does not mention "U" which
  is an allowable option at that point. The help text you get when you type "?"
  mentions "U", however.

* Typing <Help> to the aforementioned prompt just beeps. It seems like this 
  should do the same as "?" ... <Help> should do useful things as often as 
  possible. Indeed, given the existence of a <Help> key, people shouldn't be 
  encouraged to think that "?" is the right thing to type for help.



Date: Friday, 25 June 1982, 17:16-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: Can't search for control characters...
To: SALZ at MIT-AI
Cc: BUG-ZWEI at MIT-EECS

    Date: Thursday, 24 June 1982, 19:30-EDT
    From: Richard E. Salz <SALZ at MIT-AI>
    In ZWEI in System 210.80, ZMail 45.2, Remote-File 103.0,
    Experimental Macsyma 36.0, DAEDALUS 45.2, microcode 895,
    site configuration 8, 210.80 MacDaed, on Marvin:
    ^Q ^F, for example, just gets treated as an F.
The character C-F takes more than 8 bits.  It therefore cannot be in a buffer
to search for.  The "ascii control" character  can be searched for without
any special quoting.
						    Also,
    is there a way to make case be a factor?  (ie, F <> f)
Do M-X Set Variable
Alphabetic Case Affects Search
T

Date: 25 June 1982 17:30-EDT
From: David Chapman <ZVONA at MIT-AI>
To: BUG-ZWEI at MIT-AI

Well, it is clearly a bug in anycase that it rejects my b command
without checking my init file.

Date: Thursday, 24 June 1982, 19:30-EDT
From: Richard E. Salz <SALZ at MIT-AI>
Subject: Can't search for control characters...
To: BUG-ZWEI at EE

^Q ^F, for example, just gets treated as an F.  Also,
is there a way to make case be a factor?  (ie, F <> f)

In ZWEI in System 210.80, ZMail 45.2, Remote-File 103.0,
Experimental Macsyma 36.0, DAEDALUS 45.2, microcode 895,
site configuration 8, 210.80 MacDaed, on Marvin:


Date: 23 June 1982 20:02-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: F command in DIRED
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.38, ZMail 45.1, microcode 136, on Lisp Machine Nine:

If you use the F command on one file in a DIRED and exit, the file is
read in, but the buffer is not made the current buffer.  Is this
correct, or is this a bug?

Date: 22 June 1982 19:48-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
To: RICH at MIT-AI, BUG-ZWEI at MIT-AI

    Date: 22 June 1982 17:41-EDT
    From: Charles Rich <RICH at MIT-AI>
    To: BUG-ZWEI at MIT-AI

    In zwei in System 79.52, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Experimental Knowledge-Based-Editor 29.5, microcode 849, Black Magic!, on Lisp Machine Twenty-two:

    Electric Shift lock is set as the default in my Zwei, but even if
    it turn it off in a buffer, every time I do System-L and then System-E
    back to that buffer it is back on again!

This is fixed in System 86.  It would not be easy to fix in 79; sorry
about that.

Date: 22 June 1982 17:41-EDT
From: Charles Rich <RICH at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in System 79.52, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Experimental Knowledge-Based-Editor 29.5, microcode 849, Black Magic!, on Lisp Machine Twenty-two:

Electric Shift lock is set as the default in my Zwei, but even if
it turn it off in a buffer, every time I do System-L and then System-E
back to that buffer it is back on again!

Date: Tuesday, 22 June 1982, 14:21-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: Minor modes -- question
To: ECC at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 22 June 1982 13:38-EDT
    From: Eugene C. Ciccarelli <ECC at MIT-AI>
    1. The mode is turned on and off globally, perhaps with an
    override in certain buffers, but at the moment I don't much care
    about that.
*INITIAL-MINOR-MODES* are those turned on for new buffers.
*STICKY-MINOR-MODES* are those inherited from the previous buffer.

    2. The mode is turned on and off per-buffer.
This is the default for minor modes.  Provided they are not made pervasive
by one of the variables mentioned above, this will happen.

Date: 22 June 1982 13:38-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: Minor modes -- qustion
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.37, ZMail 45.1, microcode 136,  , on Lisp Machine Nine:

I have a couple of minor modes that don't get turned on
automatically by major-mode hooks, but that get turned on by the
user manually.  I have two kinds of action that I'd like to
be able to specify:

1. The mode is turned on and off globally, perhaps with an
override in certain buffers, but at the moment I don't much care
about that.

2. The mode is turned on and off per-buffer.

Are there variables that control such actions?  How do I use
them?

Date: Monday, 21 June 1982, 15:06-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: Being clever about sending mail
To: DLA at MIT-AI
Cc: RICH at MIT-MC, bug-zmail at mit-mc, BUG-LISPM at MIT-MC, BUG-ZWEI at MIT-MC

    Date: Thursday, 17 June 1982, 16:04-EDT
    From: David L. Andre <DLA at MIT-AI>
	Date: 14 June 1982 10:40-EDT
	From: Charles Rich <RICH at MIT-MC>
	...  It would be nice if the mailing
	code were written a little more cleverly, e.g. to try sequence
	through entries on ZWEI:*CHAOS-MAIL-HOSTS* until it finds one
	that is up.
    I thought that's what it did.
That's what it does in the case of chaos mailing rather than COMSAT
request file mailing.  COMSAT request files must go to the login host,
since ZMail cannot generate the headers.  Perhaps now that OZ is here
and AI is still ailing, the default mail mode for MIT should be CHAOS as
well?


Date: Sunday, 20 June 1982, 01:29-EDT
From: David A. Moon <Moon at SCRC-TENEX>
Subject: compiling DEFCOMs
To: Eugene C. Ciccarelli <ECC at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 15 Jun 82 15:57-EDT from Eugene C. Ciccarelli <ECC at MIT-AI>

    Date: 15 June 1982 15:57-EDT
    From: Eugene C. Ciccarelli <ECC at MIT-AI>

    For convenience, in my file that customizes Zwei for me, I have
    ECC:DEFCOM deff'd to be ZWEI:DEFCOM.  (So I don't need the
    "Zwei:" each time, and so (I think) Zwei will notice the
    definitions since the line then starts "(def".)

    However, I find that these functions are not getting compiled.
    For example, if you have the following small source file:

	;;; -*- Mode:LISP; Package:USER; Base:10. -*- 
    
	(deff defcom 'zwei:defcom)
    
	(defcom COM-DCTEST "..." ()
	   (ZWEI:COM-NEXT-SCREEN))

    and you compile that, you will find that COM-DCTEST is not
    compiled

You need to wrap an EVAL-WHEN around the DEFF or it won't take effect at
compile time, only when the file is loaded (like any other random form).
I verified that it works provided you do so.

Date: Friday, 18 June 1982, 11:41-EDT
From: Philip E. Agre <Agre at MIT-AI>
To: BUG-zwei at EE

In zwei in System 210.80, ZMail 45.2, Remote-File 103.0, microcode 895,
site configuration 8, on Lisp Machine Two:

(defun foo (x) (+ x 2))

#| 

In this message, do M-> then C-M-B C-M-B.  The cursor ends up inside
this comment.  Analogous things happen with C-M-F, C-M-T, and so on.
Is Zwei supposed to support this sort of comment?

|#

(defun bar (y) (- y 4))

Date: 18 June 1982 10:20-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.36, ZMail 45.1, microcode 123, Saver, on Lisp Machine Nine:

ZWEI:STREAM-PRE-COMMAND-HOOK also needs to have a priority.

Date: 18 June 1982 10:05-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: COMMAND-HOOK
To: BUG-ZWEI at MIT-AI
cc: AGRE at MIT-AI

In ZWEI in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.36, ZMail 45.1, microcode 123, Saver, on Lisp Machine Nine:

With AI:LMLIB;FILCOM loaded, making a split screen with
Lisp(Edit) and Edit windows gets an error in ZWEI:COMMAND-HOOK --
doing a > on NIL.  It is cdr'ing down the value of
ZWEI:*POST-COMMAND-HOOK*, comparing priorities

	     (> (GET (CAR L) 'COMMAND-HOOK-PRIORITY) PRI)

and it comes to the last one, ZWEI:STREAM-COMMAND-HOOK, which has
no property ZWEI:COMMAND-HOOK-PRIORITY.  The GET returns NIL and
> therefore loses.  I therefore think this is a Zwei bug --
ZWEI:STREAM-COMMAND-HOOK should have the priority property, or
maybe the > should only be done on numeric priorities, if NIL is
to be allowed -- that might be better, anyway, in case someone
doesn't define a priority when they define the mode?


Date: 18 June 1982 09:14-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: abbrevs in minibuffers
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.36, ZMail 45.1, microcode 123, Saver, on Lisp Machine Nine:

Is word abbrev expansion turned off now in minibuffers?  I
generally find my abbrevs not expanding in them, but I think
they do if I finish typing the abbrev before the minibuffer is
redisplayed.  Strange.  And if it is deliberate that they don't
expand in minibuffers, how can I arrange to have my minibuffers
set back to expanding abbrevs?

Date: Thursday, 17 June 1982, 16:04-EDT
From: David L. Andre <DLA at MIT-AI>
Subject: Being clever about sending mail
To: RICH at MIT-MC
Cc: BUG-LISPM at MIT-MC, BUG-ZWEI at MIT-MC

    Date: 14 June 1982 10:40-EDT
    From: Charles Rich <RICH at MIT-MC>

    In System 79.52, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
    Obsolete Tester 23.7, Reasoning Utility Package 1.0,
    Experimental Plan Calculus 2.4, microcode 849, 79.49 PC 2.4, on Lisp Machine Twenty-two:

    ...  It would be nice if the mailing
    code were written a little more cleverly, e.g. to try sequence
    through entries on ZWEI:*CHAOS-MAIL-HOSTS* until it finds one
    that is up.
I thought that's what it did.


Date: 16 June 1982 19:11-EDT
From: Philip E. Agre <Agre at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in LMFILE-Remote 15.2, MIT-Specific 7.1, System 85.48,
ZMail 44.3, Remote-File 8.0, Local-File 37.1, DAEDALUS 45.1,
microcode 123, super, on Lisp Machine Eight:

Insert 100 newlines before this text line (which runs more than one physical line), position the cursor on the first character on the second physical line of the text line (the one after the "!" at the end of the first physical line), and type C-- C-L.  You will get an error about "point left point outside of window".  Note that the error doesn't happen if the cursor is on any but the first character of the second physical line.


Date: 15 June 1982 15:57-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: compiling DEFCOMs
To: BUG-ZWEI at MIT-AI

In Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0, System 86.35,
ZMail 45.1, microcode 123, Saver, on Lisp Machine Nine:

For convenience, in my file that customizes Zwei for me, I have
ECC:DEFCOM deff'd to be ZWEI:DEFCOM.  (So I don't need the
"Zwei:" each time, and so (I think) Zwei will notice the
definitions since the line then starts "(def".)

However, I find that these functions are not getting compiled.
For example, if you have the following small source file:

    ;;; -*- Mode:LISP; Package:USER; Base:10. -*- 
    
    (deff defcom 'zwei:defcom)
    
    (defcom COM-DCTEST "..." ()
       (ZWEI:COM-NEXT-SCREEN))
    
    (defun DCTEST-RANDOM-FUNCTION (x)
      (+ x 5))

and you compile that, you will find that COM-DCTEST is not
compiled -- it is a NAMED-LAMBDA.  DCTEST-RANDOM-FUNCTION, as
expected, is compiled.

Has this always been this way, and I just never noticed?  Is it
not a bug?

Date: 15 June 1982 09:49-EDT
From: Philip E. Agre <Agre at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in LMFILE-Remote 15.2, MIT-Specific 7.1, System 85.48,
ZMail 44.3, Remote-File 8.0, Local-File 37.1, DAEDALUS 45.1,
microcode 123, super, on Lisp Machine Eight:

After loading all my files into Zwei buffers and editing most of them I did
C-X C-B and moused "Compiler Warnings" which claimed to have 93 lines or
thereabouts (I hadn't run the compiler yet).  It seemed to put me in the
middle of a buffer full of compiler warnings for system programs (OK).  I did
C-V to look at more of them and the buffer went blank.  I did M-V and got a
beep, then a message appeared saying "There is already a buffer named Compiler
Warnings".  Then I tried typing various characters; each beeped and gave back
the same warning message.  So I moused List Buffers; the first buffer it
listed was Compiler Warnings [1 line], but when it got done listing all the
other buffers that were supposed to be there it blew up with NIL undefined
function.  Mousing a buffer in the listing didn't work and Aborting the EH
cleared the buffer listing and got me back to the buffer that beeps at every
character.  Typing (ed "agre;sccode") at the Lisp Listener worked, but C-X C-B
failed in the same way, so I set ZWEI:*ZMACS-BUFFER-LIST* to
ZWEI:*ZMACS-BUFFER-HISTORY* and everything seems to work, but I'm still a bit
worried, because the former was quite a bit longer than the latter.  We'll
see.  I don't know what to make of any of it, and I can't make any sense of
the code.

Date: 14 June 1982 10:40-EDT
From: Charles Rich <RICH at MIT-MC>
Subject: Being clever about sending mail
To: BUG-LISPM at MIT-MC
cc: BUG-ZWEI at MIT-MC

In System 79.52, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Obsolete Tester 23.7, Reasoning Utility Package 1.0,
Experimental Plan Calculus 2.4, microcode 849, 79.49 PC 2.4, on Lisp Machine Twenty-two:

If the associated machine for a LISPM goes down (typically AI)
after I have logged in, I have a terrible time getting ZWEI in
the Mail command and also Zmail to use another available host
(e.g. MC) to write out the mail queue file.  I have tried resetting
ZWEI:*MAIL-QUEUE-FILE* and all kinds of other things in sight,
including logging out and logging in again (LOGIN 'RICH 'MC)
and so on and still usually end up losing.  I don't really want
to cold boot the machine, which seems like the only way to get
all the relevant internal state reset.  This happens quite
often and is very frustrating.  It would be nice if the mailing
code were written a little more cleverly, e.g. to try sequence
through entries on ZWEI:*CHAOS-MAIL-HOSTS* until it finds one
that is up.

		-Chuck.


Date: 13 June 1982 22:25-EDT
From: Philip E. Agre <Agre at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in LMFILE-Remote 15.2, MIT-Specific 7.1, System 85.50,
ZMail 44.3, Remote-File 8.0, Local-File 37.1, DAEDALUS 45.2,
microcode 123, super, on Lisp Machine Eight:

In Dired, if the directory is sorted by filename down (instead of the default
by filename up), then C-U H will mark for deletion the most recent versions of
a file rather than the least recent ones.

To detect this sort of thing, maybe when Dired is printing out the list of
files it is going to delete when you say Q it should also print out the
versions of those same files that it is keeping, like M-X Clean does.

Date: Thursday, 10 June 1982, 22:40-EDT
From: David Vinayak Wallace <Gumby at MIT-AI>
To: BUG-zwei at MIT-AI

In zwei in Remote-File 10.0, LMFILE-Remote 17.1, MIT-Specific 9.0,
System 86.31, ZMail 45.1, microcode 123, Saver, on Lisp Machine One:

M-X Source Compare croaks when the file is in font-lock mode (it tries
to to a (tyo #\control-f) and can't.

Date: 9 June 1982 19:08-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: My earlier DEFSTRUCT bug report
To: BUG-ZWEI at MIT-AI
cc: ECC at MIT-AI

In Zwei in LMFILE-Remote 17.1, MIT-Specific 9.0, System 86.30,
ZMail 45.1, Experimental Remote-File 11.0, Experimental Local-File 38.0,
microcode 124, Saver LFS, on Lisp Machine Four:

Ok, I've finally been able to isolate something that fails and yet doesn't
require my large environment -- here is a scenario that produces the problem:

After a cold boot, do:

(setq login-options nil)
(login 'ecc 'ai nil)

The login may actually not be at all necessary.  Note that it is not
running my init, so that's innocent.

Now define the following function:

(defun CHECK-LOGIN-OPTIONS ()
  (declare (special :login-options))
  nil)

And call it -- this is necessary:  the bug only appears when that function, with
its declare, is run:

(check-login-options)

Now define a zwei command:

(zwei:defcom COM-TEST-ONE "..." ()
  (eval '(defstruct (ZERO (:type :list) :conc-name) first))
  zwei:dis-none)

Go into Zwei, install that on Control-}, for example, and then type Control-}.
That will define the ZERO structure and its accessor macro.

Now eval the following:

(macroexpand-1 '(zero-first z))

That should evaluate to (progn (declare (special :login-options)...)
(nth 0 z)).  The bug (I assume it is a bug) is all that declare stuff --
it should just be a simple (nth 0 z).

If, on the other hand, you evaluate that defstruct using the standard
Zwei evaluator, Hyper-Control-E, with (DEFSTRUCT ...) in the buffer, the
bug does NOT happen.  So, what is the difference?  What is wrong with
evaluating inside COM-TEST-ONE when called from Zwei top level key
dispatch?  Just doing (com-test-one) works fine -- you get the bug only
when you type C-} which runs com-test-one.

Date: Wednesday, 9 June 1982, 07:48-EDT
From: David L. Andre <DLA at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: BUG-ZWEI at MIT-AI, BUG-ZMAIL at MIT-AI

    Date: 5 June 1982 12:00-EDT
    From: Philip E. Agre <AGRE at MIT-AI>
    In zwei in Experimental System 86.18 ... on Lisp Machine Six:

    Calling the ZWEI:ZMAIL function explicitly from Zwei (using, e.g., Meta-Altmode
    or from a command) causes the Zwei window to go into a state called "Await
    Exposure" upon return from Zmail.  System-M Q doesn't solve the problem but
    System-L (ED) does.
I couldn't duplicate this in 210, but it sounds pretty much like the
standard selection bug (read, "Fixed in the activity system").

Date: Tuesday, 8 June 1982, 14:51-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
To: JMTURN at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 4 June 1982 00:31-EDT
    From: James M. Turner <JMTURN at MIT-AI>
    I need two "easy" features explained. First, if I want a 
    editor which acts as a pane in a larger frame, but can be
    controled (buffer selection, interval setting, mode setting)
    from a process outside the editor process, what should I use.
If you want a ZMACS window, you are out of luck dealing with it in another process.
If you just want an editor, i think STANDALONE-EDITOR-PANE is the flavor of choice.

    Secondly, how can I interchange the contents of a node
    without creating a new buffer. Right now, I'm using
    (SET-WINDOW-INTERVAL *WINDOW* (CREATE-INTERVAL STRING))
    but that seems to cause breakages...
The interval of a ZMACS window has to be a ZMACS interval, i.e. a buffer.
You don't have to have that buffer listed by C-X C-B, but a vanilla interval
is not enough.

Date: 8 June 1982 15:44-EDT
From: David Chapman <ZVONA at MIT-AI>
To: BUG-ZWEI at MIT-AI

in 85, the headings on the Kill or Save Buffers menu are not
aligned right.

Date: 7 June 1982 18:56-EDT
From: Philip E. Agre <AGRE at MIT-AI>
Subject: C-N and C-P
To: BUG-ZWEI at MIT-AI

Well, they're still inconsistent, as I explained.

Date: 6 June 1982 17:24-EDT
From: Richard M. Stallman <RMS at MIT-AI>
To: AGRE at MIT-AI, BUG-ZWEI at MIT-AI

C-N and C-P have always worked in the way you recently observed, I think.

Date: 6 June 1982 12:58-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.18, Experimental ZMail 45.0, microcode 123, gc@18, on Lisp Machine Six:

There seems to be a new feature in C-P and C-N whereby the "remembered" column
position of the cursor is relative to the screen rather than to the text.
This only shows up in lines of text which lie on more than one screen line.
For example, in this line, if you do C-P C-N at the end of the line you don't end up back at the end of the line of text,
but rather one screen line below it.  What is the "real" line anyway in
COM-UP-REAL-LINE and COM-DOWN-REAL-LINE, the text line or the screen line?  If
it's the screen line, then C-P at the end of that line should have stayed on
the same screen line.  If it's the text line, then C-P C-N should have gone
back to the same text column.  What may be going on is that the "real" line is
the text line and the "real" column (or "index" as the code calls it) is the
screen column.  This isn't consistent.  Perhaps one could have a user-settable
switch that says whether the "real" line and column are the text line and
column or the screen line and column.  Maybe some people like it inconsistent,
so perhaps two switches are in order.  In any event, I don't like this new
feature.  Is there some easy way I can have my init file tell Zwei to do it
the old way?  From my reading of the code, the problem is pretty deep-seated
and simply redefining DOWN-REAL-LINE or even perhaps FORWARD-LINE won't do the
job.  (Anyway, I really dislike redefining deep internal functions like that.)

Date: Saturday, 5 June 1982, 22:25-EDT
From: fox,brian j <BRIANF at MIT-AI>
To: BUG-ZWEI at EE

In ZWEI in System 210.56, ZMail 45.2, Remote-File 103.0, microcode 895,
site configuration 5, on Zaphod Beeblebrox:

from : just another tourist

re:	mouse & cursor phenomena in ZWEI

	While hacking with much fervor one eve I noticed
that whenever the mouse was below the border of the edit
window ,AND the left button was clicked, the screen mana-
ger seemed to be completely confused.

	The cursor in the editor window was not, repeat
not blinking, and yet the type-out was appearing there.
To fix this somewhat disconcertening non-flash, one must
simply strike 'SYSTEM E' to apparently reset the faulty
variables. However in keeping with the high standards of
quality that each and every one of you seem to enjoy, I
felt entirely compelled to write this bug report.

(Daniel told me to)

	Thank you,
		Brian Fox  (login 'brianf)


Date: Saturday, 5 June 1982, 20:38-EDT
From: David Chapman <Zvona at MIT-AI>
To: BUG-zwei at MIT-AI

In zwei in LMFILE-Remote 15.2, MIT-Specific 7.1, System 85.49,
ZMail 44.3, Remote-File 8.0, Local-File 37.1, DAEDALUS 45.2,
microcode 123, Danny's ass, on Lisp Machine Eight:

I have my zwei in this random state where whenever I do
m-. on any function foo, it completes correctly and then
asks ``read "foo" from what file?''  The function in
question is in the current buffer, so I type cr to get
the default.  It then says ``Resectionizing <current
buffer> to find DPL:FOO.''  Then it bombs in a
function-spec-get on (DPL:HEART HEART).  This is called
from definition-text-location of DPL:HEART, "heart", T,
and NIL.

Date: 5 June 1982 15:28-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.18, Experimental ZMail 45.0, microcode 123, gc@18, on Lisp Machine Six:

Is there something I can put in my init file to make Indent New Line move the
cursor from x to y instead of z in the following, like it used to?

(IF (= A B) Ax
  z y

Date: 5 June 1982 12:07-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.18, Experimental ZMail 45.0, microcode 123, gc@18, on Lisp Machine Six:

When you do M-. on a symbol with multiple definitions, it says to give a
numeric argument to Edit Definition to look at the next one.  If M-. is bound
to Edit Definition it should tell you somehow that a numeric argument to M-.
works just as well.  I was used to using C-. to find the next definition, and
I became confused when C-. wouldn't work.  (It blows up trying to do ZEROP on
NIL when you try it in this situation, which it probably shouldn't do.)
Explicitly telling folks about M-. being the thing to use to get the next
definition (implicitly: "as opposed to C-. like it used to be") will spare
others this confusion.

Date: 5 June 1982 12:00-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI, BUG-ZMAIL at MIT-AI

In zwei in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.18, Experimental ZMail 45.0, microcode 123, gc@18, on Lisp Machine Six:

Calling the ZWEI:ZMAIL function explicitly from Zwei (using, e.g., Meta-Altmode
or from a command) causes the Zwei window to go into a state called "Await
Exposure" upon return from Zmail.  System-M Q doesn't solve the problem but
System-L (ED) does.

Date: 5 June 1982 09:44-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.18, Experimental ZMail 45.0, microcode 123, gc@18, on Lisp Machine Six:

I did M-X Dired, intending to look at ML:DPH;, but instead I typed DM:DPH;.
It errored, saying that "AI:DM:DPH;" didn't exist, and asked for another
directory (fair enough).  So I responded "ML:" and it read in ML:DPH;
properly, but when it was done it claimed that I was editing "AI:DM:DPH;" and
it gave that name to the DIRED buffer.  (This sounds like it's one for the new
error system, but I don't remember seeing it reported before.)

Date: Friday, 4 June 1982, 16:21-EDT
From: David Vinayak Wallace <Gumby at MIT-AI>
Subject: Text fill bug
To: BUG-ZMAIL at MIT-AI, BUG-ZWEI at MIT-AI
Cc: Gumby at ai

In ZMAIL in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.17, Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine Eighteen:

I'm not sure if this is a ZWEI or a ZMAIL bug:

In my init file I have (setq zwei:text-mode-hook
'zwei:auto-fill-mode-please).  So when I mail with zmail, the wholine
shows (Text Fill). But nothing is filled unless I manually M-Q. In zwei,
executing "M-X au f" completes correctly but puts no "Fill" in the
wholine.

An unrelated complaint: I wish ZMAIL's help system was the same as
ZWEI's (I.e. apropos, etc).

			--david

Date: 4 June 1982 00:31-EDT
From: James M. Turner <JMTURN at MIT-AI>
To: BUG-ZWEI at MIT-AI

I need two "easy" features explained. First, if I want a 
editor which acts as a pane in a larger frame, but can be
controled (buffer selection, interval setting, mode setting)
from a process outside the editor process, what should I use.

Secondly, how can I interchange the contents of a node
without creating a new buffer. Right now, I'm using
(SET-WINDOW-INTERVAL *WINDOW* (CREATE-INTERVAL STRING))
but that seems to cause breakages...

					James

Date: 3 June 1982 16:16-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: ZWEI:COM-NEXT-FILE
To: BUG-ZWEI at MIT-AI

In ZWEI in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.0, Experimental MIT-Specific 9.0,
Experimental System 86.23, Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine One:

I just had a system selected as tag table, visited the first file
in it, then did a ZWEI:COM-NEXT-FILE.  I quickly typed
Control-Abort.  It didn't clean up completely -- the file is
still sitting in the wholine.

Date: Monday, 31 May 1982, 18:27-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-zwei at EE

In zwei in System 210.61, ZMail 45.2, Remote-File 103.0,
Local-File 103.0, Experimental Play 1.0, microcode 896,
site configuration 6, Play, on Lisp Machine Nine:

In the following situation, Reverse Following List

;; (a b c) ;;
#| (a b c) |#

1. blows up on either of the first two semicolons
2. works properly on either the first "(" or the space before it
3. bleeps anywhere on the second line

The behavior is independent of whether the second two semicolons exist
and of whether the second list is on the same line as the "#|" and the
"|#", i.e., it bleeps on the "(" in

#|
(a b c)
|#

HANSON@MIT-MC 05/29/82 12:58:42
To: (BUG ZWEI) at MIT-AI
In ZWEI in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.16, Experimental ZMail 45.0, Local-File 37.1,
microcode 123, LFS, on Lisp Machine Two:

after evaluating a form at top level, an error was received:

The object #<DUMMY-PATHNAME "foo"> received a GENERIC-PATHNAME message,
which went unclaimed.

I have a screen copy of the stack for whoever needs it.


HANSON@MIT-MC 05/29/82 11:02:50
To: (BUG ZWEI) at MIT-AI
In ZWEI in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.1, Experimental MIT-Specific 9.0,
Experimental System 86.16, Experimental ZMail 45.0, Local-File 37.1,
microcode 123, LFS, on Lisp Machine Two:

While executing Compile Buffer Changed Functions, the function
COMPILER:ENTER-COMPILER-WARNINGS-CONTEXT was undefined.  I have a screen
copy of the error.


Date: Friday, 28 May 1982, 04:31-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Update Mode Line
To: BUG-ZWEI at MIT-AI
Cc: ECC at MIT-AI

    Date: 27 May 1982 16:19-EDT
    From: Eugene C. Ciccarelli <ECC at MIT-AI>
    In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
    System 85.45, ZMail 44.3, microcode 123, 60.45Hz, on Lisp Machine Six:

    Mode line's package is not getting updated:
    1. Create buffer FOO.
    2. Insert the following mode line:
    ;;; -*-Package:USER; Base:10.; Mode:Lisp-*-
    3. M-X Reparse Mode Line.  (Maybe not needed.)
    4. M-X Set Package to SI (for example).
    5. M-X Update Mode Line.  The mode line will redisplay but still
    say:
    ;;; -*-Package:USER; Base:10.; Mode:Lisp-*-

This happens in 210 too, if you don't opt to update the mode line in Set
Package.  Maybe we should flush packages altogether.

Date: 27 May 1982 16:19-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: Update Mode Line
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
System 85.45, ZMail 44.3, microcode 123, 60.45Hz, on Lisp Machine Six:

Mode line's package is not getting updated:
1. Create buffer FOO.
2. Insert the following mode line:
;;; -*-Package:USER; Base:10.; Mode:Lisp-*-
3. M-X Reparse Mode Line.  (Maybe not needed.)
4. M-X Set Package to SI (for example).
5. M-X Update Mode Line.  The mode line will redisplay but still
say:
;;; -*-Package:USER; Base:10.; Mode:Lisp-*-

Date: 27 May 1982 12:44-EDT
From: Philippe Brou <PHILIP at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in LMFILE-Remote 15.2, MIT-Specific 7.1, System 85.44,
ZMail 44.3, Experimental Remote-File 10.0, Local-File 37.1,
microcode 123, LFS 60.45Hz, on Lisp Machine Four:

With M-X List fonts followed by a selection to display font, the function
changes the normal font of the temporary window to the one being displayed.
This may be acceptable in some cases but becomes unbearable if the font
displayed is a mouse font for example. In this case all the information
in the window comes out with this font and is unreadable.

The function should reset the font to CPTFONT after displaying the selection.

Date: Wednesday, 26 May 1982, 21:45-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Edit Definition of copy-array-portion
To: Dulcey at MIT-AI
Cc: BUG-ZWEI at MIT-AI, DLA at SCRC-TENEX

    Date: 26 May 1982 19:07-EDT
    From: Mark J. Dulcey <Dulcey at MIT-AI>
	In Experimental Remote-File 10.0, Experimental LMFILE-Remote 17.0,
	Experimental MIT-Specific 9.0, Experimental System 86.7,
	Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine Seven:
    
	Edit Definition of copy-array-portion in Zwei causes regular PDL overflow.
	(This doesn't happen with other functions, so I'm not sure it's a Zwei bug.)

    This is apparently another problem with M-. of a DTP-U-ENTRY.  I DO think this
    is a problem -- as it is, you don't know that that's the source of the problem
    unless you inspect the function to find out.  (Not everybody knows what's in
    microcode and what's not!)

The PDL overflow doesn't occur in 210.  While I was checking this out, I
patched DEFINITION-TEXT-LOCATION to barf about microcoded functions in 210.57.

Date: 26 May 1982 19:07-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Edit Definition of copy-array-portion
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

    In Experimental Remote-File 10.0, Experimental LMFILE-Remote 17.0,
    Experimental MIT-Specific 9.0, Experimental System 86.7,
    Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine Seven:
    
    Edit Definition of copy-array-portion in Zwei causes regular PDL overflow.
    (This doesn't happen with other functions, so I'm not sure it's a Zwei bug.)

This is apparently another problem with M-. of a DTP-U-ENTRY.  I DO think this
is a problem -- as it is, you don't know that that's the source of the problem
unless you inspect the function to find out.  (Not everybody knows what's in
microcode and what's not!)

Date: 26 May 1982 19:01-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Edit Definition of copy-array-portion
To: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In Experimental Remote-File 10.0, Experimental LMFILE-Remote 17.0,
Experimental MIT-Specific 9.0, Experimental System 86.7,
Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine Seven:

Edit Definition of copy-array-portion in Zwei causes regular PDL overflow.
(This doesn't happen with other functions, so I'm not sure it's a Zwei bug.)

Date: 26 May 1982 17:49-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Meta-Q and Meta-G lossage
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Experimental Remote-File 10.0,
Experimental LMFILE-Remote 17.0, Experimental MIT-Specific 9.0,
Experimental System 86.7, Experimental ZMail 45.0, microcode 123, Saver, on Lisp Machine Seven:

The Meta-Q and Meta-G commands blow up with ZWEI:BP-AT-PARAGRAPH-TERMINATOR
undefined.  (in ZWEI:FILL-INTERVAL  ZWEI:COM-FILL-PARAGRAPH).

This bug is new to System 86.

Date: Tuesday, 25 May 1982, 20:06-EDT
From: David Chapman <Zvona at MIT-AI>
Subject: s-0 ... s-9, h-0 ... h-9, etc.
To: kmp at MIT-MC, BUG-ZWEI at MIT-AI
Cc: KBE-IMPLEM at MIT-AI
In-reply-to: The message of 25 May 82 00:14-EDT from kmp at MIT-MC

    Date: 05/25/82 00:14:01
    From: kmp at MIT-MC
    To:   (BUG ZWEI)
    cc:   KBE-IMPLEM
    Re:   s-0 ... s-9, h-0 ... h-9, etc.

    Super- and Hyper- bits on digits in ZWEI do not do auto arg as they should.
    This is annoying when Super- or Hyper- commands want numeric args. Not just
    super-n and hyper-n, but also super-control-n, etc. need fixing. I assume
    there is some massive array allocated for all this kind of stuff which 
    already holds NILs and which wouldn't take more storage to hold the right
    thing? -kmp
Fixed in the source and installed as 79.50.

kmp@MIT-MC 05/25/82 00:14:01 Re: s-0 ... s-9, h-0 ... h-9, etc.
To: (BUG ZWEI) at MIT-AI
CC: KBE-IMPLEM at MIT-AI
Super- and Hyper- bits on digits in ZWEI do not do auto arg as they should.
This is annoying when Super- or Hyper- commands want numeric args. Not just
super-n and hyper-n, but also super-control-n, etc. need fixing. I assume
there is some massive array allocated for all this kind of stuff which 
already holds NILs and which wouldn't take more storage to hold the right
thing? -kmp


Date: 24 May 1982 22:56-EDT
From: Henry Minsky <HQM at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
System 85.42, ZMail 44.3, microcode 122, 60.72, on Lisp Machine Eighteen:

I had a ctrl-X "(" inside a keyboard macro by accident, and
when I executed the sucker it went into a infinite loop (of course)
and would not stop until I warm booted it. Even ctrl-meta-abort failed.

Henry

Date: Thursday, 20 May 1982, 22:32-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Edit Definition of microcoded function
To: Mike McMahon <MMcM at SCRC-TENEX>
Cc: Dulcey at MIT-AI, BUG-ZWEI at MIT-AI
In-reply-to: The message of 20 May 82 13:17-EDT from Mike McMahon <MMcM at SCRC-TENEX>


    Date: Thursday, 20 May 1982, 13:17-EDT
    From: Mike McMahon <MMcM at SCRC-TENEX>
	Date: 20 May 1982 00:16-EDT
	From: Mark J. Dulcey <Dulcey at MIT-AI>
	In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
	System 85.38, ZMail 44.3, microcode 122, UC 122, on Lisp Machine Five:
	Meta-. doesn't work on functions of type DTP-U-ENTRY.
    By having it "work", do you mean you'd like a better error message?
It could offer to read in UCADR, I suppose.  Have you ever read in UCADR
though, Mark?  It takes a rather long time, and most people wouldn't be able
to read it anyway.

Date: Thursday, 20 May 1982, 13:17-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: Edit Definition of microcoded function
To: Dulcey at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 20 May 1982 00:16-EDT
    From: Mark J. Dulcey <Dulcey at MIT-AI>
    In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
    System 85.38, ZMail 44.3, microcode 122, UC 122, on Lisp Machine Five:
    Meta-. doesn't work on functions of type DTP-U-ENTRY.
By having it "work", do you mean you'd like a better error message?

Date: Thursday, 20 May 1982, 03:06-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Edit Definition of microcoded function
To: Dulcey at MIT-AI
Cc: BUG-ZWEI at MIT-AI, DLA at SCRC-TENEX

    Date: 20 May 1982 00:16-EDT
    From: Mark J. Dulcey <Dulcey at MIT-AI>
    Meta-. doesn't work on functions of type DTP-U-ENTRY.
What do you want it to do, read in the microcode file?  For your
information, the file is so big that it takes about 5 minutes to read
in.

Date: 20 May 1982 00:16-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Edit Definition of microcoded function
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.1,
System 85.38, ZMail 44.3, microcode 122, UC 122, on Lisp Machine Five:

Meta-. doesn't work on functions of type DTP-U-ENTRY.

Date: 19 May 1982 15:39-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: C-X 4 T
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0,
System 85.38, ZMail 44.3, microcode 117, 60.45Hz, on Lisp Machine Four:

I have two windows and I type C-X 4 T.  The minibuffer asks for
the function name, and I type some method form, e.g. "(pfw
:redisplay)".  As soon as I type the ")", the whole thing has
uppercased itself, so clearly it really has completed to some
function it knows about.  (Anyway, this happens to all method
forms I type.)  I finish off by typing End.  After the normal
pause, it asks me what file to read (PFW :REDISPLAY) from --
wrong!  This file is already in Zwei, as the completion showed.

Using C-X O and then M-Period, and typing the exact same function
spec, works correctly.  Also note that if I type a simple
function name, e.g. "FOO", not a method spec, C-X 4 T works
correctly and finds it without asking me anything.

Date: Tuesday, 18 May 1982  15:04-EDT
From: MOON at SCRC-TENEX
To:   David M. Neves <Neves at MIT-MC>
Cc:   BUG-zwei at MIT-AI
Subject: ODC error

    Date: 17 May 1982 21:23-EDT
    From: David M. Neves <Neves at MIT-MC>
    To: BUG-zwei at MIT-AI

    1.  I tried to do an Dired while in Zwie.  I did <meta> x < dired <
    mc:ice; <  (where "<" stands for carriage return).  I got back the
    following message.

    "file error ODC (severity f), too many directory commands for Mc: ice;* *"

    I tried on another MC directory and got the same error.  MC was up
    however.  What does this mean?
If MC had been down it would have said "host down" or something.

Too many directory commands means you tried to list more than one directory
at the same time.  The ITS file server is only capable of listing one
directory at a time; you probably had aborted out of some error earlier,
which left a file open to a directory.  (fs:close-all-files) might be of
use.  F mode in Peek would show if there was a file open.  If all else
fails, you can do (chaos:reset) to get rid of your file server, then do
the Dired again, which will create a new file server.

Date: Tuesday, 18 May 1982, 07:23-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: point pushed
To: Daniel Weise <Daniel at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 17 May 82 16:21-EDT from Daniel Weise <Daniel at MIT-AI>


    Date: 17 May 1982 16:21-EDT
    From: Daniel Weise <Daniel at MIT-AI>
    This is extremely minor, but...  Shouldn't M-space (push point) confirm
    the point was pushed as other point pushing commands do?  The fact that
    other commands only push the point under certain cases and want to let
    the user know when those cases arise should not be an argument that a
    command which always pushes the point need tell the user.
This has always annoyed me, too.  Fixed in 210.41.

Date: 17 May 1982 21:23-EDT
From: David M. Neves <Neves at MIT-MC>
To: BUG-zwei at MIT-AI

In zwei in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0,
System 85.36, ZMail 44.3, microcode 117, 60.17hz, on Lisp Machine Twenty:

2 errors.

1.  I tried to do an Dired while in Zwie.  I did <meta> x < dired <
mc:ice; <  (where "<" stands for carriage return).  I got back the
following message.

"file error ODC (severity f), too many directory commands for Mc: ice;* *"

I tried on another MC directory and got the same error.  MC was up
however.  What does this mean?

2.  Anyway when the above happened it asked for another directory and I
gave it an AI one (ai:lmdoc;).  This worked.  However when the AI directory came up
it had the wrong name in the herald (i.e. MC:ice; * * instead of
ai:lmdoc;* *)

Date: Monday, 17 May 1982, 20:54-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: C-E in error handler on files with multiple fonts
To: Philippe Brou <PHILIP at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 16 May 82 16:13-EDT from Philippe Brou <PHILIP at MIT-AI>

    Date: 16 May 1982 16:13-EDT
    From: Philippe Brou <PHILIP at MIT-AI>
    In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0,
    System 85.31, ZMail 44.3, microcode 122, (GCed), on Lisp Machine Seven:

    Special Font hacking when reading in files doesn't work when the file is being read in
    due to a ctrl-e in the error handler.

    Symptoms are that the line that the redisplay code uses for trying to do redisplay
    is the unhacked line, instead of the actual line of text in the editor buffer.

    This unhacked line has no pointers to its previous line so that it loses when doing
    ZWEI:PUT-POINT-AT-PLINE.
This is another system 85 ZWEI bug.

Date: Monday, 17 May 1982, 16:31-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: com-just-one-space
To: Richard M. Stallman <RMS at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 17 May 82 06:23-EDT from Richard M. Stallman <RMS at MIT-AI>


    Date: 17 May 1982 06:23-EDT
    From: Richard M. Stallman <RMS at MIT-AI>
    I recently changed this not to change point.
    That was because someone complained about the old way it worked.
    Now some people think the new way is wrong.

    I don't really care, and if there is any clear consensus I will
    go with it.  If there isn't, I won't change it again.

I repeat:  The Symbolics software does not have this bug.

Date: 17 May 1982 16:21-EDT
From: Daniel Weise <Daniel at MIT-AI>
Subject: point pushed
To: BUG-ZWEI at MIT-AI

In ZWEI in System 79.46, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, 60.45Hz, on Lisp Machine One:

This is extremely minor, but...  Shouldn't M-space (push point) confirm
the point was pushed as other point pushing commands do?  The fact that
other commands only push the point under certain cases and want to let
the user know when those cases arise should not be an argument that a
command which always pushes the point need tell the user.

Daniel

Date: 17 May 1982 06:23-EDT
From: Richard M. Stallman <RMS at MIT-AI>
Subject: com-just-one-space
To: BUG-ZWEI at MIT-AI

I recently changed this not to change point.
That was because someone complained about the old way it worked.
Now some people think the new way is wrong.

I don't really care, and if there is any clear consensus I will
go with it.  If there isn't, I won't change it again.

kmp@MIT-MC 05/17/82 03:04:24
To: (BUG ZWEI) at MIT-AI
In ZWEI in System 79.46, ... microcode 849, ... on Lisp Machine Twenty-two:

As c-X c-W and friends type out "Written" when done doing there thing,
so c-X c-F and friends that type out "Reading <filename>" should type 
out something saying they're done. It's confusing to come in after the
console is idle awhile and see that message in the echo area. (Yes,
I know I could look in the wholine, but this would just be a nice extra).


Date: 16 May 1982 16:13-EDT
From: Philippe Brou <PHILIP at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0,
System 85.31, ZMail 44.3, microcode 122, (GCed), on Lisp Machine Seven:

Special Font hacking when reading in files doesn't work when the file is being read in
due to a ctrl-e in the error handler.

Symptoms are that the line that the redisplay code uses for trying to do redisplay
is the unhacked line, instead of the actual line of text in the editor buffer.

This unhacked line has no pointers to its previous line so that it loses when doing
ZWEI:PUT-POINT-AT-PLINE.

Date: 15 May 1982 20:48-EDT
From: Philippe Brou <PHILIP at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0,
System 85.33, ZMail 44.3, microcode 117, 60.45Hz, on Lisp Machine Four:

FASL-UPDATE does not seem to work anymore with version 85
Message is:
>>> TRAP 6645 (FILL-POINTER-NOT-FIXNUM M-A)
The fill-pointer of the array given to ARRAY-PUSH, #<ART-16B-1000 5543545>, is not a fixnum.
While in the function COMPILER:FASD-NIBBLE  COMPILE:FASD-START-FILE  ZWEI:FASL:UPDATE

COMPILER:FASD-NIBBLE
   Arg 0 (NUMBER): 143150


[function called with a buffer containing a single function (defun test (a) (// a 2)).
Function compiled with control-greek-e].

Date: Friday, 14 May 1982, 17:24-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Dired, Buffer selection via C-M-L
To: DLA at SCRC-TENEX
Cc: RWK at SCRC-TENEX, AGRE at MIT-AI, BUG-ZWEI at MIT-AI, DLA at SCRC-TENEX

    Date: Saturday, 8 May 1982, 23:20-EDT
    From: David L. Andre <DLA at SCRC-TENEX>
	Date: Saturday, 8 May 1982, 11:11-EDT
	From: Robert W. Kerns <RWK at SCRC-TENEX>
	    Date: 7 May 1982 09:57-EDT
	    From: Philip E. Agre <AGRE at MIT-AI>
	    In M-X Dired, if you hit "H" on column 1 on line 1 then you get an error
	    Function NIL not defined (though C-U H doesn't blow up), 
	Fixed in 210.17.  
    Actually, your patch didn't come close.

    I don't have time to fix this.
Fixed in 210.32.  I am, I am schizophrenic!

Date: 13 May 1982 03:14-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Framed Split Screen including Editor
To: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In Remote-File 7.0, LMFILE-Remote 15.2, MIT-Specific 7.0, System 85.27,
ZMail 44.3, microcode 122, 60Hz Mathlab, on Lisp Machine Sixteen:

Attempting to create a Framed split-screen which includes one or more
editors causes one to lose when you attempt to recall the frame with the
System key (assuming you set one up when you created the frame), with
the following error messsage:

--> Window system problems, using the cold-load stream <--


>>>>TRAP 5033 (FUNCTION-ENTRY)
The function (METHOD ZWEI:ZMACS-FRAME BEFORE EXPOSE) was called with too many arguments.
While in the function (METHOD ZWEI:ZMACS-FRAME BEFORE EXPOSE)  (INTERNAL (METHOD ZWEI:ZMACS-
FRAME COMBINED EXPOSE) 0)  TV:SHEET-EXPOSE

(METHOD ZWEI:ZMACS-FRAME BEFORE EXPOSE):
   Arg 0 (OPERATION): EXPOSE
   -- Extraneous args --
   Arg 1: NIL

Resuming this asks if you want to proceed, throwing away the extraneous
arguments.  If you do this, the frame gets properly set up, except that
the borders of the top window are not properly drawn (because the
cold-load clobbered them).  Aborting also seems to win.

The frame gets set up without incident the first time.  It only loses
when you come back to the frame with System whatever, or select one of
the windows, or whatever.

The complete sequence of events was:
{cold-boot}
(login 'dulcey 'ai nil)
{mouse-right}	;get system menu
{mouse-left on Split Screen}
{mouse-left on Lisp}
{mouse-left on Edit}
{mouse-left on Frame}
{mouse-left on none}	;as in System char to invoke
Y
{mouse-left on Do It}	;in main split-screen menu
<frame sets up correctly (well, almost.  The editor doesn't initialize
until that window is selected.  Is this a bug?)>
{System/C}	;go somewhere else
{System/Y}	;try to get back

Date: Wednesday, 12 May 1982, 06:27-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: ZWEI:COM-JUST-ONE-SPACE
To: Eugene C. Ciccarelli <ECC at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 12 May 82 05:42-EDT from Eugene C. Ciccarelli <ECC at MIT-AI>


    Date: 12 May 1982 05:42-EDT
    From: Eugene C. Ciccarelli <ECC at MIT-AI>
    In ZWEI in LMFILE-Remote 15.1, MIT-Specific 7.0, System 85.25,
    ...
    Is it a feature or bug (my vote) that now ZWEI:COM-JUST-ONE-SPACE
    doesn't necessarily leave point AFTER the space, but sometimes
    leaves it before?
I think it's a bug.  It doesn't happen in Brand S.

Date: 12 May 1982 05:42-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: ZWEI:COM-JUST-ONE-SPACE
To: BUG-ZWEI at MIT-AI

In ZWEI in LMFILE-Remote 15.1, MIT-Specific 7.0, System 85.25,
ZMail 44.3, Experimental Remote-File 8.0, Experimental Local-File 37.0,
microcode 117, 60.45Hz, on Lisp Machine One:

Is it a feature or bug (my vote) that now ZWEI:COM-JUST-ONE-SPACE
doesn't necessarily leave point AFTER the space, but sometimes
leaves it before?  E.g. for "one   /\two", it leaves point the
after, i.e. "one /\two", but for "one/\    two", it leaves it
before, i.e. "one/\ two".  This looks like someone's heuristic
for what I really mean, though it never is for me.  In
particular, when at the end of the line, it seems silly to leave
point before a single Space at the end of that line.

If however this is a feature, never mind me, and I'll whip up my
own that does my-right thing.

Date: Tuesday, 11 May 1982, 06:58-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: error in "list all directory names"
To: IPS.BJN at MIT-EECS
Cc: BUG-ZWEI at MIT-EECS, DLA at SCRC-TENEX

    Date: Monday, 10 May 1982, 20:32-EDT
    From: Bruce J. Nemnich <IPS.BJN at MIT-EECS>

    I got an error in "list all directory names" with arg "ee:lib:<*>":
    In (method fs:pathname sort-lessp), arg0=sort-lessp, arg1=#<tops20-pathname
     "ee:lib:<68.c>">, it tried (zerop nil).

This doesn't happen in 210.

Date: 11 May 1982 06:46-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Multiple BUFFERs-1
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in LMFILE-Remote 15.1, MIT-Specific 7.0, System 85.23,
ZMail 44.3, Experimental Remote-File 8.0, Experimental Local-File 37.0,
microcode 117, 60.45Hz, on Lisp Machine One:

Sorry, my previous mail was wrong.  The double BUFFERs-1 are not dependent
on Lisp Mode Hook.  You ALWAYS get them.

Date: 11 May 1982 06:24-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Lisp Mode Hook when entering ZWEI for first time
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.1, MIT-Specific 7.0,
System 85.23, ZMail 44.3, microcode 117, 60.45Hz, on Lisp Machine One:

In my init file, I had the following line:

  (setq zwei:lisp-mode-hook #'zwei:com-return-indents-mode)

When I first entered the editor, I got the following error message:

>>>>TRAP 15453 (TRANS-TRAP)
The instance variable ZWEI:*NUMERIC-ARG-P* is unbound in #<ZMACS-TOP-LEVEL-EDITOR 23601355>
While in the function ZWEI:COM-RETURN-INDENTS-MODE  ZWEI:TURN-ON-MODE 
ZWEI:TURN-ON-USER-MODES

ZWEI:COM-RETURN-INDENTS-MODE:

If I got out of this error trap by typing Resume and supplying the value
NIL, the editor works, but I now have TWO BUFFER-1 buffers!
Furthermore, selecting the older of these gets me into a strange losing
mode where the editor won't accept any commands (not even printing
characters!).  The only way to recover and return to a working editor is
to use System/Control-E to get a brand-new buffer, and then one can use
Control-X Control-B or whatever to get somewhere useful.

(The same error occurs if I set Lisp-Mode-Hook to #'COM-ELECTRIC-SHIFT-LOCK-MODE.)

I got rid of the *NUMERIC-ARG-P* error by changing my init file to read:

  (setq zwei:lisp-mode-hook #'(lambda () (zwei:turn-on-mode 'zwei:return-indents-mode)))

(the new code being inspired by the text of the function
ZWEI:ELECTRIC-SHIFT-LOCK-IF-APPROPRIATE)

but I still get the two BUFFERs-1.  (Ditto with other modes.)

Date: Monday, 10 May 1982, 20:32-EDT
From: Bruce J. Nemnich <IPS.BJN at MIT-EECS>
Subject: error in "list all directory names"
To: BUG-ZWEI at EE

In ZWEI in System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
Experimental Caretaker 2.2, microcode 865, site configuration 2,
Hitchhiker, on Zaphod Beeblebrox:

I got an error in "list all directory names" with arg "ee:lib:<*>":
In (method fs:pathname sort-lessp), arg0=sort-lessp, arg1=#<tops20-pathname
 "ee:lib:<68.c>">, it tried (zerop nil).

Date: 9 May 1982 22:48-EDT
From: Kent M. Pitman <kmp at MIT-MC>
Subject: :FORCE-KBD-INPUT and typeout 
To: MMCM at MIT-MC
cc: BUG-ZWEI at MIT-MC

If I do a FORCE-KBD-INPUT on a window of a :EXECUTE blip which ends up
doing I/O to TERMINAL-IO (either explicitly or because of error output
(I guess ERROR-OUTPUT is probably a TERMINAL-IO syn stream at the time),
the output comes out on the most recently selected ZWEI window, not on
the typeout window of the window I sent the :EXECUTE blip to. It would
be nice if this could be maintained correctly. The thing is that the 
window the :EXECUTE blip is sent to is a deselected pane of a frame
which is selected (the Zwei frame is a pane in a larger frame). So the
guy is going to see the typeout even tho' the pane is de-selected. It
is entirely probable that the ZWEI pane he last selected is buried, so
the typeout is lost. Also, the typeout is relevant to the context of the
pane I sent the :EXECUTE blip to, which is why I want it to come out there
even if another ZWEI window happens to be even selected and active...


Date: 9 May 1982 18:02-EDT
From: Philip E. Agre <AGRE at MIT-AI>
Subject: Zmacs buffer history
To: Moon at SCRC-TENEX
cc: BUG-ZWEI at MIT-AI, AGRE-X at MIT-AI

    Date: Saturday, 8 May 1982, 21:02-EDT
    From: David A. Moon <Moon at SCRC-TENEX>
    Subject: Zmacs buffer history
    To: bug-zwei at SCRC-TENEX    [Please use bug-xyz@ai when the bug happens in 79 etc too.]
    Cc: AGRE at MIT-AI
    
    *ZMACS-BUFFER-LIST* and *ZMACS-BUFFER-HISTORY* are almost redundant, 
    . . .                           thus making it almost seem like there is only
    one variable rather than two.

Exactly.
    
    Agre's bug report is that c-m-L with an argument doesn't always do what you
    would expect from the List Buffers listing, because buffers created by
    ZWEI:LOAD-FILE-INTO-ZMACS don't work.
    
Right.

    It might be better to get rid of *ZMACS-BUFFER-HISTORY* and just keep
    *ZMACS-BUFFER-LIST* sorted in order of recency of selection.  However this would
    cause c-- c-m-L to tend to bring back an "obsolete" dired or mail buffer.
    There could be a flag in a buffer which makes it invisible to ROTATE-BUFFER-HISTORY.

Hear hear.  There could also be a ZWEI:LOAD-FILE-INTO-ZMACS argument
(defaulting to whatever) giving the initial setting of this flag.

Date: Saturday, 8 May 1982, 23:20-EDT
From: David L. Andre <DLA at SCRC-TENEX>
Subject: Dired, Buffer selection via C-M-L
To: RWK at SCRC-TENEX
Cc: AGRE at MIT-AI, BUG-ZWEI at MIT-AI, DLA at SCRC-TENEX

    Date: Saturday, 8 May 1982, 11:11-EDT
    From: Robert W. Kerns <RWK at SCRC-TENEX>
	Date: 7 May 1982 09:57-EDT
	From: Philip E. Agre <AGRE at MIT-AI>
	In M-X Dired, if you hit "H" on column 1 on line 1 then you get an error
	Function NIL not defined (though C-U H doesn't blow up), 
    Fixed in 210.17.  
Actually, your patch didn't come close.  I can still make dired bomb out
in infinite ways ("E", ".", ",", "C", and "V" all fail or do wierd
things in the header.  "N" bombs out if after the last line of the
buffer.)  The basic problem is that DIRED-LINE-PATHNAME can return NIL,
and few functions in DIRED ever bother to check for that case.  The few
that do often make the assumption that this must be a line in the
header, which isn't right.

I don't have time to fix this.

Date: Saturday, 8 May 1982  02:15-EDT
From: MOON at SCRC-TENEX
To:   Philip E. Agre <AGRE at MIT-AI>
Cc:   AGRE-X at MIT-AI, BUG-ZWEI at MIT-AI
Subject: Your suggestion for changes in how buffer names are read

I don't think it would be a good idea to have it appear to read pathnames
but actually allow you to type only the pathnames of files that have
already been read into buffers.  I suspect this would be very unnatural and
confusing.  It sounds like maybe what you are really asking for is for c-X
K, when you kill the buffer and it asks you where to go instead, to do a
Find File rather than a Select Buffer.

Date: 8 May 1982 17:12-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: 
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.1, MIT-Specific 7.0,
System 85.19, ZMail 44.3, microcode 122, 60.72, on Lisp Machine Eighteen:

The bug I reported about entering a ZTOP buffer also causes lossage
when initializing BUFFER-1.  (This happens when you set Lisp Mode Hook
in your Init file.)

Date: 8 May 1982 17:09-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Control-Q ?
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.1, MIT-Specific 7.0,
System 85.19, ZMail 44.3, microcode 122, 60.72, on Lisp Machine Eighteen:

The help message you get by typing Control-Q ? appears in the minibuffer
window, and scrolls much too fast to read.  (Help-C Control-Q is more
helpful).

Date: 8 May 1982 16:23-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Lisp Mode Hook when entering ZTOP mode
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-AI

In ZWEI in Remote-File 7.0, LMFILE-Remote 15.1, MIT-Specific 7.0,
System 85.19, ZMail 44.3, microcode 122, 60.72, on Lisp Machine Eighteen:

If you have lisp-mode-hook bound to non-NIL and attempt to put a buffer
into ZTOP mode, you get the error Variable *NUMERIC-ARG-P* unbound.

Date: 8 May 1982 16:06-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: New minor mode Return Indents
To: INFO-LISPM at MIT-AI, INFO-ZWEI at MIT-AI

I have made some changes (as of 85.19) to the command Indent New Line
(the function normally found on Line).

1.  The variables Indent New Line New Line Function and 
    Indent New Line Indent Function control how the Indent New Line
    function works.  If they are NIL (the default) Indent New Line performs
    the function placed on Return, then the function placed on Line (just
    like before).  If either is not NIL, the command named is executed
    instead.  Among other things, this allows Indent New Line to be
    placed on the Return key without causing infinite recursion.

2.  The new minor mode Return Indents Mode makes it easy to set up your
    ZMACS to cause the Return key to indent the new line (like the default
    definition of Line), and to put the normal definition of Return on Line
    (so you don't lose it altogether).  This wins (at least I think so) in
    Lisp Mode, and loses horribly in Text Mode.  It probably also wins in
    other programming language modes (but I haven't tried it).

This supersedes my previous announcement about a file to allow this in
LMLIB;.  That file is now considered obsolete and will go away soon.

Date: 8 May 1982 12:49-EDT
From: Philip E. Agre <AGRE at MIT-AI>
Subject: Buffer naming
To: RWK at SCRC-TENEX
cc: RMS at MIT-AI, AGRE-X at MIT-AI, BUG-ZWEI at MIT-AI,
    dlw at SCRC-TENEX

[Btw, note that AGRE-X is just where I send my self-CC's.]
    Date: Saturday, 8 May 1982, 00:43-EDT
    From: Robert W. Kerns <RWK at SCRC-TENEX>
    In-reply-to: The message of 7 May 82 13:28-EDT from Philip E. Agre <AGRE at MIT-AI>

    . . .

    1) Return doing completion (as happens now for buffer names), pathname
    completion, and pathname defaulting are incompatible when taken
    together.  Eliminating return doing completion would eliminate the
    problem, and although I would find that somewhat irritating, such an
    inconsistancy causes several other problems as well, so maybe it should go.

To be clear what we're talking about, let me state my proposal again.
All I am proposing is a way that Zwei should pretend that it works.  If it can
be made to pretend to work that way using a patch or kludge or some other
underlying theory, then fine.  So I'll talk about "how it works" when I mean
"how it pretends to work".  The way I want Zwei buffer names to work is that
they should be able to be either pathnames or arbitrary strings.  The user
should have a model in his/her head according to which buffer names are either
pathnames or arbitrary strings; otherwise s/he will become confused.

I'll be more precise by proposing a specific algorithm that buffer name
completion should (pretend to) use.  For the sake of argument, let us identify
"pathname completion" with "pathname defaulting".  The proposal then is that
(so far as the user sees) a buffer name is either a pathname or an arbitrary
string.  So define completion over strings in the existing manner (to a first
approximation) and define completion over pathnames as pathname defaulting
(without any aspect of string completion).  Then, given completion spaces A
and B, define completion of a string S over A+B in the following manner:
 (1) if S completes uniquely in A according to the completion method for A, 
     then let X be S's completion in A, otherwise let X be the token FAIL.
 (2) if S completes uniquely in B according to the completion method for B,
     then let Y be S's completion in A, otherwise let Y be the token FAIL.
 (3) to compute S's completion Z in A+B,
     let Z = case <A=FAIL?,B=FAIL?> of <Y,Y>: FAIL, <N,N>: FAIL, <Y,N>: B,
                                       <N,Y>: A.

Note that this algorithm for complete(S,A+B) is associative and commutative,
and that, most importantly, it will never provide a completion unless there
really is exactly one available.  This avoids surprises.

[Footnote: What it means for there to be exactly one completion in a
particular "atomic" subspace (one which has a completion algorithm primitively
defined) might be a little hairy.  For example, LONG-H might have completions
LONG-HAIRY-FUNCTION and LONG-HAIRY-FUNCTION1, but you'd probably want to say
that the first is the proper "unique" completion.  What if those two things
were in different subspaces?  I claim that my algorithm's behavior (which is
to fail) is the correct one, since different subspaces should refer to
cognitively different universes, in which the two candidates are not related.
However, the alternative behavior, that of checking whether the algorithm's X
and Y bear some sort of substring relation, is probably easy enough to define
properly.]

[Footnote: The following conditions on completion algorithms ought to hold:
 (1) A is a subset of B => (complete(S,B)=FAIL => complete(S,A)=FAIL)
 (2) A = set-union(B,C) => (complete(S,A+B)=complete(S,C))
I believe that my suggested algorithms satisfy these.]

I am rather fond of Return completing, or, rather, I don't like having to hit
Altmode to make completion happen, since I usually use completion to be able
to enter a command whose completion I know very quickly, and the Altmode key
is out of the way and hard to hit quickly and reliably.  Given that completion
will fail unless there is exactly one legal completion in the entire
completion space (which, again, is composed of two subspaces) I don't see why
Return completing causes any problems or why getting rid of it would solve any.
Maybe there are problems I don't know about.

    2) What you propose really is too complex.  In part this is due to your
    explanation, but let's look for the essential features you're looking
    for and see what the simplest way to get them is.

OK.

    2a)  Would a scheme where user input is first parsed to see if it is a
    pathname, and then converted to a buffer name do the trick?  Maybe the
    other way around?

If that's an implementation issue, then I don't care particularly.  One way of
taking (2a) is that the completion(S,strings+pathnames) algorithm I described
is implemented indirectly, with buffer names all being stored internally as
strings.  If this gives the desired behavior then fine.  Various problems
might arise with other interpretations though.  If you have a buffer BUFFER-2
and and pathname AI:AGRE;BUFRAN >, then BUF should probably fail to complete
(by the principle of surprise avoidance).  In general, it's probably not a
good idea to give priority to one of the completion subspaces.  A much less
worrisome problem is that the information about whether a given buffer name is
"really" a string or a pathname might get lost.  Although any algorithm should
handle this correctly (the current method of assuming its a pathname if it can
be parsed as a pathname is not quite right), the screw cases (buffer names
that look like pathnames but really are strings) are rare.

    3)  What should M-X Rename Buffer do?

My first-pass answer is that I don't think that Rename Buffer is a an
operation you should ever have to do, so I don't use it.  Why would you ever
want to rename a buffer?  One reason might be that you want the effect of C-X
C-W without actually writing the buffer out or creating a real file out in the
world.  I can't think of any cases in which one would want to rename a buffer
to a buffer name that is a string and not a pathname, but then there might be
some and in any event one does't want to make an operation illegal just
because one can't make up a theory for it.  I assume that Rename Buffer's
prompt has buffer name completion.  The problem (ah I see) comes from the fact
that you might want to enter a buffer name that is a pathname that is not yet
known to the system.  Notice though that completion where you're explicitly
entering something that the machine doesn't know about yet (like Rename
Buffer) is conceptually quite a different thing from completion where you're
explicitly entering something that it does know about (like C-X B).  This
indicates that a different notion of completion is called for.  Perhaps the
best thing is to say (Default Completion) or some such thing instead of
(Completion), the only difference being that you must type Altmode to get
completion -- and the only sort of completion you get is pathname defaulting.
I don't know for sure.

    4) How many different representations of a pathname are there?  This
    relates to logical pathnames, pathnames with different equivalent
    namings, etc.  Is it reasonable to just give buffers n different names,
    where n is a reasonably small number like 2 or 3?

Again, if this is an implementation issue then I don't much care.  If it's
done by enumerating printed representations of pathnames, all of them should
be included, not just the 2 or 3 most likely or something.  Of course, the
fact that an enumeration is happening shouldn't be visible.  Also, the
distinction between the buffer name "really" being a string and "really" being
a pathname should be made, but under this implementation the reason is (so far
as I can see) only the remote screw case I mentioned.

    5) How about a minibuffer command called Buffer as Pathname, which when
    you wanted to pick a buffer name with pathname completion, or with
    defaulting, you'd do S-F or something?  Remember the distinction between
    ^X^F and ^XB (when the file is already loaded) is which space it
    operates over.  Is it a good thing to mix these two things into a single
    method of input, or can we SAY what method of naming we're using?

If the separation can be made naturally and each method is roughly equally
easy to get at (as with C-X C-F and C-X B) then I say fine.  But there are
cases in which the user is just asked "which buffer pal?" without being
offered a choice of format.  What one might do is say that (say) Line gives
pathname buffer name completion where Altmode gives string buffer name
completion (or string-representation-of-buffer-name completion, in which the
canonical printed representations of the pathnames are included in the
completion space).

Hope this helps.     - phIl

Date: Saturday, 8 May 1982, 11:11-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Dired, Buffer selection via C-M-L
To: Philip E. Agre <AGRE at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 7 May 82 09:57-EDT from Philip E. Agre <AGRE at MIT-AI>

    Date: 7 May 1982 09:57-EDT
    From: Philip E. Agre <AGRE at MIT-AI>
    In M-X Dired, if you hit "H" on column 1 on line 1 then you get an error
    Function NIL not defined (though C-U H doesn't blow up), 
Fixed in 210.17.
							     and if you Abort out
    of the error then the Dired gets buried under N other buffers and you can't
    even get at it with C-n C-M-L for arbitrarily large n.  Both behaviors seem
    wrong.
Well, if you could get at it with C-n C-M-L it would turn up at annoying times.
Most of the time when you're done with a DIRED, you're done with it.

    Which reminds me, why not generalize C-n C-M-L to mean "move to the n-th
    buffer from the top on the list C-X C-B gives you" rather than just "move to
    the n-th previously selected buffer" (which isn't really an accurate
    description of its operation anyway, since it seems like it really refers to
    just the same list C-X C-B gives you anway)?  
Sounds pretty accurate to me, since C-X C-B lists the buffers in
most-recently-selected order.  It is ambiguous, however.  Got a better
way to phrase it?  Anyway,  I'm not sure what you're trying to say here.
It sounds to me like "Why not generalize it to do X rather than Y, which
isn't really accurate because it really does X anyway?".  Am I mis-parsing
something?
						  One answer might be that you
    want C-1 C-M-L to rotate only that part of the "buffer stack" whose buffers
    have actually been selected at that point (as opposed to having been loaded
    using explicit calls to zwei:load-file-into-zmacs, as with the zwei-load
    hack in defsystem, for which see batali;sys >).  The response to that is that
    all you have to do is to be careful to define the notion of buffer stack 
    rotation so that only selected buffers rotate.  Since I use buffer stack
    rotation only rarely and C-n C-M-L for large n frequently, this doesn't seem
    like a bad trade-off to me.
All you have to do is to not put buffers you don't want to participate in
buffer stack rotation on the buffer history list (or remove them).  The name
of the variable is *ZMACS-BUFFER-HISTORY*.  Of course, this means you can't
use C-M-L on them the first time.

I must confess I don't understand why you'd want to use C-large-n C-M-L.
C-X B or C-X C-B seem faster to me than counting my buffers.

Date: Saturday, 8 May 1982, 10:31-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Forwarded bug report
To: Patrick G. Sobalvarro <PGS at MIT-AI>, BUG-ZWEI-MIT at MIT-AI
Cc: BUG-ZMAIL at SCRC-TENEX
In-reply-to: The message of 7 May 82 10:51-EDT from Patrick G. Sobalvarro <PGS at MIT-AI>

    Date: 7 May 1982 10:51-EDT
    From: Patrick G. Sobalvarro <PGS at MIT-AI>
    In Remote-File 7.0, LMFILE-Remote 15.1, MIT-Specific 7.0, System 85.15,
    ZMail 44.3, microcode 117, 60.45Hz, on Lisp Machine Six:

    Mousing WHOIS in the OTHER menu in ZMAIL generates (reliably) the
    error:

    >>>>TRAP 15453 (TRANS-TRAP)
    The variable ZWEI:PROMPT-ARRAY is unbound.
    While in the function ZWEI:CURRENT-PROMPTSZWEI:RECORD-MINI-BUFFER-VALUEZWEI:EDIT-IN-MINI-BUFFER

I believe this is a System 85 ZWEI bug?

Date: Saturday, 8 May 1982, 03:31-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Mail Files selection in Profile
To: Dulcey at MIT-ML
Cc: BUG-ZMAIL at MIT-AI, BUG-ZWEI at MIT-AI
In-reply-to: The message of 6 May 82 17:44-EDT from Dulcey at ML


    Date: 6 May 1982 17:44-EDT
    From: Dulcey@ML
    In ZMAIL in Experimental System 85.12, etc. (as of 5/6/82 0000 EDT)
    (Sorry, I couldn't send it from the actual machine yesterday; I needed
    the XGP screen dump to get the error message right).

    An attempt to add new mail files to my ZMAIL profile by using the Mail
    Files menu selection in the Profile subsystem got the following error:

    >>ERROR: The object #<BACKGROUND-TYPEOUT-WINDOW BACKGROUND-TYPEOUT-WINDOW-2 25174326 exposed>
    received a :MAKE-INCOMPLETE message, which went unclaimed.
    The rest of the messsage was NIL
    While in the function SI:FLAVOR-UNCLAIMED-MESSAGE  SI:INSTANCE-HASH-FAILURE  (:METHOD EDITOR
    :EDIT)

    SI:FLAVOR-UNCLAIMED-MESSAGE:
       Rest arg (MESSAGE): (:MAKE-INCOMPLETE)

    The sequence of operations was:
    {click left on Profile}
    {click left on Mail Files}
    {click left on New}
    <minibuffer tries to pop up, gets part way>
    >>ERROR
I think this must relate to changes in ZWEI in system 85.

Date: Saturday, 8 May 1982, 03:26-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Redefining Return and Line
To: Mark J. Dulcey <Dulcey at MIT-AI>
Cc: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI, DOC-CHANGES at SCRC-TENEX
In-reply-to: The message of 6 May 82 22:01-EDT from Mark J. Dulcey <Dulcey at MIT-AI>


    Date: 6 May 1982 22:01-EDT
    From: Mark J. Dulcey <Dulcey at MIT-AI>
    RMS has suggested another alternative for this.  The idea is to create a
    new ZMACS variable called Indent-New-Line-Function.  Insert New Line would
    call this instead of calling what is on Return (if the variable is bound
    and not NIL, of course).  I suppose to be completely general, you should
    have Indent-New-Line-New-Line-Function and Indent-New-Line-Indent-Function.
    Mode hook functions could, of course, set these.

    Comments?
RMS's suggestion is the right way to do this.  I can recall wishing for this
in EMACS for some reason or other.

*INDENT-NEW-LINE-NEW-LINE-FUNCTION* (default = NIL) and
*INDENT-NEW-LINE-INDENT-FUNCTION* (default = NIL).
(These can be set via M-X Set Variable, as Indent New Line New Line Function, etc.)
If NIL, the definitions on Return and Tab will be used, so people can
continue setting those and win.

This will appear in 211 and later.

Date: Saturday, 8 May 1982, 00:43-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Buffer naming
To: Philip E. Agre <AGRE at MIT-AI>
Cc: RMS at MIT-AI, dlw at SCRC-TENEX, AGRE-X at MIT-AI, BUG-ZWEI at MIT-AI
In-reply-to: The message of 7 May 82 13:28-EDT from Philip E. Agre <AGRE at MIT-AI>

I agree with your basic premises, but I think there are several problems
with your proposal as it stands.  Let me list some problems that need to
be thought about some more before we do anything about this.

1) Return doing completion (as happens now for buffer names), pathname
completion, and pathname defaulting are incompatible when taken
together.  Eliminating return doing completion would eliminate the
problem, and although I would find that somewhat irritating, such an
inconsistancy causes several other problems as well, so maybe it should
go.

2) What you propose really is too complex.  In part this is due to your
explanation, but let's look for the essential features you're looking
for and see what the simplest way to get them is.

2a)  Would a scheme where user input is first parsed to see if it is a
pathname, and then converted to a buffer name do the trick?  Maybe the
other way around?

3)  What should M-X Rename Buffer do?

4) How many different representations of a pathname are there?  This
relates to logical pathnames, pathnames with different equivalent
namings, etc.  Is it reasonable to just give buffers n different names,
where n is a reasonably small number like 2 or 3?

5) How about a minibuffer command called Buffer as Pathname, which when
you wanted to pick a buffer name with pathname completion, or with
defaulting, you'd do S-F or something?  Remember the distinction between
^X^F and ^XB (when the file is already loaded) is which space it
operates over.  Is it a good thing to mix these two things into a single
method of input, or can we SAY what method of naming we're using?

Date: 8 May 1982 06:39-EDT
From: Richard M. Stallman <rms at MIT-AI>
Sender: ___007 at MIT-AI
To: BUG-ZWEI at MIT-AI

Some ZMAIL and Converse bugs which were introduced around
85.13 or 85.14 have been fixed, I think, in 85.18.
If you have a system 85.13, 14, 15, 16 or 17, you should
load the latest patches.

Date: 7 May 1982 22:42-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: M-X Display Font
To: BUG-ZWEI at MIT-AI

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, System 85.16, ZMail 44.3, microcode 117,
60Hz, on Lisp Machine Sixteen:

Doing M-X Display Font, of either CPTFONT or HL12B (I didn't try
any others), gives a NO-MAPPING-TABLE trap:

Flavor NIL is not a component of SELF's flavor, ZMACS-TOP-LEVEL-EDITOR,
on a call to a function which assumes SELF is a NIL.
While in FED:FED-TYO  FED:COM-DISPLAY-FONT  ZWEI:DISPLAY-FONT

Date: 7 May 1982 13:28-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: RMS at MIT-AI, dlw at SCRC-TENEX
cc: AGRE-X at MIT-AI, BUG-ZWEI at MIT-AI

    Date: Friday, 7 May 1982, 11:05-EDT
    From: Daniel L. Weinreb <dlw at SCRC-TENEX>
    To: AGRE at MIT-AI
    Cc: BUG-ZWEI at MIT-AI

    It sounds as if you are asking for a new, complex behavior in the
    already rather complex algorithm for completion, in which you can type
    in the pathname with the components in either of the two orders and have
    completion somehow work anyway.  On the whole, I think we're better off
    as we are.

1. It's not two, it's n, for all the possible ways to type a pathname.
2. It's not more complex, it's just the proper behavior. The distinction
   between buffer names and pathnames is an unnecessary pain, since 90%
   of all buffer names are just petrified path names.
3. More precisely, it is a crock that buffer names are usually petrified 
   pathnames for (at least) these reasons: 
   (a) When a buffer contains a file, your mental pointer to it is a 
       pathname, and you should never be forced to point at something
       in some way different from the way you point at it in your mind.
       Presently C-X K (for example) does just this.
   (b) Pathnames behave differently from strings.  In particular their 
       printed forms have a much coarser equivalence relation.
   (c) Strings don't have sticky components, but pathnames do (when
       C-X K asks you where to go next and offers the default 
       SCCODE > AI: AGRE; try responding MC: or AGRE0;).
   (d) It ought to be an error to have two buffers that point to the
       same file.  This would be impossible if buffer names could be pathnames 
       but happens regularly now.  (We've talked about this one before.)
4. Specifically, the proper behavior is the following: a buffer name can
   be either a string or a pathname.  Some buffers' names really ARE pathnames
   and some others' really ARE strings.  Completion operates over the space
   of buffer names, just like it should and does now.  This is a perfectly
   simple behavior.

Implementation.  I assume we both distinguish between the complexity of the
behavior and the complexity of the implementation.  I don't know how
completion works; I hope that the space of completion is more or less a
parameter.  A possible problem is that completion might only know about
strings and so completion over pathnames would not be directly implementable.
The solution would be to have completion defined over different subspaces
(like the subspace of string buffer names in string format and the subspace of
pathname buffer names in pathname format) separately, and then poll all
possible subspace completions, winning if exactly one wins and losing
otherwise.  Completion over pathnames is to a first approximation the filling
in of pathname defaults.  It is possible that it's just pathname defaulting,
but you might also want to include (recursive?) completion of pathname
elements -- the string AGR could pathname-complete to AI:AGRE;SCCODE >,
FS:BATALI;AGROCK NOTES, or even I suppose AGR:<871.FOO>FILE.EXT if that name
were in the completion space -- defined by the pathnames which currently
define buffer names.  There is a definition problem when a complete component
is given, as in AGRE;.  In this case pathname defaults should be filled in
even if there are many AGRE; pathnames in the completion space.  It is quite
possible, though, that the only sensible definition of pathname completion is
simple pathname defaulting (so that you can't type in partial directory names,
say, and expect to have them complete in the pathname space.  This would make
me perfectly happy, and would also greatly simplify the implementation of
completion over (my definition of) buffer names.

It's not necessary to go around changing every function in Zwei to make them
know about the new implementation of buffer names.  All you need to do to make
completion work right is to try to parse the buffer name as the printed
representation of some format of pathname to define the pathname subspace of
the buffer name completion space.  Other things could work similarly I
suppose; perhaps you want to define a function EQUIVALENT-ZWEI-BUFFER-NAMES-P
of two buffer-name arguments and use this instead of EQUAL when, say,
searching through the list of buffer names looking for something, but on the
other hand perhaps every buffer name goes through buffer name completion
before being looked up, in which case it's easy.  Pant.

Date: Friday, 7 May 1982, 11:05-EDT
From: Daniel L. Weinreb <dlw at SCRC-TENEX>
To: AGRE at MIT-AI
Cc: BUG-ZWEI at MIT-AI

It sounds as if you are asking for a new, complex behavior in the
already rather complex algorithm for completion, in which you can type
in the pathname with the components in either of the two orders and have
completion somehow work anyway.  On the whole, I think we're better off
as we are.

Date: 7 May 1982 09:57-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in System 79.43, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Eight:

In M-X Dired, if you hit "H" on column 1 on line 1 then you get an error
Function NIL not defined (though C-U H doesn't blow up), and if you Abort out
of the error then the Dired gets buried under N other buffers and you can't
even get at it with C-n C-M-L for arbitrarily large n.  Both behaviors seem
wrong.

Which reminds me, why not generalize C-n C-M-L to mean "move to the n-th
buffer from the top on the list C-X C-B gives you" rather than just "move to
the n-th previously selected buffer" (which isn't really an accurate
description of its operation anyway, since it seems like it really refers to
just the same list C-X C-B gives you anway)?  One answer might be that you
want C-1 C-M-L to rotate only that part of the "buffer stack" whose buffers
have actually been selected at that point (as opposed to having been loaded
using explicit calls to zwei:load-file-into-zmacs, as with the zwei-load
hack in defsystem, for which see batali;sys >).  The response to that is that
all you have to do is to be careful to define the notion of buffer stack 
rotation so that only selected buffers rotate.  Since I use buffer stack
rotation only rarely and C-n C-M-L for large n frequently, this doesn't seem
like a bad trade-off to me.

Date: 6 May 1982 22:01-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Redefining Return and Line
To: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

RMS has suggested another alternative for this.  The idea is to create a
new ZMACS variable called Indent-New-Line-Function.  Insert New Line would
call this instead of calling what is on Return (if the variable is bound
and not NIL, of course).  I suppose to be completely general, you should
have Indent-New-Line-New-Line-Function and Indent-New-Line-Indent-Function.
Mode hook functions could, of course, set these.

Comments?

Date: 6 May 1982 21:21-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Redefining Return and Line
To: BUG-LISPM at MIT-AI, BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

It has been pointed out to me (by Gumby) that having to load such a small
change from a library is a losing interface.  Furthermore, the present
COMTAB hacking isn't really the right way to do it.  A better thing would
be as follows:

1.  Install an alternative to Indent New Line (called Winning Indent New Line
    or some such thing) which changes it in the way I have described.  (For
    now, at least, this would NOT be the default.  The two commands would be
    maintained next to each other in the source so future changes are made
    properly to both.)

2.  Create a new minor mode which would redefine Return to Winning Indent
    New Line and Line to Insert Crs.  (I haven't thought up a good name for
    this -- any suggestions?)

3.  Now users could get this mode, or not get it, as desired via mode hooks, etc.

If nobody objects, I will do this to ZMACS in the near future.  Any ideas
on this will be gratefully accepted.

Date: 6 May 1982 21:07-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Aborting out of M-.
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.1,
Experimental MIT-Specific 7.0, System 85.13, Experimental ZMail 44.3,
microcode 117, Try Me (GCed), on Lisp Machine Twenty-four:

If you type M-. , then hit Abort when the minibuffer appears (presumably you
don't want to edit a definition after all) you end up with the minibuffer
selected.  Abort again gets rid of the minibuffer, but the main buffer still
isn't selected; you have to mouse it to get there.

Date: 6 May 1982 14:04-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: RMS at MIT-AI
cc: BUG-ZWEI at MIT-AI

Completion on buffer names should realize that frequently when you want to
go to a buffer you only know the pathname it's named after and you can't
remember what order the pathname elements are put in to make a buffer name.
So if you want to get to buffer SCCODE > AGRE; AI: then anything which
would path-name-complete to the pathname AI:AGRE;SCCODE > should buffer-name
complete to SCCODE > AGRE; AI: (in particular it should know about 
path-name-permissible orders of pathname components, so that asking for
buffer AI: SCCODE > AGRE; should get you buffer SCCODE > AGRE; AI: if that
buffer already existed; I can't think of any situation where you'd want
anything else to happen; in fact, if I tried to do anything else I'd want
a gentle warning because of the likelihood of lossage!).
This isn't so important for Select Buffer as it is for Kill Buffer.  It is
an endless source of pain to me that I can never get my answer to "killing
current buffer, move to which buffer (default USELESS-BUFFER-2)" to come out
to what I intended.   - phIl

Date: 6 May 1982 11:40-EDT
From: David A. Levitt <LEVITT at MIT-MC>
Subject: New buffers keep forgetting their Package.
To: BUG-LISPM at MIT-AI
cc: BUG-ZWEI at MIT-MC

In Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.1,
Experimental MIT-Specific 7.0, Experimental System 85.12,
Experimental ZMail 44.3, Experimental Play 6.2, microcode 117, 60.72 Hz, on Lisp Machine Nine:

After working in BUFFER-1 for a while, I did Set Package,
named it and wrote it out.  But every time I enter the error-handler
or visit another buffer, I'm in USER when I get back.

Date: Thursday, 6 May 1982  12:58-EDT
From: MMCM at SCRC-TENEX
To:   Richard M. Stallman <RMS at MIT-AI>
cc:   bug-zwei at SCRC-TENEX
Subject: ZWEI question

    Date: 5 May 1982 23:20-EDT
    From: Richard M. Stallman <RMS at MIT-AI>
    Right now, Select Buffer is different from all other commands that do completion
    in that if you type a name that does not exist, and end with Return,
    it beeps, but if you type a second Return, it creates the buffer you specified.

    In other commands that do completion, you would type End to request completion
    and Return to submit the exact string you typed.

    Would you like Select Buffer to be made compatible with those other commands?

Yes, that would allow flushing the %%KBD-CONTROL-META check in
COM-COMPLETE-AND-EXIT which DanG complained about.

Date: Thursday, 6 May 1982, 03:48-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Function-name-reading minibuffer
To: Eugene C. Ciccarelli <ECC at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 6 May 82 00:49-EDT from Eugene C. Ciccarelli <ECC at MIT-AI>

    Date: 6 May 1982 00:49-EDT
    From: Eugene C. Ciccarelli <ECC at MIT-AI>
    Experimental MIT-Specific 7.0, Experimental System 85.12,
    M-X Arglist Return Abort
    leaves you down in the minibuffer window, confused.  It should be
    going back to the main window.  M-Period also does this, so I
    suspect the culprit is the function-name completing reader.
I cannot cause this in 210.  I recently fixed similar lossages in
other places, and there may be more.  If you find other places with
this problem, let me know.

Date: 6 May 1982 03:24-EDT
From: Kent M. Pitman <KMP at MIT-MC>
To: RMS at MIT-AI
cc: BUG-ZWEI at MIT-MC

Completion is the common case. It should be easy to get at. Select Buffer
as it is is quite convenient. I do not advocate changing it.

I have found the task assigned to END in most other completers to be not
what I want. END should, in my view, mean end. Nothing more. It should not
try to complete first. Return should probably complete and exit if possible.
Hence, typing FOO<END> to Select Buffer should definitely find buffer FOO 
if it exists or not. FOO<RETURN> should do what it does now. 

In things with completion tables handy (eg, M-.), I would advocate that
Return should again complete and then go. You should type End if you want
to just search for a string literally.

In things like filename completion, it's costly to do foreign system completion
and I don't think Return should try to complete there. But I think still
End should just exit with no completion, and alt should complete.

I would advocate having two prompts above the box. Where currently it says
(Completion) it should say either (Completion) if Return is not going to try
to complete or (AutoCompletion) if Return is going to try to complete.

-kmp


Date: Thursday, 6 May 1982, 03:22-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: Fun with text justifier font commands
To: David Chapman <Zvona at MIT-AI>
Cc: BUG-zwei at MIT-AI
In-reply-to: The message of 5 May 82 11:19-EDT from David Chapman <Zvona at MIT-AI>

    Date: Wednesday, 5 May 1982, 11:19-EDT
    From: David Chapman <Zvona at MIT-AI>
    m-- m-# misbehaves in two different exciting ways.  Be the first
    on your block to collect both of them!
Actually, together with M-- C-X # there were a half-dozen bugs total.
Fixed in 210.5

Date: 6 May 1982 01:35-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: C-/
To: BUG-ZWEI at MIT-AI

I guess I can get a very good approximation to what I want by
advising C-? and C-/ to bind *COMPLETING-DELIMS*.  So, probably
you should just ignore my previous message.

Date: 6 May 1982 01:07-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: C-/ in completers
To: BUG-ZWEI at MIT-AI

One thing I don't ever like is the fact that C-/ in a completing
reader does an "or" of the words you've typed so far.  E.g. if I
have typed M-Period ":draw-in-window" C-/, I will get a list of
all the definitions with ":DRAW" in them, all the ones with "IN",
and those with "WINDOW".  I can get that by trying the different
words separately just as easily, but what's more important, I
don't have any way to "and" them -- I would like to see the names
with ":DRAW-IN-WINDOW" as part of their names.

Could we either have a separate command for this, or change C-/,
or have an option variable, or something?

Date: 6 May 1982 00:49-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
Subject: Function-name-reading minibuffer
To: BUG-ZWEI at MIT-AI

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.1,
Experimental MIT-Specific 7.0, Experimental System 85.12,
Experimental ZMail 44.3, microcode 117, Try me!, on Lisp Machine Four:

M-X Arglist Return Abort
leaves you down in the minibuffer window, confused.  It should be
going back to the main window.  M-Period also does this, so I
suspect the culprit is the function-name completing reader.

Date: 5 May 1982 23:04-EDT
From: Andrew L. Ressler <ALR at MIT-ML>
Subject:  Fill Text
To: BUG-ZWEI at MIT-ML, rms at MIT-AI

When using fill mode in both zwei and emacs, how can I
make it fill the line as if a space had been typed when I type a period?

Andrew
P.S.
This would seem more useful to me than giving space an arg of 0.

Date: 5 May 1982 21:56-EDT
From: Mark J. Dulcey <Dulcey at MIT-AI>
Subject: Interchanging Return and Line
To: INFO-ZWEI at MIT-AI, BUG-LISPM at MIT-AI
cc: DULCEY at MIT-ML

For those of you out there who (like me) have trouble reaching the Line
key, and want to interchange the definitions of Return and Line:

I have created the file LMLIB;LINEFD QFASL which allows you to do this.
It redefines the command COM-INDENT-NEW-LINE so that it doesn't recurse
infinitely.  It changes *STANDARD-COMTAB* to change the key assignments.
Finally, it also changes COM-TEXT-MODE to undo these assignments
(because COM-TAB-TO-TAB-STOP isn't a useful default).

Anyway, folks, give it a try.  (The convenient way is to load the file
in your LISPM INIT file.)

Date: Wednesday, 5 May 1982  20:20-EDT
From: MMCM at SCRC-TENEX
To:   Matson at SCRC-TENEX
Cc:   BUG-ZWEI at SCRC-TENEX
Subject: com-evaluate-and-replace-into-buffer

    Date: Wednesday, 5 May 1982, 12:40-EDT
    From:  <Matson at SCRC-TENEX>
    In ZWEI in System 210.0, ZMail 45.0, LMFS 26.0, Tape 9.0, Canon 14.0,
    microcode 895, site configuration 6, on Basset:
    The command  "com-evaluate-and-replace-into-buffer" doesn't work if the form
    that it evaluates is an atom.
You don't describe the actual circumstances, so i cannot be sure, but
i fixed the several bugs having to do with the end of the buffer
occurring right after the form to be evaluated.  Nothing cares whether
or not the form is an atom.

Date: Wednesday, 5 May 1982  14:50-EDT
From: MMCM at SCRC-TENEX
To:   David Chapman <Zvona at MIT-AI>
Cc:   bug-zwei at MIT-AI

    Date: Wednesday, 5 May 1982, 09:49-EDT
    From: David Chapman <Zvona at MIT-AI>
    m-. should give you the version in the selected buffer first if
    there is more than once definition.

It does (most of the time) It doesn't when there are two files
containing string-equal but not eq symbols and the current buffer was
read in second.  This'll get fixes when i redo sectionization
completely.  The current code is too piecemeal for an easy fix.

Date: Wednesday, 5 May 1982  13:25-EDT
From: MOON at SCRC-TENEX
To:   David Chapman <Zvona at MIT-AI>
Cc:   bug-zwei at MIT-AI

    Date: Wednesday, 5 May 1982, 09:49-EDT
    From: David Chapman <Zvona at MIT-AI>
    To: bug-zwei at MIT-AI

    m-. should give you the version in the selected buffer first if
    there is more than once definition.
It does.  Can you provide a reproducible case where it doesn't?

Date: Wednesday, 5 May 1982, 12:40-EDT
From:  <Matson at SCRC-TENEX>
Subject: com-evaluate-and-replace-into-buffer
To: BUG-ZWEI at SCRC-TENEX

In ZWEI in System 210.0, ZMail 45.0, LMFS 26.0, Tape 9.0, Canon 14.0,
microcode 895, site configuration 6, on Basset:

The command  "com-evaluate-and-replace-into-buffer" doesn't work if the form
that it evaluates is an atom.

Date: Wednesday, 5 May 1982, 11:19-EDT
From: David Chapman <Zvona at MIT-AI>
To: BUG-zwei at MIT-AI

In zwei in System 79.46, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Tester 25.9, microcode 849, 60.45Hz, on Lisp Machine One:

m-- m-# misbehaves in two different exciting ways.  Be the first
on your block to collect both of them!

case.  3Super-T creates* an environment for the test case that

m-- m-# =>

case.  3Super-*T creates an environment for the test case that

m-# =>

case.  3Super-T* creates an environment for the test case that

m-- m-# =>

case. 3Super-T creates an environment for the test case that

Date: Wednesday, 5 May 1982, 10:56-EDT
From: JCMA@MIT-AI
To: BUG-ZWEI@MIT-AI

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.1,
Experimental MIT-Specific 7.0, Experimental System 85.11,
Experimental ZMail 44.3, microcode 117, 60.45Hz, on Lisp Machine Six:

An irritating bug of ztop mode is its lack of knowledge about
continuation lines when displaying some result of an evaluation which
extends over multiple lines.  What seems to happen is that ztop attempts
to redisplay the entire line every time another token-unit(a symbol,
paren, or list..) is pushed out onto the screen, regardless of whether
or not it is on a new continuation line.  The result is that it can take
almost forever to print out anything that is at all long.  

Date: Wednesday, 5 May 1982, 09:49-EDT
From: David Chapman <Zvona at MIT-AI>
To: bug-zwei at MIT-AI

m-. should give you the version in the selected buffer first if
there is more than once definition.

Date: 5 May 1982 06:21-EDT
From: Richard M. Stallman <RMS at MIT-AI>
To: BUG-ZWEI at MIT-AI, ECC at MIT-AI

The bug about Set Package on Buffer-1 applies only to that buffer,
which was around before some patches were loaded.
Just use any other buffer and it will win.
I will see if I can make a patch to recreate Buffer-1.

Date: Wednesday, 5 May 1982, 03:53-EDT
From: Robert W. Kerns <RWK at SCRC-TENEX>
Subject: BREAK/RESUME in searches, Query-Replace
To: Philip E. Agre <AGRE at MIT-AI>
Cc: BUG-ZWEI at MIT-AI
In-reply-to: The message of 4 May 82 15:58-EDT from Philip E. Agre <AGRE at MIT-AI>

    Date: 4 May 1982 15:58-EDT
    From: Philip E. Agre <AGRE at MIT-AI>
    Go into Zwei on some buffer full of text and hit Break and then Resume; the
    zwei window is refreshed, eliminating the text typed out by the Break/Resume.
    But then do C-S Break Resume; the window isn't refreshed.  This seems like a
    bug (it's certainly a pain), but I can see how it might be hard to fix.

Actually, it wasn't hard to fix, except for finding a multiple-value
compiler bug in the process.  Fixed in the sources here, along with
the companion bugs of not removing the Search: prompt when you abort.

Date: 5 May 1982 00:20-EDT
From: Eugene C. Ciccarelli <ECC at MIT-AI>
To: BUG-ZWEI at MIT-AI

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.10,
Experimental ZMail 44.2, microcode 117, Try Me (GCed), on Lisp Machine Four:

In BUFFER-1, which does not have a mode line (no ;;; -*-Mode:
Lisp;... line), I find that M-X Set Package's effect goes away
soon.  For example, I set the package to "Weid", one of my
packages, and then listed buffers with C-X C-B.  The package was
then back at USER.  If I put in a mode line with Package: Weid,
and do M-X Reparse Mode Line, only then will it stay in that
package.  This is a new bug -- I have always set the package of
BUFFER-1 before, in systems n <= 83, and it worked fine.

Date: 4 May 1982 15:58-EDT
From: Philip E. Agre <AGRE at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
microcode 849, on Lisp Machine Nineteen:

Go into Zwei on some buffer full of text and hit Break and then Resume; the
zwei window is refreshed, eliminating the text typed out by the Break/Resume.
But then do C-S Break Resume; the window isn't refreshed.  This seems like a
bug (it's certainly a pain), but I can see how it might be hard to fix.

Date: 3 May 1982 21:42-EDT
From: Mark J. Dulcey <dulcey at MIT-AI>
Subject: Help in Editing Lisp Listener
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.10,
Experimental ZMail 44.2, microcode 117, Try me., on Lisp Machine Five:

M-X also loses big in an Editing Lisp Listener.  The Extended Command
minibuffer appears fine, but as soon as you type a character, the process
starts to churn away tremendously, eventually going into Output Hold after
at least 15 seconds.

(P.S.  These Editing Lisp Listener bugs are all low priority for me.
I am trying out the fool things because I am going through Operating the
Lisp Machine looking for things to revise, not because I use them.)

Date: 3 May 1982 21:32-EDT
From: Mark J. Dulcey <dulcey at MIT-AI>
Subject: Help in Editing Lisp Listener
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.10,
Experimental ZMail 44.2, microcode 117, Try me., on Lisp Machine Five:

Help ? in an Editing Lisp Listener bombs out.  The process goes into
a Lock state and stays there until you Abort out of it.

Date: 3 May 1982 12:08-EDT
From: Patrick G. Sobalvarro <PGS at MIT-AI>
To: BUG-ZWEI at MIT-AI

In zwei in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.10,
Experimental ZMail 44.2, microcode 117, Try Me (GCed), on Lisp Machine Four:

Sometimes the upper part of the line underneath the modeline gets
destroyed when the modeline is redisplayed.  Since the information is
no longer current by then, and it's still legible, this isn't too bad,
but it looks messy.

Incidentally, this is in a ZWEI first entered after a
TV:SET-DEFAULT-FONT to MEDFNT.

Date: Saturday, 1 May 1982, 15:53-EDT
From: David Vinayak Wallace <Gumby at MIT-AI>
Subject: auto fill bugs
To: BUG-ZWEI at MIT-AI
Cc: Gumby at ai

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.6,
Experimental ZMail 44.2, microcode 117, 60.72, on Lisp Machine One:

You start with a couple of lines of text in autofill mode, which the
lispm obligingly wraps for you.

then, you add text.

ALL OF THIS TEXT HAS BEEN ADDED TO THE BEGINNIG. AS YOU CAN SEE, IT
DOESN'T DO THE RIGHT THING.Youstartwith acouple
of linesoftextinautofillmode,whichthelispm obligingly wraps for you.

Date: Saturday, 1 May 1982, 14:53-EDT
From: David Vinayak Wallace <Gumby at MIT-AI>
Subject: 
To: BUG-ZWEI at MIT-AI
Cc: Gumby at ai

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.6,
Experimental ZMail 44.2, microcode 117, 60.72, on Lisp Machine One:

I tried saving a file on the Vax, which was down. So I aborted before it
had a chance to drop into the error handler. I then did ^X^B to list the
buffers and it showed no modified files. I then did Kill or Save Buffers
which offered to save none. Yet the mode line still had a start at the
end.

Date: 30 April 1982 12:33-EDT
From: Gerald R. Barber <JerryB at MIT-AI>
Subject: FUNCTION-SPEC-GET bug
To: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI

In ZWEI in System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Mega-Frame 1.0, Experimental MEGA 8.0, Experimental OMEGA-PRESENTER 5.0,
microcode 849, on Lisp Machine Four:

This machine loses when trying to read in the file ai:zmail;comnds >.
It dies in si:FUNCTION-SPEC-GET with the variable CC:A-PGF-WMD unbound.

Date: 30 April 1982 08:27-EDT
From: Mark J. Dulcey <DULCEY at MIT-AI>
Subject: Redefining Return as Line
To: BUG-ZWEI at MIT-AI, BUG-LISPM at MIT-AI
cc: DULCEY at MIT-ML

In ZWEI in Experimental Remote-File 7.0, Experimental LMFILE-Remote 15.0,
Experimental MIT-Specific 7.0, Experimental System 85.3,
Experimental ZMail 44.1, microcode 117, Try Me (GCed), on Lisp Machine Fifteen:

The following appears in my Lispm Init file.  The idea is to interchange
the functions of the Return and Line keys.

(login-eval
  (zwei:set-comtab-return-undo
    zwei:*standard-comtab*
    '(#\Control-// zwei:com-evaluate-defun

	{other key assignments}

      #\Return zwei:com-indent-new-line
      #\Line zwei:com-insert-crs)))

The problem is that every time I hit Return, I get stack-overflow
errors in my Zmacs!  Why does this lose?

(The other key assignments win.  Also, Return and Line seem to be
getting the correct commands assigned -- Help-C produces the appropriate
results.)

I just thought of a possible answer.  When I type Return, it invokes
zwei:com-indent-new-line.  This in turn produces a new Return character --
which invokes zwei:com-indent-new-line!  Can anybody think of a way around
this?

zvona@MIT-MC (Sent by kmp@MIT-MC) 04/29/82 17:32:42
To: (BUG zwei) at MIT-AI
In zwei in System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Knowledge-Based-Editor 15.37, microcode 849, Sorcerer's Apprentice, on Lisp Machine Twenty-two:

m-X View Mail should have a way of viewing someone else's mail, eg 
prompts with a numeric arg.

Date: Thursday, 29 April 1982, 14:02-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
To: Zvona at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 28 April 1982 21:51-EDT
    From: David Chapman <Zvona at MIT-AI>
    In dired, V on a subdirectory should do a View Directory.  It
    seems to do a View File.  I observed this for FC: but I imagine
    the same holds true elsewhere.
Fixed in the source here.  You can merge in COM-DIRED-VIEW-FILE when the new
source appears on EE.

Date: Thursday, 29 April 1982, 13:42-EDT
From: Mike McMahon <MMcM at SCRC-TENEX>
Subject: M-X Edit Zmacs Command
To: dulcey at MIT-AI
Cc: BUG-ZWEI at MIT-AI

    Date: 29 April 1982 04:30-EDT
    From: Mark J. Dulcey <dulcey at MIT-AI>
    In ZWEI in Experimental LMFILE-Remote 12.2,
    Experimental MIT-Specific 4.0, Experimental System 83.19,
    Experimental ZMail 43.1, Experimental Remote-File 5.0, microcode 104,
    Try me, on Lisp Machine Four:

    M-X Edit Zmacs Command ought to understand M-X as being a prefix
    and allow you to type in the name of an extended command to edit.
    As it is, it goes off and gets the definition of ZWEI:COM-EXTENDED-COMMAND.
Fixed in the source here.  You can merge the change into the LMI/MIT system when
the new files appear on EE.

Date: Wednesday, 28 April 1982, 21:59-EDT
From: David Chapman <Zvona at MIT-AI>
To: BUG-zwei at MIT-AI

In zwei in System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Tester 23.7, microcode 849, 60.45Hz, on Lisp Machine Twenty-two:

Tags Query Replace doesn't have decent self-documentation.  The
documentation from Query Replace should be copied to it.  Another
point that might want to be documented is that you can c-. even
after aborting, so long as you haven't bashed c-. with something
else.  This means that you don't have to start all over again if
you accidentally abort out.

Date: 28 April 1982 21:51-EDT
From: David Chapman <Zvona at MIT-AI>
To: BUG-ZWEI at MIT-AI
cc: BUG-LMFILE at MIT-AI

In zwei in System 79.45, ZMail 40.7, Remote-File 2.0, LMFILE-Remote 5.3,
Tester 23.7, microcode 849, 60.45Hz, on Lisp Machine Twenty-two: 

In dired, V on a subdirectory should do a View Directory.  It
seems to do a View File.  I observed this for FC: but I imagine
the same holds true elsewhere.

Date: 29 April 1982 04:30-EDT
From: Mark J. Dulcey <dulcey at MIT-AI>
Subject: M-X Edit Zmacs Command
To: BUG-ZWEI at MIT-AI
cc: DULCEY at MIT-ML

In ZWEI in Experimental LMFILE-Remote 12.2,
Experimental MIT-Specific 4.0, Experimental System 83.19,
Experimental ZMail 43.1, Experimental Remote-File 5.0, microcode 104,
Try me, on Lisp Machine Four:

M-X Edit Zmacs Command ought to understand M-X as being a prefix
and allow you to type in the name of an extended command to edit.
As it is, it goes off and gets the definition of ZWEI:COM-EXTENDED-COMMAND.

Date: Tuesday, 27 April 1982, 16:47-EDT
From: Robert P. Krajewski <RpK at MIT-LISPM-27>
Reply-to: RpK at MC
Subject: Edit Zmacs Command
To: BUG-ZWEI at EE

In ZWEI in System 204.73, ZMail 42.11, Experimental Remote-File 101.2,
microcode 865, site configuration 2, on Marvin:

Edit Zmacs Command is fine, but there should also be a way to edit Zmacs
commands that are not on keys.  Perhaps it should be a separate command
so that M-X will still look for ZWEI:COM-EXTENDED-COMMAND.

bob

