;; -*- Mode: Lisp; Package: FS; Base: 8 -*-

;; Pathname parsing support for LM systems.

(DEFUN LM-PARSE-NAMESTRING (STRING &OPTIONAL (START 0) END
			    &AUX CHAR STATE TEM TEM1 FIELD-START
			    (DEVICE "DSK") DIRECTORY NAME TYPE VERSION)
  ;; STATE can be T, DOTTED, VERSION, DIRECTORY or NIL.
  ;; NIL is the initial state, and means anything is allowed and nothing is in progress.
  ;; T means that we are in the middle of a name, but nothing else special.
  ;; DOTTED means we have encountered a single period.  TEM is what preceded it.
  ;; DOUBLE-DOTTED means we have encountered "name.name."
  ;;  TEM is the first name and TEM1 is the second.
  ;; DIRECTORY means we have encountered "name . name . name"
  ;;  which can only be the beginning of a directory name,
  ;;  or else that we have encountered a "<".
  ;; VERSION means reading a version number (following a #).
  (OR END (SETQ END (ARRAY-ACTIVE-LENGTH STRING)))
  (DO ((INDEX START (1+ INDEX))) (NIL)
    (IF (>= INDEX END)
	(SETQ CHAR 'DONE)
	(SETQ CHAR (AREF STRING INDEX)))
    (COND ((AND (NOT (MEMQ CHAR '(#\SP #\TAB #/. #/: #/; #/# DONE)))
		(OR (NOT (MEMQ CHAR '(#/< #/>)))
		    (MEMQ STATE '(VERSION DOUBLE-DOTTED))))
	   (AND (%STORE-CONDITIONAL (LOCF STATE) NIL T)
		(SETQ FIELD-START INDEX))
	   (COND ((OR (EQ CHAR #//) (EQ CHAR #/))
		  (SETQ INDEX (1+ INDEX))
		  (OR (< INDEX END)
		      (LM-CHAR-ERROR STRING 'DONE))
		  (SETQ CHAR (AREF STRING INDEX))
		  (AND ( CHAR 200)
		       ( CHAR #\TAB)
		       (LM-CHAR-ERROR STRING CHAR)))))
	  ((EQ CHAR #\<)
	   (COND ((NULL STATE))			;Extraneous whitespace.
		 ((EQ STATE T)
		  (SETQ NAME (LM-FIELD STRING FIELD-START INDEX)))
		 ((EQ STATE 'DOTTED)
		  (AND TEM (SETQ NAME TEM))
		  (SETQ TYPE (LM-FIELD STRING FIELD-START INDEX)))
		 ((EQ STATE 'DOUBLE-DOTTED)
		  (AND TEM (SETQ NAME TEM))
		  (AND TEM1 (SETQ TYPE TEM1))
		  (SETQ VERSION (LM-FIELD STRING FIELD-START INDEX T)))
		 (T (LM-CHAR-ERROR STRING CHAR)))
	   (SETQ STATE 'DIRECTORY DIRECTORY NIL)
	   (GO NEW-FIELD))
	  ((MEMQ CHAR '(#\SP #\TAB DONE))
	   (COND ((NULL STATE))			;Extraneous whitespace.
		 ((EQ STATE T)
		  (SETQ NAME (LM-FIELD STRING FIELD-START INDEX) STATE NIL))
		 ((EQ STATE 'DOTTED)
		  (AND TEM (SETQ NAME TEM))
		  (SETQ TYPE (LM-FIELD STRING FIELD-START INDEX) STATE NIL))
		 ((EQ STATE 'DOUBLE-DOTTED)
		  (AND TEM (SETQ NAME TEM))
		  (AND TEM1 (SETQ TYPE TEM1))
		  (SETQ VERSION (LM-FIELD STRING FIELD-START INDEX T)
			STATE NIL)
		  (COND ((EQ VERSION 0) (SETQ VERSION ':NEWEST))
			((EQ VERSION -2) (SETQ VERSION ':OLDEST))))
		 ((EQ STATE 'VERSION)
		  (SETQ VERSION (LM-FIELD STRING FIELD-START INDEX T) STATE NIL))
		 (T (LM-CHAR-ERROR STRING CHAR))))
	  ((EQ CHAR #/.)
	   (COND ((NULL STATE)			;Could only be :UNSPECIFIC name
		  (SETQ TEM NIL STATE 'DOTTED))
		 ((EQ STATE T)			;Could either be directory or name
		  (SETQ STATE 'DOTTED TEM (LM-FIELD STRING FIELD-START INDEX)))
		 ((EQ STATE 'DOTTED)
		  (OR TEM (LM-CHAR-ERROR STRING #/.))
		  (SETQ TEM1 (LM-FIELD STRING FIELD-START INDEX)
			STATE 'DOUBLE-DOTTED))
		 ((EQ STATE 'DOUBLE-DOTTED)
		  (OR TEM (LM-CHAR-ERROR STRING #/.))
		  (SETQ STATE 'DIRECTORY
			DIRECTORY (LIST* TEM TEM1 (LM-FIELD STRING FIELD-START INDEX) NIL)))
		 ((EQ STATE 'DIRECTORY)
		  (SETQ DIRECTORY
			(NCONC DIRECTORY (NCONS (LM-FIELD STRING FIELD-START INDEX)))))
		 ((EQ STATE 'VERSION)
		  (SETQ VERSION (LM-FIELD STRING FIELD-START INDEX T)
			STATE 'DOTTED))
		 (T (LM-CHAR-ERROR STRING CHAR)))
	   (GO NEW-FIELD))
	  ((EQ CHAR #/#)
	   (COND ((NULL STATE)
		  (SETQ STATE 'VERSION))
		 ((EQ STATE T)
		  (SETQ NAME (LM-FIELD STRING FIELD-START INDEX) STATE 'VERSION))
		 ((EQ STATE 'DOTTED)
		  (AND TEM (SETQ NAME TEM))
		  (SETQ TYPE (LM-FIELD STRING FIELD-START INDEX) STATE 'VERSION))
		 (T (LM-CHAR-ERROR STRING CHAR)))
	   (GO NEW-FIELD))
	  ((OR (EQ CHAR #/;) (EQ CHAR #/>))
	   (COND ((EQ STATE T)
		  (SETQ DIRECTORY (LM-FIELD STRING FIELD-START INDEX))
		  (IF (STRING-EQUAL DIRECTORY "~")
		      (SETQ DIRECTORY ':ROOT)))
		 ((EQ STATE 'DOTTED)
		  (OR TEM (LM-CHAR-ERROR STRING CHAR))
		  (SETQ DIRECTORY (LIST TEM (LM-FIELD STRING FIELD-START INDEX))))
		 ((EQ STATE 'DOUBLE-DOTTED)
		  (OR (AND TEM TEM1) (LM-CHAR-ERROR STRING CHAR))
		  (SETQ DIRECTORY (LIST TEM TEM1 (LM-FIELD STRING FIELD-START INDEX))))
		 ((EQ STATE 'DIRECTORY)
		  (LET ((FIELD (LM-FIELD STRING FIELD-START INDEX)))
		    (IF (AND (NULL DIRECTORY)
			     (EQ FIELD ':UNSPECIFIC))
			(SETQ DIRECTORY ':ROOT)
			(SETQ DIRECTORY
			      (NCONC DIRECTORY (LIST FIELD))))))
		 (T (LM-CHAR-ERROR STRING CHAR)))
	   (SETQ STATE NIL))
	  ((EQ STATE T)
	   (SETQ DEVICE (FUNCALL-SELF ':PARSE-DEVICE-SPEC
				      (LM-FIELD STRING FIELD-START INDEX))
		 STATE NIL))
	  (T (LM-CHAR-ERROR STRING CHAR)))
    (GO SKIP)
  NEW-FIELD
    (SETQ FIELD-START (1+ INDEX))
  SKIP
    (AND (EQ CHAR 'DONE)
	 (RETURN DEVICE DIRECTORY NAME TYPE VERSION))))

(DEFPROP LM-CHAR-ERROR T :ERROR-REPORTER)
(DEFUN LM-CHAR-ERROR (STRING CHAR)
  (IF (EQ CHAR 'DONE)
      (FERROR ':PATHNAME-PARSE-ERROR "Unexpected end of string while parsing ~S." STRING)
      (FERROR ':PATHNAME-PARSE-ERROR
	      "Unexpected character (~:C) while parsing ~S." CHAR STRING)))

(DEFUN LM-FIELD (STRING &OPTIONAL (START 0) END VERSION-P DEVICE-P
			&AUX SIZE ARR CHAR)
  DEVICE-P
  (OR END (SETQ END (ARRAY-ACTIVE-LENGTH STRING)))
  (SETQ SIZE (- END START))
  (IF (ZEROP SIZE)
      ':UNSPECIFIC
      (SETQ ARR (MAKE-ARRAY SIZE ':TYPE 'ART-STRING))
      (DO ((I START (1+ I))
	   (SI 0))
	  (( I END)
	   (OR (= SI SIZE)
	       (SETQ ARR (ADJUST-ARRAY-SIZE ARR SI))))
	(COND ((NOT (MEMQ (SETQ CHAR (AREF STRING I)) '(#// #/)))
	       (AND ( CHAR 200)
		    ( CHAR #\TAB)
		    (LM-CHAR-ERROR STRING CHAR))
	       (ASET (CHAR-UPCASE CHAR) ARR SI)
	       (SETQ SI (1+ SI)))))
      (COND ((STRING-EQUAL ARR "*") ':WILD)
	    ((NOT VERSION-P) ARR)
	    ((NUMERIC-P ARR NIL T))
	    ((CDR (ASSOC ARR '((">" . :NEWEST) ("<" . :OLDEST)))))
	    (T (FERROR ':PATHNAME-PARSE-ERROR "Invalid version spec ~S in ~S" ARR STRING)))))

;; Like LM-FIELD, but doesn't "unquotify", or know about versions.
(DEFUN LM-SPEC (SPEC &AUX LENGTH UPCASE-FLAG CHAR)
  (COND ((STRINGP SPEC)
	 (DOTIMES (I (SETQ LENGTH (ARRAY-ACTIVE-LENGTH SPEC)))
	   (AND (> (SETQ CHAR (AREF SPEC I)) 177)
		( CHAR #\TAB)
		(LM-CHAR-ERROR SPEC CHAR))
	   (AND ( CHAR #/a)
		( CHAR #/z)
		(SETQ UPCASE-FLAG T)))
	 (COND ((ZEROP LENGTH) ':UNSPECIFIC)
	       ((STRING-EQUAL SPEC "*") ':WILD)
	       (UPCASE-FLAG (STRING-UPCASE SPEC))
	       (T SPEC)))
	(T SPEC)))

(DEFVAR *LMFS-USE-TWENEX-SYNTAX* NIL
  "When non-NIL, print out LMFS pathnames in Twenex syntax.")

(DEFUN LM-NAMESTRING (HOST DEVICE DIRECTORY NAME TYPE VERSION)
  (WITH-OUTPUT-TO-STRING (S)
    (LM-PRINT-NAME NAME TYPE VERSION S
		   (LM-PRINT-DIRECTORY DEVICE DIRECTORY S
				       (LM-PRINT-HOST HOST S)))))

(DEFUN LM-NAMESTRING-FOR-DIRECTORY (DEVICE DIRECTORY)
  (WITH-OUTPUT-TO-STRING (S)
    (LM-PRINT-DIRECTORY DEVICE DIRECTORY S NIL)))

(DEFUN LM-NAMESTRING-FOR-EDITOR (HOST DEVICE DIRECTORY NAME TYPE VERSION)
  (WITH-OUTPUT-TO-STRING (S)
    (LM-PRINT-NAME NAME TYPE VERSION S NIL)
    (FUNCALL S ':TYO #\SP)
    (LM-PRINT-DIRECTORY DEVICE DIRECTORY S NIL)
    (FUNCALL S ':TYO #\SP)
    (LM-PRINT-HOST HOST S)))

(DEFUN LM-NAMESTRING-FOR-DIRED (NAME TYPE VERSION)
  (WITH-OUTPUT-TO-STRING (S)
    (COND ((NOT (MEMQ NAME '(NIL :UNSPECIFIC)))
	   (LM-PRINT-COMPONENT NAME S)))
    (COND (TYPE
	   (FUNCALL S ':TYO #/.)
	   (OR (EQ TYPE ':UNSPECIFIC)
	       (LM-PRINT-COMPONENT TYPE S))))
    (IF (NOT *LMFS-USE-TWENEX-SYNTAX*) (FORMAT S "~15T"))
    (COND (VERSION
	   (FUNCALL S ':TYO (IF *LMFS-USE-TWENEX-SYNTAX* #/. #/#))
	   (OR (EQ VERSION ':UNSPECIFIC)
	       (LM-PRINT-COMPONENT VERSION S T))))))

(DEFUN LM-PRINT-HOST (HOST S)
  (COND ((NOT (NULL HOST))
	 (LM-PRINT-COMPONENT (FUNCALL HOST ':NAME-AS-FILE-COMPUTER) S)
	 (FUNCALL S ':TYO #/:)
	 T)
	(T NIL)))

(DEFUN LM-PRINT-DIRECTORY (DEVICE DIRECTORY S SPACE)
  (COND ((NOT (EQ DIRECTORY ':UNSPECIFIC))
	 (IF *LMFS-USE-TWENEX-SYNTAX*
	     (SEND S ':TYO #/<)
	     (IF (NULL SPACE)
		 (SETQ SPACE T)
		 (SEND S ':TYO #\SP)))
	 (COND ((MEMQ DIRECTORY '(NIL :ROOT))
		(IF (NOT *LMFS-USE-TWENEX-SYNTAX*)
		    (SEND S ':TYO #/~)))
	       ((LISTP DIRECTORY)
		(DO ((D DIRECTORY (CDR D)))
		    ((NULL D))
		  (LM-PRINT-COMPONENT (CAR D) S)
		  (IF (NOT (NULL (CDR D)))
		      (SEND S ':TYO #/.))))
	       (T (LM-PRINT-COMPONENT DIRECTORY S)))
	 (SEND S ':TYO (IF *LMFS-USE-TWENEX-SYNTAX* #/> #/;))))
  (COND ((AND (NOT (MEMQ DEVICE '(NIL :UNSPECIFIC)))
	      (NOT (EQUAL DEVICE "DSK")))
	 (IF (NOT *LMFS-USE-TWENEX-SYNTAX*)
	     (IF (NULL SPACE)
		 (SETQ SPACE T)
		 (SEND S ':TYO #\SP)))
	 (LM-PRINT-COMPONENT DEVICE S)
	 (SEND S ':TYO #/:)))
  SPACE)

(DEFUN LM-PRINT-NAME (NAME TYPE VERSION S SPACE)
  (COND ((NOT (MEMQ NAME '(NIL :UNSPECIFIC)))
	 (COND (SPACE
		(IF (NOT *LMFS-USE-TWENEX-SYNTAX*)
		    (FUNCALL S ':TYO #\SP))
		(SETQ SPACE NIL)))
	 (LM-PRINT-COMPONENT NAME S)))
  (COND ((NOT (NULL TYPE))
	 (COND (SPACE
		(IF (NOT *LMFS-USE-TWENEX-SYNTAX*)
		    (FUNCALL S ':TYO #\SP))
		(SETQ SPACE NIL)))
	 (FUNCALL S ':TYO #/.)
	 (IF (NOT (EQ TYPE ':UNSPECIFIC))
	     (LM-PRINT-COMPONENT TYPE S))))
  (IF *LMFS-USE-TWENEX-SYNTAX*
      (COND ((NOT (MEMQ VERSION '(NIL :NEWEST)))
	     (FUNCALL S ':TYO #/.)
	     (IF (NOT (EQ VERSION ':UNSPECIFIC))
		 (LM-PRINT-COMPONENT VERSION S T))))
      (COND ((NOT (NULL VERSION))
	     (COND (SPACE
		    (FUNCALL S ':TYO #\SP)
		    (SETQ SPACE NIL)))
	     (FUNCALL S ':TYO #/#)
	     (IF (NOT (EQ VERSION ':UNSPECIFIC))
		 (LM-PRINT-COMPONENT VERSION S T)))))
  SPACE)

(DEFUN LM-PRINT-COMPONENT (SPEC STREAM &OPTIONAL VERSION-P &AUX TEM)
  (COND ((EQ SPEC ':WILD) (FUNCALL STREAM ':TYO #/*))
	((NUMBERP SPEC)
	 (LET ((BASE 10.)
	       (*NOPOINT T))
	   (SI:PRINT-FIXNUM SPEC STREAM)))
	(VERSION-P
	 (COND ((SETQ TEM (CDR (ASSQ SPEC '((:NEWEST . #/>) (:OLDEST . #/<)))))
		(FUNCALL STREAM ':TYO TEM))
	       (T (FERROR "Attempt to print ~S, which is not a valid version." SPEC))))
	((STRINGP SPEC)
	 (DOTIMES (I (ARRAY-ACTIVE-LENGTH SPEC))
	   (AND (MEMQ (SETQ TEM (AREF SPEC I)) '(#\SP #\TAB #/. #/: #/; #/# #// #/> #/<))
		(FUNCALL STREAM ':TYO #//))
	   (FUNCALL STREAM ':TYO TEM)))
	(T (FERROR NIL "Attempt to print ~S, which is not a valid component." SPEC))))


(DEFFLAVOR LM-PARSING-MIXIN () ()
  (:INCLUDED-FLAVORS REMOTE-PATHNAME))

(DEFMETHOD (LM-PARSING-MIXIN :PARSE-NAMESTRING) (HOST-SPECIFIED NAMESTRING
						 &OPTIONAL (START 0) END)
  HOST-SPECIFIED
  (LM-PARSE-NAMESTRING NAMESTRING START END))

(DEFMETHOD (LM-PARSING-MIXIN :STRING-FOR-PRINTING) ()
  (LM-NAMESTRING HOST DEVICE DIRECTORY NAME TYPE VERSION))

(DEFMETHOD (LM-PARSING-MIXIN :STRING-FOR-HOST) ()
  (LM-NAMESTRING NIL DEVICE DIRECTORY NAME TYPE VERSION))

(DEFMETHOD (LM-PARSING-MIXIN :STRING-FOR-DIRED) ()
  (LM-NAMESTRING-FOR-DIRED NAME TYPE VERSION))

(DEFMETHOD (LM-PARSING-MIXIN :STRING-FOR-EDITOR) ()
  (LM-NAMESTRING-FOR-EDITOR HOST DEVICE DIRECTORY NAME TYPE VERSION))

(DEFMETHOD (LM-PARSING-MIXIN :STRING-FOR-DIRECTORY) ()
  (LM-NAMESTRING-FOR-DIRECTORY DEVICE DIRECTORY))

(DEFMETHOD (LM-PARSING-MIXIN :PARSE-COMPONENT-SPEC) (SPEC)
  (COND	((STRINGP SPEC)
	 (LM-SPEC SPEC))
	((MEMQ SPEC '(NIL :UNSPECIFIC :WILD)) SPEC)
	(T "FOO")))

(DEFMETHOD (LM-PARSING-MIXIN :PARSE-DIRECTORY-SPEC) (SPEC)
  (COND ((STRINGP SPEC) (SEND SELF ':PARSE-COMPONENT-SPEC SPEC))
	;; Canonicalize list of length 1 into a single string.
	((AND (CONSP SPEC)
	      (STRINGP (CAR SPEC))
	      (NULL (CDR SPEC)))
	 (FUNCALL-SELF ':PARSE-COMPONENT-SPEC (CAR SPEC)))
	;; A list of strings is also a structured directory.
	((AND (CONSP SPEC)
	      (LOOP FOR ELT IN SPEC ALWAYS (STRINGP ELT)))
	 (MAPCAR SELF (CIRCULAR-LIST ':PARSE-COMPONENT-SPEC) SPEC))
	((MEMQ SPEC '(NIL :ROOT :UNSPECIFIC :WILD)) SPEC)
	(T (PATHNAME-DIRECTORY (QUIET-USER-HOMEDIR HOST)))))

(DEFMETHOD (LM-PARSING-MIXIN :PARSE-VERSION-SPEC) (SPEC)
  (IF (OR (FIXNUMP SPEC)
	  (MEMQ SPEC '(NIL :UNSPECIFIC :WILD :NEWEST :OLDEST)))
      SPEC ':NEWEST))

(DEFMETHOD (LM-PARSING-MIXIN :UNDELETABLE-P) () T)

;; Not really a parsing function, but...
(DEFMETHOD (LM-PARSING-MIXIN :HOMEDIR) (&OPTIONAL (USER USER-ID))
  (FUNCALL-SELF ':NEW-DIRECTORY USER))

(DEFMETHOD (LM-PARSING-MIXIN :PRIMARY-DEVICE) () "DSK")

;;; The code on this page, and the flavors on it,
;;; are no longer used as of system 92.
;;; It is still here for the sake of loading local-file into earlier systems.

;; Mixin for hosts that knows how to name itself.
(DEFFLAVOR LM-HOST-LISPM-MIXIN () (FILE-HOST-MIXIN))

;; Concession to RMS's file system.
(DEFWRAPPER (LM-HOST-LISPM-MIXIN :PATHNAME-HOST-NAMEP) ((STRING) . BODY)
  `(AND (NOT (EQUALP STRING "FC"))
	(PROGN . ,BODY)))

#+Symbolics
(DEFMETHOD (LM-HOST-LISPM-MIXIN :PATHNAME-HOST-NAMEP) (STRING)
  (AND (EQ SELF SI:LOCAL-HOST)
       (STRING-EQUAL STRING "LM")))

#-Symbolics
(DEFMETHOD (LM-HOST-LISPM-MIXIN :PATHNAME-HOST-NAMEP) (STRING)
  (OR (AND (EQ SELF SI:LOCAL-HOST)
	   (STRING-EQUAL STRING "LM"))
      ;; Is this guy a server for this logical name, ie FS?
      (DOLIST (EL (SI:GET-SITE-OPTION ':LM-SERVER-HOSTS))
	(COND ((AND (STRING-EQUAL STRING (CAR EL))
		    (FUNCALL SELF ':PATHNAME-HOST-NAMEP (CADR EL)))
	       (RETURN T))))))

#-Symbolics
(DEFMETHOD (LM-HOST-LISPM-MIXIN :NAME-AS-FILE-COMPUTER) ()
  (LET ((SHORT-NAME (FUNCALL-SELF ':SHORT-NAME)))
    (COND ((DOLIST (EL (SI:GET-SITE-OPTION ':LM-SERVER-HOSTS))
	     (COND ((STRING-EQUAL SHORT-NAME (CADR EL))
		    (RETURN (CAR EL))))))
	  (T SHORT-NAME))))

(DEFMETHOD (LM-HOST-LISPM-MIXIN :PRIMARY-DEVICE) () "DSK")

;; When bound to T, use FILE protocol.
;; When bound to NIL, use LMFILE protocol.
(DEFVAR *LISPM-USE-FILE-PROTOCOL* T)

;; Because of a pathname bug, it may be necessary to run this in order
;; to force using a different protocol
(DEFUN UNINTERN-PATHNAMES (&OPTIONAL (HOST-FLAVOR 'LM-HOST) &AUX LIST)
  (DECLARE (SPECIAL HOST-FLAVOR LIST))
  (MAPHASH-EQUAL #'(LAMBDA (ELEM IGNORE)
		     (AND (SI:TYPEP-FLAVOR (CAR ELEM) HOST-FLAVOR)
			  (PUSH ELEM LIST)))
		 *PATHNAME-HASH-TABLE*)
  (LOOP FOR ELEM IN LIST DOING (REMHASH-EQUAL ELEM *PATHNAME-HASH-TABLE*))
  HOST-FLAVOR)

;; When bound to T, access local file system via the server (mainly for debugging).
;; When bound to NIL, access local file system directly.
;; This doesn't work currently, due to a pathname bug.
(REMPROP '*LOCAL-SERVER-VIA-NET* ':SOURCE-FILE-NAME)
(DEFVAR *LOCAL-SERVER-VIA-NET* NIL)

(DEFMETHOD (LM-HOST-LISPM-MIXIN :PATHNAME-FLAVOR) ()
  (IF (AND (EQ SELF SI:LOCAL-HOST)
	   (NOT *LOCAL-SERVER-VIA-NET*))
      'LM-PATHNAME
    (IF *LISPM-USE-FILE-PROTOCOL*
	'REMOTE-LM-PATHNAME
      'RM-PATHNAME)))

;; FILE protocol support.
(DEFMETHOD (LM-HOST-LISPM-MIXIN :MAX-DATA-CONNECTIONS) () 37777777)

(DEFMETHOD (LM-HOST-LISPM-MIXIN :LOGIN-UNIT)
	   (UNIT LOGIN-P &AUX (CONN (HOST-UNIT-CONTROL-CONNECTION UNIT)) TEM)
  ;; Don't confuse the user by asking for UNAME and PASSWORD if he's logged in elsewhere.
  (AND (SETQ TEM (COND ((NOT (EQUAL USER-ID "")) USER-ID)
		       ((CDR (ASSQ 'ITS USER-UNAMES)))
		       ((CDAR USER-UNAMES))))
       (PUSH (CONS SELF TEM) USER-UNAMES))
  ;; Connection is used up when logging out
  (AND CONN (EQ (CHAOS:STATE CONN) 'CHAOS:OPEN-STATE)
       (IF LOGIN-P
	   (LOGIN-HOST-UNIT UNIT LOGIN-P SELF)
	   (SETF (HOST-UNIT-CONTROL-CONNECTION UNIT) NIL)
	   (CHAOS:CLOSE CONN "Logging out")))
  T)

;; The Fileserver doesn't supply the user name information, so might as well use
;; whatever's hanging around.
(DEFMETHOD (LM-HOST-LISPM-MIXIN :HSNAME-INFORMATION) (IGNORE STR IDX)
  (VALUES (PARSE-PATHNAME (SUBSTRING STR (SETQ IDX (1+ IDX))
				     (STRING-SEARCH-CHAR #\CR STR IDX)))
	  USER-PERSONAL-NAME USER-GROUP-AFFILIATION
	  USER-PERSONAL-NAME-FIRST-NAME-FIRST))

;; Defining this cues off LISPM-PATHNAME-HOST-INITIALIZE
(DEFFLAVOR LM-HOST
	()
	(LM-HOST-LISPM-MIXIN
	 SI:HOST-LISPM-MIXIN
	 CHAOS:HOST-CHAOS-MIXIN
	 SI:HOST))

(comment ;Defined elsewhere in system 92.
	;Its absence will not bother people loading LOCAL-FILE in 91.

;This pathname flavor is not always the right one for its host.
(DEFPROP REMOTE-LM-PATHNAME T PATHNAME-FLAVOR-CHANGES)

(DEFFLAVOR REMOTE-LM-PATHNAME
	()
	(LM-PARSING-MIXIN CHAOS-PATHNAME))

#+mit
(DEFMETHOD (REMOTE-LM-PATHNAME :CREATE-DIRECTORY) (&KEY &OPTIONAL (ERROR T))
  (DIRECTORY-OPERATION-CHAOS "CREATE-DIRECTORY" HOST SELF ERROR))

(COMPILE-FLAVOR-METHODS LM-HOST REMOTE-LM-PATHNAME)
);end comment

;; Initializations.

;; Because this file is loaded by default when System is built at MIT, but
;; not at Symbolics, the initialization code is necessarily different.

#-Symbolics (PROGN 'COMPILE

;; This is called explicitly by BOOT-FILE-SYSTEM
(DEFUN MAYBE-ADD-LOCAL-PATHNAME-HOST ()
  (ADD-CHAOSNET-FILE-COMPUTER SI:LOCAL-HOST))

)  ;; End of #-Symbolics

#+Symbolics (PROGN 'COMPILE


;; This function changes any hosts specified with :MIT-FS-HOSTS into LM-HOSTs.
;; Note that it leaves around any hosts created by LMFS on *PATHNAME-HOST-LIST*
;; and *CHAOS-FILE-HOSTS* so those file systems could still be accessed.
(DEFUN LM-HOST-INITIALIZE (&AUX INSTANCE)
  (LOOP FOR HOST IN (SI:GET-SITE-OPTION ':MIT-FS-HOSTS)
	AS ALIST-ELEM = (LOOP FOR ELEM IN SI:HOST-ALIST
			      WHEN (MEM #'STRING-EQUAL HOST (SI:HOST-NAME-LIST ELEM))
			      RETURN ELEM
			      FINALLY (FERROR NIL "~S is ran unknown host" HOST))
	DO (SETF (SI:HOST-INSTANCE ALIST-ELEM)
		 (SETQ INSTANCE (MAKE-INSTANCE 'LM-HOST ':ALIST-ELEM ALIST-ELEM)))
	   (PUSH INSTANCE *PATHNAME-HOST-LIST*)
	   (PUSH INSTANCE *CHAOS-FILE-HOSTS*))
  (SETQ SI:LOCAL-HOST (SI:PARSE-HOST (FUNCALL SI:LOCAL-HOST ':NAME)))
  (SI:SET-LOCAL-HOST-VARIABLES))

(DEFUN CHANGE-HOST-FILE-SYSTEM (HOST TYPE &OPTIONAL (ADD-PATHNAME-HOST T)
				&AUX FLAVOR ALIST-ELEM NEW-HOST)
  (SETQ HOST (SI:PARSE-HOST HOST))
  (SETQ FLAVOR (SELECTQ TYPE
		 (:MIT 'LM-HOST)
		 (:SYMBOLICS 'LISPM-CHAOS-HOST)
		 (OTHERWISE (FERROR NIL "~S is an unknown file system type" TYPE))))
  (SETQ ALIST-ELEM (SYMEVAL-IN-INSTANCE HOST 'SI:ALIST-ELEM))
  (COND ((NOT (TYPEP (SI:HOST-INSTANCE ALIST-ELEM) FLAVOR))
	 (AND (MEMQ HOST *PATHNAME-HOST-LIST*)
	      (SETQ *PATHNAME-HOST-LIST* (DELQ HOST *PATHNAME-HOST-LIST*)))
	 (AND (MEMQ HOST *CHAOS-FILE-HOSTS*)
	      (SETQ *CHAOS-FILE-HOSTS* (DELQ HOST *CHAOS-FILE-HOSTS*)))
	 (SETF (SI:HOST-INSTANCE ALIST-ELEM)
	       (SETQ NEW-HOST (MAKE-INSTANCE FLAVOR ':ALIST-ELEM ALIST-ELEM)))
	 (AND ADD-PATHNAME-HOST
	      (ADD-CHAOSNET-FILE-COMPUTER NEW-HOST))
	 (SETQ SI:LOCAL-HOST (SI:PARSE-HOST (FUNCALL SI:LOCAL-HOST ':NAME)))
	 (SI:SET-LOCAL-HOST-VARIABLES)))
  (SI:HOST-INSTANCE ALIST-ELEM))

(DEFUN MIT-LM27-KLUDGE (&AUX TEM)
  (COND ((AND (MEMQ SI:SITE-NAME '(:MIT :SCRC))
	      (NOT (GET-PATHNAME-HOST "LM27" T)))
	 (SETQ TEM (ASSQ ':CHAOS-FILE-SERVER-HOSTS SI:SITE-OPTION-ALIST))
	 (PUSH "LM27" (CDR TEM))
	 (CHANGE-HOST-FILE-SYSTEM "LM27" ':MIT))))

(DEFVAR LOCAL-HOST-ADDED NIL)

;; This is called explicitly by BOOT-FILE-SYSTEM
(DEFUN MAYBE-ADD-LOCAL-PATHNAME-HOST ()
  (COND ((NOT LOCAL-HOST-ADDED)
	 (COND ((NOT (TYPEP SI:LOCAL-HOST 'LM-HOST))
		(NOTIFY "Declaring ~A to be an MIT File System" SI:LOCAL-HOST)
		(CHANGE-HOST-FILE-SYSTEM SI:LOCAL-HOST ':MIT NIL)))
	 ;; This can't be GET-PATHNAME-HOST
	 (COND ((NOT (MEMQ SI:LOCAL-HOST *PATHNAME-HOST-LIST*))
		(SETQ LOCAL-HOST-ADDED SI:LOCAL-HOST)
		(ADD-CHAOSNET-FILE-COMPUTER SI:LOCAL-HOST))))))

(DEFUN MAYBE-REMOVE-LOCAL-PATHNAME-HOST ()
  (COND (LOCAL-HOST-ADDED
	 (SETQ *PATHNAME-HOST-LIST* (DELQ LOCAL-HOST-ADDED *PATHNAME-HOST-LIST*))
	 (SETQ *CHAOS-FILE-HOSTS* (DELQ LOCAL-HOST-ADDED *CHAOS-FILE-HOSTS*))
	 (SETQ LOCAL-HOST-ADDED NIL))))

(ADD-INITIALIZATION "LM-HOST-INITIALIZE"
		    '(LM-HOST-INITIALIZE)
		    '(SITE))

(ADD-INITIALIZATION "MIT-LM27-KLUDGE"
		    '(MIT-LM27-KLUDGE)
		    '(SITE))

(ADD-INITIALIZATION "MAYBE-REMOVE-LOCAL-PATHNAME-HOST"
		    '(MAYBE-REMOVE-LOCAL-PATHNAME-HOST)
		    '(BEFORE-COLD))

) ;; End of #+Symbolics
