;;; -*- Mode:Info; Fonts:(HL12 HL12I HL12B CPTFONTB HL12BI HL12B HL12I ZINFONT ) -*-


Generated on Friday the thirty-first of January, 1986; 8:51:51 pm by dg from DJ: L.TAPE; NEWTAPE.BOTEX#90 with Experimental Grunch 1.4

 Node: *4Tape Format Objects*; Previous: *4The Generic Tape Device*; Up: *4NEWTAPE

*     Tape Format objects are flavor objects which implement certain generic operations such as
writing, restoring and listing files on a tape.  Their responsibility is to read, examine or write data to
or from the tape device which represents the correct file data (specified by the arguments) in the
appropriate format.

*3basic-tape-format* *7FFFFFFFEDd*1Flavor
*         This is the base flavor upon which all tape format flavors should be built.  It defines no
0        *method or instance variables, it simply *1requires* the necessary methods and instance variables
        for the definition of the format.  As with tape-devices, all tape formats expected to work with
        the general tape software must be built on this flavor.  It is defined as an
0        **3:abstract-flavor*.  

*3record-size* *7FFFFFECa*1Instance variable of tape-formats
*         This is the size in bytes for each record to be written on the tape, or *3:variable* if this
0        *format uses variable-length records.

*3file-stream* *7FFFFFECa*1Instance variable of tape-formats
*         This holds the stream object that is created if the *3:open-file* method is invoked.  This will
        be explained in detail below.

*3:initialize* &rest *1options*7FFFFEDCe*1Operation on tape-formats
*         This is similar to the operation of the same name on tape devices.  It is responsible for
0        *setting up the tape format object.  *1options* is passed to the *3:set-options* method.

*3:set-options* &rest *1options-and-args*7FFFEDa*1Operation on tape-formats
*         As for tape devices, this is responsible for checking and setting parameters for the tape
0        *format.  If no options are specified, the user should be presented with options to change by
0        *means of a pop-up window or something.

*3:read-tape-header* *1tape-device*7FFFFDb*1Operation on tape-formats
*         This should return tape header information in the form of a disembodied property list.  The
0        *car of the list should be the flavor symbol of the format (i.e.  *3LMFL* format), the cdr an
0        *alternating list of properties and values.

*3:write-tape-header* *1plist* *1device*7FFFFCc*1Operation on tape-formats
*         This should take *1plist* and write a proper header according to the specification of the format
0        *on *1device*.  For safety, it should send the device a *3:rewind* message first.

*3:tape-is-your-format-p* *1device*7FFFFCf*1Operation on tape-devices
*         This should check the tape and return *3t* if the tape is of this format, assuming that the tape
0        *is already rewound, NIL otherwise.

*3:restore-file* *7FFFFFFg*1Operation on tape-formats
*         device &key transform query (overwrite :always) (create-directory :always) silent

        Restore a file from the tape.

        *2:transform*  *7b*If this is a pathname, the components of the pathname of the file on tape are
0                      *merged into this one.  If it is a function, it must take arguments:  

                              *3(device directory name type version)

*                      and return a pathname to which the file will be restored.

        *2:query*  *7DCf*If non-*3nil*, the user will be asked for each file whether to restore it.

        *2:overwrite*  *7b*Decides whether to overwrite an existing non-deleted file with the same pathname
                      (including version).  Valid values are:  *3:always :query :never*.

        *2:create-directory*  
                      Decides whether to create a directory for a file to be restored if the directory
0                      *does not exist.  Valid values are:  *3:always :query :never :error*.  *3:never*
0                      *skips over the file, *3:error* will signal a directory-not-found error.

        *2:silent*  *7Ea*If non-nil, should not print anything unless a query is in order.  Otherwise, this
0                      *method should print out what file the tape file is being restored to.

*3:write-file* *1device* *1file*7FFFFFDb*1Operation on tape-formats
*         &key (end-of-tape-action :continue)

        Writes a file on the tape.  *1file* should be a string, pathname or a file property list in the form
0        **3(*1truename*3 .  (*1prop value*3 ...))* as returned by *3fs:directory-list*.  If the argument is
0        *a file plist, then the properties in the plist are written to tape, otherwise the file properties are
0        *derived from the input stream at write time.  The return value, if the write is successful is the
0        *nil, otherwise it may be an error condition (see below).  *3:end-of-tape-action* instructs the
        formatting software what to do if the physical end of tape is encountered.  Valid keywords
0        *are:  *3:continue* which causes continuation onto another tape reel, according to the format;
0        **3error* should cause a *3physical-end-of-tape* error condition to be signalled; *3return* will
0        *cause the error condition to be returned immediately as the second value, the first being the
0        *number of files actually written, as normal.  This feature is useful for utilities like the backup
0        *software which would rather know when the end of a tape has been reached, for cataloging
0        *backups.

*3:compare-file* *1device* &key *1transform* *1silent*7FFEDCg*1Operation on tape-formats
*         Compares the next file on tape with the source it was dumped from.  Transform is treated
0        *exactly as for :restore-file, and should provide the pathname of the file to be compared
0        *against.  If this argument is NIL, then the local host is assumed to be the source.  If silent is
0        *nil, then this method should print out messages concerning the comparison of the files.  The
0        *return value should be the file property list of the file if it was found to be different from the
0        *source, or NIL if the comparison succeeded without error.

*3:beginning-of-file* *1device*7FFFFECg*1Operation on tape-formats
*         This positions the tape to the beginning of the current file.  Return value should be ignored.

*3:next-file* *1number-of-files* *1device*7FFFFg*1Operation on tape-formats
*         Positions the tape at the beginning of the file that is *1number-of-files* away from the current
0        *file (i.e.  1 specifies the next file).

*3:previous-file* *1number-of-files* *1device*7FFFEc*1Operation on tape-formats
*         Like *3:next-file* but moves backwards.

*3:find-file* *1match* *1device*7FFFFFg*1Operation on tape-formats
*         This operations searches for file on tape.  *1match* can be of the following types:  

        *2list*  *7EDe*Car should a symbol, either *3or* or *3and*, cdr should be a list of valid match
0                      *arguments.  *3tape-file-match* is called on all of elements with the same plist,
0                      *and the values applied to *3and* or *3or* appropriately to determine the return value.

        *2string or pathname*  
                      Uses *3:pathname-match* operation on *1match* pathname.

        *2function, closure, or symbol*  
                      Funcall *1match* with plist as the argument.  

        If the processing of the match argument returns non-*3nil*, then the tape is positioned at the
0        *beginning of the matched file, and the file's plist returned.  Otherwise the search continues.

*3:open-file* *1device* &key *1(:direction* *1:input)* *1(:byte-size* *1:default)* *1(:characters* *1:default)* *1plist*7Cb*1Operation on tape-formats
*         This function returns a stream according to the arguments which have the same meaning as
0        *for *3open*.  *1plist* is only meaningful for *3:output* streams, and must be supplied in that case.
0        *If the direction is :INPUT, then the second value is the file property list of the file opened.
0        *The properties are also copied onto the si:property-list instance variable of the stream,
0        *allowing the use of the generic property list functions (get, putprop, plist, etc.).

*3:list-files* *1device* &key *1(stream* *1*standard-output*)* *1(number-of-files* *1-1)*7Cb*1Operation on tape-formats
*         Should print a description of each file on the tape to *3stream* and return a list of all the file
0        *property-lists for each file.  The listing should stop after *1number-of-files* is reached.

*3:finish-tape* *1device*7FFFFFEe*1Operation on tape-formats
*         Marks the logical end of tape on *3device*.  

*3:rewind* *1device* &optional *1(wait-p* *1t)* *7FFFEDh*1Operation on tape-formats
*         This should cause the tape on *1device* to be rewound.  It has the same meaning as for
0        *tape-devices, but is provided here since some format objects may need to update some
0        *internal information when the tape is rewound.

*3:unload* *1device*7FFFFFFDb*1Operation on tape-formats
*         This should cause the tape on the device specified to be unloaded, and any state the format
        object has with respect to the current tape should be flushed.

*3:position-to-append* *1device*7FFFFEf*1Operation on tape-formats
*         Position tape so that all subsequent *3:write-file* operations will add the files to the end of
        tape.

