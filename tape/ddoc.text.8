;;; -*- Mode:Text;Fonts:TR12,TR12i,TR12b,CPTFONT,HL12B-*-

3*DRAFT* *INTERNAL**  2Documentation for Backup/Retrieval software.*

(c) 1984 Lisp Machine Incorporated.  
    11 Blackstone St. Cambridge MA 02139


Revision history:
-----------------
10 Sep 83	RpK	First draft, very preliminary
26 Oct 83	RpK   More information.
17 Dec 83	RpK	Revise and correct
 5 Jan 84	RpK	New features
17 Jan 84	RpK	Implementation note (System 98 change)


2Installation*

For this software to work, the file system residing in the 3FILE* band of
each machine must be of version 4 (which corresponds to any local file system
created after the release of system 91 (??)).  Earlier versions of the file
system, which did not include heierarchical directories, will not properly
preserve the3 :DUMPED* property of any files in directories created before
then.  The way one determines the version of the file system is to
invoke 3(FS:DEBUG)*, and note the version number there after the words
``Disk Configuration.''  Then answer 4N* to both questions to get out of
the 4DEBUG* function.

Since such any file system that old must have breakup problems by now anyway,
it is advisable to

 (1) Reap & expunge old files that are no longer needed.
 (2) (a) Do a full dump of the file system (using the new software).
         Make sure you are running a band no older than System 91.
         Zero out the FILE partition (using new software, call
         3FS:INITIALIZE-FILE-SYSTEM*).
         Use 3FS:RESTORE-MAGTAPE* to restore the file system tape by tape.
     or
     (b) Copy the file system to a spare pack via the net (the other machine
         should be running a system no older than 91, or you will have the same
         problem !), to 3FILE* band of the same size.  Copy the 3FILE* band
	 back with 3SI:TRANSMIT/RECEIVE-BAND* to the original machine
	 1after* doing 3(FS:DISMOUNT-FILE-SYSTEM)*.

Option (b) is probably the best bet.

Be also sure to have a directory called 3MAGTAPE* on the dump host.

There are three files of interest: 3SYS:TAPE;FDUMP-DEF* implements the
file system tree walk; 3SYS:TAPE;FDUMP* uses the routines in 3FDUMP-DEF*.
3FDUMP-DEF* implements a server that is used to implement remote dumps, as
well as defining an iterator and file dump filters for file system.  The
system is currently not defined to be a real Lisp Machine system so
first load 3FDUMP-DEF*.  Then, if you are running on a machine with a tape
drive, load 3FDUMP*.  This system will be integrated into MagTape (or the
equivalent file system interface) in the future.  The file 3SYS:TAPE; FDUMP-R*
implements the retrieval routines.  Additionally,
3SYS:TAPE;FDUMP-FILE-CDATE-I* must be loaded (at run time, or compile
time) if you are running on a system older than System 98.  (See the
2Implementation* section for details.)

Again, the files are (in 3SYS:TAPE;*):

	3FDUMP-FILE-CDATE-I* 1(Needed only before System 98)*
	3FDUMP-DEF*
	3FDUMP*
	3FDUMP-R*

In order for retrieval to work, there must be an online record of what files
have been dumped where and when.  This information is kept in the 3MAGTAPE*
directory, usually on one particular host (a Lisp Machine) that serves as the
site's main file server (and usually, but not neccessarily, as the site's sys
host, and the associated machine for most of the other Lisp Machines at the
site).  In the site file (3SYS:SITE;SITE LISP*), put the appropriate machine's
name as the 3:DUMP-RECORD-HOST* in the 3DEFSITE* form.  This attribute to the dump
can be overridden by the 3:RECORD-HOST* keyword argument to the 3FILE-SYSTEM-DUMP*
function or to the 3RESTORE* family of functions.

2Conventions*

All functions and variables that do not have an explicit package prefix in
front of the are assumed to be in the 3FILE-SYSTEM* (3FS*) package.

The backup software permits a machine with a tape drive to backup files
on other machines thorough a simple server.  Every machine that has a
local file system should have the file 3SYS: TAPE; FDUMP-DEF* loaded into
it (this will soon be part of the local file system anyway).  (Also, it should
3FDUMP-FILE-CDATE-I* if it is running System 97 or earlier.)

The backup software's restore facilities at the moment are not very efficient,
because there is no slot in the file system's file descriptor for archive
status, or on what tape a file lives.  Neither is the reference date kept in
the file system.  Discussing the design of a file system which supports these
features, and can be accessed by both the Nu and the Lambda is a task which
should be carried out soon, so that at least the Lisp Machine can finally run a
mature file system instead of the simple one that we currently distribute to
our customers.

2Usage*

* Backup

The function that saves files on tape as part of the file system is:

3FILE-SYSTEM-DUMP* 1mode* &optional 1directories*
		      &key 3(1host** 3si:local-host)* 3(1operator** 3user-id)*
			   1query-at-end record-host* 1tapes-to-use*

This function will dump directories onto tape.  Mode can be 3:FULL* or
3:INCREMENTAL*.  When 1directories* is not specified (or 3NIL*), the entire file system
of 1host* (which must be a Lisp Machine) is dumped.  Directories' inferiors are
always dumped when the parent directory is.  The directory specifications are
not like the pathname form, but map as follows:

	3FOO*		       3"FOO" *or3 ("FOO")*
	3FOO.OLD;*	       3("FOO" "OLD")*
	3FOO.OLD.FOGEY;*    3("FOO" "OLD" "FOGEY")*
		... etc. ...

Other predicates for the 1mode* argument can (and will) be defined; in the
future, it will be possible to compose them, and allow them to take arguments.
It is expected, however, that 3:FULL* and 3:INCREMENTAL* will be sufficient for the
most important dumps.  If 1query-at-end* is 3T* (default is 3NIL*), then the operator
will be asked if he really wants to mark the files at dumped.  This is mostly
for debugging purposes.  1Record-host* is where the record of the dump is stored.  It
is defaulted to the site option 3:DUMP-RECORD-HOST*.

This core function modifies the ``dump-directory'' file which has information
on every dump, full or incremental, that has been made with that function.  It
also writes out, one file per tape used, information on the dumped files (which
now includes the truename, creation date, and author).

For now, there is also a 3MODE* called 3:INCREMENTAL-KLUDGE* that one can use to
dump files only created after a certain date.  Before invoking 3FILE-SYSTEM-DUMP*,
set the date with

	3(SET-FAKE-LAST-DUMP-TIME 1date*)*

where date can be a universal time (a large integer) or a string acceptable to
3TIME:PARSE-UNIVERSAL-TIME*.  This is the feature to use if you are still
running a version 3 file system.  If you are dumping remotely, it has to be invoked
at the machine whose file system you are dumping.

The dumper will ask you for tape names as the dump progresses.  It is careful
to warn the operator about used tapes.  Note that the system treats the tape
names as meaningless strings; it will not anticipate "I0002" as being the next
tape after "I0003".  (This may change later.) As a file is dumped, its name and
some other information are printed on the screen.  You will probably want to
shut off the *MORE* processing in the current window with Terminal-0-M; you can
get it back with Terminal-1-M.

The program will ask you for a tape name when there are more files to dump and
you have reached the end of tape.  On the CADR, you will usually also get a few
(maybe two) ``MAGTAPE ERROR!'' messages at the end of tape before the
controller realises what is going on.

* Restore

Both of these functions query the user and use ``sticky'' default.  The
first time the user is queried for a filename, the default is the
associated machine, since that is usually where most of the files are
kept.  On subsequent queries, the default for the filename is whatever
had come before it.  Suppose, for example, that the associated machine
was LM1:

	3User input:*	3FOO;*	3File name:*	3LM1:FOO;*
			3BAR;*			3LM1:BAR;*
			3LM2:BAZ;*		3LM2:BAZ;*
			3mumble.frotz;*	3LM2:MUMBLE.FROTZ;*

This example involves directories, but file querying works the same way,
except that components such as names and types are also defaulted and
merged.

3FS:RETRIEVE-FILES*: This function searches through the dump records
(which are cached in a hash table, seeing that usually a small subset of files,
usually in the same place, are restored together), and tells the operator which
tape to load, and walks through the tape to load it.  [Not yet implemented.]

3FS:RETRIEVE-DIRECTORY*  1directory* &optional &key 3(1mode* ':SIMPLE)*
Currently only restores from the last full dump of 1directory*.  Later on
it will be clever enough to get the neccessary files from any subsequent
incremental dumps if it is given the 3:ALL* keyword argument.  [Not yet
implemented.]

An older function that is good for manual restore is 3RESTORE-MAGTAPE*.
This is also the function used for reading tapes that carry new sources,
etc.  It does not pay attention to the various dump records.  3RESTORE-MAGTAPE*
and friends are documented more fully in the MagTape documentation booklet.

2Implementation*

The dump software was written so as to keep consing to a minimum.  Here at LMI,
earlier dump software has caused the amount of freespace to decrease rapidly.
Although the software must still keep around a large list of files that were
dumped on a particular tape, and there is also a resource of tape-entries built
during that time, the implementation seems to cons a lot less, especially on
very large dumps.

The dump software writes out two different kinds of files in the 3MAGTAPE*
directory of the dumping machine.  The first kind is the 1directory*, which is a
record of what dumps have taken place and what tapes they used.  (The actual
file name is always 3MAGTAPE;TAPE.DUMP-DIRECTORY*.)  The second kind of file
lists what files have been dump on a particular tape, as well as other
information about that tape, found in an alist at the front of the file.  If
the tape is called, say, I0001, the file is 3MAGTAPE;DUMP-I0001.TEXT*.  These
files together contain enough information to locate a file or a directory
within a reasonable number of search steps.

The main loop of the 3FS:FILE-SYSTEM-DUMP* function figures out what access,
local or remote, it needs to dump files.  These modes create state objects that
are 3FUNCALL*ed the basic operations needed to complete the dump, such as
initialise, get next file, reset to the beginning of the current directory
(used when the end of tape is reached), set files dumped, etc.  Locally, the
local file system's 3FILE* structures are looked at.  Remotely, the same
information from these objects is passed over a net stream by a server, parsed,
and returned via the 3FUNCALL* interface just described.  This information
includes the filename, creation date, author, and byte size.  (The only way to
get the author and the byte size [at least for remote LM file streams] for a
remote file is to do a directory-list, which was judged too slow.)  In the
remote mode, the server does not actually open the files and pass the data over
a connection; the dumping host still has to do this.  The performace for remotely
dumping an unloaded Lisp Machine is slower than dumping locally, but not by much,
since the machine with the tape drive can run the main loop of the dump program
with hardly any disk operations.

Tapes written by the dumper carry a few extra properties in the 3PLIST* for
error checking and debugging:

	3:DUMP-DATE*	universal time when the dump started
	3:DUMP-TYPE*	3:INCREMENTAL, :FULL*
	3:TAPE*		a string: what tape this is

In System 98, ZetaLisp added two new Common Lisp functions, 3FILE-CREATION-DATE*
and 3FILE-AUTHOR*.  The function names are exactly the same as the accessors for
the 3FS:FILE* structure defined in Local-File before 98.  Therefore, the 3AUTHOR*
and 3CREATION-DATE* slots of the 3FILE* structure were renamed 3AUTHOR-INTERNAL* and
3CREATION-DATE-INTERNAL*, and the 3FDUMP* code was changed accordingly to run in
98.  But for earlier systems, the file 3SYS: TAPE;FDUMP-FILE-CDATE-I* defines the two
accessors needed.  (This file should be loaded during compilation for system
94 or 97 as well as for running.)  Currently, the QFASLs supplied are runnable
in 94 and 97.
